
Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007524  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080076fc  080076fc  000086fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800773c  0800773c  00009034  2**0
                  CONTENTS
  4 .ARM          00000008  0800773c  0800773c  0000873c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007744  08007744  00009034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007744  08007744  00008744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007748  08007748  00008748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  0800774c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  20000034  08007780  00009034  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  08007780  0000929c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009034  2**0
                  CONTENTS, READONLY
 12 .debug_info   000177e8  00000000  00000000  00009064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c97  00000000  00000000  0002084c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f0  00000000  00000000  000234e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000105b  00000000  00000000  000249d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028dd6  00000000  00000000  00025a33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018833  00000000  00000000  0004e809  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001140d4  00000000  00000000  0006703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017b110  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bf4  00000000  00000000  0017b154  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00180d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000034 	.word	0x20000034
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080076e4 	.word	0x080076e4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000038 	.word	0x20000038
 8000214:	080076e4 	.word	0x080076e4

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b96a 	b.w	8000d40 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	460c      	mov	r4, r1
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d14e      	bne.n	8000b2e <__udivmoddi4+0xaa>
 8000a90:	4694      	mov	ip, r2
 8000a92:	458c      	cmp	ip, r1
 8000a94:	4686      	mov	lr, r0
 8000a96:	fab2 f282 	clz	r2, r2
 8000a9a:	d962      	bls.n	8000b62 <__udivmoddi4+0xde>
 8000a9c:	b14a      	cbz	r2, 8000ab2 <__udivmoddi4+0x2e>
 8000a9e:	f1c2 0320 	rsb	r3, r2, #32
 8000aa2:	4091      	lsls	r1, r2
 8000aa4:	fa20 f303 	lsr.w	r3, r0, r3
 8000aa8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aac:	4319      	orrs	r1, r3
 8000aae:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ab2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ab6:	fa1f f68c 	uxth.w	r6, ip
 8000aba:	fbb1 f4f7 	udiv	r4, r1, r7
 8000abe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ac2:	fb07 1114 	mls	r1, r7, r4, r1
 8000ac6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aca:	fb04 f106 	mul.w	r1, r4, r6
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	d90a      	bls.n	8000ae8 <__udivmoddi4+0x64>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ada:	f080 8112 	bcs.w	8000d02 <__udivmoddi4+0x27e>
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	f240 810f 	bls.w	8000d02 <__udivmoddi4+0x27e>
 8000ae4:	3c02      	subs	r4, #2
 8000ae6:	4463      	add	r3, ip
 8000ae8:	1a59      	subs	r1, r3, r1
 8000aea:	fa1f f38e 	uxth.w	r3, lr
 8000aee:	fbb1 f0f7 	udiv	r0, r1, r7
 8000af2:	fb07 1110 	mls	r1, r7, r0, r1
 8000af6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000afa:	fb00 f606 	mul.w	r6, r0, r6
 8000afe:	429e      	cmp	r6, r3
 8000b00:	d90a      	bls.n	8000b18 <__udivmoddi4+0x94>
 8000b02:	eb1c 0303 	adds.w	r3, ip, r3
 8000b06:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b0a:	f080 80fc 	bcs.w	8000d06 <__udivmoddi4+0x282>
 8000b0e:	429e      	cmp	r6, r3
 8000b10:	f240 80f9 	bls.w	8000d06 <__udivmoddi4+0x282>
 8000b14:	4463      	add	r3, ip
 8000b16:	3802      	subs	r0, #2
 8000b18:	1b9b      	subs	r3, r3, r6
 8000b1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b1e:	2100      	movs	r1, #0
 8000b20:	b11d      	cbz	r5, 8000b2a <__udivmoddi4+0xa6>
 8000b22:	40d3      	lsrs	r3, r2
 8000b24:	2200      	movs	r2, #0
 8000b26:	e9c5 3200 	strd	r3, r2, [r5]
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d905      	bls.n	8000b3e <__udivmoddi4+0xba>
 8000b32:	b10d      	cbz	r5, 8000b38 <__udivmoddi4+0xb4>
 8000b34:	e9c5 0100 	strd	r0, r1, [r5]
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4608      	mov	r0, r1
 8000b3c:	e7f5      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000b3e:	fab3 f183 	clz	r1, r3
 8000b42:	2900      	cmp	r1, #0
 8000b44:	d146      	bne.n	8000bd4 <__udivmoddi4+0x150>
 8000b46:	42a3      	cmp	r3, r4
 8000b48:	d302      	bcc.n	8000b50 <__udivmoddi4+0xcc>
 8000b4a:	4290      	cmp	r0, r2
 8000b4c:	f0c0 80f0 	bcc.w	8000d30 <__udivmoddi4+0x2ac>
 8000b50:	1a86      	subs	r6, r0, r2
 8000b52:	eb64 0303 	sbc.w	r3, r4, r3
 8000b56:	2001      	movs	r0, #1
 8000b58:	2d00      	cmp	r5, #0
 8000b5a:	d0e6      	beq.n	8000b2a <__udivmoddi4+0xa6>
 8000b5c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b60:	e7e3      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000b62:	2a00      	cmp	r2, #0
 8000b64:	f040 8090 	bne.w	8000c88 <__udivmoddi4+0x204>
 8000b68:	eba1 040c 	sub.w	r4, r1, ip
 8000b6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b70:	fa1f f78c 	uxth.w	r7, ip
 8000b74:	2101      	movs	r1, #1
 8000b76:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b7e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b86:	fb07 f006 	mul.w	r0, r7, r6
 8000b8a:	4298      	cmp	r0, r3
 8000b8c:	d908      	bls.n	8000ba0 <__udivmoddi4+0x11c>
 8000b8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b92:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x11a>
 8000b98:	4298      	cmp	r0, r3
 8000b9a:	f200 80cd 	bhi.w	8000d38 <__udivmoddi4+0x2b4>
 8000b9e:	4626      	mov	r6, r4
 8000ba0:	1a1c      	subs	r4, r3, r0
 8000ba2:	fa1f f38e 	uxth.w	r3, lr
 8000ba6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000baa:	fb08 4410 	mls	r4, r8, r0, r4
 8000bae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bb2:	fb00 f707 	mul.w	r7, r0, r7
 8000bb6:	429f      	cmp	r7, r3
 8000bb8:	d908      	bls.n	8000bcc <__udivmoddi4+0x148>
 8000bba:	eb1c 0303 	adds.w	r3, ip, r3
 8000bbe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bc2:	d202      	bcs.n	8000bca <__udivmoddi4+0x146>
 8000bc4:	429f      	cmp	r7, r3
 8000bc6:	f200 80b0 	bhi.w	8000d2a <__udivmoddi4+0x2a6>
 8000bca:	4620      	mov	r0, r4
 8000bcc:	1bdb      	subs	r3, r3, r7
 8000bce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bd2:	e7a5      	b.n	8000b20 <__udivmoddi4+0x9c>
 8000bd4:	f1c1 0620 	rsb	r6, r1, #32
 8000bd8:	408b      	lsls	r3, r1
 8000bda:	fa22 f706 	lsr.w	r7, r2, r6
 8000bde:	431f      	orrs	r7, r3
 8000be0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000be4:	fa04 f301 	lsl.w	r3, r4, r1
 8000be8:	ea43 030c 	orr.w	r3, r3, ip
 8000bec:	40f4      	lsrs	r4, r6
 8000bee:	fa00 f801 	lsl.w	r8, r0, r1
 8000bf2:	0c38      	lsrs	r0, r7, #16
 8000bf4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bf8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bfc:	fa1f fc87 	uxth.w	ip, r7
 8000c00:	fb00 441e 	mls	r4, r0, lr, r4
 8000c04:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c08:	fb0e f90c 	mul.w	r9, lr, ip
 8000c0c:	45a1      	cmp	r9, r4
 8000c0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c12:	d90a      	bls.n	8000c2a <__udivmoddi4+0x1a6>
 8000c14:	193c      	adds	r4, r7, r4
 8000c16:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c1a:	f080 8084 	bcs.w	8000d26 <__udivmoddi4+0x2a2>
 8000c1e:	45a1      	cmp	r9, r4
 8000c20:	f240 8081 	bls.w	8000d26 <__udivmoddi4+0x2a2>
 8000c24:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c28:	443c      	add	r4, r7
 8000c2a:	eba4 0409 	sub.w	r4, r4, r9
 8000c2e:	fa1f f983 	uxth.w	r9, r3
 8000c32:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c36:	fb00 4413 	mls	r4, r0, r3, r4
 8000c3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c3e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c42:	45a4      	cmp	ip, r4
 8000c44:	d907      	bls.n	8000c56 <__udivmoddi4+0x1d2>
 8000c46:	193c      	adds	r4, r7, r4
 8000c48:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c4c:	d267      	bcs.n	8000d1e <__udivmoddi4+0x29a>
 8000c4e:	45a4      	cmp	ip, r4
 8000c50:	d965      	bls.n	8000d1e <__udivmoddi4+0x29a>
 8000c52:	3b02      	subs	r3, #2
 8000c54:	443c      	add	r4, r7
 8000c56:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c5a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c5e:	eba4 040c 	sub.w	r4, r4, ip
 8000c62:	429c      	cmp	r4, r3
 8000c64:	46ce      	mov	lr, r9
 8000c66:	469c      	mov	ip, r3
 8000c68:	d351      	bcc.n	8000d0e <__udivmoddi4+0x28a>
 8000c6a:	d04e      	beq.n	8000d0a <__udivmoddi4+0x286>
 8000c6c:	b155      	cbz	r5, 8000c84 <__udivmoddi4+0x200>
 8000c6e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c72:	eb64 040c 	sbc.w	r4, r4, ip
 8000c76:	fa04 f606 	lsl.w	r6, r4, r6
 8000c7a:	40cb      	lsrs	r3, r1
 8000c7c:	431e      	orrs	r6, r3
 8000c7e:	40cc      	lsrs	r4, r1
 8000c80:	e9c5 6400 	strd	r6, r4, [r5]
 8000c84:	2100      	movs	r1, #0
 8000c86:	e750      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000c88:	f1c2 0320 	rsb	r3, r2, #32
 8000c8c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c94:	fa24 f303 	lsr.w	r3, r4, r3
 8000c98:	4094      	lsls	r4, r2
 8000c9a:	430c      	orrs	r4, r1
 8000c9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca4:	fa1f f78c 	uxth.w	r7, ip
 8000ca8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cac:	fb08 3110 	mls	r1, r8, r0, r3
 8000cb0:	0c23      	lsrs	r3, r4, #16
 8000cb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb6:	fb00 f107 	mul.w	r1, r0, r7
 8000cba:	4299      	cmp	r1, r3
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x24c>
 8000cbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cc6:	d22c      	bcs.n	8000d22 <__udivmoddi4+0x29e>
 8000cc8:	4299      	cmp	r1, r3
 8000cca:	d92a      	bls.n	8000d22 <__udivmoddi4+0x29e>
 8000ccc:	3802      	subs	r0, #2
 8000cce:	4463      	add	r3, ip
 8000cd0:	1a5b      	subs	r3, r3, r1
 8000cd2:	b2a4      	uxth	r4, r4
 8000cd4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cd8:	fb08 3311 	mls	r3, r8, r1, r3
 8000cdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce0:	fb01 f307 	mul.w	r3, r1, r7
 8000ce4:	42a3      	cmp	r3, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x276>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cf0:	d213      	bcs.n	8000d1a <__udivmoddi4+0x296>
 8000cf2:	42a3      	cmp	r3, r4
 8000cf4:	d911      	bls.n	8000d1a <__udivmoddi4+0x296>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	4464      	add	r4, ip
 8000cfa:	1ae4      	subs	r4, r4, r3
 8000cfc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d00:	e739      	b.n	8000b76 <__udivmoddi4+0xf2>
 8000d02:	4604      	mov	r4, r0
 8000d04:	e6f0      	b.n	8000ae8 <__udivmoddi4+0x64>
 8000d06:	4608      	mov	r0, r1
 8000d08:	e706      	b.n	8000b18 <__udivmoddi4+0x94>
 8000d0a:	45c8      	cmp	r8, r9
 8000d0c:	d2ae      	bcs.n	8000c6c <__udivmoddi4+0x1e8>
 8000d0e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d12:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d16:	3801      	subs	r0, #1
 8000d18:	e7a8      	b.n	8000c6c <__udivmoddi4+0x1e8>
 8000d1a:	4631      	mov	r1, r6
 8000d1c:	e7ed      	b.n	8000cfa <__udivmoddi4+0x276>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	e799      	b.n	8000c56 <__udivmoddi4+0x1d2>
 8000d22:	4630      	mov	r0, r6
 8000d24:	e7d4      	b.n	8000cd0 <__udivmoddi4+0x24c>
 8000d26:	46d6      	mov	lr, sl
 8000d28:	e77f      	b.n	8000c2a <__udivmoddi4+0x1a6>
 8000d2a:	4463      	add	r3, ip
 8000d2c:	3802      	subs	r0, #2
 8000d2e:	e74d      	b.n	8000bcc <__udivmoddi4+0x148>
 8000d30:	4606      	mov	r6, r0
 8000d32:	4623      	mov	r3, r4
 8000d34:	4608      	mov	r0, r1
 8000d36:	e70f      	b.n	8000b58 <__udivmoddi4+0xd4>
 8000d38:	3e02      	subs	r6, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	e730      	b.n	8000ba0 <__udivmoddi4+0x11c>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_idiv0>:
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop

08000d44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d4a:	f000 ff2e 	bl	8001baa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d4e:	f000 f919 	bl	8000f84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d52:	f000 fb61 	bl	8001418 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d56:	f000 fb35 	bl	80013c4 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000d5a:	f000 f9d7 	bl	800110c <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 8000d5e:	f000 fadb 	bl	8001318 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000d62:	f000 f95b 	bl	800101c <MX_ADC1_Init>
  MX_TIM1_Init();
 8000d66:	f000 fa1b 	bl	80011a0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8000d6a:	213c      	movs	r1, #60	@ 0x3c
 8000d6c:	4878      	ldr	r0, [pc, #480]	@ (8000f50 <main+0x20c>)
 8000d6e:	f004 fd67 	bl	8005840 <HAL_TIM_Encoder_Start>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000d72:	217f      	movs	r1, #127	@ 0x7f
 8000d74:	4877      	ldr	r0, [pc, #476]	@ (8000f54 <main+0x210>)
 8000d76:	f002 fc51 	bl	800361c <HAL_ADCEx_Calibration_Start>
  PID.Kp =0.1;
 8000d7a:	4b77      	ldr	r3, [pc, #476]	@ (8000f58 <main+0x214>)
 8000d7c:	4a77      	ldr	r2, [pc, #476]	@ (8000f5c <main+0x218>)
 8000d7e:	619a      	str	r2, [r3, #24]
  PID.Ki =0;
 8000d80:	4b75      	ldr	r3, [pc, #468]	@ (8000f58 <main+0x214>)
 8000d82:	f04f 0200 	mov.w	r2, #0
 8000d86:	61da      	str	r2, [r3, #28]
  PID.Kd = 0;
 8000d88:	4b73      	ldr	r3, [pc, #460]	@ (8000f58 <main+0x214>)
 8000d8a:	f04f 0200 	mov.w	r2, #0
 8000d8e:	621a      	str	r2, [r3, #32]
  arm_pid_init_f32(&PID, 0);
 8000d90:	2100      	movs	r1, #0
 8000d92:	4871      	ldr	r0, [pc, #452]	@ (8000f58 <main+0x214>)
 8000d94:	f006 fc44 	bl	8007620 <arm_pid_init_f32>
  HAL_TIM_Base_Start(&htim1);
 8000d98:	4871      	ldr	r0, [pc, #452]	@ (8000f60 <main+0x21c>)
 8000d9a:	f004 fac7 	bl	800532c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000d9e:	2100      	movs	r1, #0
 8000da0:	486f      	ldr	r0, [pc, #444]	@ (8000f60 <main+0x21c>)
 8000da2:	f004 fb95 	bl	80054d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000da6:	2104      	movs	r1, #4
 8000da8:	486d      	ldr	r0, [pc, #436]	@ (8000f60 <main+0x21c>)
 8000daa:	f004 fb91 	bl	80054d0 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (check == 1)
 8000dae:	4b6d      	ldr	r3, [pc, #436]	@ (8000f64 <main+0x220>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d102      	bne.n	8000dbc <main+0x78>
	  {
		  NO1();
 8000db6:	f000 fb9d 	bl	80014f4 <NO1>
 8000dba:	e7f8      	b.n	8000dae <main+0x6a>
	  }
	  else if (check == 2)
 8000dbc:	4b69      	ldr	r3, [pc, #420]	@ (8000f64 <main+0x220>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	f040 80c1 	bne.w	8000f48 <main+0x204>
	  {
		  NO2();
 8000dc6:	f000 fba7 	bl	8001518 <NO2>
		  setposition = Gain;
 8000dca:	4b67      	ldr	r3, [pc, #412]	@ (8000f68 <main+0x224>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a67      	ldr	r2, [pc, #412]	@ (8000f6c <main+0x228>)
 8000dd0:	6013      	str	r3, [r2, #0]
		  position = QEIReadRaw;
 8000dd2:	4b67      	ldr	r3, [pc, #412]	@ (8000f70 <main+0x22c>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	ee07 3a90 	vmov	s15, r3
 8000dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dde:	4b65      	ldr	r3, [pc, #404]	@ (8000f74 <main+0x230>)
 8000de0:	edc3 7a00 	vstr	s15, [r3]
		  static uint32_t timestamp =0;
		  if(timestamp < HAL_GetTick())
 8000de4:	f000 ff46 	bl	8001c74 <HAL_GetTick>
 8000de8:	4602      	mov	r2, r0
 8000dea:	4b63      	ldr	r3, [pc, #396]	@ (8000f78 <main+0x234>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d9dd      	bls.n	8000dae <main+0x6a>
		  {
			  timestamp = HAL_GetTick()+1;
 8000df2:	f000 ff3f 	bl	8001c74 <HAL_GetTick>
 8000df6:	4603      	mov	r3, r0
 8000df8:	3301      	adds	r3, #1
 8000dfa:	4a5f      	ldr	r2, [pc, #380]	@ (8000f78 <main+0x234>)
 8000dfc:	6013      	str	r3, [r2, #0]
			  Vfeedback = arm_pid_f32(&PID, setposition - position);
 8000dfe:	4b5b      	ldr	r3, [pc, #364]	@ (8000f6c <main+0x228>)
 8000e00:	ed93 7a00 	vldr	s14, [r3]
 8000e04:	4b5b      	ldr	r3, [pc, #364]	@ (8000f74 <main+0x230>)
 8000e06:	edd3 7a00 	vldr	s15, [r3]
 8000e0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e0e:	4b52      	ldr	r3, [pc, #328]	@ (8000f58 <main+0x214>)
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	edc7 7a02 	vstr	s15, [r7, #8]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	ed93 7a00 	vldr	s14, [r3]
 8000e1c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e20:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	edd3 6a01 	vldr	s13, [r3, #4]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	edd3 7a03 	vldr	s15, [r3, #12]
 8000e30:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8000e34:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	edd3 6a02 	vldr	s13, [r3, #8]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	edd3 7a04 	vldr	s15, [r3, #16]
 8000e44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8000e52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e56:	edc7 7a01 	vstr	s15, [r7, #4]

    /* Update state */
    S->state[1] = S->state[0];
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	68da      	ldr	r2, [r3, #12]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	68ba      	ldr	r2, [r7, #8]
 8000e66:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a42      	ldr	r2, [pc, #264]	@ (8000f7c <main+0x238>)
 8000e72:	6013      	str	r3, [r2, #0]
			  position = PlantSimulation(Vfeedback);
 8000e74:	4b41      	ldr	r3, [pc, #260]	@ (8000f7c <main+0x238>)
 8000e76:	edd3 7a00 	vldr	s15, [r3]
 8000e7a:	eeb0 0a67 	vmov.f32	s0, s15
 8000e7e:	f000 fbd3 	bl	8001628 <PlantSimulation>
 8000e82:	eef0 7a40 	vmov.f32	s15, s0
 8000e86:	4b3b      	ldr	r3, [pc, #236]	@ (8000f74 <main+0x230>)
 8000e88:	edc3 7a00 	vstr	s15, [r3]
			  if (Vfeedback <= 0)
 8000e8c:	4b3b      	ldr	r3, [pc, #236]	@ (8000f7c <main+0x238>)
 8000e8e:	edd3 7a00 	vldr	s15, [r3]
 8000e92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e9a:	d826      	bhi.n	8000eea <main+0x1a6>
			  {
				  G = 1;
 8000e9c:	4b38      	ldr	r3, [pc, #224]	@ (8000f80 <main+0x23c>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	601a      	str	r2, [r3, #0]
				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000ea2:	4b2f      	ldr	r3, [pc, #188]	@ (8000f60 <main+0x21c>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	635a      	str	r2, [r3, #52]	@ 0x34
				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 2000);
 8000eaa:	4b2d      	ldr	r3, [pc, #180]	@ (8000f60 <main+0x21c>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000eb2:	639a      	str	r2, [r3, #56]	@ 0x38
				  if (Gain == QEIReadRaw)
 8000eb4:	4b2e      	ldr	r3, [pc, #184]	@ (8000f70 <main+0x22c>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	ee07 3a90 	vmov	s15, r3
 8000ebc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ec0:	4b29      	ldr	r3, [pc, #164]	@ (8000f68 <main+0x224>)
 8000ec2:	edd3 7a00 	vldr	s15, [r3]
 8000ec6:	eeb4 7a67 	vcmp.f32	s14, s15
 8000eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ece:	f47f af6e 	bne.w	8000dae <main+0x6a>
				  {
	 				  G = 2;
 8000ed2:	4b2b      	ldr	r3, [pc, #172]	@ (8000f80 <main+0x23c>)
 8000ed4:	2202      	movs	r2, #2
 8000ed6:	601a      	str	r2, [r3, #0]
	  				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000ed8:	4b21      	ldr	r3, [pc, #132]	@ (8000f60 <main+0x21c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2200      	movs	r2, #0
 8000ede:	635a      	str	r2, [r3, #52]	@ 0x34
	  				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8000ee0:	4b1f      	ldr	r3, [pc, #124]	@ (8000f60 <main+0x21c>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ee8:	e761      	b.n	8000dae <main+0x6a>
	  			  }
			  }

			  else if (Vfeedback >= 0)
 8000eea:	4b24      	ldr	r3, [pc, #144]	@ (8000f7c <main+0x238>)
 8000eec:	edd3 7a00 	vldr	s15, [r3]
 8000ef0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ef8:	db28      	blt.n	8000f4c <main+0x208>
			  {
				  G = 3;
 8000efa:	4b21      	ldr	r3, [pc, #132]	@ (8000f80 <main+0x23c>)
 8000efc:	2203      	movs	r2, #3
 8000efe:	601a      	str	r2, [r3, #0]
				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 2000);
 8000f00:	4b17      	ldr	r3, [pc, #92]	@ (8000f60 <main+0x21c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000f08:	635a      	str	r2, [r3, #52]	@ 0x34
				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8000f0a:	4b15      	ldr	r3, [pc, #84]	@ (8000f60 <main+0x21c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	639a      	str	r2, [r3, #56]	@ 0x38
				  if (Gain == QEIReadRaw)
 8000f12:	4b17      	ldr	r3, [pc, #92]	@ (8000f70 <main+0x22c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	ee07 3a90 	vmov	s15, r3
 8000f1a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f1e:	4b12      	ldr	r3, [pc, #72]	@ (8000f68 <main+0x224>)
 8000f20:	edd3 7a00 	vldr	s15, [r3]
 8000f24:	eeb4 7a67 	vcmp.f32	s14, s15
 8000f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f2c:	f47f af3f 	bne.w	8000dae <main+0x6a>
				  {
  	 				  G = 2;
 8000f30:	4b13      	ldr	r3, [pc, #76]	@ (8000f80 <main+0x23c>)
 8000f32:	2202      	movs	r2, #2
 8000f34:	601a      	str	r2, [r3, #0]
  	 				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000f36:	4b0a      	ldr	r3, [pc, #40]	@ (8000f60 <main+0x21c>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	635a      	str	r2, [r3, #52]	@ 0x34
  	 				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8000f3e:	4b08      	ldr	r3, [pc, #32]	@ (8000f60 <main+0x21c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2200      	movs	r2, #0
 8000f44:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f46:	e732      	b.n	8000dae <main+0x6a>
			  }
		  }
	  }
	  else
	  {
		  NO3();
 8000f48:	f000 fbde 	bl	8001708 <NO3>
	  if (check == 1)
 8000f4c:	e72f      	b.n	8000dae <main+0x6a>
 8000f4e:	bf00      	nop
 8000f50:	200001fc 	.word	0x200001fc
 8000f54:	20000050 	.word	0x20000050
 8000f58:	20000250 	.word	0x20000250
 8000f5c:	3dcccccd 	.word	0x3dcccccd
 8000f60:	200001b0 	.word	0x200001b0
 8000f64:	20000000 	.word	0x20000000
 8000f68:	20000280 	.word	0x20000280
 8000f6c:	20000278 	.word	0x20000278
 8000f70:	20000248 	.word	0x20000248
 8000f74:	20000274 	.word	0x20000274
 8000f78:	20000288 	.word	0x20000288
 8000f7c:	2000027c 	.word	0x2000027c
 8000f80:	20000284 	.word	0x20000284

08000f84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b094      	sub	sp, #80	@ 0x50
 8000f88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f8a:	f107 0318 	add.w	r3, r7, #24
 8000f8e:	2238      	movs	r2, #56	@ 0x38
 8000f90:	2100      	movs	r1, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f006 fb7a 	bl	800768c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
 8000fa4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	f003 f938 	bl	800421c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fac:	2302      	movs	r3, #2
 8000fae:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fb0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fb4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fb6:	2340      	movs	r3, #64	@ 0x40
 8000fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000fc2:	2304      	movs	r3, #4
 8000fc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000fc6:	2355      	movs	r3, #85	@ 0x55
 8000fc8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd6:	f107 0318 	add.w	r3, r7, #24
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f003 f9d2 	bl	8004384 <HAL_RCC_OscConfig>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000fe6:	f000 fbc5 	bl	8001774 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fea:	230f      	movs	r3, #15
 8000fec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	2104      	movs	r1, #4
 8001002:	4618      	mov	r0, r3
 8001004:	f003 fcd0 	bl	80049a8 <HAL_RCC_ClockConfig>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800100e:	f000 fbb1 	bl	8001774 <Error_Handler>
  }
}
 8001012:	bf00      	nop
 8001014:	3750      	adds	r7, #80	@ 0x50
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
	...

0800101c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08c      	sub	sp, #48	@ 0x30
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001022:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	2220      	movs	r2, #32
 8001032:	2100      	movs	r1, #0
 8001034:	4618      	mov	r0, r3
 8001036:	f006 fb29 	bl	800768c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800103a:	4b32      	ldr	r3, [pc, #200]	@ (8001104 <MX_ADC1_Init+0xe8>)
 800103c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001040:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001042:	4b30      	ldr	r3, [pc, #192]	@ (8001104 <MX_ADC1_Init+0xe8>)
 8001044:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001048:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800104a:	4b2e      	ldr	r3, [pc, #184]	@ (8001104 <MX_ADC1_Init+0xe8>)
 800104c:	2200      	movs	r2, #0
 800104e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001050:	4b2c      	ldr	r3, [pc, #176]	@ (8001104 <MX_ADC1_Init+0xe8>)
 8001052:	2200      	movs	r2, #0
 8001054:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001056:	4b2b      	ldr	r3, [pc, #172]	@ (8001104 <MX_ADC1_Init+0xe8>)
 8001058:	2200      	movs	r2, #0
 800105a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800105c:	4b29      	ldr	r3, [pc, #164]	@ (8001104 <MX_ADC1_Init+0xe8>)
 800105e:	2200      	movs	r2, #0
 8001060:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001062:	4b28      	ldr	r3, [pc, #160]	@ (8001104 <MX_ADC1_Init+0xe8>)
 8001064:	2204      	movs	r2, #4
 8001066:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001068:	4b26      	ldr	r3, [pc, #152]	@ (8001104 <MX_ADC1_Init+0xe8>)
 800106a:	2200      	movs	r2, #0
 800106c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800106e:	4b25      	ldr	r3, [pc, #148]	@ (8001104 <MX_ADC1_Init+0xe8>)
 8001070:	2201      	movs	r2, #1
 8001072:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001074:	4b23      	ldr	r3, [pc, #140]	@ (8001104 <MX_ADC1_Init+0xe8>)
 8001076:	2201      	movs	r2, #1
 8001078:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800107a:	4b22      	ldr	r3, [pc, #136]	@ (8001104 <MX_ADC1_Init+0xe8>)
 800107c:	2200      	movs	r2, #0
 800107e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001082:	4b20      	ldr	r3, [pc, #128]	@ (8001104 <MX_ADC1_Init+0xe8>)
 8001084:	2200      	movs	r2, #0
 8001086:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001088:	4b1e      	ldr	r3, [pc, #120]	@ (8001104 <MX_ADC1_Init+0xe8>)
 800108a:	2200      	movs	r2, #0
 800108c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800108e:	4b1d      	ldr	r3, [pc, #116]	@ (8001104 <MX_ADC1_Init+0xe8>)
 8001090:	2201      	movs	r2, #1
 8001092:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001096:	4b1b      	ldr	r3, [pc, #108]	@ (8001104 <MX_ADC1_Init+0xe8>)
 8001098:	2200      	movs	r2, #0
 800109a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800109c:	4b19      	ldr	r3, [pc, #100]	@ (8001104 <MX_ADC1_Init+0xe8>)
 800109e:	2200      	movs	r2, #0
 80010a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010a4:	4817      	ldr	r0, [pc, #92]	@ (8001104 <MX_ADC1_Init+0xe8>)
 80010a6:	f001 f88d 	bl	80021c4 <HAL_ADC_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80010b0:	f000 fb60 	bl	8001774 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010b4:	2300      	movs	r3, #0
 80010b6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010bc:	4619      	mov	r1, r3
 80010be:	4811      	ldr	r0, [pc, #68]	@ (8001104 <MX_ADC1_Init+0xe8>)
 80010c0:	f002 fb0e 	bl	80036e0 <HAL_ADCEx_MultiModeConfigChannel>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80010ca:	f000 fb53 	bl	8001774 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001108 <MX_ADC1_Init+0xec>)
 80010d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010d2:	2306      	movs	r3, #6
 80010d4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010da:	237f      	movs	r3, #127	@ 0x7f
 80010dc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010de:	2304      	movs	r3, #4
 80010e0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	4619      	mov	r1, r3
 80010ea:	4806      	ldr	r0, [pc, #24]	@ (8001104 <MX_ADC1_Init+0xe8>)
 80010ec:	f001 fc52 	bl	8002994 <HAL_ADC_ConfigChannel>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80010f6:	f000 fb3d 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010fa:	bf00      	nop
 80010fc:	3730      	adds	r7, #48	@ 0x30
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000050 	.word	0x20000050
 8001108:	04300002 	.word	0x04300002

0800110c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001110:	4b21      	ldr	r3, [pc, #132]	@ (8001198 <MX_LPUART1_UART_Init+0x8c>)
 8001112:	4a22      	ldr	r2, [pc, #136]	@ (800119c <MX_LPUART1_UART_Init+0x90>)
 8001114:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001116:	4b20      	ldr	r3, [pc, #128]	@ (8001198 <MX_LPUART1_UART_Init+0x8c>)
 8001118:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800111c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800111e:	4b1e      	ldr	r3, [pc, #120]	@ (8001198 <MX_LPUART1_UART_Init+0x8c>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001124:	4b1c      	ldr	r3, [pc, #112]	@ (8001198 <MX_LPUART1_UART_Init+0x8c>)
 8001126:	2200      	movs	r2, #0
 8001128:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800112a:	4b1b      	ldr	r3, [pc, #108]	@ (8001198 <MX_LPUART1_UART_Init+0x8c>)
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001130:	4b19      	ldr	r3, [pc, #100]	@ (8001198 <MX_LPUART1_UART_Init+0x8c>)
 8001132:	220c      	movs	r2, #12
 8001134:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001136:	4b18      	ldr	r3, [pc, #96]	@ (8001198 <MX_LPUART1_UART_Init+0x8c>)
 8001138:	2200      	movs	r2, #0
 800113a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800113c:	4b16      	ldr	r3, [pc, #88]	@ (8001198 <MX_LPUART1_UART_Init+0x8c>)
 800113e:	2200      	movs	r2, #0
 8001140:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001142:	4b15      	ldr	r3, [pc, #84]	@ (8001198 <MX_LPUART1_UART_Init+0x8c>)
 8001144:	2200      	movs	r2, #0
 8001146:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001148:	4b13      	ldr	r3, [pc, #76]	@ (8001198 <MX_LPUART1_UART_Init+0x8c>)
 800114a:	2200      	movs	r2, #0
 800114c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800114e:	4812      	ldr	r0, [pc, #72]	@ (8001198 <MX_LPUART1_UART_Init+0x8c>)
 8001150:	f005 fbf8 	bl	8006944 <HAL_UART_Init>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800115a:	f000 fb0b 	bl	8001774 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800115e:	2100      	movs	r1, #0
 8001160:	480d      	ldr	r0, [pc, #52]	@ (8001198 <MX_LPUART1_UART_Init+0x8c>)
 8001162:	f006 f993 	bl	800748c <HAL_UARTEx_SetTxFifoThreshold>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800116c:	f000 fb02 	bl	8001774 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001170:	2100      	movs	r1, #0
 8001172:	4809      	ldr	r0, [pc, #36]	@ (8001198 <MX_LPUART1_UART_Init+0x8c>)
 8001174:	f006 f9c8 	bl	8007508 <HAL_UARTEx_SetRxFifoThreshold>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800117e:	f000 faf9 	bl	8001774 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001182:	4805      	ldr	r0, [pc, #20]	@ (8001198 <MX_LPUART1_UART_Init+0x8c>)
 8001184:	f006 f949 	bl	800741a <HAL_UARTEx_DisableFifoMode>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800118e:	f000 faf1 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	2000011c 	.word	0x2000011c
 800119c:	40008000 	.word	0x40008000

080011a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b09c      	sub	sp, #112	@ 0x70
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011a6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011c0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
 80011d0:	615a      	str	r2, [r3, #20]
 80011d2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	2234      	movs	r2, #52	@ 0x34
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f006 fa56 	bl	800768c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011e0:	4b4b      	ldr	r3, [pc, #300]	@ (8001310 <MX_TIM1_Init+0x170>)
 80011e2:	4a4c      	ldr	r2, [pc, #304]	@ (8001314 <MX_TIM1_Init+0x174>)
 80011e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 80011e6:	4b4a      	ldr	r3, [pc, #296]	@ (8001310 <MX_TIM1_Init+0x170>)
 80011e8:	22a9      	movs	r2, #169	@ 0xa9
 80011ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ec:	4b48      	ldr	r3, [pc, #288]	@ (8001310 <MX_TIM1_Init+0x170>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 80011f2:	4b47      	ldr	r3, [pc, #284]	@ (8001310 <MX_TIM1_Init+0x170>)
 80011f4:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80011f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011fa:	4b45      	ldr	r3, [pc, #276]	@ (8001310 <MX_TIM1_Init+0x170>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001200:	4b43      	ldr	r3, [pc, #268]	@ (8001310 <MX_TIM1_Init+0x170>)
 8001202:	2200      	movs	r2, #0
 8001204:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001206:	4b42      	ldr	r3, [pc, #264]	@ (8001310 <MX_TIM1_Init+0x170>)
 8001208:	2200      	movs	r2, #0
 800120a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800120c:	4840      	ldr	r0, [pc, #256]	@ (8001310 <MX_TIM1_Init+0x170>)
 800120e:	f004 f835 	bl	800527c <HAL_TIM_Base_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001218:	f000 faac 	bl	8001774 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800121c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001220:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001222:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001226:	4619      	mov	r1, r3
 8001228:	4839      	ldr	r0, [pc, #228]	@ (8001310 <MX_TIM1_Init+0x170>)
 800122a:	f004 fcab 	bl	8005b84 <HAL_TIM_ConfigClockSource>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001234:	f000 fa9e 	bl	8001774 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001238:	4835      	ldr	r0, [pc, #212]	@ (8001310 <MX_TIM1_Init+0x170>)
 800123a:	f004 f8e7 	bl	800540c <HAL_TIM_PWM_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001244:	f000 fa96 	bl	8001774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001248:	2300      	movs	r3, #0
 800124a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800124c:	2300      	movs	r3, #0
 800124e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001250:	2300      	movs	r3, #0
 8001252:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001254:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001258:	4619      	mov	r1, r3
 800125a:	482d      	ldr	r0, [pc, #180]	@ (8001310 <MX_TIM1_Init+0x170>)
 800125c:	f005 fa48 	bl	80066f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001266:	f000 fa85 	bl	8001774 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800126a:	2360      	movs	r3, #96	@ 0x60
 800126c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001272:	2300      	movs	r3, #0
 8001274:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001276:	2300      	movs	r3, #0
 8001278:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800127a:	2300      	movs	r3, #0
 800127c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800127e:	2300      	movs	r3, #0
 8001280:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001282:	2300      	movs	r3, #0
 8001284:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001286:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800128a:	2200      	movs	r2, #0
 800128c:	4619      	mov	r1, r3
 800128e:	4820      	ldr	r0, [pc, #128]	@ (8001310 <MX_TIM1_Init+0x170>)
 8001290:	f004 fb64 	bl	800595c <HAL_TIM_PWM_ConfigChannel>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800129a:	f000 fa6b 	bl	8001774 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800129e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012a2:	2204      	movs	r2, #4
 80012a4:	4619      	mov	r1, r3
 80012a6:	481a      	ldr	r0, [pc, #104]	@ (8001310 <MX_TIM1_Init+0x170>)
 80012a8:	f004 fb58 	bl	800595c <HAL_TIM_PWM_ConfigChannel>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80012b2:	f000 fa5f 	bl	8001774 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012b6:	2300      	movs	r3, #0
 80012b8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012ba:	2300      	movs	r3, #0
 80012bc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012ce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80012d4:	2300      	movs	r3, #0
 80012d6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80012d8:	2300      	movs	r3, #0
 80012da:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80012dc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80012e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80012e6:	2300      	movs	r3, #0
 80012e8:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012ea:	2300      	movs	r3, #0
 80012ec:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012ee:	1d3b      	adds	r3, r7, #4
 80012f0:	4619      	mov	r1, r3
 80012f2:	4807      	ldr	r0, [pc, #28]	@ (8001310 <MX_TIM1_Init+0x170>)
 80012f4:	f005 fa92 	bl	800681c <HAL_TIMEx_ConfigBreakDeadTime>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 80012fe:	f000 fa39 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001302:	4803      	ldr	r0, [pc, #12]	@ (8001310 <MX_TIM1_Init+0x170>)
 8001304:	f000 fb9c 	bl	8001a40 <HAL_TIM_MspPostInit>

}
 8001308:	bf00      	nop
 800130a:	3770      	adds	r7, #112	@ 0x70
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	200001b0 	.word	0x200001b0
 8001314:	40012c00 	.word	0x40012c00

08001318 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08c      	sub	sp, #48	@ 0x30
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800131e:	f107 030c 	add.w	r3, r7, #12
 8001322:	2224      	movs	r2, #36	@ 0x24
 8001324:	2100      	movs	r1, #0
 8001326:	4618      	mov	r0, r3
 8001328:	f006 f9b0 	bl	800768c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800132c:	463b      	mov	r3, r7
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]
 8001334:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001336:	4b21      	ldr	r3, [pc, #132]	@ (80013bc <MX_TIM3_Init+0xa4>)
 8001338:	4a21      	ldr	r2, [pc, #132]	@ (80013c0 <MX_TIM3_Init+0xa8>)
 800133a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800133c:	4b1f      	ldr	r3, [pc, #124]	@ (80013bc <MX_TIM3_Init+0xa4>)
 800133e:	2200      	movs	r2, #0
 8001340:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001342:	4b1e      	ldr	r3, [pc, #120]	@ (80013bc <MX_TIM3_Init+0xa4>)
 8001344:	2200      	movs	r2, #0
 8001346:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3071;
 8001348:	4b1c      	ldr	r3, [pc, #112]	@ (80013bc <MX_TIM3_Init+0xa4>)
 800134a:	f640 32ff 	movw	r2, #3071	@ 0xbff
 800134e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001350:	4b1a      	ldr	r3, [pc, #104]	@ (80013bc <MX_TIM3_Init+0xa4>)
 8001352:	2200      	movs	r2, #0
 8001354:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001356:	4b19      	ldr	r3, [pc, #100]	@ (80013bc <MX_TIM3_Init+0xa4>)
 8001358:	2200      	movs	r2, #0
 800135a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800135c:	2303      	movs	r3, #3
 800135e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001360:	2300      	movs	r3, #0
 8001362:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001364:	2301      	movs	r3, #1
 8001366:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001368:	2300      	movs	r3, #0
 800136a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800136c:	2300      	movs	r3, #0
 800136e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001370:	2300      	movs	r3, #0
 8001372:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001374:	2301      	movs	r3, #1
 8001376:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001378:	2300      	movs	r3, #0
 800137a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001380:	f107 030c 	add.w	r3, r7, #12
 8001384:	4619      	mov	r1, r3
 8001386:	480d      	ldr	r0, [pc, #52]	@ (80013bc <MX_TIM3_Init+0xa4>)
 8001388:	f004 f9b4 	bl	80056f4 <HAL_TIM_Encoder_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001392:	f000 f9ef 	bl	8001774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001396:	2300      	movs	r3, #0
 8001398:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800139a:	2300      	movs	r3, #0
 800139c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800139e:	463b      	mov	r3, r7
 80013a0:	4619      	mov	r1, r3
 80013a2:	4806      	ldr	r0, [pc, #24]	@ (80013bc <MX_TIM3_Init+0xa4>)
 80013a4:	f005 f9a4 	bl	80066f0 <HAL_TIMEx_MasterConfigSynchronization>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80013ae:	f000 f9e1 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013b2:	bf00      	nop
 80013b4:	3730      	adds	r7, #48	@ 0x30
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	200001fc 	.word	0x200001fc
 80013c0:	40000400 	.word	0x40000400

080013c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80013ca:	4b12      	ldr	r3, [pc, #72]	@ (8001414 <MX_DMA_Init+0x50>)
 80013cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013ce:	4a11      	ldr	r2, [pc, #68]	@ (8001414 <MX_DMA_Init+0x50>)
 80013d0:	f043 0304 	orr.w	r3, r3, #4
 80013d4:	6493      	str	r3, [r2, #72]	@ 0x48
 80013d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001414 <MX_DMA_Init+0x50>)
 80013d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013da:	f003 0304 	and.w	r3, r3, #4
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001414 <MX_DMA_Init+0x50>)
 80013e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013e6:	4a0b      	ldr	r2, [pc, #44]	@ (8001414 <MX_DMA_Init+0x50>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	6493      	str	r3, [r2, #72]	@ 0x48
 80013ee:	4b09      	ldr	r3, [pc, #36]	@ (8001414 <MX_DMA_Init+0x50>)
 80013f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	603b      	str	r3, [r7, #0]
 80013f8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2100      	movs	r1, #0
 80013fe:	200b      	movs	r0, #11
 8001400:	f002 fb51 	bl	8003aa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001404:	200b      	movs	r0, #11
 8001406:	f002 fb68 	bl	8003ada <HAL_NVIC_EnableIRQ>

}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40021000 	.word	0x40021000

08001418 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08a      	sub	sp, #40	@ 0x28
 800141c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141e:	f107 0314 	add.w	r3, r7, #20
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	609a      	str	r2, [r3, #8]
 800142a:	60da      	str	r2, [r3, #12]
 800142c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800142e:	4b2f      	ldr	r3, [pc, #188]	@ (80014ec <MX_GPIO_Init+0xd4>)
 8001430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001432:	4a2e      	ldr	r2, [pc, #184]	@ (80014ec <MX_GPIO_Init+0xd4>)
 8001434:	f043 0304 	orr.w	r3, r3, #4
 8001438:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800143a:	4b2c      	ldr	r3, [pc, #176]	@ (80014ec <MX_GPIO_Init+0xd4>)
 800143c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143e:	f003 0304 	and.w	r3, r3, #4
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001446:	4b29      	ldr	r3, [pc, #164]	@ (80014ec <MX_GPIO_Init+0xd4>)
 8001448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800144a:	4a28      	ldr	r2, [pc, #160]	@ (80014ec <MX_GPIO_Init+0xd4>)
 800144c:	f043 0320 	orr.w	r3, r3, #32
 8001450:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001452:	4b26      	ldr	r3, [pc, #152]	@ (80014ec <MX_GPIO_Init+0xd4>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001456:	f003 0320 	and.w	r3, r3, #32
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800145e:	4b23      	ldr	r3, [pc, #140]	@ (80014ec <MX_GPIO_Init+0xd4>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001462:	4a22      	ldr	r2, [pc, #136]	@ (80014ec <MX_GPIO_Init+0xd4>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800146a:	4b20      	ldr	r3, [pc, #128]	@ (80014ec <MX_GPIO_Init+0xd4>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	60bb      	str	r3, [r7, #8]
 8001474:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001476:	4b1d      	ldr	r3, [pc, #116]	@ (80014ec <MX_GPIO_Init+0xd4>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800147a:	4a1c      	ldr	r2, [pc, #112]	@ (80014ec <MX_GPIO_Init+0xd4>)
 800147c:	f043 0302 	orr.w	r3, r3, #2
 8001480:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001482:	4b1a      	ldr	r3, [pc, #104]	@ (80014ec <MX_GPIO_Init+0xd4>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800148e:	2200      	movs	r2, #0
 8001490:	2120      	movs	r1, #32
 8001492:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001496:	f002 fe77 	bl	8004188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800149a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800149e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014a0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014aa:	f107 0314 	add.w	r3, r7, #20
 80014ae:	4619      	mov	r1, r3
 80014b0:	480f      	ldr	r0, [pc, #60]	@ (80014f0 <MX_GPIO_Init+0xd8>)
 80014b2:	f002 fce7 	bl	8003e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80014b6:	2320      	movs	r3, #32
 80014b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ba:	2301      	movs	r3, #1
 80014bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c2:	2300      	movs	r3, #0
 80014c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014c6:	f107 0314 	add.w	r3, r7, #20
 80014ca:	4619      	mov	r1, r3
 80014cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014d0:	f002 fcd8 	bl	8003e84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014d4:	2200      	movs	r2, #0
 80014d6:	2100      	movs	r1, #0
 80014d8:	2028      	movs	r0, #40	@ 0x28
 80014da:	f002 fae4 	bl	8003aa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014de:	2028      	movs	r0, #40	@ 0x28
 80014e0:	f002 fafb 	bl	8003ada <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014e4:	bf00      	nop
 80014e6:	3728      	adds	r7, #40	@ 0x28
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40021000 	.word	0x40021000
 80014f0:	48000800 	.word	0x48000800

080014f4 <NO1>:

/* USER CODE BEGIN 4 */
void NO1()
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
	//LD2
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,GPIO_PIN_SET);
 80014f8:	2201      	movs	r2, #1
 80014fa:	2120      	movs	r1, #32
 80014fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001500:	f002 fe42 	bl	8004188 <HAL_GPIO_WritePin>
	ADC1_Channel[0].data = 0;
 8001504:	4b02      	ldr	r3, [pc, #8]	@ (8001510 <NO1+0x1c>)
 8001506:	2200      	movs	r2, #0
 8001508:	841a      	strh	r2, [r3, #32]
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000004 	.word	0x20000004
 8001514:	00000000 	.word	0x00000000

08001518 <NO2>:

void NO2()
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
	// LD2
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,GPIO_PIN_RESET);
 800151c:	2200      	movs	r2, #0
 800151e:	2120      	movs	r1, #32
 8001520:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001524:	f002 fe30 	bl	8004188 <HAL_GPIO_WritePin>

	// QEI
	QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim3);
 8001528:	4b37      	ldr	r3, [pc, #220]	@ (8001608 <NO2+0xf0>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800152e:	4a37      	ldr	r2, [pc, #220]	@ (800160c <NO2+0xf4>)
 8001530:	6013      	str	r3, [r2, #0]
	Radiant = (QEIReadRaw*6.28)/3071.0;
 8001532:	4b36      	ldr	r3, [pc, #216]	@ (800160c <NO2+0xf4>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f7fe ffb0 	bl	800049c <__aeabi_ui2d>
 800153c:	a32c      	add	r3, pc, #176	@ (adr r3, 80015f0 <NO2+0xd8>)
 800153e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001542:	f7ff f825 	bl	8000590 <__aeabi_dmul>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	4610      	mov	r0, r2
 800154c:	4619      	mov	r1, r3
 800154e:	a32a      	add	r3, pc, #168	@ (adr r3, 80015f8 <NO2+0xe0>)
 8001550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001554:	f7ff f946 	bl	80007e4 <__aeabi_ddiv>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	4610      	mov	r0, r2
 800155e:	4619      	mov	r1, r3
 8001560:	f7ff fa28 	bl	80009b4 <__aeabi_d2f>
 8001564:	4603      	mov	r3, r0
 8001566:	4a2a      	ldr	r2, [pc, #168]	@ (8001610 <NO2+0xf8>)
 8001568:	6013      	str	r3, [r2, #0]

	// ADC
	static uint32_t TimeStamp = 0;
	if( HAL_GetTick()<TimeStamp) return;
 800156a:	f000 fb83 	bl	8001c74 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	4b28      	ldr	r3, [pc, #160]	@ (8001614 <NO2+0xfc>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	429a      	cmp	r2, r3
 8001576:	d339      	bcc.n	80015ec <NO2+0xd4>
	TimeStamp = HAL_GetTick()+500;
 8001578:	f000 fb7c 	bl	8001c74 <HAL_GetTick>
 800157c:	4603      	mov	r3, r0
 800157e:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001582:	4a24      	ldr	r2, [pc, #144]	@ (8001614 <NO2+0xfc>)
 8001584:	6013      	str	r3, [r2, #0]
	HAL_ADC_ConfigChannel(&hadc1, &ADC1_Channel[0].Config);
 8001586:	4924      	ldr	r1, [pc, #144]	@ (8001618 <NO2+0x100>)
 8001588:	4824      	ldr	r0, [pc, #144]	@ (800161c <NO2+0x104>)
 800158a:	f001 fa03 	bl	8002994 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 800158e:	4823      	ldr	r0, [pc, #140]	@ (800161c <NO2+0x104>)
 8001590:	f000 ffd4 	bl	800253c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 500);
 8001594:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001598:	4820      	ldr	r0, [pc, #128]	@ (800161c <NO2+0x104>)
 800159a:	f001 f8e7 	bl	800276c <HAL_ADC_PollForConversion>
	ADC1_Channel[0].data = HAL_ADC_GetValue(&hadc1);
 800159e:	481f      	ldr	r0, [pc, #124]	@ (800161c <NO2+0x104>)
 80015a0:	f001 f9ea 	bl	8002978 <HAL_ADC_GetValue>
 80015a4:	4603      	mov	r3, r0
 80015a6:	b29a      	uxth	r2, r3
 80015a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001618 <NO2+0x100>)
 80015aa:	841a      	strh	r2, [r3, #32]
	HAL_ADC_Stop(&hadc1);
 80015ac:	481b      	ldr	r0, [pc, #108]	@ (800161c <NO2+0x104>)
 80015ae:	f001 f8a9 	bl	8002704 <HAL_ADC_Stop>

	// Scale 4095 to 3071
	Gain = (ADC1_Channel[0].data*3071.0)/4095.0;
 80015b2:	4b19      	ldr	r3, [pc, #100]	@ (8001618 <NO2+0x100>)
 80015b4:	8c1b      	ldrh	r3, [r3, #32]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7fe ff80 	bl	80004bc <__aeabi_i2d>
 80015bc:	a30e      	add	r3, pc, #56	@ (adr r3, 80015f8 <NO2+0xe0>)
 80015be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c2:	f7fe ffe5 	bl	8000590 <__aeabi_dmul>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4610      	mov	r0, r2
 80015cc:	4619      	mov	r1, r3
 80015ce:	a30c      	add	r3, pc, #48	@ (adr r3, 8001600 <NO2+0xe8>)
 80015d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d4:	f7ff f906 	bl	80007e4 <__aeabi_ddiv>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4610      	mov	r0, r2
 80015de:	4619      	mov	r1, r3
 80015e0:	f7ff f9e8 	bl	80009b4 <__aeabi_d2f>
 80015e4:	4603      	mov	r3, r0
 80015e6:	4a0e      	ldr	r2, [pc, #56]	@ (8001620 <NO2+0x108>)
 80015e8:	6013      	str	r3, [r2, #0]
 80015ea:	e000      	b.n	80015ee <NO2+0xd6>
	if( HAL_GetTick()<TimeStamp) return;
 80015ec:	bf00      	nop
}
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	51eb851f 	.word	0x51eb851f
 80015f4:	40191eb8 	.word	0x40191eb8
 80015f8:	00000000 	.word	0x00000000
 80015fc:	40a7fe00 	.word	0x40a7fe00
 8001600:	00000000 	.word	0x00000000
 8001604:	40affe00 	.word	0x40affe00
 8001608:	200001fc 	.word	0x200001fc
 800160c:	20000248 	.word	0x20000248
 8001610:	2000024c 	.word	0x2000024c
 8001614:	2000028c 	.word	0x2000028c
 8001618:	20000004 	.word	0x20000004
 800161c:	20000050 	.word	0x20000050
 8001620:	20000280 	.word	0x20000280
 8001624:	00000000 	.word	0x00000000

08001628 <PlantSimulation>:
float PlantSimulation(float VIn) // run with fix frequency
{
 8001628:	b5b0      	push	{r4, r5, r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	ed87 0a01 	vstr	s0, [r7, #4]
	static float speed =0;
	static float position =0;
	float current= VIn - speed * 0.0123;
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f7fe ff54 	bl	80004e0 <__aeabi_f2d>
 8001638:	4604      	mov	r4, r0
 800163a:	460d      	mov	r5, r1
 800163c:	4b30      	ldr	r3, [pc, #192]	@ (8001700 <PlantSimulation+0xd8>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f7fe ff4d 	bl	80004e0 <__aeabi_f2d>
 8001646:	a328      	add	r3, pc, #160	@ (adr r3, 80016e8 <PlantSimulation+0xc0>)
 8001648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164c:	f7fe ffa0 	bl	8000590 <__aeabi_dmul>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4620      	mov	r0, r4
 8001656:	4629      	mov	r1, r5
 8001658:	f7fe fde2 	bl	8000220 <__aeabi_dsub>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	4610      	mov	r0, r2
 8001662:	4619      	mov	r1, r3
 8001664:	f7ff f9a6 	bl	80009b4 <__aeabi_d2f>
 8001668:	4603      	mov	r3, r0
 800166a:	617b      	str	r3, [r7, #20]
	float torque = current * 0.456;
 800166c:	6978      	ldr	r0, [r7, #20]
 800166e:	f7fe ff37 	bl	80004e0 <__aeabi_f2d>
 8001672:	a31f      	add	r3, pc, #124	@ (adr r3, 80016f0 <PlantSimulation+0xc8>)
 8001674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001678:	f7fe ff8a 	bl	8000590 <__aeabi_dmul>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	4610      	mov	r0, r2
 8001682:	4619      	mov	r1, r3
 8001684:	f7ff f996 	bl	80009b4 <__aeabi_d2f>
 8001688:	4603      	mov	r3, r0
 800168a:	613b      	str	r3, [r7, #16]
	float acc = torque * 0.789;
 800168c:	6938      	ldr	r0, [r7, #16]
 800168e:	f7fe ff27 	bl	80004e0 <__aeabi_f2d>
 8001692:	a319      	add	r3, pc, #100	@ (adr r3, 80016f8 <PlantSimulation+0xd0>)
 8001694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001698:	f7fe ff7a 	bl	8000590 <__aeabi_dmul>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	4610      	mov	r0, r2
 80016a2:	4619      	mov	r1, r3
 80016a4:	f7ff f986 	bl	80009b4 <__aeabi_d2f>
 80016a8:	4603      	mov	r3, r0
 80016aa:	60fb      	str	r3, [r7, #12]
	speed += acc;
 80016ac:	4b14      	ldr	r3, [pc, #80]	@ (8001700 <PlantSimulation+0xd8>)
 80016ae:	ed93 7a00 	vldr	s14, [r3]
 80016b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80016b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ba:	4b11      	ldr	r3, [pc, #68]	@ (8001700 <PlantSimulation+0xd8>)
 80016bc:	edc3 7a00 	vstr	s15, [r3]
	position += speed;
 80016c0:	4b10      	ldr	r3, [pc, #64]	@ (8001704 <PlantSimulation+0xdc>)
 80016c2:	ed93 7a00 	vldr	s14, [r3]
 80016c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001700 <PlantSimulation+0xd8>)
 80016c8:	edd3 7a00 	vldr	s15, [r3]
 80016cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001704 <PlantSimulation+0xdc>)
 80016d2:	edc3 7a00 	vstr	s15, [r3]
	return position;
 80016d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001704 <PlantSimulation+0xdc>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	ee07 3a90 	vmov	s15, r3
}
 80016de:	eeb0 0a67 	vmov.f32	s0, s15
 80016e2:	3718      	adds	r7, #24
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bdb0      	pop	{r4, r5, r7, pc}
 80016e8:	0ded288d 	.word	0x0ded288d
 80016ec:	3f8930be 	.word	0x3f8930be
 80016f0:	9fbe76c9 	.word	0x9fbe76c9
 80016f4:	3fdd2f1a 	.word	0x3fdd2f1a
 80016f8:	ed916873 	.word	0xed916873
 80016fc:	3fe93f7c 	.word	0x3fe93f7c
 8001700:	20000290 	.word	0x20000290
 8001704:	20000294 	.word	0x20000294

08001708 <NO3>:

void NO3()
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
	//LD2
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800170c:	2120      	movs	r1, #32
 800170e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001712:	f002 fd51 	bl	80041b8 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8001716:	2064      	movs	r0, #100	@ 0x64
 8001718:	f000 fab8 	bl	8001c8c <HAL_Delay>
	ADC1_Channel[0].data = 0;
 800171c:	4b02      	ldr	r3, [pc, #8]	@ (8001728 <NO3+0x20>)
 800171e:	2200      	movs	r2, #0
 8001720:	841a      	strh	r2, [r3, #32]
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000004 	.word	0x20000004

0800172c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13)
 8001736:	88fb      	ldrh	r3, [r7, #6]
 8001738:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800173c:	d112      	bne.n	8001764 <HAL_GPIO_EXTI_Callback+0x38>
	{
		if (check == 1)
 800173e:	4b0c      	ldr	r3, [pc, #48]	@ (8001770 <HAL_GPIO_EXTI_Callback+0x44>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d103      	bne.n	800174e <HAL_GPIO_EXTI_Callback+0x22>
		{
			check = 2;
 8001746:	4b0a      	ldr	r3, [pc, #40]	@ (8001770 <HAL_GPIO_EXTI_Callback+0x44>)
 8001748:	2202      	movs	r2, #2
 800174a:	601a      	str	r2, [r3, #0]
		else
		{
			check = 1;
		}
	}
}
 800174c:	e00a      	b.n	8001764 <HAL_GPIO_EXTI_Callback+0x38>
		else if (check == 2)
 800174e:	4b08      	ldr	r3, [pc, #32]	@ (8001770 <HAL_GPIO_EXTI_Callback+0x44>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2b02      	cmp	r3, #2
 8001754:	d103      	bne.n	800175e <HAL_GPIO_EXTI_Callback+0x32>
			check= 3;
 8001756:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <HAL_GPIO_EXTI_Callback+0x44>)
 8001758:	2203      	movs	r2, #3
 800175a:	601a      	str	r2, [r3, #0]
}
 800175c:	e002      	b.n	8001764 <HAL_GPIO_EXTI_Callback+0x38>
			check = 1;
 800175e:	4b04      	ldr	r3, [pc, #16]	@ (8001770 <HAL_GPIO_EXTI_Callback+0x44>)
 8001760:	2201      	movs	r2, #1
 8001762:	601a      	str	r2, [r3, #0]
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	20000000 	.word	0x20000000

08001774 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001778:	b672      	cpsid	i
}
 800177a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <Error_Handler+0x8>

08001780 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001786:	4b0f      	ldr	r3, [pc, #60]	@ (80017c4 <HAL_MspInit+0x44>)
 8001788:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800178a:	4a0e      	ldr	r2, [pc, #56]	@ (80017c4 <HAL_MspInit+0x44>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	6613      	str	r3, [r2, #96]	@ 0x60
 8001792:	4b0c      	ldr	r3, [pc, #48]	@ (80017c4 <HAL_MspInit+0x44>)
 8001794:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	607b      	str	r3, [r7, #4]
 800179c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800179e:	4b09      	ldr	r3, [pc, #36]	@ (80017c4 <HAL_MspInit+0x44>)
 80017a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017a2:	4a08      	ldr	r2, [pc, #32]	@ (80017c4 <HAL_MspInit+0x44>)
 80017a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80017aa:	4b06      	ldr	r3, [pc, #24]	@ (80017c4 <HAL_MspInit+0x44>)
 80017ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017b2:	603b      	str	r3, [r7, #0]
 80017b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80017b6:	f002 fdd5 	bl	8004364 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40021000 	.word	0x40021000

080017c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b09e      	sub	sp, #120	@ 0x78
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]
 80017de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017e0:	f107 0310 	add.w	r3, r7, #16
 80017e4:	2254      	movs	r2, #84	@ 0x54
 80017e6:	2100      	movs	r1, #0
 80017e8:	4618      	mov	r0, r3
 80017ea:	f005 ff4f 	bl	800768c <memset>
  if(hadc->Instance==ADC1)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017f6:	d15f      	bne.n	80018b8 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80017f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80017fc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80017fe:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001802:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001804:	f107 0310 	add.w	r3, r7, #16
 8001808:	4618      	mov	r0, r3
 800180a:	f003 fae9 	bl	8004de0 <HAL_RCCEx_PeriphCLKConfig>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001814:	f7ff ffae 	bl	8001774 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001818:	4b29      	ldr	r3, [pc, #164]	@ (80018c0 <HAL_ADC_MspInit+0xf8>)
 800181a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800181c:	4a28      	ldr	r2, [pc, #160]	@ (80018c0 <HAL_ADC_MspInit+0xf8>)
 800181e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001822:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001824:	4b26      	ldr	r3, [pc, #152]	@ (80018c0 <HAL_ADC_MspInit+0xf8>)
 8001826:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001828:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001830:	4b23      	ldr	r3, [pc, #140]	@ (80018c0 <HAL_ADC_MspInit+0xf8>)
 8001832:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001834:	4a22      	ldr	r2, [pc, #136]	@ (80018c0 <HAL_ADC_MspInit+0xf8>)
 8001836:	f043 0301 	orr.w	r3, r3, #1
 800183a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800183c:	4b20      	ldr	r3, [pc, #128]	@ (80018c0 <HAL_ADC_MspInit+0xf8>)
 800183e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001848:	2301      	movs	r3, #1
 800184a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800184c:	2303      	movs	r3, #3
 800184e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001854:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001858:	4619      	mov	r1, r3
 800185a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800185e:	f002 fb11 	bl	8003e84 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001862:	4b18      	ldr	r3, [pc, #96]	@ (80018c4 <HAL_ADC_MspInit+0xfc>)
 8001864:	4a18      	ldr	r2, [pc, #96]	@ (80018c8 <HAL_ADC_MspInit+0x100>)
 8001866:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001868:	4b16      	ldr	r3, [pc, #88]	@ (80018c4 <HAL_ADC_MspInit+0xfc>)
 800186a:	2205      	movs	r2, #5
 800186c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800186e:	4b15      	ldr	r3, [pc, #84]	@ (80018c4 <HAL_ADC_MspInit+0xfc>)
 8001870:	2200      	movs	r2, #0
 8001872:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001874:	4b13      	ldr	r3, [pc, #76]	@ (80018c4 <HAL_ADC_MspInit+0xfc>)
 8001876:	2200      	movs	r2, #0
 8001878:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800187a:	4b12      	ldr	r3, [pc, #72]	@ (80018c4 <HAL_ADC_MspInit+0xfc>)
 800187c:	2280      	movs	r2, #128	@ 0x80
 800187e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001880:	4b10      	ldr	r3, [pc, #64]	@ (80018c4 <HAL_ADC_MspInit+0xfc>)
 8001882:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001886:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001888:	4b0e      	ldr	r3, [pc, #56]	@ (80018c4 <HAL_ADC_MspInit+0xfc>)
 800188a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800188e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001890:	4b0c      	ldr	r3, [pc, #48]	@ (80018c4 <HAL_ADC_MspInit+0xfc>)
 8001892:	2220      	movs	r2, #32
 8001894:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001896:	4b0b      	ldr	r3, [pc, #44]	@ (80018c4 <HAL_ADC_MspInit+0xfc>)
 8001898:	2200      	movs	r2, #0
 800189a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800189c:	4809      	ldr	r0, [pc, #36]	@ (80018c4 <HAL_ADC_MspInit+0xfc>)
 800189e:	f002 f937 	bl	8003b10 <HAL_DMA_Init>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 80018a8:	f7ff ff64 	bl	8001774 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4a05      	ldr	r2, [pc, #20]	@ (80018c4 <HAL_ADC_MspInit+0xfc>)
 80018b0:	655a      	str	r2, [r3, #84]	@ 0x54
 80018b2:	4a04      	ldr	r2, [pc, #16]	@ (80018c4 <HAL_ADC_MspInit+0xfc>)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018b8:	bf00      	nop
 80018ba:	3778      	adds	r7, #120	@ 0x78
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40021000 	.word	0x40021000
 80018c4:	200000bc 	.word	0x200000bc
 80018c8:	40020008 	.word	0x40020008

080018cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b09e      	sub	sp, #120	@ 0x78
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]
 80018e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018e4:	f107 0310 	add.w	r3, r7, #16
 80018e8:	2254      	movs	r2, #84	@ 0x54
 80018ea:	2100      	movs	r1, #0
 80018ec:	4618      	mov	r0, r3
 80018ee:	f005 fecd 	bl	800768c <memset>
  if(huart->Instance==LPUART1)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a1f      	ldr	r2, [pc, #124]	@ (8001974 <HAL_UART_MspInit+0xa8>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d136      	bne.n	800196a <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80018fc:	2320      	movs	r3, #32
 80018fe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001900:	2300      	movs	r3, #0
 8001902:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001904:	f107 0310 	add.w	r3, r7, #16
 8001908:	4618      	mov	r0, r3
 800190a:	f003 fa69 	bl	8004de0 <HAL_RCCEx_PeriphCLKConfig>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001914:	f7ff ff2e 	bl	8001774 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001918:	4b17      	ldr	r3, [pc, #92]	@ (8001978 <HAL_UART_MspInit+0xac>)
 800191a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800191c:	4a16      	ldr	r2, [pc, #88]	@ (8001978 <HAL_UART_MspInit+0xac>)
 800191e:	f043 0301 	orr.w	r3, r3, #1
 8001922:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001924:	4b14      	ldr	r3, [pc, #80]	@ (8001978 <HAL_UART_MspInit+0xac>)
 8001926:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001930:	4b11      	ldr	r3, [pc, #68]	@ (8001978 <HAL_UART_MspInit+0xac>)
 8001932:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001934:	4a10      	ldr	r2, [pc, #64]	@ (8001978 <HAL_UART_MspInit+0xac>)
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800193c:	4b0e      	ldr	r3, [pc, #56]	@ (8001978 <HAL_UART_MspInit+0xac>)
 800193e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	60bb      	str	r3, [r7, #8]
 8001946:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001948:	230c      	movs	r3, #12
 800194a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194c:	2302      	movs	r3, #2
 800194e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001954:	2300      	movs	r3, #0
 8001956:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001958:	230c      	movs	r3, #12
 800195a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001960:	4619      	mov	r1, r3
 8001962:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001966:	f002 fa8d 	bl	8003e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800196a:	bf00      	nop
 800196c:	3778      	adds	r7, #120	@ 0x78
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40008000 	.word	0x40008000
 8001978:	40021000 	.word	0x40021000

0800197c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a0a      	ldr	r2, [pc, #40]	@ (80019b4 <HAL_TIM_Base_MspInit+0x38>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d10b      	bne.n	80019a6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800198e:	4b0a      	ldr	r3, [pc, #40]	@ (80019b8 <HAL_TIM_Base_MspInit+0x3c>)
 8001990:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001992:	4a09      	ldr	r2, [pc, #36]	@ (80019b8 <HAL_TIM_Base_MspInit+0x3c>)
 8001994:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001998:	6613      	str	r3, [r2, #96]	@ 0x60
 800199a:	4b07      	ldr	r3, [pc, #28]	@ (80019b8 <HAL_TIM_Base_MspInit+0x3c>)
 800199c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800199e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80019a6:	bf00      	nop
 80019a8:	3714      	adds	r7, #20
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	40012c00 	.word	0x40012c00
 80019b8:	40021000 	.word	0x40021000

080019bc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b08a      	sub	sp, #40	@ 0x28
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c4:	f107 0314 	add.w	r3, r7, #20
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a17      	ldr	r2, [pc, #92]	@ (8001a38 <HAL_TIM_Encoder_MspInit+0x7c>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d128      	bne.n	8001a30 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019de:	4b17      	ldr	r3, [pc, #92]	@ (8001a3c <HAL_TIM_Encoder_MspInit+0x80>)
 80019e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019e2:	4a16      	ldr	r2, [pc, #88]	@ (8001a3c <HAL_TIM_Encoder_MspInit+0x80>)
 80019e4:	f043 0302 	orr.w	r3, r3, #2
 80019e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80019ea:	4b14      	ldr	r3, [pc, #80]	@ (8001a3c <HAL_TIM_Encoder_MspInit+0x80>)
 80019ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	613b      	str	r3, [r7, #16]
 80019f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f6:	4b11      	ldr	r3, [pc, #68]	@ (8001a3c <HAL_TIM_Encoder_MspInit+0x80>)
 80019f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019fa:	4a10      	ldr	r2, [pc, #64]	@ (8001a3c <HAL_TIM_Encoder_MspInit+0x80>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a02:	4b0e      	ldr	r3, [pc, #56]	@ (8001a3c <HAL_TIM_Encoder_MspInit+0x80>)
 8001a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a0e:	23c0      	movs	r3, #192	@ 0xc0
 8001a10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a12:	2302      	movs	r3, #2
 8001a14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a22:	f107 0314 	add.w	r3, r7, #20
 8001a26:	4619      	mov	r1, r3
 8001a28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a2c:	f002 fa2a 	bl	8003e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001a30:	bf00      	nop
 8001a32:	3728      	adds	r7, #40	@ 0x28
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40000400 	.word	0x40000400
 8001a3c:	40021000 	.word	0x40021000

08001a40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b088      	sub	sp, #32
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a48:	f107 030c 	add.w	r3, r7, #12
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	60da      	str	r2, [r3, #12]
 8001a56:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a11      	ldr	r2, [pc, #68]	@ (8001aa4 <HAL_TIM_MspPostInit+0x64>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d11b      	bne.n	8001a9a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a62:	4b11      	ldr	r3, [pc, #68]	@ (8001aa8 <HAL_TIM_MspPostInit+0x68>)
 8001a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a66:	4a10      	ldr	r2, [pc, #64]	@ (8001aa8 <HAL_TIM_MspPostInit+0x68>)
 8001a68:	f043 0304 	orr.w	r3, r3, #4
 8001a6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa8 <HAL_TIM_MspPostInit+0x68>)
 8001a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a72:	f003 0304 	and.w	r3, r3, #4
 8001a76:	60bb      	str	r3, [r7, #8]
 8001a78:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a86:	2300      	movs	r3, #0
 8001a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a8e:	f107 030c 	add.w	r3, r7, #12
 8001a92:	4619      	mov	r1, r3
 8001a94:	4805      	ldr	r0, [pc, #20]	@ (8001aac <HAL_TIM_MspPostInit+0x6c>)
 8001a96:	f002 f9f5 	bl	8003e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001a9a:	bf00      	nop
 8001a9c:	3720      	adds	r7, #32
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40012c00 	.word	0x40012c00
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	48000800 	.word	0x48000800

08001ab0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ab4:	bf00      	nop
 8001ab6:	e7fd      	b.n	8001ab4 <NMI_Handler+0x4>

08001ab8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001abc:	bf00      	nop
 8001abe:	e7fd      	b.n	8001abc <HardFault_Handler+0x4>

08001ac0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ac4:	bf00      	nop
 8001ac6:	e7fd      	b.n	8001ac4 <MemManage_Handler+0x4>

08001ac8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001acc:	bf00      	nop
 8001ace:	e7fd      	b.n	8001acc <BusFault_Handler+0x4>

08001ad0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ad4:	bf00      	nop
 8001ad6:	e7fd      	b.n	8001ad4 <UsageFault_Handler+0x4>

08001ad8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b06:	f000 f8a3 	bl	8001c50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
	...

08001b10 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b14:	4802      	ldr	r0, [pc, #8]	@ (8001b20 <DMA1_Channel1_IRQHandler+0x10>)
 8001b16:	f002 f8a3 	bl	8003c60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	200000bc 	.word	0x200000bc

08001b24 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001b28:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001b2c:	f002 fb5e 	bl	80041ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b30:	bf00      	nop
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b38:	4b06      	ldr	r3, [pc, #24]	@ (8001b54 <SystemInit+0x20>)
 8001b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b3e:	4a05      	ldr	r2, [pc, #20]	@ (8001b54 <SystemInit+0x20>)
 8001b40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b58:	480d      	ldr	r0, [pc, #52]	@ (8001b90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b5a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b5c:	f7ff ffea 	bl	8001b34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b60:	480c      	ldr	r0, [pc, #48]	@ (8001b94 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b62:	490d      	ldr	r1, [pc, #52]	@ (8001b98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b64:	4a0d      	ldr	r2, [pc, #52]	@ (8001b9c <LoopForever+0xe>)
  movs r3, #0
 8001b66:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001b68:	e002      	b.n	8001b70 <LoopCopyDataInit>

08001b6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b6e:	3304      	adds	r3, #4

08001b70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b74:	d3f9      	bcc.n	8001b6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b76:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b78:	4c0a      	ldr	r4, [pc, #40]	@ (8001ba4 <LoopForever+0x16>)
  movs r3, #0
 8001b7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b7c:	e001      	b.n	8001b82 <LoopFillZerobss>

08001b7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b80:	3204      	adds	r2, #4

08001b82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b84:	d3fb      	bcc.n	8001b7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b86:	f005 fd89 	bl	800769c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b8a:	f7ff f8db 	bl	8000d44 <main>

08001b8e <LoopForever>:

LoopForever:
    b LoopForever
 8001b8e:	e7fe      	b.n	8001b8e <LoopForever>
  ldr   r0, =_estack
 8001b90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b98:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8001b9c:	0800774c 	.word	0x0800774c
  ldr r2, =_sbss
 8001ba0:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8001ba4:	2000029c 	.word	0x2000029c

08001ba8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ba8:	e7fe      	b.n	8001ba8 <ADC1_2_IRQHandler>

08001baa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bb4:	2003      	movs	r0, #3
 8001bb6:	f001 ff6b 	bl	8003a90 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bba:	2000      	movs	r0, #0
 8001bbc:	f000 f80e 	bl	8001bdc <HAL_InitTick>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d002      	beq.n	8001bcc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	71fb      	strb	r3, [r7, #7]
 8001bca:	e001      	b.n	8001bd0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bcc:	f7ff fdd8 	bl	8001780 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bd0:	79fb      	ldrb	r3, [r7, #7]

}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
	...

08001bdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001be4:	2300      	movs	r3, #0
 8001be6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001be8:	4b16      	ldr	r3, [pc, #88]	@ (8001c44 <HAL_InitTick+0x68>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d022      	beq.n	8001c36 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001bf0:	4b15      	ldr	r3, [pc, #84]	@ (8001c48 <HAL_InitTick+0x6c>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	4b13      	ldr	r3, [pc, #76]	@ (8001c44 <HAL_InitTick+0x68>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001bfc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c04:	4618      	mov	r0, r3
 8001c06:	f001 ff76 	bl	8003af6 <HAL_SYSTICK_Config>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d10f      	bne.n	8001c30 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b0f      	cmp	r3, #15
 8001c14:	d809      	bhi.n	8001c2a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c16:	2200      	movs	r2, #0
 8001c18:	6879      	ldr	r1, [r7, #4]
 8001c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8001c1e:	f001 ff42 	bl	8003aa6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c22:	4a0a      	ldr	r2, [pc, #40]	@ (8001c4c <HAL_InitTick+0x70>)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6013      	str	r3, [r2, #0]
 8001c28:	e007      	b.n	8001c3a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	73fb      	strb	r3, [r7, #15]
 8001c2e:	e004      	b.n	8001c3a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	73fb      	strb	r3, [r7, #15]
 8001c34:	e001      	b.n	8001c3a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3710      	adds	r7, #16
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20000030 	.word	0x20000030
 8001c48:	20000028 	.word	0x20000028
 8001c4c:	2000002c 	.word	0x2000002c

08001c50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c54:	4b05      	ldr	r3, [pc, #20]	@ (8001c6c <HAL_IncTick+0x1c>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	4b05      	ldr	r3, [pc, #20]	@ (8001c70 <HAL_IncTick+0x20>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	4a03      	ldr	r2, [pc, #12]	@ (8001c6c <HAL_IncTick+0x1c>)
 8001c60:	6013      	str	r3, [r2, #0]
}
 8001c62:	bf00      	nop
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	20000298 	.word	0x20000298
 8001c70:	20000030 	.word	0x20000030

08001c74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  return uwTick;
 8001c78:	4b03      	ldr	r3, [pc, #12]	@ (8001c88 <HAL_GetTick+0x14>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	20000298 	.word	0x20000298

08001c8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c94:	f7ff ffee 	bl	8001c74 <HAL_GetTick>
 8001c98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca4:	d004      	beq.n	8001cb0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ca6:	4b09      	ldr	r3, [pc, #36]	@ (8001ccc <HAL_Delay+0x40>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	4413      	add	r3, r2
 8001cae:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cb0:	bf00      	nop
 8001cb2:	f7ff ffdf 	bl	8001c74 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	68fa      	ldr	r2, [r7, #12]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d8f7      	bhi.n	8001cb2 <HAL_Delay+0x26>
  {
  }
}
 8001cc2:	bf00      	nop
 8001cc4:	bf00      	nop
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20000030 	.word	0x20000030

08001cd0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	609a      	str	r2, [r3, #8]
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
 8001cfe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b087      	sub	sp, #28
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
 8001d44:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	3360      	adds	r3, #96	@ 0x60
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	4413      	add	r3, r2
 8001d52:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	4b08      	ldr	r3, [pc, #32]	@ (8001d7c <LL_ADC_SetOffset+0x44>)
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	430a      	orrs	r2, r1
 8001d66:	4313      	orrs	r3, r2
 8001d68:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001d70:	bf00      	nop
 8001d72:	371c      	adds	r7, #28
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	03fff000 	.word	0x03fff000

08001d80 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	3360      	adds	r3, #96	@ 0x60
 8001d8e:	461a      	mov	r2, r3
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4413      	add	r3, r2
 8001d96:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3714      	adds	r7, #20
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b087      	sub	sp, #28
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	3360      	adds	r3, #96	@ 0x60
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	4413      	add	r3, r2
 8001dc4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	431a      	orrs	r2, r3
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001dd6:	bf00      	nop
 8001dd8:	371c      	adds	r7, #28
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b087      	sub	sp, #28
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	60f8      	str	r0, [r7, #12]
 8001dea:	60b9      	str	r1, [r7, #8]
 8001dec:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	3360      	adds	r3, #96	@ 0x60
 8001df2:	461a      	mov	r2, r3
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	4413      	add	r3, r2
 8001dfa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	431a      	orrs	r2, r3
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001e0c:	bf00      	nop
 8001e0e:	371c      	adds	r7, #28
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b087      	sub	sp, #28
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	3360      	adds	r3, #96	@ 0x60
 8001e28:	461a      	mov	r2, r3
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	4413      	add	r3, r2
 8001e30:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	431a      	orrs	r2, r3
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001e42:	bf00      	nop
 8001e44:	371c      	adds	r7, #28
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b083      	sub	sp, #12
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
 8001e56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	695b      	ldr	r3, [r3, #20]
 8001e5c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	431a      	orrs	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	615a      	str	r2, [r3, #20]
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d101      	bne.n	8001e8c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e000      	b.n	8001e8e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b087      	sub	sp, #28
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	60f8      	str	r0, [r7, #12]
 8001ea2:	60b9      	str	r1, [r7, #8]
 8001ea4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	3330      	adds	r3, #48	@ 0x30
 8001eaa:	461a      	mov	r2, r3
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	0a1b      	lsrs	r3, r3, #8
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	f003 030c 	and.w	r3, r3, #12
 8001eb6:	4413      	add	r3, r2
 8001eb8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	f003 031f 	and.w	r3, r3, #31
 8001ec4:	211f      	movs	r1, #31
 8001ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	401a      	ands	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	0e9b      	lsrs	r3, r3, #26
 8001ed2:	f003 011f 	and.w	r1, r3, #31
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	f003 031f 	and.w	r3, r3, #31
 8001edc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001ee6:	bf00      	nop
 8001ee8:	371c      	adds	r7, #28
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b087      	sub	sp, #28
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	60f8      	str	r0, [r7, #12]
 8001efa:	60b9      	str	r1, [r7, #8]
 8001efc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	3314      	adds	r3, #20
 8001f02:	461a      	mov	r2, r3
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	0e5b      	lsrs	r3, r3, #25
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	f003 0304 	and.w	r3, r3, #4
 8001f0e:	4413      	add	r3, r2
 8001f10:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	0d1b      	lsrs	r3, r3, #20
 8001f1a:	f003 031f 	and.w	r3, r3, #31
 8001f1e:	2107      	movs	r1, #7
 8001f20:	fa01 f303 	lsl.w	r3, r1, r3
 8001f24:	43db      	mvns	r3, r3
 8001f26:	401a      	ands	r2, r3
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	0d1b      	lsrs	r3, r3, #20
 8001f2c:	f003 031f 	and.w	r3, r3, #31
 8001f30:	6879      	ldr	r1, [r7, #4]
 8001f32:	fa01 f303 	lsl.w	r3, r1, r3
 8001f36:	431a      	orrs	r2, r3
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f3c:	bf00      	nop
 8001f3e:	371c      	adds	r7, #28
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f60:	43db      	mvns	r3, r3
 8001f62:	401a      	ands	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f003 0318 	and.w	r3, r3, #24
 8001f6a:	4908      	ldr	r1, [pc, #32]	@ (8001f8c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f6c:	40d9      	lsrs	r1, r3
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	400b      	ands	r3, r1
 8001f72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f76:	431a      	orrs	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001f7e:	bf00      	nop
 8001f80:	3714      	adds	r7, #20
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	0007ffff 	.word	0x0007ffff

08001f90 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f003 031f 	and.w	r3, r3, #31
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001fd8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	6093      	str	r3, [r2, #8]
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ffc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002000:	d101      	bne.n	8002006 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002002:	2301      	movs	r3, #1
 8002004:	e000      	b.n	8002008 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002024:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002028:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800204c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002050:	d101      	bne.n	8002056 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002052:	2301      	movs	r3, #1
 8002054:	e000      	b.n	8002058 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002074:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002078:	f043 0201 	orr.w	r2, r3, #1
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800209c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80020a0:	f043 0202 	orr.w	r2, r3, #2
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f003 0301 	and.w	r3, r3, #1
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d101      	bne.n	80020cc <LL_ADC_IsEnabled+0x18>
 80020c8:	2301      	movs	r3, #1
 80020ca:	e000      	b.n	80020ce <LL_ADC_IsEnabled+0x1a>
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80020da:	b480      	push	{r7}
 80020dc:	b083      	sub	sp, #12
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d101      	bne.n	80020f2 <LL_ADC_IsDisableOngoing+0x18>
 80020ee:	2301      	movs	r3, #1
 80020f0:	e000      	b.n	80020f4 <LL_ADC_IsDisableOngoing+0x1a>
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002110:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002114:	f043 0204 	orr.w	r2, r3, #4
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002138:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800213c:	f043 0210 	orr.w	r2, r3, #16
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b04      	cmp	r3, #4
 8002162:	d101      	bne.n	8002168 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002164:	2301      	movs	r3, #1
 8002166:	e000      	b.n	800216a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002176:	b480      	push	{r7}
 8002178:	b083      	sub	sp, #12
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002186:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800218a:	f043 0220 	orr.w	r2, r3, #32
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f003 0308 	and.w	r3, r3, #8
 80021ae:	2b08      	cmp	r3, #8
 80021b0:	d101      	bne.n	80021b6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80021b2:	2301      	movs	r3, #1
 80021b4:	e000      	b.n	80021b8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021c4:	b590      	push	{r4, r7, lr}
 80021c6:	b089      	sub	sp, #36	@ 0x24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021cc:	2300      	movs	r3, #0
 80021ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e1a9      	b.n	8002532 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d109      	bne.n	8002200 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f7ff faeb 	bl	80017c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff fef1 	bl	8001fec <LL_ADC_IsDeepPowerDownEnabled>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d004      	beq.n	800221a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff fed7 	bl	8001fc8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff ff0c 	bl	800203c <LL_ADC_IsInternalRegulatorEnabled>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d115      	bne.n	8002256 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f7ff fef0 	bl	8002014 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002234:	4b9c      	ldr	r3, [pc, #624]	@ (80024a8 <HAL_ADC_Init+0x2e4>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	099b      	lsrs	r3, r3, #6
 800223a:	4a9c      	ldr	r2, [pc, #624]	@ (80024ac <HAL_ADC_Init+0x2e8>)
 800223c:	fba2 2303 	umull	r2, r3, r2, r3
 8002240:	099b      	lsrs	r3, r3, #6
 8002242:	3301      	adds	r3, #1
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002248:	e002      	b.n	8002250 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	3b01      	subs	r3, #1
 800224e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f9      	bne.n	800224a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f7ff feee 	bl	800203c <LL_ADC_IsInternalRegulatorEnabled>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d10d      	bne.n	8002282 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800226a:	f043 0210 	orr.w	r2, r3, #16
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002276:	f043 0201 	orr.w	r2, r3, #1
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff ff62 	bl	8002150 <LL_ADC_REG_IsConversionOngoing>
 800228c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002292:	f003 0310 	and.w	r3, r3, #16
 8002296:	2b00      	cmp	r3, #0
 8002298:	f040 8142 	bne.w	8002520 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f040 813e 	bne.w	8002520 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022a8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80022ac:	f043 0202 	orr.w	r2, r3, #2
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff fefb 	bl	80020b4 <LL_ADC_IsEnabled>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d141      	bne.n	8002348 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022cc:	d004      	beq.n	80022d8 <HAL_ADC_Init+0x114>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a77      	ldr	r2, [pc, #476]	@ (80024b0 <HAL_ADC_Init+0x2ec>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d10f      	bne.n	80022f8 <HAL_ADC_Init+0x134>
 80022d8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80022dc:	f7ff feea 	bl	80020b4 <LL_ADC_IsEnabled>
 80022e0:	4604      	mov	r4, r0
 80022e2:	4873      	ldr	r0, [pc, #460]	@ (80024b0 <HAL_ADC_Init+0x2ec>)
 80022e4:	f7ff fee6 	bl	80020b4 <LL_ADC_IsEnabled>
 80022e8:	4603      	mov	r3, r0
 80022ea:	4323      	orrs	r3, r4
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	bf0c      	ite	eq
 80022f0:	2301      	moveq	r3, #1
 80022f2:	2300      	movne	r3, #0
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	e012      	b.n	800231e <HAL_ADC_Init+0x15a>
 80022f8:	486e      	ldr	r0, [pc, #440]	@ (80024b4 <HAL_ADC_Init+0x2f0>)
 80022fa:	f7ff fedb 	bl	80020b4 <LL_ADC_IsEnabled>
 80022fe:	4604      	mov	r4, r0
 8002300:	486d      	ldr	r0, [pc, #436]	@ (80024b8 <HAL_ADC_Init+0x2f4>)
 8002302:	f7ff fed7 	bl	80020b4 <LL_ADC_IsEnabled>
 8002306:	4603      	mov	r3, r0
 8002308:	431c      	orrs	r4, r3
 800230a:	486c      	ldr	r0, [pc, #432]	@ (80024bc <HAL_ADC_Init+0x2f8>)
 800230c:	f7ff fed2 	bl	80020b4 <LL_ADC_IsEnabled>
 8002310:	4603      	mov	r3, r0
 8002312:	4323      	orrs	r3, r4
 8002314:	2b00      	cmp	r3, #0
 8002316:	bf0c      	ite	eq
 8002318:	2301      	moveq	r3, #1
 800231a:	2300      	movne	r3, #0
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d012      	beq.n	8002348 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800232a:	d004      	beq.n	8002336 <HAL_ADC_Init+0x172>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a5f      	ldr	r2, [pc, #380]	@ (80024b0 <HAL_ADC_Init+0x2ec>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d101      	bne.n	800233a <HAL_ADC_Init+0x176>
 8002336:	4a62      	ldr	r2, [pc, #392]	@ (80024c0 <HAL_ADC_Init+0x2fc>)
 8002338:	e000      	b.n	800233c <HAL_ADC_Init+0x178>
 800233a:	4a62      	ldr	r2, [pc, #392]	@ (80024c4 <HAL_ADC_Init+0x300>)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	4619      	mov	r1, r3
 8002342:	4610      	mov	r0, r2
 8002344:	f7ff fcc4 	bl	8001cd0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	7f5b      	ldrb	r3, [r3, #29]
 800234c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002352:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002358:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800235e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002366:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002368:	4313      	orrs	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002372:	2b01      	cmp	r3, #1
 8002374:	d106      	bne.n	8002384 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800237a:	3b01      	subs	r3, #1
 800237c:	045b      	lsls	r3, r3, #17
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	4313      	orrs	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002388:	2b00      	cmp	r3, #0
 800238a:	d009      	beq.n	80023a0 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002390:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002398:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	4313      	orrs	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68da      	ldr	r2, [r3, #12]
 80023a6:	4b48      	ldr	r3, [pc, #288]	@ (80024c8 <HAL_ADC_Init+0x304>)
 80023a8:	4013      	ands	r3, r2
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	6812      	ldr	r2, [r2, #0]
 80023ae:	69b9      	ldr	r1, [r7, #24]
 80023b0:	430b      	orrs	r3, r1
 80023b2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	430a      	orrs	r2, r1
 80023c8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff fee5 	bl	800219e <LL_ADC_INJ_IsConversionOngoing>
 80023d4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d17f      	bne.n	80024dc <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d17c      	bne.n	80024dc <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80023e6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80023ee:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80023f0:	4313      	orrs	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80023fe:	f023 0302 	bic.w	r3, r3, #2
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	6812      	ldr	r2, [r2, #0]
 8002406:	69b9      	ldr	r1, [r7, #24]
 8002408:	430b      	orrs	r3, r1
 800240a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d017      	beq.n	8002444 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	691a      	ldr	r2, [r3, #16]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002422:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800242c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002430:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	6911      	ldr	r1, [r2, #16]
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	6812      	ldr	r2, [r2, #0]
 800243c:	430b      	orrs	r3, r1
 800243e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002442:	e013      	b.n	800246c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	691a      	ldr	r2, [r3, #16]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002452:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	6812      	ldr	r2, [r2, #0]
 8002460:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002464:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002468:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002472:	2b01      	cmp	r3, #1
 8002474:	d12a      	bne.n	80024cc <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002480:	f023 0304 	bic.w	r3, r3, #4
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800248c:	4311      	orrs	r1, r2
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002492:	4311      	orrs	r1, r2
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002498:	430a      	orrs	r2, r1
 800249a:	431a      	orrs	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f042 0201 	orr.w	r2, r2, #1
 80024a4:	611a      	str	r2, [r3, #16]
 80024a6:	e019      	b.n	80024dc <HAL_ADC_Init+0x318>
 80024a8:	20000028 	.word	0x20000028
 80024ac:	053e2d63 	.word	0x053e2d63
 80024b0:	50000100 	.word	0x50000100
 80024b4:	50000400 	.word	0x50000400
 80024b8:	50000500 	.word	0x50000500
 80024bc:	50000600 	.word	0x50000600
 80024c0:	50000300 	.word	0x50000300
 80024c4:	50000700 	.word	0x50000700
 80024c8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	691a      	ldr	r2, [r3, #16]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 0201 	bic.w	r2, r2, #1
 80024da:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	695b      	ldr	r3, [r3, #20]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d10c      	bne.n	80024fe <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ea:	f023 010f 	bic.w	r1, r3, #15
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a1b      	ldr	r3, [r3, #32]
 80024f2:	1e5a      	subs	r2, r3, #1
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	430a      	orrs	r2, r1
 80024fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80024fc:	e007      	b.n	800250e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f022 020f 	bic.w	r2, r2, #15
 800250c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002512:	f023 0303 	bic.w	r3, r3, #3
 8002516:	f043 0201 	orr.w	r2, r3, #1
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800251e:	e007      	b.n	8002530 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002524:	f043 0210 	orr.w	r2, r3, #16
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002530:	7ffb      	ldrb	r3, [r7, #31]
}
 8002532:	4618      	mov	r0, r3
 8002534:	3724      	adds	r7, #36	@ 0x24
 8002536:	46bd      	mov	sp, r7
 8002538:	bd90      	pop	{r4, r7, pc}
 800253a:	bf00      	nop

0800253c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800254c:	d004      	beq.n	8002558 <HAL_ADC_Start+0x1c>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a67      	ldr	r2, [pc, #412]	@ (80026f0 <HAL_ADC_Start+0x1b4>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d101      	bne.n	800255c <HAL_ADC_Start+0x20>
 8002558:	4b66      	ldr	r3, [pc, #408]	@ (80026f4 <HAL_ADC_Start+0x1b8>)
 800255a:	e000      	b.n	800255e <HAL_ADC_Start+0x22>
 800255c:	4b66      	ldr	r3, [pc, #408]	@ (80026f8 <HAL_ADC_Start+0x1bc>)
 800255e:	4618      	mov	r0, r3
 8002560:	f7ff fd16 	bl	8001f90 <LL_ADC_GetMultimode>
 8002564:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff fdf0 	bl	8002150 <LL_ADC_REG_IsConversionOngoing>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	f040 80b4 	bne.w	80026e0 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800257e:	2b01      	cmp	r3, #1
 8002580:	d101      	bne.n	8002586 <HAL_ADC_Start+0x4a>
 8002582:	2302      	movs	r3, #2
 8002584:	e0af      	b.n	80026e6 <HAL_ADC_Start+0x1aa>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2201      	movs	r2, #1
 800258a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 fefc 	bl	800338c <ADC_Enable>
 8002594:	4603      	mov	r3, r0
 8002596:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002598:	7dfb      	ldrb	r3, [r7, #23]
 800259a:	2b00      	cmp	r3, #0
 800259c:	f040 809b 	bne.w	80026d6 <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025a4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80025a8:	f023 0301 	bic.w	r3, r3, #1
 80025ac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a4d      	ldr	r2, [pc, #308]	@ (80026f0 <HAL_ADC_Start+0x1b4>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d009      	beq.n	80025d2 <HAL_ADC_Start+0x96>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a4e      	ldr	r2, [pc, #312]	@ (80026fc <HAL_ADC_Start+0x1c0>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d002      	beq.n	80025ce <HAL_ADC_Start+0x92>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	e003      	b.n	80025d6 <HAL_ADC_Start+0x9a>
 80025ce:	4b4c      	ldr	r3, [pc, #304]	@ (8002700 <HAL_ADC_Start+0x1c4>)
 80025d0:	e001      	b.n	80025d6 <HAL_ADC_Start+0x9a>
 80025d2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	6812      	ldr	r2, [r2, #0]
 80025da:	4293      	cmp	r3, r2
 80025dc:	d002      	beq.n	80025e4 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d105      	bne.n	80025f0 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025e8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025fc:	d106      	bne.n	800260c <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002602:	f023 0206 	bic.w	r2, r3, #6
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	661a      	str	r2, [r3, #96]	@ 0x60
 800260a:	e002      	b.n	8002612 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	221c      	movs	r2, #28
 8002618:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a32      	ldr	r2, [pc, #200]	@ (80026f0 <HAL_ADC_Start+0x1b4>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d009      	beq.n	8002640 <HAL_ADC_Start+0x104>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a32      	ldr	r2, [pc, #200]	@ (80026fc <HAL_ADC_Start+0x1c0>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d002      	beq.n	800263c <HAL_ADC_Start+0x100>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	e003      	b.n	8002644 <HAL_ADC_Start+0x108>
 800263c:	4b30      	ldr	r3, [pc, #192]	@ (8002700 <HAL_ADC_Start+0x1c4>)
 800263e:	e001      	b.n	8002644 <HAL_ADC_Start+0x108>
 8002640:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	6812      	ldr	r2, [r2, #0]
 8002648:	4293      	cmp	r3, r2
 800264a:	d008      	beq.n	800265e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d005      	beq.n	800265e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	2b05      	cmp	r3, #5
 8002656:	d002      	beq.n	800265e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	2b09      	cmp	r3, #9
 800265c:	d114      	bne.n	8002688 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d007      	beq.n	800267c <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002670:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002674:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff fd3d 	bl	8002100 <LL_ADC_REG_StartConversion>
 8002686:	e02d      	b.n	80026e4 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800268c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a15      	ldr	r2, [pc, #84]	@ (80026f0 <HAL_ADC_Start+0x1b4>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d009      	beq.n	80026b2 <HAL_ADC_Start+0x176>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a16      	ldr	r2, [pc, #88]	@ (80026fc <HAL_ADC_Start+0x1c0>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d002      	beq.n	80026ae <HAL_ADC_Start+0x172>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	e003      	b.n	80026b6 <HAL_ADC_Start+0x17a>
 80026ae:	4b14      	ldr	r3, [pc, #80]	@ (8002700 <HAL_ADC_Start+0x1c4>)
 80026b0:	e001      	b.n	80026b6 <HAL_ADC_Start+0x17a>
 80026b2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80026b6:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d00f      	beq.n	80026e4 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026c8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80026cc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80026d4:	e006      	b.n	80026e4 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80026de:	e001      	b.n	80026e4 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80026e0:	2302      	movs	r3, #2
 80026e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80026e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3718      	adds	r7, #24
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	50000100 	.word	0x50000100
 80026f4:	50000300 	.word	0x50000300
 80026f8:	50000700 	.word	0x50000700
 80026fc:	50000500 	.word	0x50000500
 8002700:	50000400 	.word	0x50000400

08002704 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002712:	2b01      	cmp	r3, #1
 8002714:	d101      	bne.n	800271a <HAL_ADC_Stop+0x16>
 8002716:	2302      	movs	r3, #2
 8002718:	e023      	b.n	8002762 <HAL_ADC_Stop+0x5e>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002722:	2103      	movs	r1, #3
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 fd75 	bl	8003214 <ADC_ConversionStop>
 800272a:	4603      	mov	r3, r0
 800272c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800272e:	7bfb      	ldrb	r3, [r7, #15]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d111      	bne.n	8002758 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 febf 	bl	80034b8 <ADC_Disable>
 800273a:	4603      	mov	r3, r0
 800273c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800273e:	7bfb      	ldrb	r3, [r7, #15]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d109      	bne.n	8002758 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002748:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800274c:	f023 0301 	bic.w	r3, r3, #1
 8002750:	f043 0201 	orr.w	r2, r3, #1
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	65da      	str	r2, [r3, #92]	@ 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002760:	7bfb      	ldrb	r3, [r7, #15]
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
	...

0800276c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b088      	sub	sp, #32
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800277e:	d004      	beq.n	800278a <HAL_ADC_PollForConversion+0x1e>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a77      	ldr	r2, [pc, #476]	@ (8002964 <HAL_ADC_PollForConversion+0x1f8>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d101      	bne.n	800278e <HAL_ADC_PollForConversion+0x22>
 800278a:	4b77      	ldr	r3, [pc, #476]	@ (8002968 <HAL_ADC_PollForConversion+0x1fc>)
 800278c:	e000      	b.n	8002790 <HAL_ADC_PollForConversion+0x24>
 800278e:	4b77      	ldr	r3, [pc, #476]	@ (800296c <HAL_ADC_PollForConversion+0x200>)
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff fbfd 	bl	8001f90 <LL_ADC_GetMultimode>
 8002796:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	2b08      	cmp	r3, #8
 800279e:	d102      	bne.n	80027a6 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80027a0:	2308      	movs	r3, #8
 80027a2:	61fb      	str	r3, [r7, #28]
 80027a4:	e037      	b.n	8002816 <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d005      	beq.n	80027b8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	2b05      	cmp	r3, #5
 80027b0:	d002      	beq.n	80027b8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	2b09      	cmp	r3, #9
 80027b6:	d111      	bne.n	80027dc <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d007      	beq.n	80027d6 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ca:	f043 0220 	orr.w	r2, r3, #32
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e0c1      	b.n	800295a <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80027d6:	2304      	movs	r3, #4
 80027d8:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80027da:	e01c      	b.n	8002816 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027e4:	d004      	beq.n	80027f0 <HAL_ADC_PollForConversion+0x84>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a5e      	ldr	r2, [pc, #376]	@ (8002964 <HAL_ADC_PollForConversion+0x1f8>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d101      	bne.n	80027f4 <HAL_ADC_PollForConversion+0x88>
 80027f0:	4b5d      	ldr	r3, [pc, #372]	@ (8002968 <HAL_ADC_PollForConversion+0x1fc>)
 80027f2:	e000      	b.n	80027f6 <HAL_ADC_PollForConversion+0x8a>
 80027f4:	4b5d      	ldr	r3, [pc, #372]	@ (800296c <HAL_ADC_PollForConversion+0x200>)
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff fbd8 	bl	8001fac <LL_ADC_GetMultiDMATransfer>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d007      	beq.n	8002812 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002806:	f043 0220 	orr.w	r2, r3, #32
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e0a3      	b.n	800295a <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002812:	2304      	movs	r3, #4
 8002814:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002816:	f7ff fa2d 	bl	8001c74 <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800281c:	e021      	b.n	8002862 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002824:	d01d      	beq.n	8002862 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002826:	f7ff fa25 	bl	8001c74 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	429a      	cmp	r2, r3
 8002834:	d302      	bcc.n	800283c <HAL_ADC_PollForConversion+0xd0>
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d112      	bne.n	8002862 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	4013      	ands	r3, r2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10b      	bne.n	8002862 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800284e:	f043 0204 	orr.w	r2, r3, #4
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e07b      	b.n	800295a <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	4013      	ands	r3, r2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0d6      	beq.n	800281e <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002874:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff faf7 	bl	8001e74 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d01c      	beq.n	80028c6 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	7f5b      	ldrb	r3, [r3, #29]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d118      	bne.n	80028c6 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	2b08      	cmp	r3, #8
 80028a0:	d111      	bne.n	80028c6 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028a6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d105      	bne.n	80028c6 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028be:	f043 0201 	orr.w	r2, r3, #1
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a26      	ldr	r2, [pc, #152]	@ (8002964 <HAL_ADC_PollForConversion+0x1f8>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d009      	beq.n	80028e4 <HAL_ADC_PollForConversion+0x178>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a26      	ldr	r2, [pc, #152]	@ (8002970 <HAL_ADC_PollForConversion+0x204>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d002      	beq.n	80028e0 <HAL_ADC_PollForConversion+0x174>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	e003      	b.n	80028e8 <HAL_ADC_PollForConversion+0x17c>
 80028e0:	4b24      	ldr	r3, [pc, #144]	@ (8002974 <HAL_ADC_PollForConversion+0x208>)
 80028e2:	e001      	b.n	80028e8 <HAL_ADC_PollForConversion+0x17c>
 80028e4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	6812      	ldr	r2, [r2, #0]
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d008      	beq.n	8002902 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d005      	beq.n	8002902 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	2b05      	cmp	r3, #5
 80028fa:	d002      	beq.n	8002902 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	2b09      	cmp	r3, #9
 8002900:	d104      	bne.n	800290c <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	61bb      	str	r3, [r7, #24]
 800290a:	e014      	b.n	8002936 <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a14      	ldr	r2, [pc, #80]	@ (8002964 <HAL_ADC_PollForConversion+0x1f8>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d009      	beq.n	800292a <HAL_ADC_PollForConversion+0x1be>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a15      	ldr	r2, [pc, #84]	@ (8002970 <HAL_ADC_PollForConversion+0x204>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d002      	beq.n	8002926 <HAL_ADC_PollForConversion+0x1ba>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	e003      	b.n	800292e <HAL_ADC_PollForConversion+0x1c2>
 8002926:	4b13      	ldr	r3, [pc, #76]	@ (8002974 <HAL_ADC_PollForConversion+0x208>)
 8002928:	e001      	b.n	800292e <HAL_ADC_PollForConversion+0x1c2>
 800292a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800292e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	2b08      	cmp	r3, #8
 800293a:	d104      	bne.n	8002946 <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2208      	movs	r2, #8
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	e008      	b.n	8002958 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d103      	bne.n	8002958 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	220c      	movs	r2, #12
 8002956:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3720      	adds	r7, #32
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	50000100 	.word	0x50000100
 8002968:	50000300 	.word	0x50000300
 800296c:	50000700 	.word	0x50000700
 8002970:	50000500 	.word	0x50000500
 8002974:	50000400 	.word	0x50000400

08002978 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002986:	4618      	mov	r0, r3
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
	...

08002994 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b0b6      	sub	sp, #216	@ 0xd8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800299e:	2300      	movs	r3, #0
 80029a0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80029a4:	2300      	movs	r3, #0
 80029a6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d102      	bne.n	80029b8 <HAL_ADC_ConfigChannel+0x24>
 80029b2:	2302      	movs	r3, #2
 80029b4:	f000 bc13 	b.w	80031de <HAL_ADC_ConfigChannel+0x84a>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff fbc3 	bl	8002150 <LL_ADC_REG_IsConversionOngoing>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f040 83f3 	bne.w	80031b8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6818      	ldr	r0, [r3, #0]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	6859      	ldr	r1, [r3, #4]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	461a      	mov	r2, r3
 80029e0:	f7ff fa5b 	bl	8001e9a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff fbb1 	bl	8002150 <LL_ADC_REG_IsConversionOngoing>
 80029ee:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff fbd1 	bl	800219e <LL_ADC_INJ_IsConversionOngoing>
 80029fc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a00:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f040 81d9 	bne.w	8002dbc <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a0a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f040 81d4 	bne.w	8002dbc <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002a1c:	d10f      	bne.n	8002a3e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6818      	ldr	r0, [r3, #0]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2200      	movs	r2, #0
 8002a28:	4619      	mov	r1, r3
 8002a2a:	f7ff fa62 	bl	8001ef2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7ff fa09 	bl	8001e4e <LL_ADC_SetSamplingTimeCommonConfig>
 8002a3c:	e00e      	b.n	8002a5c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6818      	ldr	r0, [r3, #0]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	6819      	ldr	r1, [r3, #0]
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	f7ff fa51 	bl	8001ef2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2100      	movs	r1, #0
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff f9f9 	bl	8001e4e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	695a      	ldr	r2, [r3, #20]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	08db      	lsrs	r3, r3, #3
 8002a68:	f003 0303 	and.w	r3, r3, #3
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	2b04      	cmp	r3, #4
 8002a7c:	d022      	beq.n	8002ac4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6818      	ldr	r0, [r3, #0]
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	6919      	ldr	r1, [r3, #16]
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002a8e:	f7ff f953 	bl	8001d38 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6818      	ldr	r0, [r3, #0]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	6919      	ldr	r1, [r3, #16]
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	f7ff f99f 	bl	8001de2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6818      	ldr	r0, [r3, #0]
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d102      	bne.n	8002aba <HAL_ADC_ConfigChannel+0x126>
 8002ab4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ab8:	e000      	b.n	8002abc <HAL_ADC_ConfigChannel+0x128>
 8002aba:	2300      	movs	r3, #0
 8002abc:	461a      	mov	r2, r3
 8002abe:	f7ff f9ab 	bl	8001e18 <LL_ADC_SetOffsetSaturation>
 8002ac2:	e17b      	b.n	8002dbc <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2100      	movs	r1, #0
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7ff f958 	bl	8001d80 <LL_ADC_GetOffsetChannel>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10a      	bne.n	8002af0 <HAL_ADC_ConfigChannel+0x15c>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2100      	movs	r1, #0
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff f94d 	bl	8001d80 <LL_ADC_GetOffsetChannel>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	0e9b      	lsrs	r3, r3, #26
 8002aea:	f003 021f 	and.w	r2, r3, #31
 8002aee:	e01e      	b.n	8002b2e <HAL_ADC_ConfigChannel+0x19a>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2100      	movs	r1, #0
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7ff f942 	bl	8001d80 <LL_ADC_GetOffsetChannel>
 8002afc:	4603      	mov	r3, r0
 8002afe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b02:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002b06:	fa93 f3a3 	rbit	r3, r3
 8002b0a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002b12:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002b16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002b1e:	2320      	movs	r3, #32
 8002b20:	e004      	b.n	8002b2c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002b22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b26:	fab3 f383 	clz	r3, r3
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d105      	bne.n	8002b46 <HAL_ADC_ConfigChannel+0x1b2>
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	0e9b      	lsrs	r3, r3, #26
 8002b40:	f003 031f 	and.w	r3, r3, #31
 8002b44:	e018      	b.n	8002b78 <HAL_ADC_ConfigChannel+0x1e4>
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b52:	fa93 f3a3 	rbit	r3, r3
 8002b56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002b5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b5e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002b62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002b6a:	2320      	movs	r3, #32
 8002b6c:	e004      	b.n	8002b78 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002b6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b72:	fab3 f383 	clz	r3, r3
 8002b76:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d106      	bne.n	8002b8a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2200      	movs	r2, #0
 8002b82:	2100      	movs	r1, #0
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff f911 	bl	8001dac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2101      	movs	r1, #1
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7ff f8f5 	bl	8001d80 <LL_ADC_GetOffsetChannel>
 8002b96:	4603      	mov	r3, r0
 8002b98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d10a      	bne.n	8002bb6 <HAL_ADC_ConfigChannel+0x222>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2101      	movs	r1, #1
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7ff f8ea 	bl	8001d80 <LL_ADC_GetOffsetChannel>
 8002bac:	4603      	mov	r3, r0
 8002bae:	0e9b      	lsrs	r3, r3, #26
 8002bb0:	f003 021f 	and.w	r2, r3, #31
 8002bb4:	e01e      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x260>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2101      	movs	r1, #1
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7ff f8df 	bl	8001d80 <LL_ADC_GetOffsetChannel>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002bcc:	fa93 f3a3 	rbit	r3, r3
 8002bd0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002bd4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002bd8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002bdc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002be4:	2320      	movs	r3, #32
 8002be6:	e004      	b.n	8002bf2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002be8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002bec:	fab3 f383 	clz	r3, r3
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d105      	bne.n	8002c0c <HAL_ADC_ConfigChannel+0x278>
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	0e9b      	lsrs	r3, r3, #26
 8002c06:	f003 031f 	and.w	r3, r3, #31
 8002c0a:	e018      	b.n	8002c3e <HAL_ADC_ConfigChannel+0x2aa>
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c18:	fa93 f3a3 	rbit	r3, r3
 8002c1c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002c20:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c24:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002c28:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002c30:	2320      	movs	r3, #32
 8002c32:	e004      	b.n	8002c3e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002c34:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c38:	fab3 f383 	clz	r3, r3
 8002c3c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d106      	bne.n	8002c50 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2200      	movs	r2, #0
 8002c48:	2101      	movs	r1, #1
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff f8ae 	bl	8001dac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2102      	movs	r1, #2
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7ff f892 	bl	8001d80 <LL_ADC_GetOffsetChannel>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10a      	bne.n	8002c7c <HAL_ADC_ConfigChannel+0x2e8>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2102      	movs	r1, #2
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff f887 	bl	8001d80 <LL_ADC_GetOffsetChannel>
 8002c72:	4603      	mov	r3, r0
 8002c74:	0e9b      	lsrs	r3, r3, #26
 8002c76:	f003 021f 	and.w	r2, r3, #31
 8002c7a:	e01e      	b.n	8002cba <HAL_ADC_ConfigChannel+0x326>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2102      	movs	r1, #2
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7ff f87c 	bl	8001d80 <LL_ADC_GetOffsetChannel>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c92:	fa93 f3a3 	rbit	r3, r3
 8002c96:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002c9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002ca2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002caa:	2320      	movs	r3, #32
 8002cac:	e004      	b.n	8002cb8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002cae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002cb2:	fab3 f383 	clz	r3, r3
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d105      	bne.n	8002cd2 <HAL_ADC_ConfigChannel+0x33e>
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	0e9b      	lsrs	r3, r3, #26
 8002ccc:	f003 031f 	and.w	r3, r3, #31
 8002cd0:	e016      	b.n	8002d00 <HAL_ADC_ConfigChannel+0x36c>
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cda:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002cde:	fa93 f3a3 	rbit	r3, r3
 8002ce2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002ce4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002ce6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002cea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002cf2:	2320      	movs	r3, #32
 8002cf4:	e004      	b.n	8002d00 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002cf6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002cfa:	fab3 f383 	clz	r3, r3
 8002cfe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d106      	bne.n	8002d12 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	2102      	movs	r1, #2
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff f84d 	bl	8001dac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2103      	movs	r1, #3
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff f831 	bl	8001d80 <LL_ADC_GetOffsetChannel>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d10a      	bne.n	8002d3e <HAL_ADC_ConfigChannel+0x3aa>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2103      	movs	r1, #3
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7ff f826 	bl	8001d80 <LL_ADC_GetOffsetChannel>
 8002d34:	4603      	mov	r3, r0
 8002d36:	0e9b      	lsrs	r3, r3, #26
 8002d38:	f003 021f 	and.w	r2, r3, #31
 8002d3c:	e017      	b.n	8002d6e <HAL_ADC_ConfigChannel+0x3da>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2103      	movs	r1, #3
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff f81b 	bl	8001d80 <LL_ADC_GetOffsetChannel>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d50:	fa93 f3a3 	rbit	r3, r3
 8002d54:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002d56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d58:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002d5a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d101      	bne.n	8002d64 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002d60:	2320      	movs	r3, #32
 8002d62:	e003      	b.n	8002d6c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002d64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d66:	fab3 f383 	clz	r3, r3
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d105      	bne.n	8002d86 <HAL_ADC_ConfigChannel+0x3f2>
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	0e9b      	lsrs	r3, r3, #26
 8002d80:	f003 031f 	and.w	r3, r3, #31
 8002d84:	e011      	b.n	8002daa <HAL_ADC_ConfigChannel+0x416>
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d8e:	fa93 f3a3 	rbit	r3, r3
 8002d92:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002d94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d96:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002d98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002d9e:	2320      	movs	r3, #32
 8002da0:	e003      	b.n	8002daa <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002da2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002da4:	fab3 f383 	clz	r3, r3
 8002da8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d106      	bne.n	8002dbc <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2200      	movs	r2, #0
 8002db4:	2103      	movs	r1, #3
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7fe fff8 	bl	8001dac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff f977 	bl	80020b4 <LL_ADC_IsEnabled>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f040 813d 	bne.w	8003048 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6818      	ldr	r0, [r3, #0]
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	6819      	ldr	r1, [r3, #0]
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	461a      	mov	r2, r3
 8002ddc:	f7ff f8b4 	bl	8001f48 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	4aa2      	ldr	r2, [pc, #648]	@ (8003070 <HAL_ADC_ConfigChannel+0x6dc>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	f040 812e 	bne.w	8003048 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d10b      	bne.n	8002e14 <HAL_ADC_ConfigChannel+0x480>
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	0e9b      	lsrs	r3, r3, #26
 8002e02:	3301      	adds	r3, #1
 8002e04:	f003 031f 	and.w	r3, r3, #31
 8002e08:	2b09      	cmp	r3, #9
 8002e0a:	bf94      	ite	ls
 8002e0c:	2301      	movls	r3, #1
 8002e0e:	2300      	movhi	r3, #0
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	e019      	b.n	8002e48 <HAL_ADC_ConfigChannel+0x4b4>
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e1c:	fa93 f3a3 	rbit	r3, r3
 8002e20:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002e22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e24:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002e26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d101      	bne.n	8002e30 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002e2c:	2320      	movs	r3, #32
 8002e2e:	e003      	b.n	8002e38 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002e30:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e32:	fab3 f383 	clz	r3, r3
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	3301      	adds	r3, #1
 8002e3a:	f003 031f 	and.w	r3, r3, #31
 8002e3e:	2b09      	cmp	r3, #9
 8002e40:	bf94      	ite	ls
 8002e42:	2301      	movls	r3, #1
 8002e44:	2300      	movhi	r3, #0
 8002e46:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d079      	beq.n	8002f40 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d107      	bne.n	8002e68 <HAL_ADC_ConfigChannel+0x4d4>
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	0e9b      	lsrs	r3, r3, #26
 8002e5e:	3301      	adds	r3, #1
 8002e60:	069b      	lsls	r3, r3, #26
 8002e62:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e66:	e015      	b.n	8002e94 <HAL_ADC_ConfigChannel+0x500>
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e70:	fa93 f3a3 	rbit	r3, r3
 8002e74:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002e76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e78:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002e7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d101      	bne.n	8002e84 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002e80:	2320      	movs	r3, #32
 8002e82:	e003      	b.n	8002e8c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002e84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e86:	fab3 f383 	clz	r3, r3
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	069b      	lsls	r3, r3, #26
 8002e90:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d109      	bne.n	8002eb4 <HAL_ADC_ConfigChannel+0x520>
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	0e9b      	lsrs	r3, r3, #26
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	f003 031f 	and.w	r3, r3, #31
 8002eac:	2101      	movs	r1, #1
 8002eae:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb2:	e017      	b.n	8002ee4 <HAL_ADC_ConfigChannel+0x550>
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ebc:	fa93 f3a3 	rbit	r3, r3
 8002ec0:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002ec2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ec4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002ec6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d101      	bne.n	8002ed0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002ecc:	2320      	movs	r3, #32
 8002ece:	e003      	b.n	8002ed8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002ed0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ed2:	fab3 f383 	clz	r3, r3
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	3301      	adds	r3, #1
 8002eda:	f003 031f 	and.w	r3, r3, #31
 8002ede:	2101      	movs	r1, #1
 8002ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee4:	ea42 0103 	orr.w	r1, r2, r3
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d10a      	bne.n	8002f0a <HAL_ADC_ConfigChannel+0x576>
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	0e9b      	lsrs	r3, r3, #26
 8002efa:	3301      	adds	r3, #1
 8002efc:	f003 021f 	and.w	r2, r3, #31
 8002f00:	4613      	mov	r3, r2
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	4413      	add	r3, r2
 8002f06:	051b      	lsls	r3, r3, #20
 8002f08:	e018      	b.n	8002f3c <HAL_ADC_ConfigChannel+0x5a8>
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f12:	fa93 f3a3 	rbit	r3, r3
 8002f16:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002f18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002f1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002f22:	2320      	movs	r3, #32
 8002f24:	e003      	b.n	8002f2e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002f26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f28:	fab3 f383 	clz	r3, r3
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	3301      	adds	r3, #1
 8002f30:	f003 021f 	and.w	r2, r3, #31
 8002f34:	4613      	mov	r3, r2
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	4413      	add	r3, r2
 8002f3a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f3c:	430b      	orrs	r3, r1
 8002f3e:	e07e      	b.n	800303e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d107      	bne.n	8002f5c <HAL_ADC_ConfigChannel+0x5c8>
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	0e9b      	lsrs	r3, r3, #26
 8002f52:	3301      	adds	r3, #1
 8002f54:	069b      	lsls	r3, r3, #26
 8002f56:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f5a:	e015      	b.n	8002f88 <HAL_ADC_ConfigChannel+0x5f4>
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f64:	fa93 f3a3 	rbit	r3, r3
 8002f68:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f6c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d101      	bne.n	8002f78 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002f74:	2320      	movs	r3, #32
 8002f76:	e003      	b.n	8002f80 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f7a:	fab3 f383 	clz	r3, r3
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	3301      	adds	r3, #1
 8002f82:	069b      	lsls	r3, r3, #26
 8002f84:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d109      	bne.n	8002fa8 <HAL_ADC_ConfigChannel+0x614>
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	0e9b      	lsrs	r3, r3, #26
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	f003 031f 	and.w	r3, r3, #31
 8002fa0:	2101      	movs	r1, #1
 8002fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa6:	e017      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0x644>
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fae:	6a3b      	ldr	r3, [r7, #32]
 8002fb0:	fa93 f3a3 	rbit	r3, r3
 8002fb4:	61fb      	str	r3, [r7, #28]
  return result;
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002fc0:	2320      	movs	r3, #32
 8002fc2:	e003      	b.n	8002fcc <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc6:	fab3 f383 	clz	r3, r3
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	3301      	adds	r3, #1
 8002fce:	f003 031f 	and.w	r3, r3, #31
 8002fd2:	2101      	movs	r1, #1
 8002fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd8:	ea42 0103 	orr.w	r1, r2, r3
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d10d      	bne.n	8003004 <HAL_ADC_ConfigChannel+0x670>
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	0e9b      	lsrs	r3, r3, #26
 8002fee:	3301      	adds	r3, #1
 8002ff0:	f003 021f 	and.w	r2, r3, #31
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	4413      	add	r3, r2
 8002ffa:	3b1e      	subs	r3, #30
 8002ffc:	051b      	lsls	r3, r3, #20
 8002ffe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003002:	e01b      	b.n	800303c <HAL_ADC_ConfigChannel+0x6a8>
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	fa93 f3a3 	rbit	r3, r3
 8003010:	613b      	str	r3, [r7, #16]
  return result;
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d101      	bne.n	8003020 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800301c:	2320      	movs	r3, #32
 800301e:	e003      	b.n	8003028 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	fab3 f383 	clz	r3, r3
 8003026:	b2db      	uxtb	r3, r3
 8003028:	3301      	adds	r3, #1
 800302a:	f003 021f 	and.w	r2, r3, #31
 800302e:	4613      	mov	r3, r2
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	4413      	add	r3, r2
 8003034:	3b1e      	subs	r3, #30
 8003036:	051b      	lsls	r3, r3, #20
 8003038:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800303c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800303e:	683a      	ldr	r2, [r7, #0]
 8003040:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003042:	4619      	mov	r1, r3
 8003044:	f7fe ff55 	bl	8001ef2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	4b09      	ldr	r3, [pc, #36]	@ (8003074 <HAL_ADC_ConfigChannel+0x6e0>)
 800304e:	4013      	ands	r3, r2
 8003050:	2b00      	cmp	r3, #0
 8003052:	f000 80be 	beq.w	80031d2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800305e:	d004      	beq.n	800306a <HAL_ADC_ConfigChannel+0x6d6>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a04      	ldr	r2, [pc, #16]	@ (8003078 <HAL_ADC_ConfigChannel+0x6e4>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d10a      	bne.n	8003080 <HAL_ADC_ConfigChannel+0x6ec>
 800306a:	4b04      	ldr	r3, [pc, #16]	@ (800307c <HAL_ADC_ConfigChannel+0x6e8>)
 800306c:	e009      	b.n	8003082 <HAL_ADC_ConfigChannel+0x6ee>
 800306e:	bf00      	nop
 8003070:	407f0000 	.word	0x407f0000
 8003074:	80080000 	.word	0x80080000
 8003078:	50000100 	.word	0x50000100
 800307c:	50000300 	.word	0x50000300
 8003080:	4b59      	ldr	r3, [pc, #356]	@ (80031e8 <HAL_ADC_ConfigChannel+0x854>)
 8003082:	4618      	mov	r0, r3
 8003084:	f7fe fe4a 	bl	8001d1c <LL_ADC_GetCommonPathInternalCh>
 8003088:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a56      	ldr	r2, [pc, #344]	@ (80031ec <HAL_ADC_ConfigChannel+0x858>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d004      	beq.n	80030a0 <HAL_ADC_ConfigChannel+0x70c>
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a55      	ldr	r2, [pc, #340]	@ (80031f0 <HAL_ADC_ConfigChannel+0x85c>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d13a      	bne.n	8003116 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80030a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80030a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d134      	bne.n	8003116 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030b4:	d005      	beq.n	80030c2 <HAL_ADC_ConfigChannel+0x72e>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a4e      	ldr	r2, [pc, #312]	@ (80031f4 <HAL_ADC_ConfigChannel+0x860>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	f040 8085 	bne.w	80031cc <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030ca:	d004      	beq.n	80030d6 <HAL_ADC_ConfigChannel+0x742>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a49      	ldr	r2, [pc, #292]	@ (80031f8 <HAL_ADC_ConfigChannel+0x864>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d101      	bne.n	80030da <HAL_ADC_ConfigChannel+0x746>
 80030d6:	4a49      	ldr	r2, [pc, #292]	@ (80031fc <HAL_ADC_ConfigChannel+0x868>)
 80030d8:	e000      	b.n	80030dc <HAL_ADC_ConfigChannel+0x748>
 80030da:	4a43      	ldr	r2, [pc, #268]	@ (80031e8 <HAL_ADC_ConfigChannel+0x854>)
 80030dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80030e0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80030e4:	4619      	mov	r1, r3
 80030e6:	4610      	mov	r0, r2
 80030e8:	f7fe fe05 	bl	8001cf6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030ec:	4b44      	ldr	r3, [pc, #272]	@ (8003200 <HAL_ADC_ConfigChannel+0x86c>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	099b      	lsrs	r3, r3, #6
 80030f2:	4a44      	ldr	r2, [pc, #272]	@ (8003204 <HAL_ADC_ConfigChannel+0x870>)
 80030f4:	fba2 2303 	umull	r2, r3, r2, r3
 80030f8:	099b      	lsrs	r3, r3, #6
 80030fa:	1c5a      	adds	r2, r3, #1
 80030fc:	4613      	mov	r3, r2
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	4413      	add	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003106:	e002      	b.n	800310e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	3b01      	subs	r3, #1
 800310c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1f9      	bne.n	8003108 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003114:	e05a      	b.n	80031cc <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a3b      	ldr	r2, [pc, #236]	@ (8003208 <HAL_ADC_ConfigChannel+0x874>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d125      	bne.n	800316c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003120:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003124:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d11f      	bne.n	800316c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a31      	ldr	r2, [pc, #196]	@ (80031f8 <HAL_ADC_ConfigChannel+0x864>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d104      	bne.n	8003140 <HAL_ADC_ConfigChannel+0x7ac>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a34      	ldr	r2, [pc, #208]	@ (800320c <HAL_ADC_ConfigChannel+0x878>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d047      	beq.n	80031d0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003148:	d004      	beq.n	8003154 <HAL_ADC_ConfigChannel+0x7c0>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a2a      	ldr	r2, [pc, #168]	@ (80031f8 <HAL_ADC_ConfigChannel+0x864>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d101      	bne.n	8003158 <HAL_ADC_ConfigChannel+0x7c4>
 8003154:	4a29      	ldr	r2, [pc, #164]	@ (80031fc <HAL_ADC_ConfigChannel+0x868>)
 8003156:	e000      	b.n	800315a <HAL_ADC_ConfigChannel+0x7c6>
 8003158:	4a23      	ldr	r2, [pc, #140]	@ (80031e8 <HAL_ADC_ConfigChannel+0x854>)
 800315a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800315e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003162:	4619      	mov	r1, r3
 8003164:	4610      	mov	r0, r2
 8003166:	f7fe fdc6 	bl	8001cf6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800316a:	e031      	b.n	80031d0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a27      	ldr	r2, [pc, #156]	@ (8003210 <HAL_ADC_ConfigChannel+0x87c>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d12d      	bne.n	80031d2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003176:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800317a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d127      	bne.n	80031d2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a1c      	ldr	r2, [pc, #112]	@ (80031f8 <HAL_ADC_ConfigChannel+0x864>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d022      	beq.n	80031d2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003194:	d004      	beq.n	80031a0 <HAL_ADC_ConfigChannel+0x80c>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a17      	ldr	r2, [pc, #92]	@ (80031f8 <HAL_ADC_ConfigChannel+0x864>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d101      	bne.n	80031a4 <HAL_ADC_ConfigChannel+0x810>
 80031a0:	4a16      	ldr	r2, [pc, #88]	@ (80031fc <HAL_ADC_ConfigChannel+0x868>)
 80031a2:	e000      	b.n	80031a6 <HAL_ADC_ConfigChannel+0x812>
 80031a4:	4a10      	ldr	r2, [pc, #64]	@ (80031e8 <HAL_ADC_ConfigChannel+0x854>)
 80031a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031aa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80031ae:	4619      	mov	r1, r3
 80031b0:	4610      	mov	r0, r2
 80031b2:	f7fe fda0 	bl	8001cf6 <LL_ADC_SetCommonPathInternalCh>
 80031b6:	e00c      	b.n	80031d2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031bc:	f043 0220 	orr.w	r2, r3, #32
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80031ca:	e002      	b.n	80031d2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031cc:	bf00      	nop
 80031ce:	e000      	b.n	80031d2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031d0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80031da:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80031de:	4618      	mov	r0, r3
 80031e0:	37d8      	adds	r7, #216	@ 0xd8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	50000700 	.word	0x50000700
 80031ec:	c3210000 	.word	0xc3210000
 80031f0:	90c00010 	.word	0x90c00010
 80031f4:	50000600 	.word	0x50000600
 80031f8:	50000100 	.word	0x50000100
 80031fc:	50000300 	.word	0x50000300
 8003200:	20000028 	.word	0x20000028
 8003204:	053e2d63 	.word	0x053e2d63
 8003208:	c7520000 	.word	0xc7520000
 800320c:	50000500 	.word	0x50000500
 8003210:	cb840000 	.word	0xcb840000

08003214 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b088      	sub	sp, #32
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800321e:	2300      	movs	r3, #0
 8003220:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f7fe ff90 	bl	8002150 <LL_ADC_REG_IsConversionOngoing>
 8003230:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f7fe ffb1 	bl	800219e <LL_ADC_INJ_IsConversionOngoing>
 800323c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d103      	bne.n	800324c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2b00      	cmp	r3, #0
 8003248:	f000 8098 	beq.w	800337c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d02a      	beq.n	80032b0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	7f5b      	ldrb	r3, [r3, #29]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d126      	bne.n	80032b0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	7f1b      	ldrb	r3, [r3, #28]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d122      	bne.n	80032b0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800326a:	2301      	movs	r3, #1
 800326c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800326e:	e014      	b.n	800329a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	4a45      	ldr	r2, [pc, #276]	@ (8003388 <ADC_ConversionStop+0x174>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d90d      	bls.n	8003294 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800327c:	f043 0210 	orr.w	r2, r3, #16
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003288:	f043 0201 	orr.w	r2, r3, #1
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e074      	b.n	800337e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	3301      	adds	r3, #1
 8003298:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032a4:	2b40      	cmp	r3, #64	@ 0x40
 80032a6:	d1e3      	bne.n	8003270 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2240      	movs	r2, #64	@ 0x40
 80032ae:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d014      	beq.n	80032e0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7fe ff48 	bl	8002150 <LL_ADC_REG_IsConversionOngoing>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00c      	beq.n	80032e0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7fe ff05 	bl	80020da <LL_ADC_IsDisableOngoing>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d104      	bne.n	80032e0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f7fe ff24 	bl	8002128 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d014      	beq.n	8003310 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7fe ff57 	bl	800219e <LL_ADC_INJ_IsConversionOngoing>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00c      	beq.n	8003310 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7fe feed 	bl	80020da <LL_ADC_IsDisableOngoing>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d104      	bne.n	8003310 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4618      	mov	r0, r3
 800330c:	f7fe ff33 	bl	8002176 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	2b02      	cmp	r3, #2
 8003314:	d005      	beq.n	8003322 <ADC_ConversionStop+0x10e>
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	2b03      	cmp	r3, #3
 800331a:	d105      	bne.n	8003328 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800331c:	230c      	movs	r3, #12
 800331e:	617b      	str	r3, [r7, #20]
        break;
 8003320:	e005      	b.n	800332e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003322:	2308      	movs	r3, #8
 8003324:	617b      	str	r3, [r7, #20]
        break;
 8003326:	e002      	b.n	800332e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003328:	2304      	movs	r3, #4
 800332a:	617b      	str	r3, [r7, #20]
        break;
 800332c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800332e:	f7fe fca1 	bl	8001c74 <HAL_GetTick>
 8003332:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003334:	e01b      	b.n	800336e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003336:	f7fe fc9d 	bl	8001c74 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b05      	cmp	r3, #5
 8003342:	d914      	bls.n	800336e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	689a      	ldr	r2, [r3, #8]
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	4013      	ands	r3, r2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00d      	beq.n	800336e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003356:	f043 0210 	orr.w	r2, r3, #16
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003362:	f043 0201 	orr.w	r2, r3, #1
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e007      	b.n	800337e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689a      	ldr	r2, [r3, #8]
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	4013      	ands	r3, r2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1dc      	bne.n	8003336 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3720      	adds	r7, #32
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	a33fffff 	.word	0xa33fffff

0800338c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003394:	2300      	movs	r3, #0
 8003396:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4618      	mov	r0, r3
 800339e:	f7fe fe89 	bl	80020b4 <LL_ADC_IsEnabled>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d176      	bne.n	8003496 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689a      	ldr	r2, [r3, #8]
 80033ae:	4b3c      	ldr	r3, [pc, #240]	@ (80034a0 <ADC_Enable+0x114>)
 80033b0:	4013      	ands	r3, r2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00d      	beq.n	80033d2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ba:	f043 0210 	orr.w	r2, r3, #16
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033c6:	f043 0201 	orr.w	r2, r3, #1
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e062      	b.n	8003498 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fe fe44 	bl	8002064 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033e4:	d004      	beq.n	80033f0 <ADC_Enable+0x64>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a2e      	ldr	r2, [pc, #184]	@ (80034a4 <ADC_Enable+0x118>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d101      	bne.n	80033f4 <ADC_Enable+0x68>
 80033f0:	4b2d      	ldr	r3, [pc, #180]	@ (80034a8 <ADC_Enable+0x11c>)
 80033f2:	e000      	b.n	80033f6 <ADC_Enable+0x6a>
 80033f4:	4b2d      	ldr	r3, [pc, #180]	@ (80034ac <ADC_Enable+0x120>)
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7fe fc90 	bl	8001d1c <LL_ADC_GetCommonPathInternalCh>
 80033fc:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80033fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003402:	2b00      	cmp	r3, #0
 8003404:	d013      	beq.n	800342e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003406:	4b2a      	ldr	r3, [pc, #168]	@ (80034b0 <ADC_Enable+0x124>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	099b      	lsrs	r3, r3, #6
 800340c:	4a29      	ldr	r2, [pc, #164]	@ (80034b4 <ADC_Enable+0x128>)
 800340e:	fba2 2303 	umull	r2, r3, r2, r3
 8003412:	099b      	lsrs	r3, r3, #6
 8003414:	1c5a      	adds	r2, r3, #1
 8003416:	4613      	mov	r3, r2
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	4413      	add	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003420:	e002      	b.n	8003428 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	3b01      	subs	r3, #1
 8003426:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1f9      	bne.n	8003422 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800342e:	f7fe fc21 	bl	8001c74 <HAL_GetTick>
 8003432:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003434:	e028      	b.n	8003488 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4618      	mov	r0, r3
 800343c:	f7fe fe3a 	bl	80020b4 <LL_ADC_IsEnabled>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d104      	bne.n	8003450 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4618      	mov	r0, r3
 800344c:	f7fe fe0a 	bl	8002064 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003450:	f7fe fc10 	bl	8001c74 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d914      	bls.n	8003488 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	2b01      	cmp	r3, #1
 800346a:	d00d      	beq.n	8003488 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003470:	f043 0210 	orr.w	r2, r3, #16
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800347c:	f043 0201 	orr.w	r2, r3, #1
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e007      	b.n	8003498 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b01      	cmp	r3, #1
 8003494:	d1cf      	bne.n	8003436 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3710      	adds	r7, #16
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	8000003f 	.word	0x8000003f
 80034a4:	50000100 	.word	0x50000100
 80034a8:	50000300 	.word	0x50000300
 80034ac:	50000700 	.word	0x50000700
 80034b0:	20000028 	.word	0x20000028
 80034b4:	053e2d63 	.word	0x053e2d63

080034b8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7fe fe08 	bl	80020da <LL_ADC_IsDisableOngoing>
 80034ca:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7fe fdef 	bl	80020b4 <LL_ADC_IsEnabled>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d047      	beq.n	800356c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d144      	bne.n	800356c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f003 030d 	and.w	r3, r3, #13
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d10c      	bne.n	800350a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7fe fdc9 	bl	800208c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2203      	movs	r2, #3
 8003500:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003502:	f7fe fbb7 	bl	8001c74 <HAL_GetTick>
 8003506:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003508:	e029      	b.n	800355e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800350e:	f043 0210 	orr.w	r2, r3, #16
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800351a:	f043 0201 	orr.w	r2, r3, #1
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e023      	b.n	800356e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003526:	f7fe fba5 	bl	8001c74 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b02      	cmp	r3, #2
 8003532:	d914      	bls.n	800355e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00d      	beq.n	800355e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003546:	f043 0210 	orr.w	r2, r3, #16
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003552:	f043 0201 	orr.w	r2, r3, #1
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e007      	b.n	800356e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1dc      	bne.n	8003526 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <LL_ADC_IsEnabled>:
{
 8003576:	b480      	push	{r7}
 8003578:	b083      	sub	sp, #12
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b01      	cmp	r3, #1
 8003588:	d101      	bne.n	800358e <LL_ADC_IsEnabled+0x18>
 800358a:	2301      	movs	r3, #1
 800358c:	e000      	b.n	8003590 <LL_ADC_IsEnabled+0x1a>
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <LL_ADC_StartCalibration>:
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80035ae:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80035b8:	4313      	orrs	r3, r2
 80035ba:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	609a      	str	r2, [r3, #8]
}
 80035c2:	bf00      	nop
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr

080035ce <LL_ADC_IsCalibrationOnGoing>:
{
 80035ce:	b480      	push	{r7}
 80035d0:	b083      	sub	sp, #12
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80035de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80035e2:	d101      	bne.n	80035e8 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80035e4:	2301      	movs	r3, #1
 80035e6:	e000      	b.n	80035ea <LL_ADC_IsCalibrationOnGoing+0x1c>
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <LL_ADC_REG_IsConversionOngoing>:
{
 80035f6:	b480      	push	{r7}
 80035f8:	b083      	sub	sp, #12
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f003 0304 	and.w	r3, r3, #4
 8003606:	2b04      	cmp	r3, #4
 8003608:	d101      	bne.n	800360e <LL_ADC_REG_IsConversionOngoing+0x18>
 800360a:	2301      	movs	r3, #1
 800360c:	e000      	b.n	8003610 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003626:	2300      	movs	r3, #0
 8003628:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003630:	2b01      	cmp	r3, #1
 8003632:	d101      	bne.n	8003638 <HAL_ADCEx_Calibration_Start+0x1c>
 8003634:	2302      	movs	r3, #2
 8003636:	e04d      	b.n	80036d4 <HAL_ADCEx_Calibration_Start+0xb8>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f7ff ff39 	bl	80034b8 <ADC_Disable>
 8003646:	4603      	mov	r3, r0
 8003648:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800364a:	7bfb      	ldrb	r3, [r7, #15]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d136      	bne.n	80036be <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003654:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003658:	f023 0302 	bic.w	r3, r3, #2
 800365c:	f043 0202 	orr.w	r2, r3, #2
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6839      	ldr	r1, [r7, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f7ff ff96 	bl	800359c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003670:	e014      	b.n	800369c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	3301      	adds	r3, #1
 8003676:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	4a18      	ldr	r2, [pc, #96]	@ (80036dc <HAL_ADCEx_Calibration_Start+0xc0>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d90d      	bls.n	800369c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003684:	f023 0312 	bic.w	r3, r3, #18
 8003688:	f043 0210 	orr.w	r2, r3, #16
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e01b      	b.n	80036d4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7ff ff94 	bl	80035ce <LL_ADC_IsCalibrationOnGoing>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1e2      	bne.n	8003672 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036b0:	f023 0303 	bic.w	r3, r3, #3
 80036b4:	f043 0201 	orr.w	r2, r3, #1
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	65da      	str	r2, [r3, #92]	@ 0x5c
 80036bc:	e005      	b.n	80036ca <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036c2:	f043 0210 	orr.w	r2, r3, #16
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80036d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	0004de01 	.word	0x0004de01

080036e0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80036e0:	b590      	push	{r4, r7, lr}
 80036e2:	b0a1      	sub	sp, #132	@ 0x84
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036ea:	2300      	movs	r3, #0
 80036ec:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d101      	bne.n	80036fe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80036fa:	2302      	movs	r3, #2
 80036fc:	e0e7      	b.n	80038ce <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003706:	2300      	movs	r3, #0
 8003708:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800370a:	2300      	movs	r3, #0
 800370c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003716:	d102      	bne.n	800371e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003718:	4b6f      	ldr	r3, [pc, #444]	@ (80038d8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800371a:	60bb      	str	r3, [r7, #8]
 800371c:	e009      	b.n	8003732 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a6e      	ldr	r2, [pc, #440]	@ (80038dc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d102      	bne.n	800372e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003728:	4b6d      	ldr	r3, [pc, #436]	@ (80038e0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800372a:	60bb      	str	r3, [r7, #8]
 800372c:	e001      	b.n	8003732 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800372e:	2300      	movs	r3, #0
 8003730:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10b      	bne.n	8003750 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800373c:	f043 0220 	orr.w	r2, r3, #32
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e0be      	b.n	80038ce <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	4618      	mov	r0, r3
 8003754:	f7ff ff4f 	bl	80035f6 <LL_ADC_REG_IsConversionOngoing>
 8003758:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4618      	mov	r0, r3
 8003760:	f7ff ff49 	bl	80035f6 <LL_ADC_REG_IsConversionOngoing>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	f040 80a0 	bne.w	80038ac <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800376c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800376e:	2b00      	cmp	r3, #0
 8003770:	f040 809c 	bne.w	80038ac <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800377c:	d004      	beq.n	8003788 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a55      	ldr	r2, [pc, #340]	@ (80038d8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d101      	bne.n	800378c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003788:	4b56      	ldr	r3, [pc, #344]	@ (80038e4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800378a:	e000      	b.n	800378e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800378c:	4b56      	ldr	r3, [pc, #344]	@ (80038e8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800378e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d04b      	beq.n	8003830 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003798:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	6859      	ldr	r1, [r3, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80037aa:	035b      	lsls	r3, r3, #13
 80037ac:	430b      	orrs	r3, r1
 80037ae:	431a      	orrs	r2, r3
 80037b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037b2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037bc:	d004      	beq.n	80037c8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a45      	ldr	r2, [pc, #276]	@ (80038d8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d10f      	bne.n	80037e8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80037c8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80037cc:	f7ff fed3 	bl	8003576 <LL_ADC_IsEnabled>
 80037d0:	4604      	mov	r4, r0
 80037d2:	4841      	ldr	r0, [pc, #260]	@ (80038d8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80037d4:	f7ff fecf 	bl	8003576 <LL_ADC_IsEnabled>
 80037d8:	4603      	mov	r3, r0
 80037da:	4323      	orrs	r3, r4
 80037dc:	2b00      	cmp	r3, #0
 80037de:	bf0c      	ite	eq
 80037e0:	2301      	moveq	r3, #1
 80037e2:	2300      	movne	r3, #0
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	e012      	b.n	800380e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80037e8:	483c      	ldr	r0, [pc, #240]	@ (80038dc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80037ea:	f7ff fec4 	bl	8003576 <LL_ADC_IsEnabled>
 80037ee:	4604      	mov	r4, r0
 80037f0:	483b      	ldr	r0, [pc, #236]	@ (80038e0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80037f2:	f7ff fec0 	bl	8003576 <LL_ADC_IsEnabled>
 80037f6:	4603      	mov	r3, r0
 80037f8:	431c      	orrs	r4, r3
 80037fa:	483c      	ldr	r0, [pc, #240]	@ (80038ec <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80037fc:	f7ff febb 	bl	8003576 <LL_ADC_IsEnabled>
 8003800:	4603      	mov	r3, r0
 8003802:	4323      	orrs	r3, r4
 8003804:	2b00      	cmp	r3, #0
 8003806:	bf0c      	ite	eq
 8003808:	2301      	moveq	r3, #1
 800380a:	2300      	movne	r3, #0
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d056      	beq.n	80038c0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003812:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800381a:	f023 030f 	bic.w	r3, r3, #15
 800381e:	683a      	ldr	r2, [r7, #0]
 8003820:	6811      	ldr	r1, [r2, #0]
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	6892      	ldr	r2, [r2, #8]
 8003826:	430a      	orrs	r2, r1
 8003828:	431a      	orrs	r2, r3
 800382a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800382c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800382e:	e047      	b.n	80038c0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003830:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003838:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800383a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003844:	d004      	beq.n	8003850 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a23      	ldr	r2, [pc, #140]	@ (80038d8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d10f      	bne.n	8003870 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003850:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003854:	f7ff fe8f 	bl	8003576 <LL_ADC_IsEnabled>
 8003858:	4604      	mov	r4, r0
 800385a:	481f      	ldr	r0, [pc, #124]	@ (80038d8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800385c:	f7ff fe8b 	bl	8003576 <LL_ADC_IsEnabled>
 8003860:	4603      	mov	r3, r0
 8003862:	4323      	orrs	r3, r4
 8003864:	2b00      	cmp	r3, #0
 8003866:	bf0c      	ite	eq
 8003868:	2301      	moveq	r3, #1
 800386a:	2300      	movne	r3, #0
 800386c:	b2db      	uxtb	r3, r3
 800386e:	e012      	b.n	8003896 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003870:	481a      	ldr	r0, [pc, #104]	@ (80038dc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003872:	f7ff fe80 	bl	8003576 <LL_ADC_IsEnabled>
 8003876:	4604      	mov	r4, r0
 8003878:	4819      	ldr	r0, [pc, #100]	@ (80038e0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800387a:	f7ff fe7c 	bl	8003576 <LL_ADC_IsEnabled>
 800387e:	4603      	mov	r3, r0
 8003880:	431c      	orrs	r4, r3
 8003882:	481a      	ldr	r0, [pc, #104]	@ (80038ec <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003884:	f7ff fe77 	bl	8003576 <LL_ADC_IsEnabled>
 8003888:	4603      	mov	r3, r0
 800388a:	4323      	orrs	r3, r4
 800388c:	2b00      	cmp	r3, #0
 800388e:	bf0c      	ite	eq
 8003890:	2301      	moveq	r3, #1
 8003892:	2300      	movne	r3, #0
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d012      	beq.n	80038c0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800389a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80038a2:	f023 030f 	bic.w	r3, r3, #15
 80038a6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80038a8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80038aa:	e009      	b.n	80038c0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038b0:	f043 0220 	orr.w	r2, r3, #32
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80038be:	e000      	b.n	80038c2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80038c0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80038ca:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3784      	adds	r7, #132	@ 0x84
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd90      	pop	{r4, r7, pc}
 80038d6:	bf00      	nop
 80038d8:	50000100 	.word	0x50000100
 80038dc:	50000400 	.word	0x50000400
 80038e0:	50000500 	.word	0x50000500
 80038e4:	50000300 	.word	0x50000300
 80038e8:	50000700 	.word	0x50000700
 80038ec:	50000600 	.word	0x50000600

080038f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f003 0307 	and.w	r3, r3, #7
 80038fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003900:	4b0c      	ldr	r3, [pc, #48]	@ (8003934 <__NVIC_SetPriorityGrouping+0x44>)
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800390c:	4013      	ands	r3, r2
 800390e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003918:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800391c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003920:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003922:	4a04      	ldr	r2, [pc, #16]	@ (8003934 <__NVIC_SetPriorityGrouping+0x44>)
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	60d3      	str	r3, [r2, #12]
}
 8003928:	bf00      	nop
 800392a:	3714      	adds	r7, #20
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr
 8003934:	e000ed00 	.word	0xe000ed00

08003938 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800393c:	4b04      	ldr	r3, [pc, #16]	@ (8003950 <__NVIC_GetPriorityGrouping+0x18>)
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	0a1b      	lsrs	r3, r3, #8
 8003942:	f003 0307 	and.w	r3, r3, #7
}
 8003946:	4618      	mov	r0, r3
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr
 8003950:	e000ed00 	.word	0xe000ed00

08003954 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	4603      	mov	r3, r0
 800395c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800395e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003962:	2b00      	cmp	r3, #0
 8003964:	db0b      	blt.n	800397e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003966:	79fb      	ldrb	r3, [r7, #7]
 8003968:	f003 021f 	and.w	r2, r3, #31
 800396c:	4907      	ldr	r1, [pc, #28]	@ (800398c <__NVIC_EnableIRQ+0x38>)
 800396e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003972:	095b      	lsrs	r3, r3, #5
 8003974:	2001      	movs	r0, #1
 8003976:	fa00 f202 	lsl.w	r2, r0, r2
 800397a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800397e:	bf00      	nop
 8003980:	370c      	adds	r7, #12
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	e000e100 	.word	0xe000e100

08003990 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	4603      	mov	r3, r0
 8003998:	6039      	str	r1, [r7, #0]
 800399a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800399c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	db0a      	blt.n	80039ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	b2da      	uxtb	r2, r3
 80039a8:	490c      	ldr	r1, [pc, #48]	@ (80039dc <__NVIC_SetPriority+0x4c>)
 80039aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ae:	0112      	lsls	r2, r2, #4
 80039b0:	b2d2      	uxtb	r2, r2
 80039b2:	440b      	add	r3, r1
 80039b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039b8:	e00a      	b.n	80039d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	b2da      	uxtb	r2, r3
 80039be:	4908      	ldr	r1, [pc, #32]	@ (80039e0 <__NVIC_SetPriority+0x50>)
 80039c0:	79fb      	ldrb	r3, [r7, #7]
 80039c2:	f003 030f 	and.w	r3, r3, #15
 80039c6:	3b04      	subs	r3, #4
 80039c8:	0112      	lsls	r2, r2, #4
 80039ca:	b2d2      	uxtb	r2, r2
 80039cc:	440b      	add	r3, r1
 80039ce:	761a      	strb	r2, [r3, #24]
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr
 80039dc:	e000e100 	.word	0xe000e100
 80039e0:	e000ed00 	.word	0xe000ed00

080039e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b089      	sub	sp, #36	@ 0x24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f003 0307 	and.w	r3, r3, #7
 80039f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	f1c3 0307 	rsb	r3, r3, #7
 80039fe:	2b04      	cmp	r3, #4
 8003a00:	bf28      	it	cs
 8003a02:	2304      	movcs	r3, #4
 8003a04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	3304      	adds	r3, #4
 8003a0a:	2b06      	cmp	r3, #6
 8003a0c:	d902      	bls.n	8003a14 <NVIC_EncodePriority+0x30>
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	3b03      	subs	r3, #3
 8003a12:	e000      	b.n	8003a16 <NVIC_EncodePriority+0x32>
 8003a14:	2300      	movs	r3, #0
 8003a16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a18:	f04f 32ff 	mov.w	r2, #4294967295
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a22:	43da      	mvns	r2, r3
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	401a      	ands	r2, r3
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	fa01 f303 	lsl.w	r3, r1, r3
 8003a36:	43d9      	mvns	r1, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a3c:	4313      	orrs	r3, r2
         );
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3724      	adds	r7, #36	@ 0x24
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
	...

08003a4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	3b01      	subs	r3, #1
 8003a58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a5c:	d301      	bcc.n	8003a62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e00f      	b.n	8003a82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a62:	4a0a      	ldr	r2, [pc, #40]	@ (8003a8c <SysTick_Config+0x40>)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	3b01      	subs	r3, #1
 8003a68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a6a:	210f      	movs	r1, #15
 8003a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a70:	f7ff ff8e 	bl	8003990 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a74:	4b05      	ldr	r3, [pc, #20]	@ (8003a8c <SysTick_Config+0x40>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a7a:	4b04      	ldr	r3, [pc, #16]	@ (8003a8c <SysTick_Config+0x40>)
 8003a7c:	2207      	movs	r2, #7
 8003a7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3708      	adds	r7, #8
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	e000e010 	.word	0xe000e010

08003a90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f7ff ff29 	bl	80038f0 <__NVIC_SetPriorityGrouping>
}
 8003a9e:	bf00      	nop
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b086      	sub	sp, #24
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	4603      	mov	r3, r0
 8003aae:	60b9      	str	r1, [r7, #8]
 8003ab0:	607a      	str	r2, [r7, #4]
 8003ab2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ab4:	f7ff ff40 	bl	8003938 <__NVIC_GetPriorityGrouping>
 8003ab8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	68b9      	ldr	r1, [r7, #8]
 8003abe:	6978      	ldr	r0, [r7, #20]
 8003ac0:	f7ff ff90 	bl	80039e4 <NVIC_EncodePriority>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aca:	4611      	mov	r1, r2
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7ff ff5f 	bl	8003990 <__NVIC_SetPriority>
}
 8003ad2:	bf00      	nop
 8003ad4:	3718      	adds	r7, #24
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b082      	sub	sp, #8
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7ff ff33 	bl	8003954 <__NVIC_EnableIRQ>
}
 8003aee:	bf00      	nop
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b082      	sub	sp, #8
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7ff ffa4 	bl	8003a4c <SysTick_Config>
 8003b04:	4603      	mov	r3, r0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3708      	adds	r7, #8
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
	...

08003b10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e08d      	b.n	8003c3e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	461a      	mov	r2, r3
 8003b28:	4b47      	ldr	r3, [pc, #284]	@ (8003c48 <HAL_DMA_Init+0x138>)
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d80f      	bhi.n	8003b4e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	461a      	mov	r2, r3
 8003b34:	4b45      	ldr	r3, [pc, #276]	@ (8003c4c <HAL_DMA_Init+0x13c>)
 8003b36:	4413      	add	r3, r2
 8003b38:	4a45      	ldr	r2, [pc, #276]	@ (8003c50 <HAL_DMA_Init+0x140>)
 8003b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3e:	091b      	lsrs	r3, r3, #4
 8003b40:	009a      	lsls	r2, r3, #2
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a42      	ldr	r2, [pc, #264]	@ (8003c54 <HAL_DMA_Init+0x144>)
 8003b4a:	641a      	str	r2, [r3, #64]	@ 0x40
 8003b4c:	e00e      	b.n	8003b6c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	461a      	mov	r2, r3
 8003b54:	4b40      	ldr	r3, [pc, #256]	@ (8003c58 <HAL_DMA_Init+0x148>)
 8003b56:	4413      	add	r3, r2
 8003b58:	4a3d      	ldr	r2, [pc, #244]	@ (8003c50 <HAL_DMA_Init+0x140>)
 8003b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5e:	091b      	lsrs	r3, r3, #4
 8003b60:	009a      	lsls	r2, r3, #2
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a3c      	ldr	r2, [pc, #240]	@ (8003c5c <HAL_DMA_Init+0x14c>)
 8003b6a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2202      	movs	r2, #2
 8003b70:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003b82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b86:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003b90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ba8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 f8fe 	bl	8003dc0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003bcc:	d102      	bne.n	8003bd4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685a      	ldr	r2, [r3, #4]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bdc:	b2d2      	uxtb	r2, r2
 8003bde:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003be8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d010      	beq.n	8003c14 <HAL_DMA_Init+0x104>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	2b04      	cmp	r3, #4
 8003bf8:	d80c      	bhi.n	8003c14 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f91e 	bl	8003e3c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c04:	2200      	movs	r2, #0
 8003c06:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003c10:	605a      	str	r2, [r3, #4]
 8003c12:	e008      	b.n	8003c26 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3710      	adds	r7, #16
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	40020407 	.word	0x40020407
 8003c4c:	bffdfff8 	.word	0xbffdfff8
 8003c50:	cccccccd 	.word	0xcccccccd
 8003c54:	40020000 	.word	0x40020000
 8003c58:	bffdfbf8 	.word	0xbffdfbf8
 8003c5c:	40020400 	.word	0x40020400

08003c60 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c7c:	f003 031f 	and.w	r3, r3, #31
 8003c80:	2204      	movs	r2, #4
 8003c82:	409a      	lsls	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	4013      	ands	r3, r2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d026      	beq.n	8003cda <HAL_DMA_IRQHandler+0x7a>
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	f003 0304 	and.w	r3, r3, #4
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d021      	beq.n	8003cda <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0320 	and.w	r3, r3, #32
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d107      	bne.n	8003cb4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f022 0204 	bic.w	r2, r2, #4
 8003cb2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cb8:	f003 021f 	and.w	r2, r3, #31
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc0:	2104      	movs	r1, #4
 8003cc2:	fa01 f202 	lsl.w	r2, r1, r2
 8003cc6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d071      	beq.n	8003db4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003cd8:	e06c      	b.n	8003db4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cde:	f003 031f 	and.w	r3, r3, #31
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	409a      	lsls	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	4013      	ands	r3, r2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d02e      	beq.n	8003d4c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d029      	beq.n	8003d4c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0320 	and.w	r3, r3, #32
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d10b      	bne.n	8003d1e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 020a 	bic.w	r2, r2, #10
 8003d14:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d22:	f003 021f 	and.w	r2, r3, #31
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2a:	2102      	movs	r1, #2
 8003d2c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d30:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d038      	beq.n	8003db4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003d4a:	e033      	b.n	8003db4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d50:	f003 031f 	and.w	r3, r3, #31
 8003d54:	2208      	movs	r2, #8
 8003d56:	409a      	lsls	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d02a      	beq.n	8003db6 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	f003 0308 	and.w	r3, r3, #8
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d025      	beq.n	8003db6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f022 020e 	bic.w	r2, r2, #14
 8003d78:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d7e:	f003 021f 	and.w	r2, r3, #31
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d86:	2101      	movs	r1, #1
 8003d88:	fa01 f202 	lsl.w	r2, r1, r2
 8003d8c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d004      	beq.n	8003db6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003db4:	bf00      	nop
 8003db6:	bf00      	nop
}
 8003db8:	3710      	adds	r7, #16
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
	...

08003dc0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b087      	sub	sp, #28
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	461a      	mov	r2, r3
 8003dce:	4b16      	ldr	r3, [pc, #88]	@ (8003e28 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d802      	bhi.n	8003dda <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003dd4:	4b15      	ldr	r3, [pc, #84]	@ (8003e2c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003dd6:	617b      	str	r3, [r7, #20]
 8003dd8:	e001      	b.n	8003dde <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003dda:	4b15      	ldr	r3, [pc, #84]	@ (8003e30 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003ddc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	3b08      	subs	r3, #8
 8003dea:	4a12      	ldr	r2, [pc, #72]	@ (8003e34 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003dec:	fba2 2303 	umull	r2, r3, r2, r3
 8003df0:	091b      	lsrs	r3, r3, #4
 8003df2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003df8:	089b      	lsrs	r3, r3, #2
 8003dfa:	009a      	lsls	r2, r3, #2
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	4413      	add	r3, r2
 8003e00:	461a      	mov	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a0b      	ldr	r2, [pc, #44]	@ (8003e38 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003e0a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f003 031f 	and.w	r3, r3, #31
 8003e12:	2201      	movs	r2, #1
 8003e14:	409a      	lsls	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003e1a:	bf00      	nop
 8003e1c:	371c      	adds	r7, #28
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	40020407 	.word	0x40020407
 8003e2c:	40020800 	.word	0x40020800
 8003e30:	40020820 	.word	0x40020820
 8003e34:	cccccccd 	.word	0xcccccccd
 8003e38:	40020880 	.word	0x40020880

08003e3c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	4b0b      	ldr	r3, [pc, #44]	@ (8003e7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003e50:	4413      	add	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	461a      	mov	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a08      	ldr	r2, [pc, #32]	@ (8003e80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003e5e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	3b01      	subs	r3, #1
 8003e64:	f003 031f 	and.w	r3, r3, #31
 8003e68:	2201      	movs	r2, #1
 8003e6a:	409a      	lsls	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003e70:	bf00      	nop
 8003e72:	3714      	adds	r7, #20
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr
 8003e7c:	1000823f 	.word	0x1000823f
 8003e80:	40020940 	.word	0x40020940

08003e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b087      	sub	sp, #28
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003e92:	e15a      	b.n	800414a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	2101      	movs	r1, #1
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f000 814c 	beq.w	8004144 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f003 0303 	and.w	r3, r3, #3
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d005      	beq.n	8003ec4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d130      	bne.n	8003f26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	2203      	movs	r2, #3
 8003ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed4:	43db      	mvns	r3, r3
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	4013      	ands	r3, r2
 8003eda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	68da      	ldr	r2, [r3, #12]
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003efa:	2201      	movs	r2, #1
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	fa02 f303 	lsl.w	r3, r2, r3
 8003f02:	43db      	mvns	r3, r3
 8003f04:	693a      	ldr	r2, [r7, #16]
 8003f06:	4013      	ands	r3, r2
 8003f08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	091b      	lsrs	r3, r3, #4
 8003f10:	f003 0201 	and.w	r2, r3, #1
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f003 0303 	and.w	r3, r3, #3
 8003f2e:	2b03      	cmp	r3, #3
 8003f30:	d017      	beq.n	8003f62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	005b      	lsls	r3, r3, #1
 8003f3c:	2203      	movs	r2, #3
 8003f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f42:	43db      	mvns	r3, r3
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	4013      	ands	r3, r2
 8003f48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	689a      	ldr	r2, [r3, #8]
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	fa02 f303 	lsl.w	r3, r2, r3
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f003 0303 	and.w	r3, r3, #3
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d123      	bne.n	8003fb6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	08da      	lsrs	r2, r3, #3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	3208      	adds	r2, #8
 8003f76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	f003 0307 	and.w	r3, r3, #7
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	220f      	movs	r2, #15
 8003f86:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8a:	43db      	mvns	r3, r3
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	4013      	ands	r3, r2
 8003f90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	691a      	ldr	r2, [r3, #16]
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	f003 0307 	and.w	r3, r3, #7
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	08da      	lsrs	r2, r3, #3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	3208      	adds	r2, #8
 8003fb0:	6939      	ldr	r1, [r7, #16]
 8003fb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	005b      	lsls	r3, r3, #1
 8003fc0:	2203      	movs	r2, #3
 8003fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc6:	43db      	mvns	r3, r3
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	4013      	ands	r3, r2
 8003fcc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f003 0203 	and.w	r2, r3, #3
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	fa02 f303 	lsl.w	r3, r2, r3
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	693a      	ldr	r2, [r7, #16]
 8003fe8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 80a6 	beq.w	8004144 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ff8:	4b5b      	ldr	r3, [pc, #364]	@ (8004168 <HAL_GPIO_Init+0x2e4>)
 8003ffa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ffc:	4a5a      	ldr	r2, [pc, #360]	@ (8004168 <HAL_GPIO_Init+0x2e4>)
 8003ffe:	f043 0301 	orr.w	r3, r3, #1
 8004002:	6613      	str	r3, [r2, #96]	@ 0x60
 8004004:	4b58      	ldr	r3, [pc, #352]	@ (8004168 <HAL_GPIO_Init+0x2e4>)
 8004006:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004008:	f003 0301 	and.w	r3, r3, #1
 800400c:	60bb      	str	r3, [r7, #8]
 800400e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004010:	4a56      	ldr	r2, [pc, #344]	@ (800416c <HAL_GPIO_Init+0x2e8>)
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	089b      	lsrs	r3, r3, #2
 8004016:	3302      	adds	r3, #2
 8004018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800401c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f003 0303 	and.w	r3, r3, #3
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	220f      	movs	r2, #15
 8004028:	fa02 f303 	lsl.w	r3, r2, r3
 800402c:	43db      	mvns	r3, r3
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	4013      	ands	r3, r2
 8004032:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800403a:	d01f      	beq.n	800407c <HAL_GPIO_Init+0x1f8>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a4c      	ldr	r2, [pc, #304]	@ (8004170 <HAL_GPIO_Init+0x2ec>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d019      	beq.n	8004078 <HAL_GPIO_Init+0x1f4>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a4b      	ldr	r2, [pc, #300]	@ (8004174 <HAL_GPIO_Init+0x2f0>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d013      	beq.n	8004074 <HAL_GPIO_Init+0x1f0>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a4a      	ldr	r2, [pc, #296]	@ (8004178 <HAL_GPIO_Init+0x2f4>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d00d      	beq.n	8004070 <HAL_GPIO_Init+0x1ec>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a49      	ldr	r2, [pc, #292]	@ (800417c <HAL_GPIO_Init+0x2f8>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d007      	beq.n	800406c <HAL_GPIO_Init+0x1e8>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a48      	ldr	r2, [pc, #288]	@ (8004180 <HAL_GPIO_Init+0x2fc>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d101      	bne.n	8004068 <HAL_GPIO_Init+0x1e4>
 8004064:	2305      	movs	r3, #5
 8004066:	e00a      	b.n	800407e <HAL_GPIO_Init+0x1fa>
 8004068:	2306      	movs	r3, #6
 800406a:	e008      	b.n	800407e <HAL_GPIO_Init+0x1fa>
 800406c:	2304      	movs	r3, #4
 800406e:	e006      	b.n	800407e <HAL_GPIO_Init+0x1fa>
 8004070:	2303      	movs	r3, #3
 8004072:	e004      	b.n	800407e <HAL_GPIO_Init+0x1fa>
 8004074:	2302      	movs	r3, #2
 8004076:	e002      	b.n	800407e <HAL_GPIO_Init+0x1fa>
 8004078:	2301      	movs	r3, #1
 800407a:	e000      	b.n	800407e <HAL_GPIO_Init+0x1fa>
 800407c:	2300      	movs	r3, #0
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	f002 0203 	and.w	r2, r2, #3
 8004084:	0092      	lsls	r2, r2, #2
 8004086:	4093      	lsls	r3, r2
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	4313      	orrs	r3, r2
 800408c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800408e:	4937      	ldr	r1, [pc, #220]	@ (800416c <HAL_GPIO_Init+0x2e8>)
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	089b      	lsrs	r3, r3, #2
 8004094:	3302      	adds	r3, #2
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800409c:	4b39      	ldr	r3, [pc, #228]	@ (8004184 <HAL_GPIO_Init+0x300>)
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	43db      	mvns	r3, r3
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	4013      	ands	r3, r2
 80040aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d003      	beq.n	80040c0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	4313      	orrs	r3, r2
 80040be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80040c0:	4a30      	ldr	r2, [pc, #192]	@ (8004184 <HAL_GPIO_Init+0x300>)
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80040c6:	4b2f      	ldr	r3, [pc, #188]	@ (8004184 <HAL_GPIO_Init+0x300>)
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	43db      	mvns	r3, r3
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	4013      	ands	r3, r2
 80040d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d003      	beq.n	80040ea <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80040ea:	4a26      	ldr	r2, [pc, #152]	@ (8004184 <HAL_GPIO_Init+0x300>)
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80040f0:	4b24      	ldr	r3, [pc, #144]	@ (8004184 <HAL_GPIO_Init+0x300>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	43db      	mvns	r3, r3
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	4013      	ands	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d003      	beq.n	8004114 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	4313      	orrs	r3, r2
 8004112:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004114:	4a1b      	ldr	r2, [pc, #108]	@ (8004184 <HAL_GPIO_Init+0x300>)
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800411a:	4b1a      	ldr	r3, [pc, #104]	@ (8004184 <HAL_GPIO_Init+0x300>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	43db      	mvns	r3, r3
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	4013      	ands	r3, r2
 8004128:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d003      	beq.n	800413e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	4313      	orrs	r3, r2
 800413c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800413e:	4a11      	ldr	r2, [pc, #68]	@ (8004184 <HAL_GPIO_Init+0x300>)
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	3301      	adds	r3, #1
 8004148:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	fa22 f303 	lsr.w	r3, r2, r3
 8004154:	2b00      	cmp	r3, #0
 8004156:	f47f ae9d 	bne.w	8003e94 <HAL_GPIO_Init+0x10>
  }
}
 800415a:	bf00      	nop
 800415c:	bf00      	nop
 800415e:	371c      	adds	r7, #28
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr
 8004168:	40021000 	.word	0x40021000
 800416c:	40010000 	.word	0x40010000
 8004170:	48000400 	.word	0x48000400
 8004174:	48000800 	.word	0x48000800
 8004178:	48000c00 	.word	0x48000c00
 800417c:	48001000 	.word	0x48001000
 8004180:	48001400 	.word	0x48001400
 8004184:	40010400 	.word	0x40010400

08004188 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	460b      	mov	r3, r1
 8004192:	807b      	strh	r3, [r7, #2]
 8004194:	4613      	mov	r3, r2
 8004196:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004198:	787b      	ldrb	r3, [r7, #1]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800419e:	887a      	ldrh	r2, [r7, #2]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80041a4:	e002      	b.n	80041ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80041a6:	887a      	ldrh	r2, [r7, #2]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	460b      	mov	r3, r1
 80041c2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	695b      	ldr	r3, [r3, #20]
 80041c8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80041ca:	887a      	ldrh	r2, [r7, #2]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	4013      	ands	r3, r2
 80041d0:	041a      	lsls	r2, r3, #16
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	43d9      	mvns	r1, r3
 80041d6:	887b      	ldrh	r3, [r7, #2]
 80041d8:	400b      	ands	r3, r1
 80041da:	431a      	orrs	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	619a      	str	r2, [r3, #24]
}
 80041e0:	bf00      	nop
 80041e2:	3714      	adds	r7, #20
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	4603      	mov	r3, r0
 80041f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80041f6:	4b08      	ldr	r3, [pc, #32]	@ (8004218 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041f8:	695a      	ldr	r2, [r3, #20]
 80041fa:	88fb      	ldrh	r3, [r7, #6]
 80041fc:	4013      	ands	r3, r2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d006      	beq.n	8004210 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004202:	4a05      	ldr	r2, [pc, #20]	@ (8004218 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004204:	88fb      	ldrh	r3, [r7, #6]
 8004206:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004208:	88fb      	ldrh	r3, [r7, #6]
 800420a:	4618      	mov	r0, r3
 800420c:	f7fd fa8e 	bl	800172c <HAL_GPIO_EXTI_Callback>
  }
}
 8004210:	bf00      	nop
 8004212:	3708      	adds	r7, #8
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	40010400 	.word	0x40010400

0800421c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d141      	bne.n	80042ae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800422a:	4b4b      	ldr	r3, [pc, #300]	@ (8004358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004232:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004236:	d131      	bne.n	800429c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004238:	4b47      	ldr	r3, [pc, #284]	@ (8004358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800423a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800423e:	4a46      	ldr	r2, [pc, #280]	@ (8004358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004240:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004244:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004248:	4b43      	ldr	r3, [pc, #268]	@ (8004358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004250:	4a41      	ldr	r2, [pc, #260]	@ (8004358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004252:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004256:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004258:	4b40      	ldr	r3, [pc, #256]	@ (800435c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2232      	movs	r2, #50	@ 0x32
 800425e:	fb02 f303 	mul.w	r3, r2, r3
 8004262:	4a3f      	ldr	r2, [pc, #252]	@ (8004360 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004264:	fba2 2303 	umull	r2, r3, r2, r3
 8004268:	0c9b      	lsrs	r3, r3, #18
 800426a:	3301      	adds	r3, #1
 800426c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800426e:	e002      	b.n	8004276 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	3b01      	subs	r3, #1
 8004274:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004276:	4b38      	ldr	r3, [pc, #224]	@ (8004358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800427e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004282:	d102      	bne.n	800428a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1f2      	bne.n	8004270 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800428a:	4b33      	ldr	r3, [pc, #204]	@ (8004358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004292:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004296:	d158      	bne.n	800434a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e057      	b.n	800434c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800429c:	4b2e      	ldr	r3, [pc, #184]	@ (8004358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800429e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042a2:	4a2d      	ldr	r2, [pc, #180]	@ (8004358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80042ac:	e04d      	b.n	800434a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042b4:	d141      	bne.n	800433a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80042b6:	4b28      	ldr	r3, [pc, #160]	@ (8004358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80042be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042c2:	d131      	bne.n	8004328 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80042c4:	4b24      	ldr	r3, [pc, #144]	@ (8004358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042ca:	4a23      	ldr	r2, [pc, #140]	@ (8004358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80042d4:	4b20      	ldr	r3, [pc, #128]	@ (8004358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80042dc:	4a1e      	ldr	r2, [pc, #120]	@ (8004358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80042e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80042e4:	4b1d      	ldr	r3, [pc, #116]	@ (800435c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2232      	movs	r2, #50	@ 0x32
 80042ea:	fb02 f303 	mul.w	r3, r2, r3
 80042ee:	4a1c      	ldr	r2, [pc, #112]	@ (8004360 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80042f0:	fba2 2303 	umull	r2, r3, r2, r3
 80042f4:	0c9b      	lsrs	r3, r3, #18
 80042f6:	3301      	adds	r3, #1
 80042f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042fa:	e002      	b.n	8004302 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	3b01      	subs	r3, #1
 8004300:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004302:	4b15      	ldr	r3, [pc, #84]	@ (8004358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800430a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800430e:	d102      	bne.n	8004316 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1f2      	bne.n	80042fc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004316:	4b10      	ldr	r3, [pc, #64]	@ (8004358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800431e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004322:	d112      	bne.n	800434a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e011      	b.n	800434c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004328:	4b0b      	ldr	r3, [pc, #44]	@ (8004358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800432a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800432e:	4a0a      	ldr	r2, [pc, #40]	@ (8004358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004330:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004334:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004338:	e007      	b.n	800434a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800433a:	4b07      	ldr	r3, [pc, #28]	@ (8004358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004342:	4a05      	ldr	r2, [pc, #20]	@ (8004358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004344:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004348:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	3714      	adds	r7, #20
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr
 8004358:	40007000 	.word	0x40007000
 800435c:	20000028 	.word	0x20000028
 8004360:	431bde83 	.word	0x431bde83

08004364 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004364:	b480      	push	{r7}
 8004366:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004368:	4b05      	ldr	r3, [pc, #20]	@ (8004380 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	4a04      	ldr	r2, [pc, #16]	@ (8004380 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800436e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004372:	6093      	str	r3, [r2, #8]
}
 8004374:	bf00      	nop
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	40007000 	.word	0x40007000

08004384 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b088      	sub	sp, #32
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e2fe      	b.n	8004994 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d075      	beq.n	800448e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043a2:	4b97      	ldr	r3, [pc, #604]	@ (8004600 <HAL_RCC_OscConfig+0x27c>)
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f003 030c 	and.w	r3, r3, #12
 80043aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043ac:	4b94      	ldr	r3, [pc, #592]	@ (8004600 <HAL_RCC_OscConfig+0x27c>)
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	f003 0303 	and.w	r3, r3, #3
 80043b4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	2b0c      	cmp	r3, #12
 80043ba:	d102      	bne.n	80043c2 <HAL_RCC_OscConfig+0x3e>
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	2b03      	cmp	r3, #3
 80043c0:	d002      	beq.n	80043c8 <HAL_RCC_OscConfig+0x44>
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	2b08      	cmp	r3, #8
 80043c6:	d10b      	bne.n	80043e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043c8:	4b8d      	ldr	r3, [pc, #564]	@ (8004600 <HAL_RCC_OscConfig+0x27c>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d05b      	beq.n	800448c <HAL_RCC_OscConfig+0x108>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d157      	bne.n	800448c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e2d9      	b.n	8004994 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043e8:	d106      	bne.n	80043f8 <HAL_RCC_OscConfig+0x74>
 80043ea:	4b85      	ldr	r3, [pc, #532]	@ (8004600 <HAL_RCC_OscConfig+0x27c>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a84      	ldr	r2, [pc, #528]	@ (8004600 <HAL_RCC_OscConfig+0x27c>)
 80043f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043f4:	6013      	str	r3, [r2, #0]
 80043f6:	e01d      	b.n	8004434 <HAL_RCC_OscConfig+0xb0>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004400:	d10c      	bne.n	800441c <HAL_RCC_OscConfig+0x98>
 8004402:	4b7f      	ldr	r3, [pc, #508]	@ (8004600 <HAL_RCC_OscConfig+0x27c>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a7e      	ldr	r2, [pc, #504]	@ (8004600 <HAL_RCC_OscConfig+0x27c>)
 8004408:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800440c:	6013      	str	r3, [r2, #0]
 800440e:	4b7c      	ldr	r3, [pc, #496]	@ (8004600 <HAL_RCC_OscConfig+0x27c>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a7b      	ldr	r2, [pc, #492]	@ (8004600 <HAL_RCC_OscConfig+0x27c>)
 8004414:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004418:	6013      	str	r3, [r2, #0]
 800441a:	e00b      	b.n	8004434 <HAL_RCC_OscConfig+0xb0>
 800441c:	4b78      	ldr	r3, [pc, #480]	@ (8004600 <HAL_RCC_OscConfig+0x27c>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a77      	ldr	r2, [pc, #476]	@ (8004600 <HAL_RCC_OscConfig+0x27c>)
 8004422:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004426:	6013      	str	r3, [r2, #0]
 8004428:	4b75      	ldr	r3, [pc, #468]	@ (8004600 <HAL_RCC_OscConfig+0x27c>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a74      	ldr	r2, [pc, #464]	@ (8004600 <HAL_RCC_OscConfig+0x27c>)
 800442e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004432:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d013      	beq.n	8004464 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800443c:	f7fd fc1a 	bl	8001c74 <HAL_GetTick>
 8004440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004442:	e008      	b.n	8004456 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004444:	f7fd fc16 	bl	8001c74 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b64      	cmp	r3, #100	@ 0x64
 8004450:	d901      	bls.n	8004456 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e29e      	b.n	8004994 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004456:	4b6a      	ldr	r3, [pc, #424]	@ (8004600 <HAL_RCC_OscConfig+0x27c>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d0f0      	beq.n	8004444 <HAL_RCC_OscConfig+0xc0>
 8004462:	e014      	b.n	800448e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004464:	f7fd fc06 	bl	8001c74 <HAL_GetTick>
 8004468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800446a:	e008      	b.n	800447e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800446c:	f7fd fc02 	bl	8001c74 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b64      	cmp	r3, #100	@ 0x64
 8004478:	d901      	bls.n	800447e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e28a      	b.n	8004994 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800447e:	4b60      	ldr	r3, [pc, #384]	@ (8004600 <HAL_RCC_OscConfig+0x27c>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1f0      	bne.n	800446c <HAL_RCC_OscConfig+0xe8>
 800448a:	e000      	b.n	800448e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800448c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d075      	beq.n	8004586 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800449a:	4b59      	ldr	r3, [pc, #356]	@ (8004600 <HAL_RCC_OscConfig+0x27c>)
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f003 030c 	and.w	r3, r3, #12
 80044a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044a4:	4b56      	ldr	r3, [pc, #344]	@ (8004600 <HAL_RCC_OscConfig+0x27c>)
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	f003 0303 	and.w	r3, r3, #3
 80044ac:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	2b0c      	cmp	r3, #12
 80044b2:	d102      	bne.n	80044ba <HAL_RCC_OscConfig+0x136>
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d002      	beq.n	80044c0 <HAL_RCC_OscConfig+0x13c>
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	2b04      	cmp	r3, #4
 80044be:	d11f      	bne.n	8004500 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044c0:	4b4f      	ldr	r3, [pc, #316]	@ (8004600 <HAL_RCC_OscConfig+0x27c>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d005      	beq.n	80044d8 <HAL_RCC_OscConfig+0x154>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d101      	bne.n	80044d8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e25d      	b.n	8004994 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044d8:	4b49      	ldr	r3, [pc, #292]	@ (8004600 <HAL_RCC_OscConfig+0x27c>)
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	061b      	lsls	r3, r3, #24
 80044e6:	4946      	ldr	r1, [pc, #280]	@ (8004600 <HAL_RCC_OscConfig+0x27c>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80044ec:	4b45      	ldr	r3, [pc, #276]	@ (8004604 <HAL_RCC_OscConfig+0x280>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7fd fb73 	bl	8001bdc <HAL_InitTick>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d043      	beq.n	8004584 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e249      	b.n	8004994 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d023      	beq.n	8004550 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004508:	4b3d      	ldr	r3, [pc, #244]	@ (8004600 <HAL_RCC_OscConfig+0x27c>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a3c      	ldr	r2, [pc, #240]	@ (8004600 <HAL_RCC_OscConfig+0x27c>)
 800450e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004512:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004514:	f7fd fbae 	bl	8001c74 <HAL_GetTick>
 8004518:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800451a:	e008      	b.n	800452e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800451c:	f7fd fbaa 	bl	8001c74 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b02      	cmp	r3, #2
 8004528:	d901      	bls.n	800452e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e232      	b.n	8004994 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800452e:	4b34      	ldr	r3, [pc, #208]	@ (8004600 <HAL_RCC_OscConfig+0x27c>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004536:	2b00      	cmp	r3, #0
 8004538:	d0f0      	beq.n	800451c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800453a:	4b31      	ldr	r3, [pc, #196]	@ (8004600 <HAL_RCC_OscConfig+0x27c>)
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	061b      	lsls	r3, r3, #24
 8004548:	492d      	ldr	r1, [pc, #180]	@ (8004600 <HAL_RCC_OscConfig+0x27c>)
 800454a:	4313      	orrs	r3, r2
 800454c:	604b      	str	r3, [r1, #4]
 800454e:	e01a      	b.n	8004586 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004550:	4b2b      	ldr	r3, [pc, #172]	@ (8004600 <HAL_RCC_OscConfig+0x27c>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a2a      	ldr	r2, [pc, #168]	@ (8004600 <HAL_RCC_OscConfig+0x27c>)
 8004556:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800455a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800455c:	f7fd fb8a 	bl	8001c74 <HAL_GetTick>
 8004560:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004562:	e008      	b.n	8004576 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004564:	f7fd fb86 	bl	8001c74 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e20e      	b.n	8004994 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004576:	4b22      	ldr	r3, [pc, #136]	@ (8004600 <HAL_RCC_OscConfig+0x27c>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1f0      	bne.n	8004564 <HAL_RCC_OscConfig+0x1e0>
 8004582:	e000      	b.n	8004586 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004584:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0308 	and.w	r3, r3, #8
 800458e:	2b00      	cmp	r3, #0
 8004590:	d041      	beq.n	8004616 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d01c      	beq.n	80045d4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800459a:	4b19      	ldr	r3, [pc, #100]	@ (8004600 <HAL_RCC_OscConfig+0x27c>)
 800459c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045a0:	4a17      	ldr	r2, [pc, #92]	@ (8004600 <HAL_RCC_OscConfig+0x27c>)
 80045a2:	f043 0301 	orr.w	r3, r3, #1
 80045a6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045aa:	f7fd fb63 	bl	8001c74 <HAL_GetTick>
 80045ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045b0:	e008      	b.n	80045c4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045b2:	f7fd fb5f 	bl	8001c74 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d901      	bls.n	80045c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e1e7      	b.n	8004994 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045c4:	4b0e      	ldr	r3, [pc, #56]	@ (8004600 <HAL_RCC_OscConfig+0x27c>)
 80045c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d0ef      	beq.n	80045b2 <HAL_RCC_OscConfig+0x22e>
 80045d2:	e020      	b.n	8004616 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045d4:	4b0a      	ldr	r3, [pc, #40]	@ (8004600 <HAL_RCC_OscConfig+0x27c>)
 80045d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045da:	4a09      	ldr	r2, [pc, #36]	@ (8004600 <HAL_RCC_OscConfig+0x27c>)
 80045dc:	f023 0301 	bic.w	r3, r3, #1
 80045e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e4:	f7fd fb46 	bl	8001c74 <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045ea:	e00d      	b.n	8004608 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045ec:	f7fd fb42 	bl	8001c74 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d906      	bls.n	8004608 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e1ca      	b.n	8004994 <HAL_RCC_OscConfig+0x610>
 80045fe:	bf00      	nop
 8004600:	40021000 	.word	0x40021000
 8004604:	2000002c 	.word	0x2000002c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004608:	4b8c      	ldr	r3, [pc, #560]	@ (800483c <HAL_RCC_OscConfig+0x4b8>)
 800460a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1ea      	bne.n	80045ec <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0304 	and.w	r3, r3, #4
 800461e:	2b00      	cmp	r3, #0
 8004620:	f000 80a6 	beq.w	8004770 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004624:	2300      	movs	r3, #0
 8004626:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004628:	4b84      	ldr	r3, [pc, #528]	@ (800483c <HAL_RCC_OscConfig+0x4b8>)
 800462a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800462c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d101      	bne.n	8004638 <HAL_RCC_OscConfig+0x2b4>
 8004634:	2301      	movs	r3, #1
 8004636:	e000      	b.n	800463a <HAL_RCC_OscConfig+0x2b6>
 8004638:	2300      	movs	r3, #0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00d      	beq.n	800465a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800463e:	4b7f      	ldr	r3, [pc, #508]	@ (800483c <HAL_RCC_OscConfig+0x4b8>)
 8004640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004642:	4a7e      	ldr	r2, [pc, #504]	@ (800483c <HAL_RCC_OscConfig+0x4b8>)
 8004644:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004648:	6593      	str	r3, [r2, #88]	@ 0x58
 800464a:	4b7c      	ldr	r3, [pc, #496]	@ (800483c <HAL_RCC_OscConfig+0x4b8>)
 800464c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800464e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004652:	60fb      	str	r3, [r7, #12]
 8004654:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004656:	2301      	movs	r3, #1
 8004658:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800465a:	4b79      	ldr	r3, [pc, #484]	@ (8004840 <HAL_RCC_OscConfig+0x4bc>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004662:	2b00      	cmp	r3, #0
 8004664:	d118      	bne.n	8004698 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004666:	4b76      	ldr	r3, [pc, #472]	@ (8004840 <HAL_RCC_OscConfig+0x4bc>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a75      	ldr	r2, [pc, #468]	@ (8004840 <HAL_RCC_OscConfig+0x4bc>)
 800466c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004670:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004672:	f7fd faff 	bl	8001c74 <HAL_GetTick>
 8004676:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004678:	e008      	b.n	800468c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800467a:	f7fd fafb 	bl	8001c74 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b02      	cmp	r3, #2
 8004686:	d901      	bls.n	800468c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e183      	b.n	8004994 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800468c:	4b6c      	ldr	r3, [pc, #432]	@ (8004840 <HAL_RCC_OscConfig+0x4bc>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004694:	2b00      	cmp	r3, #0
 8004696:	d0f0      	beq.n	800467a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d108      	bne.n	80046b2 <HAL_RCC_OscConfig+0x32e>
 80046a0:	4b66      	ldr	r3, [pc, #408]	@ (800483c <HAL_RCC_OscConfig+0x4b8>)
 80046a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046a6:	4a65      	ldr	r2, [pc, #404]	@ (800483c <HAL_RCC_OscConfig+0x4b8>)
 80046a8:	f043 0301 	orr.w	r3, r3, #1
 80046ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80046b0:	e024      	b.n	80046fc <HAL_RCC_OscConfig+0x378>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	2b05      	cmp	r3, #5
 80046b8:	d110      	bne.n	80046dc <HAL_RCC_OscConfig+0x358>
 80046ba:	4b60      	ldr	r3, [pc, #384]	@ (800483c <HAL_RCC_OscConfig+0x4b8>)
 80046bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046c0:	4a5e      	ldr	r2, [pc, #376]	@ (800483c <HAL_RCC_OscConfig+0x4b8>)
 80046c2:	f043 0304 	orr.w	r3, r3, #4
 80046c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80046ca:	4b5c      	ldr	r3, [pc, #368]	@ (800483c <HAL_RCC_OscConfig+0x4b8>)
 80046cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046d0:	4a5a      	ldr	r2, [pc, #360]	@ (800483c <HAL_RCC_OscConfig+0x4b8>)
 80046d2:	f043 0301 	orr.w	r3, r3, #1
 80046d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80046da:	e00f      	b.n	80046fc <HAL_RCC_OscConfig+0x378>
 80046dc:	4b57      	ldr	r3, [pc, #348]	@ (800483c <HAL_RCC_OscConfig+0x4b8>)
 80046de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046e2:	4a56      	ldr	r2, [pc, #344]	@ (800483c <HAL_RCC_OscConfig+0x4b8>)
 80046e4:	f023 0301 	bic.w	r3, r3, #1
 80046e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80046ec:	4b53      	ldr	r3, [pc, #332]	@ (800483c <HAL_RCC_OscConfig+0x4b8>)
 80046ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046f2:	4a52      	ldr	r2, [pc, #328]	@ (800483c <HAL_RCC_OscConfig+0x4b8>)
 80046f4:	f023 0304 	bic.w	r3, r3, #4
 80046f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d016      	beq.n	8004732 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004704:	f7fd fab6 	bl	8001c74 <HAL_GetTick>
 8004708:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800470a:	e00a      	b.n	8004722 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800470c:	f7fd fab2 	bl	8001c74 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	f241 3288 	movw	r2, #5000	@ 0x1388
 800471a:	4293      	cmp	r3, r2
 800471c:	d901      	bls.n	8004722 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e138      	b.n	8004994 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004722:	4b46      	ldr	r3, [pc, #280]	@ (800483c <HAL_RCC_OscConfig+0x4b8>)
 8004724:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004728:	f003 0302 	and.w	r3, r3, #2
 800472c:	2b00      	cmp	r3, #0
 800472e:	d0ed      	beq.n	800470c <HAL_RCC_OscConfig+0x388>
 8004730:	e015      	b.n	800475e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004732:	f7fd fa9f 	bl	8001c74 <HAL_GetTick>
 8004736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004738:	e00a      	b.n	8004750 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800473a:	f7fd fa9b 	bl	8001c74 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004748:	4293      	cmp	r3, r2
 800474a:	d901      	bls.n	8004750 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e121      	b.n	8004994 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004750:	4b3a      	ldr	r3, [pc, #232]	@ (800483c <HAL_RCC_OscConfig+0x4b8>)
 8004752:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1ed      	bne.n	800473a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800475e:	7ffb      	ldrb	r3, [r7, #31]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d105      	bne.n	8004770 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004764:	4b35      	ldr	r3, [pc, #212]	@ (800483c <HAL_RCC_OscConfig+0x4b8>)
 8004766:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004768:	4a34      	ldr	r2, [pc, #208]	@ (800483c <HAL_RCC_OscConfig+0x4b8>)
 800476a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800476e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0320 	and.w	r3, r3, #32
 8004778:	2b00      	cmp	r3, #0
 800477a:	d03c      	beq.n	80047f6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d01c      	beq.n	80047be <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004784:	4b2d      	ldr	r3, [pc, #180]	@ (800483c <HAL_RCC_OscConfig+0x4b8>)
 8004786:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800478a:	4a2c      	ldr	r2, [pc, #176]	@ (800483c <HAL_RCC_OscConfig+0x4b8>)
 800478c:	f043 0301 	orr.w	r3, r3, #1
 8004790:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004794:	f7fd fa6e 	bl	8001c74 <HAL_GetTick>
 8004798:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800479c:	f7fd fa6a 	bl	8001c74 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e0f2      	b.n	8004994 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80047ae:	4b23      	ldr	r3, [pc, #140]	@ (800483c <HAL_RCC_OscConfig+0x4b8>)
 80047b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80047b4:	f003 0302 	and.w	r3, r3, #2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d0ef      	beq.n	800479c <HAL_RCC_OscConfig+0x418>
 80047bc:	e01b      	b.n	80047f6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80047be:	4b1f      	ldr	r3, [pc, #124]	@ (800483c <HAL_RCC_OscConfig+0x4b8>)
 80047c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80047c4:	4a1d      	ldr	r2, [pc, #116]	@ (800483c <HAL_RCC_OscConfig+0x4b8>)
 80047c6:	f023 0301 	bic.w	r3, r3, #1
 80047ca:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ce:	f7fd fa51 	bl	8001c74 <HAL_GetTick>
 80047d2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80047d4:	e008      	b.n	80047e8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80047d6:	f7fd fa4d 	bl	8001c74 <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d901      	bls.n	80047e8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e0d5      	b.n	8004994 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80047e8:	4b14      	ldr	r3, [pc, #80]	@ (800483c <HAL_RCC_OscConfig+0x4b8>)
 80047ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1ef      	bne.n	80047d6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	69db      	ldr	r3, [r3, #28]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	f000 80c9 	beq.w	8004992 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004800:	4b0e      	ldr	r3, [pc, #56]	@ (800483c <HAL_RCC_OscConfig+0x4b8>)
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f003 030c 	and.w	r3, r3, #12
 8004808:	2b0c      	cmp	r3, #12
 800480a:	f000 8083 	beq.w	8004914 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	69db      	ldr	r3, [r3, #28]
 8004812:	2b02      	cmp	r3, #2
 8004814:	d15e      	bne.n	80048d4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004816:	4b09      	ldr	r3, [pc, #36]	@ (800483c <HAL_RCC_OscConfig+0x4b8>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a08      	ldr	r2, [pc, #32]	@ (800483c <HAL_RCC_OscConfig+0x4b8>)
 800481c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004820:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004822:	f7fd fa27 	bl	8001c74 <HAL_GetTick>
 8004826:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004828:	e00c      	b.n	8004844 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800482a:	f7fd fa23 	bl	8001c74 <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	2b02      	cmp	r3, #2
 8004836:	d905      	bls.n	8004844 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e0ab      	b.n	8004994 <HAL_RCC_OscConfig+0x610>
 800483c:	40021000 	.word	0x40021000
 8004840:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004844:	4b55      	ldr	r3, [pc, #340]	@ (800499c <HAL_RCC_OscConfig+0x618>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1ec      	bne.n	800482a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004850:	4b52      	ldr	r3, [pc, #328]	@ (800499c <HAL_RCC_OscConfig+0x618>)
 8004852:	68da      	ldr	r2, [r3, #12]
 8004854:	4b52      	ldr	r3, [pc, #328]	@ (80049a0 <HAL_RCC_OscConfig+0x61c>)
 8004856:	4013      	ands	r3, r2
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	6a11      	ldr	r1, [r2, #32]
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004860:	3a01      	subs	r2, #1
 8004862:	0112      	lsls	r2, r2, #4
 8004864:	4311      	orrs	r1, r2
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800486a:	0212      	lsls	r2, r2, #8
 800486c:	4311      	orrs	r1, r2
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004872:	0852      	lsrs	r2, r2, #1
 8004874:	3a01      	subs	r2, #1
 8004876:	0552      	lsls	r2, r2, #21
 8004878:	4311      	orrs	r1, r2
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800487e:	0852      	lsrs	r2, r2, #1
 8004880:	3a01      	subs	r2, #1
 8004882:	0652      	lsls	r2, r2, #25
 8004884:	4311      	orrs	r1, r2
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800488a:	06d2      	lsls	r2, r2, #27
 800488c:	430a      	orrs	r2, r1
 800488e:	4943      	ldr	r1, [pc, #268]	@ (800499c <HAL_RCC_OscConfig+0x618>)
 8004890:	4313      	orrs	r3, r2
 8004892:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004894:	4b41      	ldr	r3, [pc, #260]	@ (800499c <HAL_RCC_OscConfig+0x618>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a40      	ldr	r2, [pc, #256]	@ (800499c <HAL_RCC_OscConfig+0x618>)
 800489a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800489e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80048a0:	4b3e      	ldr	r3, [pc, #248]	@ (800499c <HAL_RCC_OscConfig+0x618>)
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	4a3d      	ldr	r2, [pc, #244]	@ (800499c <HAL_RCC_OscConfig+0x618>)
 80048a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048aa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ac:	f7fd f9e2 	bl	8001c74 <HAL_GetTick>
 80048b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048b2:	e008      	b.n	80048c6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048b4:	f7fd f9de 	bl	8001c74 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e066      	b.n	8004994 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048c6:	4b35      	ldr	r3, [pc, #212]	@ (800499c <HAL_RCC_OscConfig+0x618>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d0f0      	beq.n	80048b4 <HAL_RCC_OscConfig+0x530>
 80048d2:	e05e      	b.n	8004992 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048d4:	4b31      	ldr	r3, [pc, #196]	@ (800499c <HAL_RCC_OscConfig+0x618>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a30      	ldr	r2, [pc, #192]	@ (800499c <HAL_RCC_OscConfig+0x618>)
 80048da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e0:	f7fd f9c8 	bl	8001c74 <HAL_GetTick>
 80048e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048e6:	e008      	b.n	80048fa <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048e8:	f7fd f9c4 	bl	8001c74 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e04c      	b.n	8004994 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048fa:	4b28      	ldr	r3, [pc, #160]	@ (800499c <HAL_RCC_OscConfig+0x618>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1f0      	bne.n	80048e8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004906:	4b25      	ldr	r3, [pc, #148]	@ (800499c <HAL_RCC_OscConfig+0x618>)
 8004908:	68da      	ldr	r2, [r3, #12]
 800490a:	4924      	ldr	r1, [pc, #144]	@ (800499c <HAL_RCC_OscConfig+0x618>)
 800490c:	4b25      	ldr	r3, [pc, #148]	@ (80049a4 <HAL_RCC_OscConfig+0x620>)
 800490e:	4013      	ands	r3, r2
 8004910:	60cb      	str	r3, [r1, #12]
 8004912:	e03e      	b.n	8004992 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	69db      	ldr	r3, [r3, #28]
 8004918:	2b01      	cmp	r3, #1
 800491a:	d101      	bne.n	8004920 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e039      	b.n	8004994 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004920:	4b1e      	ldr	r3, [pc, #120]	@ (800499c <HAL_RCC_OscConfig+0x618>)
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f003 0203 	and.w	r2, r3, #3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a1b      	ldr	r3, [r3, #32]
 8004930:	429a      	cmp	r2, r3
 8004932:	d12c      	bne.n	800498e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800493e:	3b01      	subs	r3, #1
 8004940:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004942:	429a      	cmp	r2, r3
 8004944:	d123      	bne.n	800498e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004950:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004952:	429a      	cmp	r2, r3
 8004954:	d11b      	bne.n	800498e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004960:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004962:	429a      	cmp	r2, r3
 8004964:	d113      	bne.n	800498e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004970:	085b      	lsrs	r3, r3, #1
 8004972:	3b01      	subs	r3, #1
 8004974:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004976:	429a      	cmp	r2, r3
 8004978:	d109      	bne.n	800498e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004984:	085b      	lsrs	r3, r3, #1
 8004986:	3b01      	subs	r3, #1
 8004988:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800498a:	429a      	cmp	r2, r3
 800498c:	d001      	beq.n	8004992 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e000      	b.n	8004994 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3720      	adds	r7, #32
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	40021000 	.word	0x40021000
 80049a0:	019f800c 	.word	0x019f800c
 80049a4:	feeefffc 	.word	0xfeeefffc

080049a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b086      	sub	sp, #24
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80049b2:	2300      	movs	r3, #0
 80049b4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d101      	bne.n	80049c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e11e      	b.n	8004bfe <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049c0:	4b91      	ldr	r3, [pc, #580]	@ (8004c08 <HAL_RCC_ClockConfig+0x260>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 030f 	and.w	r3, r3, #15
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d910      	bls.n	80049f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ce:	4b8e      	ldr	r3, [pc, #568]	@ (8004c08 <HAL_RCC_ClockConfig+0x260>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f023 020f 	bic.w	r2, r3, #15
 80049d6:	498c      	ldr	r1, [pc, #560]	@ (8004c08 <HAL_RCC_ClockConfig+0x260>)
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	4313      	orrs	r3, r2
 80049dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049de:	4b8a      	ldr	r3, [pc, #552]	@ (8004c08 <HAL_RCC_ClockConfig+0x260>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 030f 	and.w	r3, r3, #15
 80049e6:	683a      	ldr	r2, [r7, #0]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d001      	beq.n	80049f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e106      	b.n	8004bfe <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d073      	beq.n	8004ae4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	2b03      	cmp	r3, #3
 8004a02:	d129      	bne.n	8004a58 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a04:	4b81      	ldr	r3, [pc, #516]	@ (8004c0c <HAL_RCC_ClockConfig+0x264>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d101      	bne.n	8004a14 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e0f4      	b.n	8004bfe <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004a14:	f000 f99e 	bl	8004d54 <RCC_GetSysClockFreqFromPLLSource>
 8004a18:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	4a7c      	ldr	r2, [pc, #496]	@ (8004c10 <HAL_RCC_ClockConfig+0x268>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d93f      	bls.n	8004aa2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004a22:	4b7a      	ldr	r3, [pc, #488]	@ (8004c0c <HAL_RCC_ClockConfig+0x264>)
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d009      	beq.n	8004a42 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d033      	beq.n	8004aa2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d12f      	bne.n	8004aa2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004a42:	4b72      	ldr	r3, [pc, #456]	@ (8004c0c <HAL_RCC_ClockConfig+0x264>)
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a4a:	4a70      	ldr	r2, [pc, #448]	@ (8004c0c <HAL_RCC_ClockConfig+0x264>)
 8004a4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a50:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004a52:	2380      	movs	r3, #128	@ 0x80
 8004a54:	617b      	str	r3, [r7, #20]
 8004a56:	e024      	b.n	8004aa2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d107      	bne.n	8004a70 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a60:	4b6a      	ldr	r3, [pc, #424]	@ (8004c0c <HAL_RCC_ClockConfig+0x264>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d109      	bne.n	8004a80 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e0c6      	b.n	8004bfe <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a70:	4b66      	ldr	r3, [pc, #408]	@ (8004c0c <HAL_RCC_ClockConfig+0x264>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d101      	bne.n	8004a80 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e0be      	b.n	8004bfe <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004a80:	f000 f8ce 	bl	8004c20 <HAL_RCC_GetSysClockFreq>
 8004a84:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	4a61      	ldr	r2, [pc, #388]	@ (8004c10 <HAL_RCC_ClockConfig+0x268>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d909      	bls.n	8004aa2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004a8e:	4b5f      	ldr	r3, [pc, #380]	@ (8004c0c <HAL_RCC_ClockConfig+0x264>)
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a96:	4a5d      	ldr	r2, [pc, #372]	@ (8004c0c <HAL_RCC_ClockConfig+0x264>)
 8004a98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a9c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004a9e:	2380      	movs	r3, #128	@ 0x80
 8004aa0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004aa2:	4b5a      	ldr	r3, [pc, #360]	@ (8004c0c <HAL_RCC_ClockConfig+0x264>)
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f023 0203 	bic.w	r2, r3, #3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	4957      	ldr	r1, [pc, #348]	@ (8004c0c <HAL_RCC_ClockConfig+0x264>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ab4:	f7fd f8de 	bl	8001c74 <HAL_GetTick>
 8004ab8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aba:	e00a      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004abc:	f7fd f8da 	bl	8001c74 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e095      	b.n	8004bfe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ad2:	4b4e      	ldr	r3, [pc, #312]	@ (8004c0c <HAL_RCC_ClockConfig+0x264>)
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f003 020c 	and.w	r2, r3, #12
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d1eb      	bne.n	8004abc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0302 	and.w	r3, r3, #2
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d023      	beq.n	8004b38 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0304 	and.w	r3, r3, #4
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d005      	beq.n	8004b08 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004afc:	4b43      	ldr	r3, [pc, #268]	@ (8004c0c <HAL_RCC_ClockConfig+0x264>)
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	4a42      	ldr	r2, [pc, #264]	@ (8004c0c <HAL_RCC_ClockConfig+0x264>)
 8004b02:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004b06:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0308 	and.w	r3, r3, #8
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d007      	beq.n	8004b24 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004b14:	4b3d      	ldr	r3, [pc, #244]	@ (8004c0c <HAL_RCC_ClockConfig+0x264>)
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004b1c:	4a3b      	ldr	r2, [pc, #236]	@ (8004c0c <HAL_RCC_ClockConfig+0x264>)
 8004b1e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004b22:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b24:	4b39      	ldr	r3, [pc, #228]	@ (8004c0c <HAL_RCC_ClockConfig+0x264>)
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	4936      	ldr	r1, [pc, #216]	@ (8004c0c <HAL_RCC_ClockConfig+0x264>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	608b      	str	r3, [r1, #8]
 8004b36:	e008      	b.n	8004b4a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	2b80      	cmp	r3, #128	@ 0x80
 8004b3c:	d105      	bne.n	8004b4a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004b3e:	4b33      	ldr	r3, [pc, #204]	@ (8004c0c <HAL_RCC_ClockConfig+0x264>)
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	4a32      	ldr	r2, [pc, #200]	@ (8004c0c <HAL_RCC_ClockConfig+0x264>)
 8004b44:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b48:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b4a:	4b2f      	ldr	r3, [pc, #188]	@ (8004c08 <HAL_RCC_ClockConfig+0x260>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 030f 	and.w	r3, r3, #15
 8004b52:	683a      	ldr	r2, [r7, #0]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d21d      	bcs.n	8004b94 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b58:	4b2b      	ldr	r3, [pc, #172]	@ (8004c08 <HAL_RCC_ClockConfig+0x260>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f023 020f 	bic.w	r2, r3, #15
 8004b60:	4929      	ldr	r1, [pc, #164]	@ (8004c08 <HAL_RCC_ClockConfig+0x260>)
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004b68:	f7fd f884 	bl	8001c74 <HAL_GetTick>
 8004b6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b6e:	e00a      	b.n	8004b86 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b70:	f7fd f880 	bl	8001c74 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e03b      	b.n	8004bfe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b86:	4b20      	ldr	r3, [pc, #128]	@ (8004c08 <HAL_RCC_ClockConfig+0x260>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 030f 	and.w	r3, r3, #15
 8004b8e:	683a      	ldr	r2, [r7, #0]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d1ed      	bne.n	8004b70 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0304 	and.w	r3, r3, #4
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d008      	beq.n	8004bb2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ba0:	4b1a      	ldr	r3, [pc, #104]	@ (8004c0c <HAL_RCC_ClockConfig+0x264>)
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	4917      	ldr	r1, [pc, #92]	@ (8004c0c <HAL_RCC_ClockConfig+0x264>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0308 	and.w	r3, r3, #8
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d009      	beq.n	8004bd2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bbe:	4b13      	ldr	r3, [pc, #76]	@ (8004c0c <HAL_RCC_ClockConfig+0x264>)
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	00db      	lsls	r3, r3, #3
 8004bcc:	490f      	ldr	r1, [pc, #60]	@ (8004c0c <HAL_RCC_ClockConfig+0x264>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004bd2:	f000 f825 	bl	8004c20 <HAL_RCC_GetSysClockFreq>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8004c0c <HAL_RCC_ClockConfig+0x264>)
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	091b      	lsrs	r3, r3, #4
 8004bde:	f003 030f 	and.w	r3, r3, #15
 8004be2:	490c      	ldr	r1, [pc, #48]	@ (8004c14 <HAL_RCC_ClockConfig+0x26c>)
 8004be4:	5ccb      	ldrb	r3, [r1, r3]
 8004be6:	f003 031f 	and.w	r3, r3, #31
 8004bea:	fa22 f303 	lsr.w	r3, r2, r3
 8004bee:	4a0a      	ldr	r2, [pc, #40]	@ (8004c18 <HAL_RCC_ClockConfig+0x270>)
 8004bf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8004c1c <HAL_RCC_ClockConfig+0x274>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f7fc fff0 	bl	8001bdc <HAL_InitTick>
 8004bfc:	4603      	mov	r3, r0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3718      	adds	r7, #24
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	40022000 	.word	0x40022000
 8004c0c:	40021000 	.word	0x40021000
 8004c10:	04c4b400 	.word	0x04c4b400
 8004c14:	080076fc 	.word	0x080076fc
 8004c18:	20000028 	.word	0x20000028
 8004c1c:	2000002c 	.word	0x2000002c

08004c20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b087      	sub	sp, #28
 8004c24:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004c26:	4b2c      	ldr	r3, [pc, #176]	@ (8004cd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f003 030c 	and.w	r3, r3, #12
 8004c2e:	2b04      	cmp	r3, #4
 8004c30:	d102      	bne.n	8004c38 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c32:	4b2a      	ldr	r3, [pc, #168]	@ (8004cdc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004c34:	613b      	str	r3, [r7, #16]
 8004c36:	e047      	b.n	8004cc8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004c38:	4b27      	ldr	r3, [pc, #156]	@ (8004cd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f003 030c 	and.w	r3, r3, #12
 8004c40:	2b08      	cmp	r3, #8
 8004c42:	d102      	bne.n	8004c4a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004c44:	4b26      	ldr	r3, [pc, #152]	@ (8004ce0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c46:	613b      	str	r3, [r7, #16]
 8004c48:	e03e      	b.n	8004cc8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004c4a:	4b23      	ldr	r3, [pc, #140]	@ (8004cd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f003 030c 	and.w	r3, r3, #12
 8004c52:	2b0c      	cmp	r3, #12
 8004c54:	d136      	bne.n	8004cc4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c56:	4b20      	ldr	r3, [pc, #128]	@ (8004cd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	f003 0303 	and.w	r3, r3, #3
 8004c5e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c60:	4b1d      	ldr	r3, [pc, #116]	@ (8004cd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	091b      	lsrs	r3, r3, #4
 8004c66:	f003 030f 	and.w	r3, r3, #15
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2b03      	cmp	r3, #3
 8004c72:	d10c      	bne.n	8004c8e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c74:	4a1a      	ldr	r2, [pc, #104]	@ (8004ce0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c7c:	4a16      	ldr	r2, [pc, #88]	@ (8004cd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c7e:	68d2      	ldr	r2, [r2, #12]
 8004c80:	0a12      	lsrs	r2, r2, #8
 8004c82:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004c86:	fb02 f303 	mul.w	r3, r2, r3
 8004c8a:	617b      	str	r3, [r7, #20]
      break;
 8004c8c:	e00c      	b.n	8004ca8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c8e:	4a13      	ldr	r2, [pc, #76]	@ (8004cdc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c96:	4a10      	ldr	r2, [pc, #64]	@ (8004cd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c98:	68d2      	ldr	r2, [r2, #12]
 8004c9a:	0a12      	lsrs	r2, r2, #8
 8004c9c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004ca0:	fb02 f303 	mul.w	r3, r2, r3
 8004ca4:	617b      	str	r3, [r7, #20]
      break;
 8004ca6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8004cd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	0e5b      	lsrs	r3, r3, #25
 8004cae:	f003 0303 	and.w	r3, r3, #3
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	005b      	lsls	r3, r3, #1
 8004cb6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc0:	613b      	str	r3, [r7, #16]
 8004cc2:	e001      	b.n	8004cc8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004cc8:	693b      	ldr	r3, [r7, #16]
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	371c      	adds	r7, #28
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	40021000 	.word	0x40021000
 8004cdc:	00f42400 	.word	0x00f42400
 8004ce0:	016e3600 	.word	0x016e3600

08004ce4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ce8:	4b03      	ldr	r3, [pc, #12]	@ (8004cf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cea:	681b      	ldr	r3, [r3, #0]
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	20000028 	.word	0x20000028

08004cfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004d00:	f7ff fff0 	bl	8004ce4 <HAL_RCC_GetHCLKFreq>
 8004d04:	4602      	mov	r2, r0
 8004d06:	4b06      	ldr	r3, [pc, #24]	@ (8004d20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	0a1b      	lsrs	r3, r3, #8
 8004d0c:	f003 0307 	and.w	r3, r3, #7
 8004d10:	4904      	ldr	r1, [pc, #16]	@ (8004d24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d12:	5ccb      	ldrb	r3, [r1, r3]
 8004d14:	f003 031f 	and.w	r3, r3, #31
 8004d18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	40021000 	.word	0x40021000
 8004d24:	0800770c 	.word	0x0800770c

08004d28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004d2c:	f7ff ffda 	bl	8004ce4 <HAL_RCC_GetHCLKFreq>
 8004d30:	4602      	mov	r2, r0
 8004d32:	4b06      	ldr	r3, [pc, #24]	@ (8004d4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	0adb      	lsrs	r3, r3, #11
 8004d38:	f003 0307 	and.w	r3, r3, #7
 8004d3c:	4904      	ldr	r1, [pc, #16]	@ (8004d50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d3e:	5ccb      	ldrb	r3, [r1, r3]
 8004d40:	f003 031f 	and.w	r3, r3, #31
 8004d44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	40021000 	.word	0x40021000
 8004d50:	0800770c 	.word	0x0800770c

08004d54 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b087      	sub	sp, #28
 8004d58:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d5a:	4b1e      	ldr	r3, [pc, #120]	@ (8004dd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	f003 0303 	and.w	r3, r3, #3
 8004d62:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d64:	4b1b      	ldr	r3, [pc, #108]	@ (8004dd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	091b      	lsrs	r3, r3, #4
 8004d6a:	f003 030f 	and.w	r3, r3, #15
 8004d6e:	3301      	adds	r3, #1
 8004d70:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	2b03      	cmp	r3, #3
 8004d76:	d10c      	bne.n	8004d92 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d78:	4a17      	ldr	r2, [pc, #92]	@ (8004dd8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d80:	4a14      	ldr	r2, [pc, #80]	@ (8004dd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d82:	68d2      	ldr	r2, [r2, #12]
 8004d84:	0a12      	lsrs	r2, r2, #8
 8004d86:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004d8a:	fb02 f303 	mul.w	r3, r2, r3
 8004d8e:	617b      	str	r3, [r7, #20]
    break;
 8004d90:	e00c      	b.n	8004dac <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d92:	4a12      	ldr	r2, [pc, #72]	@ (8004ddc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d9a:	4a0e      	ldr	r2, [pc, #56]	@ (8004dd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d9c:	68d2      	ldr	r2, [r2, #12]
 8004d9e:	0a12      	lsrs	r2, r2, #8
 8004da0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004da4:	fb02 f303 	mul.w	r3, r2, r3
 8004da8:	617b      	str	r3, [r7, #20]
    break;
 8004daa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004dac:	4b09      	ldr	r3, [pc, #36]	@ (8004dd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	0e5b      	lsrs	r3, r3, #25
 8004db2:	f003 0303 	and.w	r3, r3, #3
 8004db6:	3301      	adds	r3, #1
 8004db8:	005b      	lsls	r3, r3, #1
 8004dba:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004dc6:	687b      	ldr	r3, [r7, #4]
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	371c      	adds	r7, #28
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr
 8004dd4:	40021000 	.word	0x40021000
 8004dd8:	016e3600 	.word	0x016e3600
 8004ddc:	00f42400 	.word	0x00f42400

08004de0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004de8:	2300      	movs	r3, #0
 8004dea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004dec:	2300      	movs	r3, #0
 8004dee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f000 8098 	beq.w	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e02:	4b43      	ldr	r3, [pc, #268]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10d      	bne.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e0e:	4b40      	ldr	r3, [pc, #256]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e12:	4a3f      	ldr	r2, [pc, #252]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e18:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e1a:	4b3d      	ldr	r3, [pc, #244]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e22:	60bb      	str	r3, [r7, #8]
 8004e24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e26:	2301      	movs	r3, #1
 8004e28:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e2a:	4b3a      	ldr	r3, [pc, #232]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a39      	ldr	r2, [pc, #228]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e36:	f7fc ff1d 	bl	8001c74 <HAL_GetTick>
 8004e3a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e3c:	e009      	b.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e3e:	f7fc ff19 	bl	8001c74 <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d902      	bls.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	74fb      	strb	r3, [r7, #19]
        break;
 8004e50:	e005      	b.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e52:	4b30      	ldr	r3, [pc, #192]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d0ef      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004e5e:	7cfb      	ldrb	r3, [r7, #19]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d159      	bne.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e64:	4b2a      	ldr	r3, [pc, #168]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e6e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d01e      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d019      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e80:	4b23      	ldr	r3, [pc, #140]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e8a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e8c:	4b20      	ldr	r3, [pc, #128]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e92:	4a1f      	ldr	r2, [pc, #124]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e9c:	4b1c      	ldr	r3, [pc, #112]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ea2:	4a1b      	ldr	r2, [pc, #108]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ea4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ea8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004eac:	4a18      	ldr	r2, [pc, #96]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	f003 0301 	and.w	r3, r3, #1
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d016      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ebe:	f7fc fed9 	bl	8001c74 <HAL_GetTick>
 8004ec2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ec4:	e00b      	b.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ec6:	f7fc fed5 	bl	8001c74 <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d902      	bls.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	74fb      	strb	r3, [r7, #19]
            break;
 8004edc:	e006      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ede:	4b0c      	ldr	r3, [pc, #48]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d0ec      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004eec:	7cfb      	ldrb	r3, [r7, #19]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d10b      	bne.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ef2:	4b07      	ldr	r3, [pc, #28]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ef8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f00:	4903      	ldr	r1, [pc, #12]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004f08:	e008      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f0a:	7cfb      	ldrb	r3, [r7, #19]
 8004f0c:	74bb      	strb	r3, [r7, #18]
 8004f0e:	e005      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004f10:	40021000 	.word	0x40021000
 8004f14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f18:	7cfb      	ldrb	r3, [r7, #19]
 8004f1a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f1c:	7c7b      	ldrb	r3, [r7, #17]
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d105      	bne.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f22:	4ba7      	ldr	r3, [pc, #668]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f26:	4aa6      	ldr	r2, [pc, #664]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f2c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00a      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f3a:	4ba1      	ldr	r3, [pc, #644]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f40:	f023 0203 	bic.w	r2, r3, #3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	499d      	ldr	r1, [pc, #628]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0302 	and.w	r3, r3, #2
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00a      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f5c:	4b98      	ldr	r3, [pc, #608]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f62:	f023 020c 	bic.w	r2, r3, #12
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	4995      	ldr	r1, [pc, #596]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0304 	and.w	r3, r3, #4
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00a      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f7e:	4b90      	ldr	r3, [pc, #576]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f84:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	498c      	ldr	r1, [pc, #560]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0308 	and.w	r3, r3, #8
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00a      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004fa0:	4b87      	ldr	r3, [pc, #540]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fa6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	4984      	ldr	r1, [pc, #528]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0310 	and.w	r3, r3, #16
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00a      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004fc2:	4b7f      	ldr	r3, [pc, #508]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fc8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	695b      	ldr	r3, [r3, #20]
 8004fd0:	497b      	ldr	r1, [pc, #492]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0320 	and.w	r3, r3, #32
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00a      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004fe4:	4b76      	ldr	r3, [pc, #472]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fea:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	4973      	ldr	r1, [pc, #460]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005002:	2b00      	cmp	r3, #0
 8005004:	d00a      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005006:	4b6e      	ldr	r3, [pc, #440]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005008:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800500c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	69db      	ldr	r3, [r3, #28]
 8005014:	496a      	ldr	r1, [pc, #424]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005016:	4313      	orrs	r3, r2
 8005018:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00a      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005028:	4b65      	ldr	r3, [pc, #404]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800502a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800502e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	4962      	ldr	r1, [pc, #392]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005038:	4313      	orrs	r3, r2
 800503a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00a      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800504a:	4b5d      	ldr	r3, [pc, #372]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800504c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005050:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005058:	4959      	ldr	r1, [pc, #356]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800505a:	4313      	orrs	r3, r2
 800505c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00a      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800506c:	4b54      	ldr	r3, [pc, #336]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800506e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005072:	f023 0203 	bic.w	r2, r3, #3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800507a:	4951      	ldr	r1, [pc, #324]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800507c:	4313      	orrs	r3, r2
 800507e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00a      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800508e:	4b4c      	ldr	r3, [pc, #304]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005094:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800509c:	4948      	ldr	r1, [pc, #288]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d015      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050b0:	4b43      	ldr	r3, [pc, #268]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050be:	4940      	ldr	r1, [pc, #256]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050ce:	d105      	bne.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050d0:	4b3b      	ldr	r3, [pc, #236]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	4a3a      	ldr	r2, [pc, #232]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050da:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d015      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80050e8:	4b35      	ldr	r3, [pc, #212]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050ee:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050f6:	4932      	ldr	r1, [pc, #200]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005102:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005106:	d105      	bne.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005108:	4b2d      	ldr	r3, [pc, #180]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	4a2c      	ldr	r2, [pc, #176]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800510e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005112:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d015      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005120:	4b27      	ldr	r3, [pc, #156]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005126:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800512e:	4924      	ldr	r1, [pc, #144]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005130:	4313      	orrs	r3, r2
 8005132:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800513a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800513e:	d105      	bne.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005140:	4b1f      	ldr	r3, [pc, #124]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	4a1e      	ldr	r2, [pc, #120]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005146:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800514a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d015      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005158:	4b19      	ldr	r3, [pc, #100]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800515a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800515e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005166:	4916      	ldr	r1, [pc, #88]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005168:	4313      	orrs	r3, r2
 800516a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005172:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005176:	d105      	bne.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005178:	4b11      	ldr	r3, [pc, #68]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	4a10      	ldr	r2, [pc, #64]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800517e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005182:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d019      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005190:	4b0b      	ldr	r3, [pc, #44]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005196:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800519e:	4908      	ldr	r1, [pc, #32]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051a0:	4313      	orrs	r3, r2
 80051a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051ae:	d109      	bne.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051b0:	4b03      	ldr	r3, [pc, #12]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	4a02      	ldr	r2, [pc, #8]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051ba:	60d3      	str	r3, [r2, #12]
 80051bc:	e002      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80051be:	bf00      	nop
 80051c0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d015      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80051d0:	4b29      	ldr	r3, [pc, #164]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80051d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051d6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051de:	4926      	ldr	r1, [pc, #152]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80051ee:	d105      	bne.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80051f0:	4b21      	ldr	r3, [pc, #132]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	4a20      	ldr	r2, [pc, #128]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80051f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051fa:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d015      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005208:	4b1b      	ldr	r3, [pc, #108]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800520a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800520e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005216:	4918      	ldr	r1, [pc, #96]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005218:	4313      	orrs	r3, r2
 800521a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005222:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005226:	d105      	bne.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005228:	4b13      	ldr	r3, [pc, #76]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	4a12      	ldr	r2, [pc, #72]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800522e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005232:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d015      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005240:	4b0d      	ldr	r3, [pc, #52]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005242:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005246:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800524e:	490a      	ldr	r1, [pc, #40]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005250:	4313      	orrs	r3, r2
 8005252:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800525a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800525e:	d105      	bne.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005260:	4b05      	ldr	r3, [pc, #20]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	4a04      	ldr	r2, [pc, #16]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005266:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800526a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800526c:	7cbb      	ldrb	r3, [r7, #18]
}
 800526e:	4618      	mov	r0, r3
 8005270:	3718      	adds	r7, #24
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	40021000 	.word	0x40021000

0800527c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b082      	sub	sp, #8
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d101      	bne.n	800528e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e049      	b.n	8005322 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005294:	b2db      	uxtb	r3, r3
 8005296:	2b00      	cmp	r3, #0
 8005298:	d106      	bne.n	80052a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f7fc fb6a 	bl	800197c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2202      	movs	r2, #2
 80052ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	3304      	adds	r3, #4
 80052b8:	4619      	mov	r1, r3
 80052ba:	4610      	mov	r0, r2
 80052bc:	f000 fd78 	bl	8005db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3708      	adds	r7, #8
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
	...

0800532c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800533a:	b2db      	uxtb	r3, r3
 800533c:	2b01      	cmp	r3, #1
 800533e:	d001      	beq.n	8005344 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e04c      	b.n	80053de <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2202      	movs	r2, #2
 8005348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a26      	ldr	r2, [pc, #152]	@ (80053ec <HAL_TIM_Base_Start+0xc0>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d022      	beq.n	800539c <HAL_TIM_Base_Start+0x70>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800535e:	d01d      	beq.n	800539c <HAL_TIM_Base_Start+0x70>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a22      	ldr	r2, [pc, #136]	@ (80053f0 <HAL_TIM_Base_Start+0xc4>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d018      	beq.n	800539c <HAL_TIM_Base_Start+0x70>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a21      	ldr	r2, [pc, #132]	@ (80053f4 <HAL_TIM_Base_Start+0xc8>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d013      	beq.n	800539c <HAL_TIM_Base_Start+0x70>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a1f      	ldr	r2, [pc, #124]	@ (80053f8 <HAL_TIM_Base_Start+0xcc>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d00e      	beq.n	800539c <HAL_TIM_Base_Start+0x70>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a1e      	ldr	r2, [pc, #120]	@ (80053fc <HAL_TIM_Base_Start+0xd0>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d009      	beq.n	800539c <HAL_TIM_Base_Start+0x70>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a1c      	ldr	r2, [pc, #112]	@ (8005400 <HAL_TIM_Base_Start+0xd4>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d004      	beq.n	800539c <HAL_TIM_Base_Start+0x70>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a1b      	ldr	r2, [pc, #108]	@ (8005404 <HAL_TIM_Base_Start+0xd8>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d115      	bne.n	80053c8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	689a      	ldr	r2, [r3, #8]
 80053a2:	4b19      	ldr	r3, [pc, #100]	@ (8005408 <HAL_TIM_Base_Start+0xdc>)
 80053a4:	4013      	ands	r3, r2
 80053a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2b06      	cmp	r3, #6
 80053ac:	d015      	beq.n	80053da <HAL_TIM_Base_Start+0xae>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053b4:	d011      	beq.n	80053da <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f042 0201 	orr.w	r2, r2, #1
 80053c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053c6:	e008      	b.n	80053da <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f042 0201 	orr.w	r2, r2, #1
 80053d6:	601a      	str	r2, [r3, #0]
 80053d8:	e000      	b.n	80053dc <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3714      	adds	r7, #20
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	40012c00 	.word	0x40012c00
 80053f0:	40000400 	.word	0x40000400
 80053f4:	40000800 	.word	0x40000800
 80053f8:	40000c00 	.word	0x40000c00
 80053fc:	40013400 	.word	0x40013400
 8005400:	40014000 	.word	0x40014000
 8005404:	40015000 	.word	0x40015000
 8005408:	00010007 	.word	0x00010007

0800540c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d101      	bne.n	800541e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e049      	b.n	80054b2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005424:	b2db      	uxtb	r3, r3
 8005426:	2b00      	cmp	r3, #0
 8005428:	d106      	bne.n	8005438 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 f841 	bl	80054ba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2202      	movs	r2, #2
 800543c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	3304      	adds	r3, #4
 8005448:	4619      	mov	r1, r3
 800544a:	4610      	mov	r0, r2
 800544c:	f000 fcb0 	bl	8005db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3708      	adds	r7, #8
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}

080054ba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80054ba:	b480      	push	{r7}
 80054bc:	b083      	sub	sp, #12
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80054c2:	bf00      	nop
 80054c4:	370c      	adds	r7, #12
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
	...

080054d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d109      	bne.n	80054f4 <HAL_TIM_PWM_Start+0x24>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	bf14      	ite	ne
 80054ec:	2301      	movne	r3, #1
 80054ee:	2300      	moveq	r3, #0
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	e03c      	b.n	800556e <HAL_TIM_PWM_Start+0x9e>
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	2b04      	cmp	r3, #4
 80054f8:	d109      	bne.n	800550e <HAL_TIM_PWM_Start+0x3e>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b01      	cmp	r3, #1
 8005504:	bf14      	ite	ne
 8005506:	2301      	movne	r3, #1
 8005508:	2300      	moveq	r3, #0
 800550a:	b2db      	uxtb	r3, r3
 800550c:	e02f      	b.n	800556e <HAL_TIM_PWM_Start+0x9e>
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	2b08      	cmp	r3, #8
 8005512:	d109      	bne.n	8005528 <HAL_TIM_PWM_Start+0x58>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800551a:	b2db      	uxtb	r3, r3
 800551c:	2b01      	cmp	r3, #1
 800551e:	bf14      	ite	ne
 8005520:	2301      	movne	r3, #1
 8005522:	2300      	moveq	r3, #0
 8005524:	b2db      	uxtb	r3, r3
 8005526:	e022      	b.n	800556e <HAL_TIM_PWM_Start+0x9e>
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	2b0c      	cmp	r3, #12
 800552c:	d109      	bne.n	8005542 <HAL_TIM_PWM_Start+0x72>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005534:	b2db      	uxtb	r3, r3
 8005536:	2b01      	cmp	r3, #1
 8005538:	bf14      	ite	ne
 800553a:	2301      	movne	r3, #1
 800553c:	2300      	moveq	r3, #0
 800553e:	b2db      	uxtb	r3, r3
 8005540:	e015      	b.n	800556e <HAL_TIM_PWM_Start+0x9e>
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	2b10      	cmp	r3, #16
 8005546:	d109      	bne.n	800555c <HAL_TIM_PWM_Start+0x8c>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800554e:	b2db      	uxtb	r3, r3
 8005550:	2b01      	cmp	r3, #1
 8005552:	bf14      	ite	ne
 8005554:	2301      	movne	r3, #1
 8005556:	2300      	moveq	r3, #0
 8005558:	b2db      	uxtb	r3, r3
 800555a:	e008      	b.n	800556e <HAL_TIM_PWM_Start+0x9e>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005562:	b2db      	uxtb	r3, r3
 8005564:	2b01      	cmp	r3, #1
 8005566:	bf14      	ite	ne
 8005568:	2301      	movne	r3, #1
 800556a:	2300      	moveq	r3, #0
 800556c:	b2db      	uxtb	r3, r3
 800556e:	2b00      	cmp	r3, #0
 8005570:	d001      	beq.n	8005576 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e0a6      	b.n	80056c4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d104      	bne.n	8005586 <HAL_TIM_PWM_Start+0xb6>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2202      	movs	r2, #2
 8005580:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005584:	e023      	b.n	80055ce <HAL_TIM_PWM_Start+0xfe>
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	2b04      	cmp	r3, #4
 800558a:	d104      	bne.n	8005596 <HAL_TIM_PWM_Start+0xc6>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2202      	movs	r2, #2
 8005590:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005594:	e01b      	b.n	80055ce <HAL_TIM_PWM_Start+0xfe>
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	2b08      	cmp	r3, #8
 800559a:	d104      	bne.n	80055a6 <HAL_TIM_PWM_Start+0xd6>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2202      	movs	r2, #2
 80055a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055a4:	e013      	b.n	80055ce <HAL_TIM_PWM_Start+0xfe>
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	2b0c      	cmp	r3, #12
 80055aa:	d104      	bne.n	80055b6 <HAL_TIM_PWM_Start+0xe6>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2202      	movs	r2, #2
 80055b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80055b4:	e00b      	b.n	80055ce <HAL_TIM_PWM_Start+0xfe>
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	2b10      	cmp	r3, #16
 80055ba:	d104      	bne.n	80055c6 <HAL_TIM_PWM_Start+0xf6>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2202      	movs	r2, #2
 80055c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055c4:	e003      	b.n	80055ce <HAL_TIM_PWM_Start+0xfe>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2202      	movs	r2, #2
 80055ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2201      	movs	r2, #1
 80055d4:	6839      	ldr	r1, [r7, #0]
 80055d6:	4618      	mov	r0, r3
 80055d8:	f001 f864 	bl	80066a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a3a      	ldr	r2, [pc, #232]	@ (80056cc <HAL_TIM_PWM_Start+0x1fc>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d018      	beq.n	8005618 <HAL_TIM_PWM_Start+0x148>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a39      	ldr	r2, [pc, #228]	@ (80056d0 <HAL_TIM_PWM_Start+0x200>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d013      	beq.n	8005618 <HAL_TIM_PWM_Start+0x148>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a37      	ldr	r2, [pc, #220]	@ (80056d4 <HAL_TIM_PWM_Start+0x204>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d00e      	beq.n	8005618 <HAL_TIM_PWM_Start+0x148>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a36      	ldr	r2, [pc, #216]	@ (80056d8 <HAL_TIM_PWM_Start+0x208>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d009      	beq.n	8005618 <HAL_TIM_PWM_Start+0x148>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a34      	ldr	r2, [pc, #208]	@ (80056dc <HAL_TIM_PWM_Start+0x20c>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d004      	beq.n	8005618 <HAL_TIM_PWM_Start+0x148>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a33      	ldr	r2, [pc, #204]	@ (80056e0 <HAL_TIM_PWM_Start+0x210>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d101      	bne.n	800561c <HAL_TIM_PWM_Start+0x14c>
 8005618:	2301      	movs	r3, #1
 800561a:	e000      	b.n	800561e <HAL_TIM_PWM_Start+0x14e>
 800561c:	2300      	movs	r3, #0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d007      	beq.n	8005632 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005630:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a25      	ldr	r2, [pc, #148]	@ (80056cc <HAL_TIM_PWM_Start+0x1fc>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d022      	beq.n	8005682 <HAL_TIM_PWM_Start+0x1b2>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005644:	d01d      	beq.n	8005682 <HAL_TIM_PWM_Start+0x1b2>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a26      	ldr	r2, [pc, #152]	@ (80056e4 <HAL_TIM_PWM_Start+0x214>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d018      	beq.n	8005682 <HAL_TIM_PWM_Start+0x1b2>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a24      	ldr	r2, [pc, #144]	@ (80056e8 <HAL_TIM_PWM_Start+0x218>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d013      	beq.n	8005682 <HAL_TIM_PWM_Start+0x1b2>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a23      	ldr	r2, [pc, #140]	@ (80056ec <HAL_TIM_PWM_Start+0x21c>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d00e      	beq.n	8005682 <HAL_TIM_PWM_Start+0x1b2>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a19      	ldr	r2, [pc, #100]	@ (80056d0 <HAL_TIM_PWM_Start+0x200>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d009      	beq.n	8005682 <HAL_TIM_PWM_Start+0x1b2>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a18      	ldr	r2, [pc, #96]	@ (80056d4 <HAL_TIM_PWM_Start+0x204>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d004      	beq.n	8005682 <HAL_TIM_PWM_Start+0x1b2>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a18      	ldr	r2, [pc, #96]	@ (80056e0 <HAL_TIM_PWM_Start+0x210>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d115      	bne.n	80056ae <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	689a      	ldr	r2, [r3, #8]
 8005688:	4b19      	ldr	r3, [pc, #100]	@ (80056f0 <HAL_TIM_PWM_Start+0x220>)
 800568a:	4013      	ands	r3, r2
 800568c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2b06      	cmp	r3, #6
 8005692:	d015      	beq.n	80056c0 <HAL_TIM_PWM_Start+0x1f0>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800569a:	d011      	beq.n	80056c0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f042 0201 	orr.w	r2, r2, #1
 80056aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ac:	e008      	b.n	80056c0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f042 0201 	orr.w	r2, r2, #1
 80056bc:	601a      	str	r2, [r3, #0]
 80056be:	e000      	b.n	80056c2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056c0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3710      	adds	r7, #16
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	40012c00 	.word	0x40012c00
 80056d0:	40013400 	.word	0x40013400
 80056d4:	40014000 	.word	0x40014000
 80056d8:	40014400 	.word	0x40014400
 80056dc:	40014800 	.word	0x40014800
 80056e0:	40015000 	.word	0x40015000
 80056e4:	40000400 	.word	0x40000400
 80056e8:	40000800 	.word	0x40000800
 80056ec:	40000c00 	.word	0x40000c00
 80056f0:	00010007 	.word	0x00010007

080056f4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b086      	sub	sp, #24
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d101      	bne.n	8005708 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e097      	b.n	8005838 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b00      	cmp	r3, #0
 8005712:	d106      	bne.n	8005722 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f7fc f94d 	bl	80019bc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2202      	movs	r2, #2
 8005726:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	6812      	ldr	r2, [r2, #0]
 8005734:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005738:	f023 0307 	bic.w	r3, r3, #7
 800573c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	3304      	adds	r3, #4
 8005746:	4619      	mov	r1, r3
 8005748:	4610      	mov	r0, r2
 800574a:	f000 fb31 	bl	8005db0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	6a1b      	ldr	r3, [r3, #32]
 8005764:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	4313      	orrs	r3, r2
 800576e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005776:	f023 0303 	bic.w	r3, r3, #3
 800577a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	689a      	ldr	r2, [r3, #8]
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	699b      	ldr	r3, [r3, #24]
 8005784:	021b      	lsls	r3, r3, #8
 8005786:	4313      	orrs	r3, r2
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	4313      	orrs	r3, r2
 800578c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005794:	f023 030c 	bic.w	r3, r3, #12
 8005798:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80057a0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80057a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	68da      	ldr	r2, [r3, #12]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	69db      	ldr	r3, [r3, #28]
 80057ae:	021b      	lsls	r3, r3, #8
 80057b0:	4313      	orrs	r3, r2
 80057b2:	693a      	ldr	r2, [r7, #16]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	011a      	lsls	r2, r3, #4
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	6a1b      	ldr	r3, [r3, #32]
 80057c2:	031b      	lsls	r3, r3, #12
 80057c4:	4313      	orrs	r3, r2
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80057d2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80057da:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	685a      	ldr	r2, [r3, #4]
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	695b      	ldr	r3, [r3, #20]
 80057e4:	011b      	lsls	r3, r3, #4
 80057e6:	4313      	orrs	r3, r2
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	697a      	ldr	r2, [r7, #20]
 80057f4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2201      	movs	r2, #1
 800580a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2201      	movs	r2, #1
 8005812:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2201      	movs	r2, #1
 800581a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2201      	movs	r2, #1
 8005822:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2201      	movs	r2, #1
 800582a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2201      	movs	r2, #1
 8005832:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	3718      	adds	r7, #24
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005850:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005858:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005860:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005868:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d110      	bne.n	8005892 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005870:	7bfb      	ldrb	r3, [r7, #15]
 8005872:	2b01      	cmp	r3, #1
 8005874:	d102      	bne.n	800587c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005876:	7b7b      	ldrb	r3, [r7, #13]
 8005878:	2b01      	cmp	r3, #1
 800587a:	d001      	beq.n	8005880 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e069      	b.n	8005954 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2202      	movs	r2, #2
 8005884:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2202      	movs	r2, #2
 800588c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005890:	e031      	b.n	80058f6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	2b04      	cmp	r3, #4
 8005896:	d110      	bne.n	80058ba <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005898:	7bbb      	ldrb	r3, [r7, #14]
 800589a:	2b01      	cmp	r3, #1
 800589c:	d102      	bne.n	80058a4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800589e:	7b3b      	ldrb	r3, [r7, #12]
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d001      	beq.n	80058a8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e055      	b.n	8005954 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2202      	movs	r2, #2
 80058ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2202      	movs	r2, #2
 80058b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80058b8:	e01d      	b.n	80058f6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80058ba:	7bfb      	ldrb	r3, [r7, #15]
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d108      	bne.n	80058d2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80058c0:	7bbb      	ldrb	r3, [r7, #14]
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d105      	bne.n	80058d2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80058c6:	7b7b      	ldrb	r3, [r7, #13]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d102      	bne.n	80058d2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80058cc:	7b3b      	ldrb	r3, [r7, #12]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d001      	beq.n	80058d6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e03e      	b.n	8005954 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2202      	movs	r2, #2
 80058da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2202      	movs	r2, #2
 80058e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2202      	movs	r2, #2
 80058ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2202      	movs	r2, #2
 80058f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d003      	beq.n	8005904 <HAL_TIM_Encoder_Start+0xc4>
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	2b04      	cmp	r3, #4
 8005900:	d008      	beq.n	8005914 <HAL_TIM_Encoder_Start+0xd4>
 8005902:	e00f      	b.n	8005924 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2201      	movs	r2, #1
 800590a:	2100      	movs	r1, #0
 800590c:	4618      	mov	r0, r3
 800590e:	f000 fec9 	bl	80066a4 <TIM_CCxChannelCmd>
      break;
 8005912:	e016      	b.n	8005942 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2201      	movs	r2, #1
 800591a:	2104      	movs	r1, #4
 800591c:	4618      	mov	r0, r3
 800591e:	f000 fec1 	bl	80066a4 <TIM_CCxChannelCmd>
      break;
 8005922:	e00e      	b.n	8005942 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2201      	movs	r2, #1
 800592a:	2100      	movs	r1, #0
 800592c:	4618      	mov	r0, r3
 800592e:	f000 feb9 	bl	80066a4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2201      	movs	r2, #1
 8005938:	2104      	movs	r1, #4
 800593a:	4618      	mov	r0, r3
 800593c:	f000 feb2 	bl	80066a4 <TIM_CCxChannelCmd>
      break;
 8005940:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f042 0201 	orr.w	r2, r2, #1
 8005950:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005952:	2300      	movs	r3, #0
}
 8005954:	4618      	mov	r0, r3
 8005956:	3710      	adds	r7, #16
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b086      	sub	sp, #24
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005968:	2300      	movs	r3, #0
 800596a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005972:	2b01      	cmp	r3, #1
 8005974:	d101      	bne.n	800597a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005976:	2302      	movs	r3, #2
 8005978:	e0ff      	b.n	8005b7a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2b14      	cmp	r3, #20
 8005986:	f200 80f0 	bhi.w	8005b6a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800598a:	a201      	add	r2, pc, #4	@ (adr r2, 8005990 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800598c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005990:	080059e5 	.word	0x080059e5
 8005994:	08005b6b 	.word	0x08005b6b
 8005998:	08005b6b 	.word	0x08005b6b
 800599c:	08005b6b 	.word	0x08005b6b
 80059a0:	08005a25 	.word	0x08005a25
 80059a4:	08005b6b 	.word	0x08005b6b
 80059a8:	08005b6b 	.word	0x08005b6b
 80059ac:	08005b6b 	.word	0x08005b6b
 80059b0:	08005a67 	.word	0x08005a67
 80059b4:	08005b6b 	.word	0x08005b6b
 80059b8:	08005b6b 	.word	0x08005b6b
 80059bc:	08005b6b 	.word	0x08005b6b
 80059c0:	08005aa7 	.word	0x08005aa7
 80059c4:	08005b6b 	.word	0x08005b6b
 80059c8:	08005b6b 	.word	0x08005b6b
 80059cc:	08005b6b 	.word	0x08005b6b
 80059d0:	08005ae9 	.word	0x08005ae9
 80059d4:	08005b6b 	.word	0x08005b6b
 80059d8:	08005b6b 	.word	0x08005b6b
 80059dc:	08005b6b 	.word	0x08005b6b
 80059e0:	08005b29 	.word	0x08005b29
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68b9      	ldr	r1, [r7, #8]
 80059ea:	4618      	mov	r0, r3
 80059ec:	f000 fa94 	bl	8005f18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	699a      	ldr	r2, [r3, #24]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f042 0208 	orr.w	r2, r2, #8
 80059fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	699a      	ldr	r2, [r3, #24]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f022 0204 	bic.w	r2, r2, #4
 8005a0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	6999      	ldr	r1, [r3, #24]
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	691a      	ldr	r2, [r3, #16]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	430a      	orrs	r2, r1
 8005a20:	619a      	str	r2, [r3, #24]
      break;
 8005a22:	e0a5      	b.n	8005b70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68b9      	ldr	r1, [r7, #8]
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f000 fb0e 	bl	800604c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	699a      	ldr	r2, [r3, #24]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	699a      	ldr	r2, [r3, #24]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	6999      	ldr	r1, [r3, #24]
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	021a      	lsls	r2, r3, #8
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	430a      	orrs	r2, r1
 8005a62:	619a      	str	r2, [r3, #24]
      break;
 8005a64:	e084      	b.n	8005b70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68b9      	ldr	r1, [r7, #8]
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f000 fb81 	bl	8006174 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	69da      	ldr	r2, [r3, #28]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f042 0208 	orr.w	r2, r2, #8
 8005a80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	69da      	ldr	r2, [r3, #28]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f022 0204 	bic.w	r2, r2, #4
 8005a90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	69d9      	ldr	r1, [r3, #28]
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	691a      	ldr	r2, [r3, #16]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	430a      	orrs	r2, r1
 8005aa2:	61da      	str	r2, [r3, #28]
      break;
 8005aa4:	e064      	b.n	8005b70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68b9      	ldr	r1, [r7, #8]
 8005aac:	4618      	mov	r0, r3
 8005aae:	f000 fbf3 	bl	8006298 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	69da      	ldr	r2, [r3, #28]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ac0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	69da      	ldr	r2, [r3, #28]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ad0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	69d9      	ldr	r1, [r3, #28]
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	021a      	lsls	r2, r3, #8
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	430a      	orrs	r2, r1
 8005ae4:	61da      	str	r2, [r3, #28]
      break;
 8005ae6:	e043      	b.n	8005b70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68b9      	ldr	r1, [r7, #8]
 8005aee:	4618      	mov	r0, r3
 8005af0:	f000 fc66 	bl	80063c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f042 0208 	orr.w	r2, r2, #8
 8005b02:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f022 0204 	bic.w	r2, r2, #4
 8005b12:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	691a      	ldr	r2, [r3, #16]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	430a      	orrs	r2, r1
 8005b24:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005b26:	e023      	b.n	8005b70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68b9      	ldr	r1, [r7, #8]
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f000 fcb0 	bl	8006494 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b42:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b52:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	021a      	lsls	r2, r3, #8
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	430a      	orrs	r2, r1
 8005b66:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005b68:	e002      	b.n	8005b70 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	75fb      	strb	r3, [r7, #23]
      break;
 8005b6e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005b78:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3718      	adds	r7, #24
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop

08005b84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d101      	bne.n	8005ba0 <HAL_TIM_ConfigClockSource+0x1c>
 8005b9c:	2302      	movs	r3, #2
 8005b9e:	e0f6      	b.n	8005d8e <HAL_TIM_ConfigClockSource+0x20a>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2202      	movs	r2, #2
 8005bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005bbe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005bc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005bca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68ba      	ldr	r2, [r7, #8]
 8005bd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a6f      	ldr	r2, [pc, #444]	@ (8005d98 <HAL_TIM_ConfigClockSource+0x214>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	f000 80c1 	beq.w	8005d62 <HAL_TIM_ConfigClockSource+0x1de>
 8005be0:	4a6d      	ldr	r2, [pc, #436]	@ (8005d98 <HAL_TIM_ConfigClockSource+0x214>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	f200 80c6 	bhi.w	8005d74 <HAL_TIM_ConfigClockSource+0x1f0>
 8005be8:	4a6c      	ldr	r2, [pc, #432]	@ (8005d9c <HAL_TIM_ConfigClockSource+0x218>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	f000 80b9 	beq.w	8005d62 <HAL_TIM_ConfigClockSource+0x1de>
 8005bf0:	4a6a      	ldr	r2, [pc, #424]	@ (8005d9c <HAL_TIM_ConfigClockSource+0x218>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	f200 80be 	bhi.w	8005d74 <HAL_TIM_ConfigClockSource+0x1f0>
 8005bf8:	4a69      	ldr	r2, [pc, #420]	@ (8005da0 <HAL_TIM_ConfigClockSource+0x21c>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	f000 80b1 	beq.w	8005d62 <HAL_TIM_ConfigClockSource+0x1de>
 8005c00:	4a67      	ldr	r2, [pc, #412]	@ (8005da0 <HAL_TIM_ConfigClockSource+0x21c>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	f200 80b6 	bhi.w	8005d74 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c08:	4a66      	ldr	r2, [pc, #408]	@ (8005da4 <HAL_TIM_ConfigClockSource+0x220>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	f000 80a9 	beq.w	8005d62 <HAL_TIM_ConfigClockSource+0x1de>
 8005c10:	4a64      	ldr	r2, [pc, #400]	@ (8005da4 <HAL_TIM_ConfigClockSource+0x220>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	f200 80ae 	bhi.w	8005d74 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c18:	4a63      	ldr	r2, [pc, #396]	@ (8005da8 <HAL_TIM_ConfigClockSource+0x224>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	f000 80a1 	beq.w	8005d62 <HAL_TIM_ConfigClockSource+0x1de>
 8005c20:	4a61      	ldr	r2, [pc, #388]	@ (8005da8 <HAL_TIM_ConfigClockSource+0x224>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	f200 80a6 	bhi.w	8005d74 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c28:	4a60      	ldr	r2, [pc, #384]	@ (8005dac <HAL_TIM_ConfigClockSource+0x228>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	f000 8099 	beq.w	8005d62 <HAL_TIM_ConfigClockSource+0x1de>
 8005c30:	4a5e      	ldr	r2, [pc, #376]	@ (8005dac <HAL_TIM_ConfigClockSource+0x228>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	f200 809e 	bhi.w	8005d74 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c38:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005c3c:	f000 8091 	beq.w	8005d62 <HAL_TIM_ConfigClockSource+0x1de>
 8005c40:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005c44:	f200 8096 	bhi.w	8005d74 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c48:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c4c:	f000 8089 	beq.w	8005d62 <HAL_TIM_ConfigClockSource+0x1de>
 8005c50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c54:	f200 808e 	bhi.w	8005d74 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c5c:	d03e      	beq.n	8005cdc <HAL_TIM_ConfigClockSource+0x158>
 8005c5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c62:	f200 8087 	bhi.w	8005d74 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c6a:	f000 8086 	beq.w	8005d7a <HAL_TIM_ConfigClockSource+0x1f6>
 8005c6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c72:	d87f      	bhi.n	8005d74 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c74:	2b70      	cmp	r3, #112	@ 0x70
 8005c76:	d01a      	beq.n	8005cae <HAL_TIM_ConfigClockSource+0x12a>
 8005c78:	2b70      	cmp	r3, #112	@ 0x70
 8005c7a:	d87b      	bhi.n	8005d74 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c7c:	2b60      	cmp	r3, #96	@ 0x60
 8005c7e:	d050      	beq.n	8005d22 <HAL_TIM_ConfigClockSource+0x19e>
 8005c80:	2b60      	cmp	r3, #96	@ 0x60
 8005c82:	d877      	bhi.n	8005d74 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c84:	2b50      	cmp	r3, #80	@ 0x50
 8005c86:	d03c      	beq.n	8005d02 <HAL_TIM_ConfigClockSource+0x17e>
 8005c88:	2b50      	cmp	r3, #80	@ 0x50
 8005c8a:	d873      	bhi.n	8005d74 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c8c:	2b40      	cmp	r3, #64	@ 0x40
 8005c8e:	d058      	beq.n	8005d42 <HAL_TIM_ConfigClockSource+0x1be>
 8005c90:	2b40      	cmp	r3, #64	@ 0x40
 8005c92:	d86f      	bhi.n	8005d74 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c94:	2b30      	cmp	r3, #48	@ 0x30
 8005c96:	d064      	beq.n	8005d62 <HAL_TIM_ConfigClockSource+0x1de>
 8005c98:	2b30      	cmp	r3, #48	@ 0x30
 8005c9a:	d86b      	bhi.n	8005d74 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c9c:	2b20      	cmp	r3, #32
 8005c9e:	d060      	beq.n	8005d62 <HAL_TIM_ConfigClockSource+0x1de>
 8005ca0:	2b20      	cmp	r3, #32
 8005ca2:	d867      	bhi.n	8005d74 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d05c      	beq.n	8005d62 <HAL_TIM_ConfigClockSource+0x1de>
 8005ca8:	2b10      	cmp	r3, #16
 8005caa:	d05a      	beq.n	8005d62 <HAL_TIM_ConfigClockSource+0x1de>
 8005cac:	e062      	b.n	8005d74 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cbe:	f000 fcd1 	bl	8006664 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005cd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68ba      	ldr	r2, [r7, #8]
 8005cd8:	609a      	str	r2, [r3, #8]
      break;
 8005cda:	e04f      	b.n	8005d7c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cec:	f000 fcba 	bl	8006664 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	689a      	ldr	r2, [r3, #8]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005cfe:	609a      	str	r2, [r3, #8]
      break;
 8005d00:	e03c      	b.n	8005d7c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d0e:	461a      	mov	r2, r3
 8005d10:	f000 fc2c 	bl	800656c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2150      	movs	r1, #80	@ 0x50
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f000 fc85 	bl	800662a <TIM_ITRx_SetConfig>
      break;
 8005d20:	e02c      	b.n	8005d7c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d2e:	461a      	mov	r2, r3
 8005d30:	f000 fc4b 	bl	80065ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2160      	movs	r1, #96	@ 0x60
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f000 fc75 	bl	800662a <TIM_ITRx_SetConfig>
      break;
 8005d40:	e01c      	b.n	8005d7c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d4e:	461a      	mov	r2, r3
 8005d50:	f000 fc0c 	bl	800656c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2140      	movs	r1, #64	@ 0x40
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f000 fc65 	bl	800662a <TIM_ITRx_SetConfig>
      break;
 8005d60:	e00c      	b.n	8005d7c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	4610      	mov	r0, r2
 8005d6e:	f000 fc5c 	bl	800662a <TIM_ITRx_SetConfig>
      break;
 8005d72:	e003      	b.n	8005d7c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	73fb      	strb	r3, [r7, #15]
      break;
 8005d78:	e000      	b.n	8005d7c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005d7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3710      	adds	r7, #16
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	00100070 	.word	0x00100070
 8005d9c:	00100060 	.word	0x00100060
 8005da0:	00100050 	.word	0x00100050
 8005da4:	00100040 	.word	0x00100040
 8005da8:	00100030 	.word	0x00100030
 8005dac:	00100020 	.word	0x00100020

08005db0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b085      	sub	sp, #20
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a4c      	ldr	r2, [pc, #304]	@ (8005ef4 <TIM_Base_SetConfig+0x144>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d017      	beq.n	8005df8 <TIM_Base_SetConfig+0x48>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dce:	d013      	beq.n	8005df8 <TIM_Base_SetConfig+0x48>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a49      	ldr	r2, [pc, #292]	@ (8005ef8 <TIM_Base_SetConfig+0x148>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d00f      	beq.n	8005df8 <TIM_Base_SetConfig+0x48>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a48      	ldr	r2, [pc, #288]	@ (8005efc <TIM_Base_SetConfig+0x14c>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d00b      	beq.n	8005df8 <TIM_Base_SetConfig+0x48>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a47      	ldr	r2, [pc, #284]	@ (8005f00 <TIM_Base_SetConfig+0x150>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d007      	beq.n	8005df8 <TIM_Base_SetConfig+0x48>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a46      	ldr	r2, [pc, #280]	@ (8005f04 <TIM_Base_SetConfig+0x154>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d003      	beq.n	8005df8 <TIM_Base_SetConfig+0x48>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4a45      	ldr	r2, [pc, #276]	@ (8005f08 <TIM_Base_SetConfig+0x158>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d108      	bne.n	8005e0a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a39      	ldr	r2, [pc, #228]	@ (8005ef4 <TIM_Base_SetConfig+0x144>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d023      	beq.n	8005e5a <TIM_Base_SetConfig+0xaa>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e18:	d01f      	beq.n	8005e5a <TIM_Base_SetConfig+0xaa>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a36      	ldr	r2, [pc, #216]	@ (8005ef8 <TIM_Base_SetConfig+0x148>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d01b      	beq.n	8005e5a <TIM_Base_SetConfig+0xaa>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a35      	ldr	r2, [pc, #212]	@ (8005efc <TIM_Base_SetConfig+0x14c>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d017      	beq.n	8005e5a <TIM_Base_SetConfig+0xaa>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a34      	ldr	r2, [pc, #208]	@ (8005f00 <TIM_Base_SetConfig+0x150>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d013      	beq.n	8005e5a <TIM_Base_SetConfig+0xaa>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a33      	ldr	r2, [pc, #204]	@ (8005f04 <TIM_Base_SetConfig+0x154>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d00f      	beq.n	8005e5a <TIM_Base_SetConfig+0xaa>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a33      	ldr	r2, [pc, #204]	@ (8005f0c <TIM_Base_SetConfig+0x15c>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d00b      	beq.n	8005e5a <TIM_Base_SetConfig+0xaa>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a32      	ldr	r2, [pc, #200]	@ (8005f10 <TIM_Base_SetConfig+0x160>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d007      	beq.n	8005e5a <TIM_Base_SetConfig+0xaa>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a31      	ldr	r2, [pc, #196]	@ (8005f14 <TIM_Base_SetConfig+0x164>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d003      	beq.n	8005e5a <TIM_Base_SetConfig+0xaa>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a2c      	ldr	r2, [pc, #176]	@ (8005f08 <TIM_Base_SetConfig+0x158>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d108      	bne.n	8005e6c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	695b      	ldr	r3, [r3, #20]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	689a      	ldr	r2, [r3, #8]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	4a18      	ldr	r2, [pc, #96]	@ (8005ef4 <TIM_Base_SetConfig+0x144>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d013      	beq.n	8005ec0 <TIM_Base_SetConfig+0x110>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4a1a      	ldr	r2, [pc, #104]	@ (8005f04 <TIM_Base_SetConfig+0x154>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d00f      	beq.n	8005ec0 <TIM_Base_SetConfig+0x110>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a1a      	ldr	r2, [pc, #104]	@ (8005f0c <TIM_Base_SetConfig+0x15c>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d00b      	beq.n	8005ec0 <TIM_Base_SetConfig+0x110>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4a19      	ldr	r2, [pc, #100]	@ (8005f10 <TIM_Base_SetConfig+0x160>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d007      	beq.n	8005ec0 <TIM_Base_SetConfig+0x110>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a18      	ldr	r2, [pc, #96]	@ (8005f14 <TIM_Base_SetConfig+0x164>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d003      	beq.n	8005ec0 <TIM_Base_SetConfig+0x110>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a13      	ldr	r2, [pc, #76]	@ (8005f08 <TIM_Base_SetConfig+0x158>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d103      	bne.n	8005ec8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	691a      	ldr	r2, [r3, #16]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	f003 0301 	and.w	r3, r3, #1
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d105      	bne.n	8005ee6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	f023 0201 	bic.w	r2, r3, #1
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	611a      	str	r2, [r3, #16]
  }
}
 8005ee6:	bf00      	nop
 8005ee8:	3714      	adds	r7, #20
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	40012c00 	.word	0x40012c00
 8005ef8:	40000400 	.word	0x40000400
 8005efc:	40000800 	.word	0x40000800
 8005f00:	40000c00 	.word	0x40000c00
 8005f04:	40013400 	.word	0x40013400
 8005f08:	40015000 	.word	0x40015000
 8005f0c:	40014000 	.word	0x40014000
 8005f10:	40014400 	.word	0x40014400
 8005f14:	40014800 	.word	0x40014800

08005f18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b087      	sub	sp, #28
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a1b      	ldr	r3, [r3, #32]
 8005f26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a1b      	ldr	r3, [r3, #32]
 8005f2c:	f023 0201 	bic.w	r2, r3, #1
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f023 0303 	bic.w	r3, r3, #3
 8005f52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	f023 0302 	bic.w	r3, r3, #2
 8005f64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a30      	ldr	r2, [pc, #192]	@ (8006034 <TIM_OC1_SetConfig+0x11c>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d013      	beq.n	8005fa0 <TIM_OC1_SetConfig+0x88>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a2f      	ldr	r2, [pc, #188]	@ (8006038 <TIM_OC1_SetConfig+0x120>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d00f      	beq.n	8005fa0 <TIM_OC1_SetConfig+0x88>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a2e      	ldr	r2, [pc, #184]	@ (800603c <TIM_OC1_SetConfig+0x124>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d00b      	beq.n	8005fa0 <TIM_OC1_SetConfig+0x88>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a2d      	ldr	r2, [pc, #180]	@ (8006040 <TIM_OC1_SetConfig+0x128>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d007      	beq.n	8005fa0 <TIM_OC1_SetConfig+0x88>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a2c      	ldr	r2, [pc, #176]	@ (8006044 <TIM_OC1_SetConfig+0x12c>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d003      	beq.n	8005fa0 <TIM_OC1_SetConfig+0x88>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a2b      	ldr	r2, [pc, #172]	@ (8006048 <TIM_OC1_SetConfig+0x130>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d10c      	bne.n	8005fba <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	f023 0308 	bic.w	r3, r3, #8
 8005fa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	f023 0304 	bic.w	r3, r3, #4
 8005fb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a1d      	ldr	r2, [pc, #116]	@ (8006034 <TIM_OC1_SetConfig+0x11c>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d013      	beq.n	8005fea <TIM_OC1_SetConfig+0xd2>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a1c      	ldr	r2, [pc, #112]	@ (8006038 <TIM_OC1_SetConfig+0x120>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d00f      	beq.n	8005fea <TIM_OC1_SetConfig+0xd2>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a1b      	ldr	r2, [pc, #108]	@ (800603c <TIM_OC1_SetConfig+0x124>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d00b      	beq.n	8005fea <TIM_OC1_SetConfig+0xd2>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a1a      	ldr	r2, [pc, #104]	@ (8006040 <TIM_OC1_SetConfig+0x128>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d007      	beq.n	8005fea <TIM_OC1_SetConfig+0xd2>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a19      	ldr	r2, [pc, #100]	@ (8006044 <TIM_OC1_SetConfig+0x12c>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d003      	beq.n	8005fea <TIM_OC1_SetConfig+0xd2>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a18      	ldr	r2, [pc, #96]	@ (8006048 <TIM_OC1_SetConfig+0x130>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d111      	bne.n	800600e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ff0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ff8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	695b      	ldr	r3, [r3, #20]
 8005ffe:	693a      	ldr	r2, [r7, #16]
 8006000:	4313      	orrs	r3, r2
 8006002:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	699b      	ldr	r3, [r3, #24]
 8006008:	693a      	ldr	r2, [r7, #16]
 800600a:	4313      	orrs	r3, r2
 800600c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	693a      	ldr	r2, [r7, #16]
 8006012:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	685a      	ldr	r2, [r3, #4]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	697a      	ldr	r2, [r7, #20]
 8006026:	621a      	str	r2, [r3, #32]
}
 8006028:	bf00      	nop
 800602a:	371c      	adds	r7, #28
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr
 8006034:	40012c00 	.word	0x40012c00
 8006038:	40013400 	.word	0x40013400
 800603c:	40014000 	.word	0x40014000
 8006040:	40014400 	.word	0x40014400
 8006044:	40014800 	.word	0x40014800
 8006048:	40015000 	.word	0x40015000

0800604c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800604c:	b480      	push	{r7}
 800604e:	b087      	sub	sp, #28
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a1b      	ldr	r3, [r3, #32]
 800605a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a1b      	ldr	r3, [r3, #32]
 8006060:	f023 0210 	bic.w	r2, r3, #16
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	699b      	ldr	r3, [r3, #24]
 8006072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800607a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800607e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006086:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	021b      	lsls	r3, r3, #8
 800608e:	68fa      	ldr	r2, [r7, #12]
 8006090:	4313      	orrs	r3, r2
 8006092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	f023 0320 	bic.w	r3, r3, #32
 800609a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	011b      	lsls	r3, r3, #4
 80060a2:	697a      	ldr	r2, [r7, #20]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4a2c      	ldr	r2, [pc, #176]	@ (800615c <TIM_OC2_SetConfig+0x110>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d007      	beq.n	80060c0 <TIM_OC2_SetConfig+0x74>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4a2b      	ldr	r2, [pc, #172]	@ (8006160 <TIM_OC2_SetConfig+0x114>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d003      	beq.n	80060c0 <TIM_OC2_SetConfig+0x74>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4a2a      	ldr	r2, [pc, #168]	@ (8006164 <TIM_OC2_SetConfig+0x118>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d10d      	bne.n	80060dc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	011b      	lsls	r3, r3, #4
 80060ce:	697a      	ldr	r2, [r7, #20]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a1f      	ldr	r2, [pc, #124]	@ (800615c <TIM_OC2_SetConfig+0x110>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d013      	beq.n	800610c <TIM_OC2_SetConfig+0xc0>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a1e      	ldr	r2, [pc, #120]	@ (8006160 <TIM_OC2_SetConfig+0x114>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d00f      	beq.n	800610c <TIM_OC2_SetConfig+0xc0>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a1e      	ldr	r2, [pc, #120]	@ (8006168 <TIM_OC2_SetConfig+0x11c>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d00b      	beq.n	800610c <TIM_OC2_SetConfig+0xc0>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a1d      	ldr	r2, [pc, #116]	@ (800616c <TIM_OC2_SetConfig+0x120>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d007      	beq.n	800610c <TIM_OC2_SetConfig+0xc0>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a1c      	ldr	r2, [pc, #112]	@ (8006170 <TIM_OC2_SetConfig+0x124>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d003      	beq.n	800610c <TIM_OC2_SetConfig+0xc0>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a17      	ldr	r2, [pc, #92]	@ (8006164 <TIM_OC2_SetConfig+0x118>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d113      	bne.n	8006134 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006112:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800611a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	695b      	ldr	r3, [r3, #20]
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	693a      	ldr	r2, [r7, #16]
 8006124:	4313      	orrs	r3, r2
 8006126:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	699b      	ldr	r3, [r3, #24]
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	693a      	ldr	r2, [r7, #16]
 8006130:	4313      	orrs	r3, r2
 8006132:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	693a      	ldr	r2, [r7, #16]
 8006138:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	68fa      	ldr	r2, [r7, #12]
 800613e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	685a      	ldr	r2, [r3, #4]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	697a      	ldr	r2, [r7, #20]
 800614c:	621a      	str	r2, [r3, #32]
}
 800614e:	bf00      	nop
 8006150:	371c      	adds	r7, #28
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	40012c00 	.word	0x40012c00
 8006160:	40013400 	.word	0x40013400
 8006164:	40015000 	.word	0x40015000
 8006168:	40014000 	.word	0x40014000
 800616c:	40014400 	.word	0x40014400
 8006170:	40014800 	.word	0x40014800

08006174 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006174:	b480      	push	{r7}
 8006176:	b087      	sub	sp, #28
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a1b      	ldr	r3, [r3, #32]
 8006182:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a1b      	ldr	r3, [r3, #32]
 8006188:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	69db      	ldr	r3, [r3, #28]
 800619a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f023 0303 	bic.w	r3, r3, #3
 80061ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80061c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	021b      	lsls	r3, r3, #8
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a2b      	ldr	r2, [pc, #172]	@ (8006280 <TIM_OC3_SetConfig+0x10c>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d007      	beq.n	80061e6 <TIM_OC3_SetConfig+0x72>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a2a      	ldr	r2, [pc, #168]	@ (8006284 <TIM_OC3_SetConfig+0x110>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d003      	beq.n	80061e6 <TIM_OC3_SetConfig+0x72>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a29      	ldr	r2, [pc, #164]	@ (8006288 <TIM_OC3_SetConfig+0x114>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d10d      	bne.n	8006202 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80061ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	021b      	lsls	r3, r3, #8
 80061f4:	697a      	ldr	r2, [r7, #20]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006200:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a1e      	ldr	r2, [pc, #120]	@ (8006280 <TIM_OC3_SetConfig+0x10c>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d013      	beq.n	8006232 <TIM_OC3_SetConfig+0xbe>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a1d      	ldr	r2, [pc, #116]	@ (8006284 <TIM_OC3_SetConfig+0x110>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d00f      	beq.n	8006232 <TIM_OC3_SetConfig+0xbe>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a1d      	ldr	r2, [pc, #116]	@ (800628c <TIM_OC3_SetConfig+0x118>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d00b      	beq.n	8006232 <TIM_OC3_SetConfig+0xbe>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a1c      	ldr	r2, [pc, #112]	@ (8006290 <TIM_OC3_SetConfig+0x11c>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d007      	beq.n	8006232 <TIM_OC3_SetConfig+0xbe>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a1b      	ldr	r2, [pc, #108]	@ (8006294 <TIM_OC3_SetConfig+0x120>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d003      	beq.n	8006232 <TIM_OC3_SetConfig+0xbe>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a16      	ldr	r2, [pc, #88]	@ (8006288 <TIM_OC3_SetConfig+0x114>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d113      	bne.n	800625a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006238:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006240:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	695b      	ldr	r3, [r3, #20]
 8006246:	011b      	lsls	r3, r3, #4
 8006248:	693a      	ldr	r2, [r7, #16]
 800624a:	4313      	orrs	r3, r2
 800624c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	699b      	ldr	r3, [r3, #24]
 8006252:	011b      	lsls	r3, r3, #4
 8006254:	693a      	ldr	r2, [r7, #16]
 8006256:	4313      	orrs	r3, r2
 8006258:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	693a      	ldr	r2, [r7, #16]
 800625e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	685a      	ldr	r2, [r3, #4]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	621a      	str	r2, [r3, #32]
}
 8006274:	bf00      	nop
 8006276:	371c      	adds	r7, #28
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr
 8006280:	40012c00 	.word	0x40012c00
 8006284:	40013400 	.word	0x40013400
 8006288:	40015000 	.word	0x40015000
 800628c:	40014000 	.word	0x40014000
 8006290:	40014400 	.word	0x40014400
 8006294:	40014800 	.word	0x40014800

08006298 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006298:	b480      	push	{r7}
 800629a:	b087      	sub	sp, #28
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a1b      	ldr	r3, [r3, #32]
 80062a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6a1b      	ldr	r3, [r3, #32]
 80062ac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	69db      	ldr	r3, [r3, #28]
 80062be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80062c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	021b      	lsls	r3, r3, #8
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	4313      	orrs	r3, r2
 80062de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80062e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	031b      	lsls	r3, r3, #12
 80062ee:	697a      	ldr	r2, [r7, #20]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a2c      	ldr	r2, [pc, #176]	@ (80063a8 <TIM_OC4_SetConfig+0x110>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d007      	beq.n	800630c <TIM_OC4_SetConfig+0x74>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a2b      	ldr	r2, [pc, #172]	@ (80063ac <TIM_OC4_SetConfig+0x114>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d003      	beq.n	800630c <TIM_OC4_SetConfig+0x74>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a2a      	ldr	r2, [pc, #168]	@ (80063b0 <TIM_OC4_SetConfig+0x118>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d10d      	bne.n	8006328 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006312:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	031b      	lsls	r3, r3, #12
 800631a:	697a      	ldr	r2, [r7, #20]
 800631c:	4313      	orrs	r3, r2
 800631e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006326:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a1f      	ldr	r2, [pc, #124]	@ (80063a8 <TIM_OC4_SetConfig+0x110>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d013      	beq.n	8006358 <TIM_OC4_SetConfig+0xc0>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a1e      	ldr	r2, [pc, #120]	@ (80063ac <TIM_OC4_SetConfig+0x114>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d00f      	beq.n	8006358 <TIM_OC4_SetConfig+0xc0>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a1e      	ldr	r2, [pc, #120]	@ (80063b4 <TIM_OC4_SetConfig+0x11c>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d00b      	beq.n	8006358 <TIM_OC4_SetConfig+0xc0>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a1d      	ldr	r2, [pc, #116]	@ (80063b8 <TIM_OC4_SetConfig+0x120>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d007      	beq.n	8006358 <TIM_OC4_SetConfig+0xc0>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a1c      	ldr	r2, [pc, #112]	@ (80063bc <TIM_OC4_SetConfig+0x124>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d003      	beq.n	8006358 <TIM_OC4_SetConfig+0xc0>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a17      	ldr	r2, [pc, #92]	@ (80063b0 <TIM_OC4_SetConfig+0x118>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d113      	bne.n	8006380 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800635e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006366:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	695b      	ldr	r3, [r3, #20]
 800636c:	019b      	lsls	r3, r3, #6
 800636e:	693a      	ldr	r2, [r7, #16]
 8006370:	4313      	orrs	r3, r2
 8006372:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	699b      	ldr	r3, [r3, #24]
 8006378:	019b      	lsls	r3, r3, #6
 800637a:	693a      	ldr	r2, [r7, #16]
 800637c:	4313      	orrs	r3, r2
 800637e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	693a      	ldr	r2, [r7, #16]
 8006384:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	685a      	ldr	r2, [r3, #4]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	697a      	ldr	r2, [r7, #20]
 8006398:	621a      	str	r2, [r3, #32]
}
 800639a:	bf00      	nop
 800639c:	371c      	adds	r7, #28
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	40012c00 	.word	0x40012c00
 80063ac:	40013400 	.word	0x40013400
 80063b0:	40015000 	.word	0x40015000
 80063b4:	40014000 	.word	0x40014000
 80063b8:	40014400 	.word	0x40014400
 80063bc:	40014800 	.word	0x40014800

080063c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b087      	sub	sp, #28
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a1b      	ldr	r3, [r3, #32]
 80063ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6a1b      	ldr	r3, [r3, #32]
 80063d4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006404:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	041b      	lsls	r3, r3, #16
 800640c:	693a      	ldr	r2, [r7, #16]
 800640e:	4313      	orrs	r3, r2
 8006410:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a19      	ldr	r2, [pc, #100]	@ (800647c <TIM_OC5_SetConfig+0xbc>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d013      	beq.n	8006442 <TIM_OC5_SetConfig+0x82>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a18      	ldr	r2, [pc, #96]	@ (8006480 <TIM_OC5_SetConfig+0xc0>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d00f      	beq.n	8006442 <TIM_OC5_SetConfig+0x82>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a17      	ldr	r2, [pc, #92]	@ (8006484 <TIM_OC5_SetConfig+0xc4>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d00b      	beq.n	8006442 <TIM_OC5_SetConfig+0x82>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a16      	ldr	r2, [pc, #88]	@ (8006488 <TIM_OC5_SetConfig+0xc8>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d007      	beq.n	8006442 <TIM_OC5_SetConfig+0x82>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a15      	ldr	r2, [pc, #84]	@ (800648c <TIM_OC5_SetConfig+0xcc>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d003      	beq.n	8006442 <TIM_OC5_SetConfig+0x82>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a14      	ldr	r2, [pc, #80]	@ (8006490 <TIM_OC5_SetConfig+0xd0>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d109      	bne.n	8006456 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006448:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	695b      	ldr	r3, [r3, #20]
 800644e:	021b      	lsls	r3, r3, #8
 8006450:	697a      	ldr	r2, [r7, #20]
 8006452:	4313      	orrs	r3, r2
 8006454:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	697a      	ldr	r2, [r7, #20]
 800645a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	68fa      	ldr	r2, [r7, #12]
 8006460:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	685a      	ldr	r2, [r3, #4]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	693a      	ldr	r2, [r7, #16]
 800646e:	621a      	str	r2, [r3, #32]
}
 8006470:	bf00      	nop
 8006472:	371c      	adds	r7, #28
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr
 800647c:	40012c00 	.word	0x40012c00
 8006480:	40013400 	.word	0x40013400
 8006484:	40014000 	.word	0x40014000
 8006488:	40014400 	.word	0x40014400
 800648c:	40014800 	.word	0x40014800
 8006490:	40015000 	.word	0x40015000

08006494 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006494:	b480      	push	{r7}
 8006496:	b087      	sub	sp, #28
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a1b      	ldr	r3, [r3, #32]
 80064a8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80064c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	021b      	lsls	r3, r3, #8
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80064da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	051b      	lsls	r3, r3, #20
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4a1a      	ldr	r2, [pc, #104]	@ (8006554 <TIM_OC6_SetConfig+0xc0>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d013      	beq.n	8006518 <TIM_OC6_SetConfig+0x84>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4a19      	ldr	r2, [pc, #100]	@ (8006558 <TIM_OC6_SetConfig+0xc4>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d00f      	beq.n	8006518 <TIM_OC6_SetConfig+0x84>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a18      	ldr	r2, [pc, #96]	@ (800655c <TIM_OC6_SetConfig+0xc8>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d00b      	beq.n	8006518 <TIM_OC6_SetConfig+0x84>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a17      	ldr	r2, [pc, #92]	@ (8006560 <TIM_OC6_SetConfig+0xcc>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d007      	beq.n	8006518 <TIM_OC6_SetConfig+0x84>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a16      	ldr	r2, [pc, #88]	@ (8006564 <TIM_OC6_SetConfig+0xd0>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d003      	beq.n	8006518 <TIM_OC6_SetConfig+0x84>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a15      	ldr	r2, [pc, #84]	@ (8006568 <TIM_OC6_SetConfig+0xd4>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d109      	bne.n	800652c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800651e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	695b      	ldr	r3, [r3, #20]
 8006524:	029b      	lsls	r3, r3, #10
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	4313      	orrs	r3, r2
 800652a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	697a      	ldr	r2, [r7, #20]
 8006530:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	685a      	ldr	r2, [r3, #4]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	621a      	str	r2, [r3, #32]
}
 8006546:	bf00      	nop
 8006548:	371c      	adds	r7, #28
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	40012c00 	.word	0x40012c00
 8006558:	40013400 	.word	0x40013400
 800655c:	40014000 	.word	0x40014000
 8006560:	40014400 	.word	0x40014400
 8006564:	40014800 	.word	0x40014800
 8006568:	40015000 	.word	0x40015000

0800656c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800656c:	b480      	push	{r7}
 800656e:	b087      	sub	sp, #28
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6a1b      	ldr	r3, [r3, #32]
 800657c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	6a1b      	ldr	r3, [r3, #32]
 8006582:	f023 0201 	bic.w	r2, r3, #1
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	699b      	ldr	r3, [r3, #24]
 800658e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006596:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	011b      	lsls	r3, r3, #4
 800659c:	693a      	ldr	r2, [r7, #16]
 800659e:	4313      	orrs	r3, r2
 80065a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	f023 030a 	bic.w	r3, r3, #10
 80065a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065aa:	697a      	ldr	r2, [r7, #20]
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	621a      	str	r2, [r3, #32]
}
 80065be:	bf00      	nop
 80065c0:	371c      	adds	r7, #28
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr

080065ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065ca:	b480      	push	{r7}
 80065cc:	b087      	sub	sp, #28
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	60f8      	str	r0, [r7, #12]
 80065d2:	60b9      	str	r1, [r7, #8]
 80065d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6a1b      	ldr	r3, [r3, #32]
 80065da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6a1b      	ldr	r3, [r3, #32]
 80065e0:	f023 0210 	bic.w	r2, r3, #16
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80065f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	031b      	lsls	r3, r3, #12
 80065fa:	693a      	ldr	r2, [r7, #16]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006606:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	011b      	lsls	r3, r3, #4
 800660c:	697a      	ldr	r2, [r7, #20]
 800660e:	4313      	orrs	r3, r2
 8006610:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	693a      	ldr	r2, [r7, #16]
 8006616:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	697a      	ldr	r2, [r7, #20]
 800661c:	621a      	str	r2, [r3, #32]
}
 800661e:	bf00      	nop
 8006620:	371c      	adds	r7, #28
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr

0800662a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800662a:	b480      	push	{r7}
 800662c:	b085      	sub	sp, #20
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
 8006632:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006640:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006644:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006646:	683a      	ldr	r2, [r7, #0]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	4313      	orrs	r3, r2
 800664c:	f043 0307 	orr.w	r3, r3, #7
 8006650:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	609a      	str	r2, [r3, #8]
}
 8006658:	bf00      	nop
 800665a:	3714      	adds	r7, #20
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006664:	b480      	push	{r7}
 8006666:	b087      	sub	sp, #28
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	607a      	str	r2, [r7, #4]
 8006670:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800667e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	021a      	lsls	r2, r3, #8
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	431a      	orrs	r2, r3
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	4313      	orrs	r3, r2
 800668c:	697a      	ldr	r2, [r7, #20]
 800668e:	4313      	orrs	r3, r2
 8006690:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	697a      	ldr	r2, [r7, #20]
 8006696:	609a      	str	r2, [r3, #8]
}
 8006698:	bf00      	nop
 800669a:	371c      	adds	r7, #28
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b087      	sub	sp, #28
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	f003 031f 	and.w	r3, r3, #31
 80066b6:	2201      	movs	r2, #1
 80066b8:	fa02 f303 	lsl.w	r3, r2, r3
 80066bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6a1a      	ldr	r2, [r3, #32]
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	43db      	mvns	r3, r3
 80066c6:	401a      	ands	r2, r3
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6a1a      	ldr	r2, [r3, #32]
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	f003 031f 	and.w	r3, r3, #31
 80066d6:	6879      	ldr	r1, [r7, #4]
 80066d8:	fa01 f303 	lsl.w	r3, r1, r3
 80066dc:	431a      	orrs	r2, r3
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	621a      	str	r2, [r3, #32]
}
 80066e2:	bf00      	nop
 80066e4:	371c      	adds	r7, #28
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
	...

080066f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006700:	2b01      	cmp	r3, #1
 8006702:	d101      	bne.n	8006708 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006704:	2302      	movs	r3, #2
 8006706:	e074      	b.n	80067f2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2202      	movs	r2, #2
 8006714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a34      	ldr	r2, [pc, #208]	@ (8006800 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d009      	beq.n	8006746 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a33      	ldr	r2, [pc, #204]	@ (8006804 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d004      	beq.n	8006746 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a31      	ldr	r2, [pc, #196]	@ (8006808 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d108      	bne.n	8006758 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800674c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	4313      	orrs	r3, r2
 8006756:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800675e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006762:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	4313      	orrs	r3, r2
 800676c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	68fa      	ldr	r2, [r7, #12]
 8006774:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a21      	ldr	r2, [pc, #132]	@ (8006800 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d022      	beq.n	80067c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006788:	d01d      	beq.n	80067c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a1f      	ldr	r2, [pc, #124]	@ (800680c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d018      	beq.n	80067c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a1d      	ldr	r2, [pc, #116]	@ (8006810 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d013      	beq.n	80067c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a1c      	ldr	r2, [pc, #112]	@ (8006814 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d00e      	beq.n	80067c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a15      	ldr	r2, [pc, #84]	@ (8006804 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d009      	beq.n	80067c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a18      	ldr	r2, [pc, #96]	@ (8006818 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d004      	beq.n	80067c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a11      	ldr	r2, [pc, #68]	@ (8006808 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d10c      	bne.n	80067e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	68ba      	ldr	r2, [r7, #8]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	68ba      	ldr	r2, [r7, #8]
 80067de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3714      	adds	r7, #20
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr
 80067fe:	bf00      	nop
 8006800:	40012c00 	.word	0x40012c00
 8006804:	40013400 	.word	0x40013400
 8006808:	40015000 	.word	0x40015000
 800680c:	40000400 	.word	0x40000400
 8006810:	40000800 	.word	0x40000800
 8006814:	40000c00 	.word	0x40000c00
 8006818:	40014000 	.word	0x40014000

0800681c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800681c:	b480      	push	{r7}
 800681e:	b085      	sub	sp, #20
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006826:	2300      	movs	r3, #0
 8006828:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006830:	2b01      	cmp	r3, #1
 8006832:	d101      	bne.n	8006838 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006834:	2302      	movs	r3, #2
 8006836:	e078      	b.n	800692a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2201      	movs	r2, #1
 800683c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	4313      	orrs	r3, r2
 800684c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	4313      	orrs	r3, r2
 800685a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	4313      	orrs	r3, r2
 8006868:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4313      	orrs	r3, r2
 8006876:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	4313      	orrs	r3, r2
 8006884:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	695b      	ldr	r3, [r3, #20]
 8006890:	4313      	orrs	r3, r2
 8006892:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800689e:	4313      	orrs	r3, r2
 80068a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	699b      	ldr	r3, [r3, #24]
 80068ac:	041b      	lsls	r3, r3, #16
 80068ae:	4313      	orrs	r3, r2
 80068b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	69db      	ldr	r3, [r3, #28]
 80068bc:	4313      	orrs	r3, r2
 80068be:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a1c      	ldr	r2, [pc, #112]	@ (8006938 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d009      	beq.n	80068de <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a1b      	ldr	r2, [pc, #108]	@ (800693c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d004      	beq.n	80068de <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a19      	ldr	r2, [pc, #100]	@ (8006940 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d11c      	bne.n	8006918 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068e8:	051b      	lsls	r3, r3, #20
 80068ea:	4313      	orrs	r3, r2
 80068ec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	6a1b      	ldr	r3, [r3, #32]
 80068f8:	4313      	orrs	r3, r2
 80068fa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006906:	4313      	orrs	r3, r2
 8006908:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006914:	4313      	orrs	r3, r2
 8006916:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	3714      	adds	r7, #20
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr
 8006936:	bf00      	nop
 8006938:	40012c00 	.word	0x40012c00
 800693c:	40013400 	.word	0x40013400
 8006940:	40015000 	.word	0x40015000

08006944 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d101      	bne.n	8006956 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e042      	b.n	80069dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800695c:	2b00      	cmp	r3, #0
 800695e:	d106      	bne.n	800696e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f7fa ffaf 	bl	80018cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2224      	movs	r2, #36	@ 0x24
 8006972:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f022 0201 	bic.w	r2, r2, #1
 8006984:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800698a:	2b00      	cmp	r3, #0
 800698c:	d002      	beq.n	8006994 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 fb24 	bl	8006fdc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 f825 	bl	80069e4 <UART_SetConfig>
 800699a:	4603      	mov	r3, r0
 800699c:	2b01      	cmp	r3, #1
 800699e:	d101      	bne.n	80069a4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	e01b      	b.n	80069dc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	685a      	ldr	r2, [r3, #4]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80069b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	689a      	ldr	r2, [r3, #8]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80069c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f042 0201 	orr.w	r2, r2, #1
 80069d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 fba3 	bl	8007120 <UART_CheckIdleState>
 80069da:	4603      	mov	r3, r0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3708      	adds	r7, #8
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069e8:	b08c      	sub	sp, #48	@ 0x30
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80069ee:	2300      	movs	r3, #0
 80069f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	689a      	ldr	r2, [r3, #8]
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	431a      	orrs	r2, r3
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	695b      	ldr	r3, [r3, #20]
 8006a02:	431a      	orrs	r2, r3
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	69db      	ldr	r3, [r3, #28]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	4baa      	ldr	r3, [pc, #680]	@ (8006cbc <UART_SetConfig+0x2d8>)
 8006a14:	4013      	ands	r3, r2
 8006a16:	697a      	ldr	r2, [r7, #20]
 8006a18:	6812      	ldr	r2, [r2, #0]
 8006a1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a1c:	430b      	orrs	r3, r1
 8006a1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	68da      	ldr	r2, [r3, #12]
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	430a      	orrs	r2, r1
 8006a34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	699b      	ldr	r3, [r3, #24]
 8006a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a9f      	ldr	r2, [pc, #636]	@ (8006cc0 <UART_SetConfig+0x2dc>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d004      	beq.n	8006a50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	6a1b      	ldr	r3, [r3, #32]
 8006a4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006a5a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006a5e:	697a      	ldr	r2, [r7, #20]
 8006a60:	6812      	ldr	r2, [r2, #0]
 8006a62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a64:	430b      	orrs	r3, r1
 8006a66:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a6e:	f023 010f 	bic.w	r1, r3, #15
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	430a      	orrs	r2, r1
 8006a7c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a90      	ldr	r2, [pc, #576]	@ (8006cc4 <UART_SetConfig+0x2e0>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d125      	bne.n	8006ad4 <UART_SetConfig+0xf0>
 8006a88:	4b8f      	ldr	r3, [pc, #572]	@ (8006cc8 <UART_SetConfig+0x2e4>)
 8006a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a8e:	f003 0303 	and.w	r3, r3, #3
 8006a92:	2b03      	cmp	r3, #3
 8006a94:	d81a      	bhi.n	8006acc <UART_SetConfig+0xe8>
 8006a96:	a201      	add	r2, pc, #4	@ (adr r2, 8006a9c <UART_SetConfig+0xb8>)
 8006a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a9c:	08006aad 	.word	0x08006aad
 8006aa0:	08006abd 	.word	0x08006abd
 8006aa4:	08006ab5 	.word	0x08006ab5
 8006aa8:	08006ac5 	.word	0x08006ac5
 8006aac:	2301      	movs	r3, #1
 8006aae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ab2:	e116      	b.n	8006ce2 <UART_SetConfig+0x2fe>
 8006ab4:	2302      	movs	r3, #2
 8006ab6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aba:	e112      	b.n	8006ce2 <UART_SetConfig+0x2fe>
 8006abc:	2304      	movs	r3, #4
 8006abe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ac2:	e10e      	b.n	8006ce2 <UART_SetConfig+0x2fe>
 8006ac4:	2308      	movs	r3, #8
 8006ac6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aca:	e10a      	b.n	8006ce2 <UART_SetConfig+0x2fe>
 8006acc:	2310      	movs	r3, #16
 8006ace:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ad2:	e106      	b.n	8006ce2 <UART_SetConfig+0x2fe>
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a7c      	ldr	r2, [pc, #496]	@ (8006ccc <UART_SetConfig+0x2e8>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d138      	bne.n	8006b50 <UART_SetConfig+0x16c>
 8006ade:	4b7a      	ldr	r3, [pc, #488]	@ (8006cc8 <UART_SetConfig+0x2e4>)
 8006ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ae4:	f003 030c 	and.w	r3, r3, #12
 8006ae8:	2b0c      	cmp	r3, #12
 8006aea:	d82d      	bhi.n	8006b48 <UART_SetConfig+0x164>
 8006aec:	a201      	add	r2, pc, #4	@ (adr r2, 8006af4 <UART_SetConfig+0x110>)
 8006aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af2:	bf00      	nop
 8006af4:	08006b29 	.word	0x08006b29
 8006af8:	08006b49 	.word	0x08006b49
 8006afc:	08006b49 	.word	0x08006b49
 8006b00:	08006b49 	.word	0x08006b49
 8006b04:	08006b39 	.word	0x08006b39
 8006b08:	08006b49 	.word	0x08006b49
 8006b0c:	08006b49 	.word	0x08006b49
 8006b10:	08006b49 	.word	0x08006b49
 8006b14:	08006b31 	.word	0x08006b31
 8006b18:	08006b49 	.word	0x08006b49
 8006b1c:	08006b49 	.word	0x08006b49
 8006b20:	08006b49 	.word	0x08006b49
 8006b24:	08006b41 	.word	0x08006b41
 8006b28:	2300      	movs	r3, #0
 8006b2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b2e:	e0d8      	b.n	8006ce2 <UART_SetConfig+0x2fe>
 8006b30:	2302      	movs	r3, #2
 8006b32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b36:	e0d4      	b.n	8006ce2 <UART_SetConfig+0x2fe>
 8006b38:	2304      	movs	r3, #4
 8006b3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b3e:	e0d0      	b.n	8006ce2 <UART_SetConfig+0x2fe>
 8006b40:	2308      	movs	r3, #8
 8006b42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b46:	e0cc      	b.n	8006ce2 <UART_SetConfig+0x2fe>
 8006b48:	2310      	movs	r3, #16
 8006b4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b4e:	e0c8      	b.n	8006ce2 <UART_SetConfig+0x2fe>
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a5e      	ldr	r2, [pc, #376]	@ (8006cd0 <UART_SetConfig+0x2ec>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d125      	bne.n	8006ba6 <UART_SetConfig+0x1c2>
 8006b5a:	4b5b      	ldr	r3, [pc, #364]	@ (8006cc8 <UART_SetConfig+0x2e4>)
 8006b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b60:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006b64:	2b30      	cmp	r3, #48	@ 0x30
 8006b66:	d016      	beq.n	8006b96 <UART_SetConfig+0x1b2>
 8006b68:	2b30      	cmp	r3, #48	@ 0x30
 8006b6a:	d818      	bhi.n	8006b9e <UART_SetConfig+0x1ba>
 8006b6c:	2b20      	cmp	r3, #32
 8006b6e:	d00a      	beq.n	8006b86 <UART_SetConfig+0x1a2>
 8006b70:	2b20      	cmp	r3, #32
 8006b72:	d814      	bhi.n	8006b9e <UART_SetConfig+0x1ba>
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d002      	beq.n	8006b7e <UART_SetConfig+0x19a>
 8006b78:	2b10      	cmp	r3, #16
 8006b7a:	d008      	beq.n	8006b8e <UART_SetConfig+0x1aa>
 8006b7c:	e00f      	b.n	8006b9e <UART_SetConfig+0x1ba>
 8006b7e:	2300      	movs	r3, #0
 8006b80:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b84:	e0ad      	b.n	8006ce2 <UART_SetConfig+0x2fe>
 8006b86:	2302      	movs	r3, #2
 8006b88:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b8c:	e0a9      	b.n	8006ce2 <UART_SetConfig+0x2fe>
 8006b8e:	2304      	movs	r3, #4
 8006b90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b94:	e0a5      	b.n	8006ce2 <UART_SetConfig+0x2fe>
 8006b96:	2308      	movs	r3, #8
 8006b98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b9c:	e0a1      	b.n	8006ce2 <UART_SetConfig+0x2fe>
 8006b9e:	2310      	movs	r3, #16
 8006ba0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ba4:	e09d      	b.n	8006ce2 <UART_SetConfig+0x2fe>
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a4a      	ldr	r2, [pc, #296]	@ (8006cd4 <UART_SetConfig+0x2f0>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d125      	bne.n	8006bfc <UART_SetConfig+0x218>
 8006bb0:	4b45      	ldr	r3, [pc, #276]	@ (8006cc8 <UART_SetConfig+0x2e4>)
 8006bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bb6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006bba:	2bc0      	cmp	r3, #192	@ 0xc0
 8006bbc:	d016      	beq.n	8006bec <UART_SetConfig+0x208>
 8006bbe:	2bc0      	cmp	r3, #192	@ 0xc0
 8006bc0:	d818      	bhi.n	8006bf4 <UART_SetConfig+0x210>
 8006bc2:	2b80      	cmp	r3, #128	@ 0x80
 8006bc4:	d00a      	beq.n	8006bdc <UART_SetConfig+0x1f8>
 8006bc6:	2b80      	cmp	r3, #128	@ 0x80
 8006bc8:	d814      	bhi.n	8006bf4 <UART_SetConfig+0x210>
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d002      	beq.n	8006bd4 <UART_SetConfig+0x1f0>
 8006bce:	2b40      	cmp	r3, #64	@ 0x40
 8006bd0:	d008      	beq.n	8006be4 <UART_SetConfig+0x200>
 8006bd2:	e00f      	b.n	8006bf4 <UART_SetConfig+0x210>
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bda:	e082      	b.n	8006ce2 <UART_SetConfig+0x2fe>
 8006bdc:	2302      	movs	r3, #2
 8006bde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006be2:	e07e      	b.n	8006ce2 <UART_SetConfig+0x2fe>
 8006be4:	2304      	movs	r3, #4
 8006be6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bea:	e07a      	b.n	8006ce2 <UART_SetConfig+0x2fe>
 8006bec:	2308      	movs	r3, #8
 8006bee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bf2:	e076      	b.n	8006ce2 <UART_SetConfig+0x2fe>
 8006bf4:	2310      	movs	r3, #16
 8006bf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bfa:	e072      	b.n	8006ce2 <UART_SetConfig+0x2fe>
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a35      	ldr	r2, [pc, #212]	@ (8006cd8 <UART_SetConfig+0x2f4>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d12a      	bne.n	8006c5c <UART_SetConfig+0x278>
 8006c06:	4b30      	ldr	r3, [pc, #192]	@ (8006cc8 <UART_SetConfig+0x2e4>)
 8006c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c0c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c10:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c14:	d01a      	beq.n	8006c4c <UART_SetConfig+0x268>
 8006c16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c1a:	d81b      	bhi.n	8006c54 <UART_SetConfig+0x270>
 8006c1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c20:	d00c      	beq.n	8006c3c <UART_SetConfig+0x258>
 8006c22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c26:	d815      	bhi.n	8006c54 <UART_SetConfig+0x270>
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d003      	beq.n	8006c34 <UART_SetConfig+0x250>
 8006c2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c30:	d008      	beq.n	8006c44 <UART_SetConfig+0x260>
 8006c32:	e00f      	b.n	8006c54 <UART_SetConfig+0x270>
 8006c34:	2300      	movs	r3, #0
 8006c36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c3a:	e052      	b.n	8006ce2 <UART_SetConfig+0x2fe>
 8006c3c:	2302      	movs	r3, #2
 8006c3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c42:	e04e      	b.n	8006ce2 <UART_SetConfig+0x2fe>
 8006c44:	2304      	movs	r3, #4
 8006c46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c4a:	e04a      	b.n	8006ce2 <UART_SetConfig+0x2fe>
 8006c4c:	2308      	movs	r3, #8
 8006c4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c52:	e046      	b.n	8006ce2 <UART_SetConfig+0x2fe>
 8006c54:	2310      	movs	r3, #16
 8006c56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c5a:	e042      	b.n	8006ce2 <UART_SetConfig+0x2fe>
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a17      	ldr	r2, [pc, #92]	@ (8006cc0 <UART_SetConfig+0x2dc>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d13a      	bne.n	8006cdc <UART_SetConfig+0x2f8>
 8006c66:	4b18      	ldr	r3, [pc, #96]	@ (8006cc8 <UART_SetConfig+0x2e4>)
 8006c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c6c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006c70:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c74:	d01a      	beq.n	8006cac <UART_SetConfig+0x2c8>
 8006c76:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c7a:	d81b      	bhi.n	8006cb4 <UART_SetConfig+0x2d0>
 8006c7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c80:	d00c      	beq.n	8006c9c <UART_SetConfig+0x2b8>
 8006c82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c86:	d815      	bhi.n	8006cb4 <UART_SetConfig+0x2d0>
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d003      	beq.n	8006c94 <UART_SetConfig+0x2b0>
 8006c8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c90:	d008      	beq.n	8006ca4 <UART_SetConfig+0x2c0>
 8006c92:	e00f      	b.n	8006cb4 <UART_SetConfig+0x2d0>
 8006c94:	2300      	movs	r3, #0
 8006c96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c9a:	e022      	b.n	8006ce2 <UART_SetConfig+0x2fe>
 8006c9c:	2302      	movs	r3, #2
 8006c9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ca2:	e01e      	b.n	8006ce2 <UART_SetConfig+0x2fe>
 8006ca4:	2304      	movs	r3, #4
 8006ca6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006caa:	e01a      	b.n	8006ce2 <UART_SetConfig+0x2fe>
 8006cac:	2308      	movs	r3, #8
 8006cae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cb2:	e016      	b.n	8006ce2 <UART_SetConfig+0x2fe>
 8006cb4:	2310      	movs	r3, #16
 8006cb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cba:	e012      	b.n	8006ce2 <UART_SetConfig+0x2fe>
 8006cbc:	cfff69f3 	.word	0xcfff69f3
 8006cc0:	40008000 	.word	0x40008000
 8006cc4:	40013800 	.word	0x40013800
 8006cc8:	40021000 	.word	0x40021000
 8006ccc:	40004400 	.word	0x40004400
 8006cd0:	40004800 	.word	0x40004800
 8006cd4:	40004c00 	.word	0x40004c00
 8006cd8:	40005000 	.word	0x40005000
 8006cdc:	2310      	movs	r3, #16
 8006cde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4aae      	ldr	r2, [pc, #696]	@ (8006fa0 <UART_SetConfig+0x5bc>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	f040 8097 	bne.w	8006e1c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006cee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006cf2:	2b08      	cmp	r3, #8
 8006cf4:	d823      	bhi.n	8006d3e <UART_SetConfig+0x35a>
 8006cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8006cfc <UART_SetConfig+0x318>)
 8006cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cfc:	08006d21 	.word	0x08006d21
 8006d00:	08006d3f 	.word	0x08006d3f
 8006d04:	08006d29 	.word	0x08006d29
 8006d08:	08006d3f 	.word	0x08006d3f
 8006d0c:	08006d2f 	.word	0x08006d2f
 8006d10:	08006d3f 	.word	0x08006d3f
 8006d14:	08006d3f 	.word	0x08006d3f
 8006d18:	08006d3f 	.word	0x08006d3f
 8006d1c:	08006d37 	.word	0x08006d37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d20:	f7fd ffec 	bl	8004cfc <HAL_RCC_GetPCLK1Freq>
 8006d24:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d26:	e010      	b.n	8006d4a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d28:	4b9e      	ldr	r3, [pc, #632]	@ (8006fa4 <UART_SetConfig+0x5c0>)
 8006d2a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d2c:	e00d      	b.n	8006d4a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d2e:	f7fd ff77 	bl	8004c20 <HAL_RCC_GetSysClockFreq>
 8006d32:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d34:	e009      	b.n	8006d4a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d3a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d3c:	e005      	b.n	8006d4a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006d48:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	f000 8130 	beq.w	8006fb2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d56:	4a94      	ldr	r2, [pc, #592]	@ (8006fa8 <UART_SetConfig+0x5c4>)
 8006d58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d60:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d64:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	685a      	ldr	r2, [r3, #4]
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	005b      	lsls	r3, r3, #1
 8006d6e:	4413      	add	r3, r2
 8006d70:	69ba      	ldr	r2, [r7, #24]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d305      	bcc.n	8006d82 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d7c:	69ba      	ldr	r2, [r7, #24]
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d903      	bls.n	8006d8a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006d88:	e113      	b.n	8006fb2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	60bb      	str	r3, [r7, #8]
 8006d90:	60fa      	str	r2, [r7, #12]
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d96:	4a84      	ldr	r2, [pc, #528]	@ (8006fa8 <UART_SetConfig+0x5c4>)
 8006d98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	2200      	movs	r2, #0
 8006da0:	603b      	str	r3, [r7, #0]
 8006da2:	607a      	str	r2, [r7, #4]
 8006da4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006da8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006dac:	f7f9 fe52 	bl	8000a54 <__aeabi_uldivmod>
 8006db0:	4602      	mov	r2, r0
 8006db2:	460b      	mov	r3, r1
 8006db4:	4610      	mov	r0, r2
 8006db6:	4619      	mov	r1, r3
 8006db8:	f04f 0200 	mov.w	r2, #0
 8006dbc:	f04f 0300 	mov.w	r3, #0
 8006dc0:	020b      	lsls	r3, r1, #8
 8006dc2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006dc6:	0202      	lsls	r2, r0, #8
 8006dc8:	6979      	ldr	r1, [r7, #20]
 8006dca:	6849      	ldr	r1, [r1, #4]
 8006dcc:	0849      	lsrs	r1, r1, #1
 8006dce:	2000      	movs	r0, #0
 8006dd0:	460c      	mov	r4, r1
 8006dd2:	4605      	mov	r5, r0
 8006dd4:	eb12 0804 	adds.w	r8, r2, r4
 8006dd8:	eb43 0905 	adc.w	r9, r3, r5
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	469a      	mov	sl, r3
 8006de4:	4693      	mov	fp, r2
 8006de6:	4652      	mov	r2, sl
 8006de8:	465b      	mov	r3, fp
 8006dea:	4640      	mov	r0, r8
 8006dec:	4649      	mov	r1, r9
 8006dee:	f7f9 fe31 	bl	8000a54 <__aeabi_uldivmod>
 8006df2:	4602      	mov	r2, r0
 8006df4:	460b      	mov	r3, r1
 8006df6:	4613      	mov	r3, r2
 8006df8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006dfa:	6a3b      	ldr	r3, [r7, #32]
 8006dfc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e00:	d308      	bcc.n	8006e14 <UART_SetConfig+0x430>
 8006e02:	6a3b      	ldr	r3, [r7, #32]
 8006e04:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e08:	d204      	bcs.n	8006e14 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	6a3a      	ldr	r2, [r7, #32]
 8006e10:	60da      	str	r2, [r3, #12]
 8006e12:	e0ce      	b.n	8006fb2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006e1a:	e0ca      	b.n	8006fb2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	69db      	ldr	r3, [r3, #28]
 8006e20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e24:	d166      	bne.n	8006ef4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006e26:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006e2a:	2b08      	cmp	r3, #8
 8006e2c:	d827      	bhi.n	8006e7e <UART_SetConfig+0x49a>
 8006e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8006e34 <UART_SetConfig+0x450>)
 8006e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e34:	08006e59 	.word	0x08006e59
 8006e38:	08006e61 	.word	0x08006e61
 8006e3c:	08006e69 	.word	0x08006e69
 8006e40:	08006e7f 	.word	0x08006e7f
 8006e44:	08006e6f 	.word	0x08006e6f
 8006e48:	08006e7f 	.word	0x08006e7f
 8006e4c:	08006e7f 	.word	0x08006e7f
 8006e50:	08006e7f 	.word	0x08006e7f
 8006e54:	08006e77 	.word	0x08006e77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e58:	f7fd ff50 	bl	8004cfc <HAL_RCC_GetPCLK1Freq>
 8006e5c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e5e:	e014      	b.n	8006e8a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e60:	f7fd ff62 	bl	8004d28 <HAL_RCC_GetPCLK2Freq>
 8006e64:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e66:	e010      	b.n	8006e8a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e68:	4b4e      	ldr	r3, [pc, #312]	@ (8006fa4 <UART_SetConfig+0x5c0>)
 8006e6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e6c:	e00d      	b.n	8006e8a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e6e:	f7fd fed7 	bl	8004c20 <HAL_RCC_GetSysClockFreq>
 8006e72:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e74:	e009      	b.n	8006e8a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e7c:	e005      	b.n	8006e8a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006e88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	f000 8090 	beq.w	8006fb2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e96:	4a44      	ldr	r2, [pc, #272]	@ (8006fa8 <UART_SetConfig+0x5c4>)
 8006e98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ea4:	005a      	lsls	r2, r3, #1
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	085b      	lsrs	r3, r3, #1
 8006eac:	441a      	add	r2, r3
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eb6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006eb8:	6a3b      	ldr	r3, [r7, #32]
 8006eba:	2b0f      	cmp	r3, #15
 8006ebc:	d916      	bls.n	8006eec <UART_SetConfig+0x508>
 8006ebe:	6a3b      	ldr	r3, [r7, #32]
 8006ec0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ec4:	d212      	bcs.n	8006eec <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ec6:	6a3b      	ldr	r3, [r7, #32]
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	f023 030f 	bic.w	r3, r3, #15
 8006ece:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ed0:	6a3b      	ldr	r3, [r7, #32]
 8006ed2:	085b      	lsrs	r3, r3, #1
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	f003 0307 	and.w	r3, r3, #7
 8006eda:	b29a      	uxth	r2, r3
 8006edc:	8bfb      	ldrh	r3, [r7, #30]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	8bfa      	ldrh	r2, [r7, #30]
 8006ee8:	60da      	str	r2, [r3, #12]
 8006eea:	e062      	b.n	8006fb2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006ef2:	e05e      	b.n	8006fb2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ef4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006ef8:	2b08      	cmp	r3, #8
 8006efa:	d828      	bhi.n	8006f4e <UART_SetConfig+0x56a>
 8006efc:	a201      	add	r2, pc, #4	@ (adr r2, 8006f04 <UART_SetConfig+0x520>)
 8006efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f02:	bf00      	nop
 8006f04:	08006f29 	.word	0x08006f29
 8006f08:	08006f31 	.word	0x08006f31
 8006f0c:	08006f39 	.word	0x08006f39
 8006f10:	08006f4f 	.word	0x08006f4f
 8006f14:	08006f3f 	.word	0x08006f3f
 8006f18:	08006f4f 	.word	0x08006f4f
 8006f1c:	08006f4f 	.word	0x08006f4f
 8006f20:	08006f4f 	.word	0x08006f4f
 8006f24:	08006f47 	.word	0x08006f47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f28:	f7fd fee8 	bl	8004cfc <HAL_RCC_GetPCLK1Freq>
 8006f2c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f2e:	e014      	b.n	8006f5a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f30:	f7fd fefa 	bl	8004d28 <HAL_RCC_GetPCLK2Freq>
 8006f34:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f36:	e010      	b.n	8006f5a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f38:	4b1a      	ldr	r3, [pc, #104]	@ (8006fa4 <UART_SetConfig+0x5c0>)
 8006f3a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006f3c:	e00d      	b.n	8006f5a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f3e:	f7fd fe6f 	bl	8004c20 <HAL_RCC_GetSysClockFreq>
 8006f42:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f44:	e009      	b.n	8006f5a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f4a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006f4c:	e005      	b.n	8006f5a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006f58:	bf00      	nop
    }

    if (pclk != 0U)
 8006f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d028      	beq.n	8006fb2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f64:	4a10      	ldr	r2, [pc, #64]	@ (8006fa8 <UART_SetConfig+0x5c4>)
 8006f66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f6e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	085b      	lsrs	r3, r3, #1
 8006f78:	441a      	add	r2, r3
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f82:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f84:	6a3b      	ldr	r3, [r7, #32]
 8006f86:	2b0f      	cmp	r3, #15
 8006f88:	d910      	bls.n	8006fac <UART_SetConfig+0x5c8>
 8006f8a:	6a3b      	ldr	r3, [r7, #32]
 8006f8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f90:	d20c      	bcs.n	8006fac <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f92:	6a3b      	ldr	r3, [r7, #32]
 8006f94:	b29a      	uxth	r2, r3
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	60da      	str	r2, [r3, #12]
 8006f9c:	e009      	b.n	8006fb2 <UART_SetConfig+0x5ce>
 8006f9e:	bf00      	nop
 8006fa0:	40008000 	.word	0x40008000
 8006fa4:	00f42400 	.word	0x00f42400
 8006fa8:	08007714 	.word	0x08007714
      }
      else
      {
        ret = HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006fce:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3730      	adds	r7, #48	@ 0x30
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006fdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fe8:	f003 0308 	and.w	r3, r3, #8
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d00a      	beq.n	8007006 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	430a      	orrs	r2, r1
 8007004:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800700a:	f003 0301 	and.w	r3, r3, #1
 800700e:	2b00      	cmp	r3, #0
 8007010:	d00a      	beq.n	8007028 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	430a      	orrs	r2, r1
 8007026:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800702c:	f003 0302 	and.w	r3, r3, #2
 8007030:	2b00      	cmp	r3, #0
 8007032:	d00a      	beq.n	800704a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	430a      	orrs	r2, r1
 8007048:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800704e:	f003 0304 	and.w	r3, r3, #4
 8007052:	2b00      	cmp	r3, #0
 8007054:	d00a      	beq.n	800706c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	430a      	orrs	r2, r1
 800706a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007070:	f003 0310 	and.w	r3, r3, #16
 8007074:	2b00      	cmp	r3, #0
 8007076:	d00a      	beq.n	800708e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	430a      	orrs	r2, r1
 800708c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007092:	f003 0320 	and.w	r3, r3, #32
 8007096:	2b00      	cmp	r3, #0
 8007098:	d00a      	beq.n	80070b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	430a      	orrs	r2, r1
 80070ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d01a      	beq.n	80070f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	430a      	orrs	r2, r1
 80070d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070da:	d10a      	bne.n	80070f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	430a      	orrs	r2, r1
 80070f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d00a      	beq.n	8007114 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	430a      	orrs	r2, r1
 8007112:	605a      	str	r2, [r3, #4]
  }
}
 8007114:	bf00      	nop
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b098      	sub	sp, #96	@ 0x60
 8007124:	af02      	add	r7, sp, #8
 8007126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007130:	f7fa fda0 	bl	8001c74 <HAL_GetTick>
 8007134:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f003 0308 	and.w	r3, r3, #8
 8007140:	2b08      	cmp	r3, #8
 8007142:	d12f      	bne.n	80071a4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007144:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007148:	9300      	str	r3, [sp, #0]
 800714a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800714c:	2200      	movs	r2, #0
 800714e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 f88e 	bl	8007274 <UART_WaitOnFlagUntilTimeout>
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d022      	beq.n	80071a4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007166:	e853 3f00 	ldrex	r3, [r3]
 800716a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800716c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800716e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007172:	653b      	str	r3, [r7, #80]	@ 0x50
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	461a      	mov	r2, r3
 800717a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800717c:	647b      	str	r3, [r7, #68]	@ 0x44
 800717e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007180:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007182:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007184:	e841 2300 	strex	r3, r2, [r1]
 8007188:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800718a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800718c:	2b00      	cmp	r3, #0
 800718e:	d1e6      	bne.n	800715e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2220      	movs	r2, #32
 8007194:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2200      	movs	r2, #0
 800719c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071a0:	2303      	movs	r3, #3
 80071a2:	e063      	b.n	800726c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 0304 	and.w	r3, r3, #4
 80071ae:	2b04      	cmp	r3, #4
 80071b0:	d149      	bne.n	8007246 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071b2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80071b6:	9300      	str	r3, [sp, #0]
 80071b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071ba:	2200      	movs	r2, #0
 80071bc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 f857 	bl	8007274 <UART_WaitOnFlagUntilTimeout>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d03c      	beq.n	8007246 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d4:	e853 3f00 	ldrex	r3, [r3]
 80071d8:	623b      	str	r3, [r7, #32]
   return(result);
 80071da:	6a3b      	ldr	r3, [r7, #32]
 80071dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	461a      	mov	r2, r3
 80071e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80071ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80071f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071f2:	e841 2300 	strex	r3, r2, [r1]
 80071f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80071f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d1e6      	bne.n	80071cc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	3308      	adds	r3, #8
 8007204:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	e853 3f00 	ldrex	r3, [r3]
 800720c:	60fb      	str	r3, [r7, #12]
   return(result);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f023 0301 	bic.w	r3, r3, #1
 8007214:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	3308      	adds	r3, #8
 800721c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800721e:	61fa      	str	r2, [r7, #28]
 8007220:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007222:	69b9      	ldr	r1, [r7, #24]
 8007224:	69fa      	ldr	r2, [r7, #28]
 8007226:	e841 2300 	strex	r3, r2, [r1]
 800722a:	617b      	str	r3, [r7, #20]
   return(result);
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d1e5      	bne.n	80071fe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2220      	movs	r2, #32
 8007236:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007242:	2303      	movs	r3, #3
 8007244:	e012      	b.n	800726c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2220      	movs	r2, #32
 800724a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2220      	movs	r2, #32
 8007252:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800726a:	2300      	movs	r3, #0
}
 800726c:	4618      	mov	r0, r3
 800726e:	3758      	adds	r7, #88	@ 0x58
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b084      	sub	sp, #16
 8007278:	af00      	add	r7, sp, #0
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	603b      	str	r3, [r7, #0]
 8007280:	4613      	mov	r3, r2
 8007282:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007284:	e04f      	b.n	8007326 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800728c:	d04b      	beq.n	8007326 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800728e:	f7fa fcf1 	bl	8001c74 <HAL_GetTick>
 8007292:	4602      	mov	r2, r0
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	1ad3      	subs	r3, r2, r3
 8007298:	69ba      	ldr	r2, [r7, #24]
 800729a:	429a      	cmp	r2, r3
 800729c:	d302      	bcc.n	80072a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d101      	bne.n	80072a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80072a4:	2303      	movs	r3, #3
 80072a6:	e04e      	b.n	8007346 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f003 0304 	and.w	r3, r3, #4
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d037      	beq.n	8007326 <UART_WaitOnFlagUntilTimeout+0xb2>
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	2b80      	cmp	r3, #128	@ 0x80
 80072ba:	d034      	beq.n	8007326 <UART_WaitOnFlagUntilTimeout+0xb2>
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	2b40      	cmp	r3, #64	@ 0x40
 80072c0:	d031      	beq.n	8007326 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	69db      	ldr	r3, [r3, #28]
 80072c8:	f003 0308 	and.w	r3, r3, #8
 80072cc:	2b08      	cmp	r3, #8
 80072ce:	d110      	bne.n	80072f2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	2208      	movs	r2, #8
 80072d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072d8:	68f8      	ldr	r0, [r7, #12]
 80072da:	f000 f838 	bl	800734e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2208      	movs	r2, #8
 80072e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2200      	movs	r2, #0
 80072ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	e029      	b.n	8007346 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	69db      	ldr	r3, [r3, #28]
 80072f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80072fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007300:	d111      	bne.n	8007326 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800730a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800730c:	68f8      	ldr	r0, [r7, #12]
 800730e:	f000 f81e 	bl	800734e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2220      	movs	r2, #32
 8007316:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2200      	movs	r2, #0
 800731e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007322:	2303      	movs	r3, #3
 8007324:	e00f      	b.n	8007346 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	69da      	ldr	r2, [r3, #28]
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	4013      	ands	r3, r2
 8007330:	68ba      	ldr	r2, [r7, #8]
 8007332:	429a      	cmp	r2, r3
 8007334:	bf0c      	ite	eq
 8007336:	2301      	moveq	r3, #1
 8007338:	2300      	movne	r3, #0
 800733a:	b2db      	uxtb	r3, r3
 800733c:	461a      	mov	r2, r3
 800733e:	79fb      	ldrb	r3, [r7, #7]
 8007340:	429a      	cmp	r2, r3
 8007342:	d0a0      	beq.n	8007286 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007344:	2300      	movs	r3, #0
}
 8007346:	4618      	mov	r0, r3
 8007348:	3710      	adds	r7, #16
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}

0800734e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800734e:	b480      	push	{r7}
 8007350:	b095      	sub	sp, #84	@ 0x54
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800735e:	e853 3f00 	ldrex	r3, [r3]
 8007362:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007366:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800736a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	461a      	mov	r2, r3
 8007372:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007374:	643b      	str	r3, [r7, #64]	@ 0x40
 8007376:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007378:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800737a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800737c:	e841 2300 	strex	r3, r2, [r1]
 8007380:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007384:	2b00      	cmp	r3, #0
 8007386:	d1e6      	bne.n	8007356 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	3308      	adds	r3, #8
 800738e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007390:	6a3b      	ldr	r3, [r7, #32]
 8007392:	e853 3f00 	ldrex	r3, [r3]
 8007396:	61fb      	str	r3, [r7, #28]
   return(result);
 8007398:	69fb      	ldr	r3, [r7, #28]
 800739a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800739e:	f023 0301 	bic.w	r3, r3, #1
 80073a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	3308      	adds	r3, #8
 80073aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80073ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80073ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80073b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073b4:	e841 2300 	strex	r3, r2, [r1]
 80073b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80073ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d1e3      	bne.n	8007388 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d118      	bne.n	80073fa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	e853 3f00 	ldrex	r3, [r3]
 80073d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	f023 0310 	bic.w	r3, r3, #16
 80073dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	461a      	mov	r2, r3
 80073e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073e6:	61bb      	str	r3, [r7, #24]
 80073e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ea:	6979      	ldr	r1, [r7, #20]
 80073ec:	69ba      	ldr	r2, [r7, #24]
 80073ee:	e841 2300 	strex	r3, r2, [r1]
 80073f2:	613b      	str	r3, [r7, #16]
   return(result);
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d1e6      	bne.n	80073c8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2220      	movs	r2, #32
 80073fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800740e:	bf00      	nop
 8007410:	3754      	adds	r7, #84	@ 0x54
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr

0800741a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800741a:	b480      	push	{r7}
 800741c:	b085      	sub	sp, #20
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007428:	2b01      	cmp	r3, #1
 800742a:	d101      	bne.n	8007430 <HAL_UARTEx_DisableFifoMode+0x16>
 800742c:	2302      	movs	r3, #2
 800742e:	e027      	b.n	8007480 <HAL_UARTEx_DisableFifoMode+0x66>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2201      	movs	r2, #1
 8007434:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2224      	movs	r2, #36	@ 0x24
 800743c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f022 0201 	bic.w	r2, r2, #1
 8007456:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800745e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	68fa      	ldr	r2, [r7, #12]
 800746c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2220      	movs	r2, #32
 8007472:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800747e:	2300      	movs	r3, #0
}
 8007480:	4618      	mov	r0, r3
 8007482:	3714      	adds	r7, #20
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800749c:	2b01      	cmp	r3, #1
 800749e:	d101      	bne.n	80074a4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80074a0:	2302      	movs	r3, #2
 80074a2:	e02d      	b.n	8007500 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2224      	movs	r2, #36	@ 0x24
 80074b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f022 0201 	bic.w	r2, r2, #1
 80074ca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	683a      	ldr	r2, [r7, #0]
 80074dc:	430a      	orrs	r2, r1
 80074de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 f84f 	bl	8007584 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	68fa      	ldr	r2, [r7, #12]
 80074ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2220      	movs	r2, #32
 80074f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2200      	movs	r2, #0
 80074fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80074fe:	2300      	movs	r3, #0
}
 8007500:	4618      	mov	r0, r3
 8007502:	3710      	adds	r7, #16
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b084      	sub	sp, #16
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007518:	2b01      	cmp	r3, #1
 800751a:	d101      	bne.n	8007520 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800751c:	2302      	movs	r3, #2
 800751e:	e02d      	b.n	800757c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2201      	movs	r2, #1
 8007524:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2224      	movs	r2, #36	@ 0x24
 800752c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f022 0201 	bic.w	r2, r2, #1
 8007546:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	683a      	ldr	r2, [r7, #0]
 8007558:	430a      	orrs	r2, r1
 800755a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 f811 	bl	8007584 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	68fa      	ldr	r2, [r7, #12]
 8007568:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2220      	movs	r2, #32
 800756e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800757a:	2300      	movs	r3, #0
}
 800757c:	4618      	mov	r0, r3
 800757e:	3710      	adds	r7, #16
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007584:	b480      	push	{r7}
 8007586:	b085      	sub	sp, #20
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007590:	2b00      	cmp	r3, #0
 8007592:	d108      	bne.n	80075a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2201      	movs	r2, #1
 8007598:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2201      	movs	r2, #1
 80075a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80075a4:	e031      	b.n	800760a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80075a6:	2308      	movs	r3, #8
 80075a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80075aa:	2308      	movs	r3, #8
 80075ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	0e5b      	lsrs	r3, r3, #25
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	f003 0307 	and.w	r3, r3, #7
 80075bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	0f5b      	lsrs	r3, r3, #29
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	f003 0307 	and.w	r3, r3, #7
 80075cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075ce:	7bbb      	ldrb	r3, [r7, #14]
 80075d0:	7b3a      	ldrb	r2, [r7, #12]
 80075d2:	4911      	ldr	r1, [pc, #68]	@ (8007618 <UARTEx_SetNbDataToProcess+0x94>)
 80075d4:	5c8a      	ldrb	r2, [r1, r2]
 80075d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80075da:	7b3a      	ldrb	r2, [r7, #12]
 80075dc:	490f      	ldr	r1, [pc, #60]	@ (800761c <UARTEx_SetNbDataToProcess+0x98>)
 80075de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80075e4:	b29a      	uxth	r2, r3
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075ec:	7bfb      	ldrb	r3, [r7, #15]
 80075ee:	7b7a      	ldrb	r2, [r7, #13]
 80075f0:	4909      	ldr	r1, [pc, #36]	@ (8007618 <UARTEx_SetNbDataToProcess+0x94>)
 80075f2:	5c8a      	ldrb	r2, [r1, r2]
 80075f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80075f8:	7b7a      	ldrb	r2, [r7, #13]
 80075fa:	4908      	ldr	r1, [pc, #32]	@ (800761c <UARTEx_SetNbDataToProcess+0x98>)
 80075fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8007602:	b29a      	uxth	r2, r3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800760a:	bf00      	nop
 800760c:	3714      	adds	r7, #20
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr
 8007616:	bf00      	nop
 8007618:	0800772c 	.word	0x0800772c
 800761c:	08007734 	.word	0x08007734

08007620 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b082      	sub	sp, #8
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	ed93 7a06 	vldr	s14, [r3, #24]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	edd3 7a07 	vldr	s15, [r3, #28]
 8007636:	ee37 7a27 	vadd.f32	s14, s14, s15
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	edd3 7a08 	vldr	s15, [r3, #32]
 8007640:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	edd3 7a06 	vldr	s15, [r3, #24]
 8007650:	eeb1 7a67 	vneg.f32	s14, s15
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	edd3 7a08 	vldr	s15, [r3, #32]
 800765a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800765e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6a1a      	ldr	r2, [r3, #32]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d006      	beq.n	8007684 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	330c      	adds	r3, #12
 800767a:	220c      	movs	r2, #12
 800767c:	2100      	movs	r1, #0
 800767e:	4618      	mov	r0, r3
 8007680:	f000 f804 	bl	800768c <memset>
  }

}
 8007684:	bf00      	nop
 8007686:	3708      	adds	r7, #8
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <memset>:
 800768c:	4402      	add	r2, r0
 800768e:	4603      	mov	r3, r0
 8007690:	4293      	cmp	r3, r2
 8007692:	d100      	bne.n	8007696 <memset+0xa>
 8007694:	4770      	bx	lr
 8007696:	f803 1b01 	strb.w	r1, [r3], #1
 800769a:	e7f9      	b.n	8007690 <memset+0x4>

0800769c <__libc_init_array>:
 800769c:	b570      	push	{r4, r5, r6, lr}
 800769e:	4d0d      	ldr	r5, [pc, #52]	@ (80076d4 <__libc_init_array+0x38>)
 80076a0:	4c0d      	ldr	r4, [pc, #52]	@ (80076d8 <__libc_init_array+0x3c>)
 80076a2:	1b64      	subs	r4, r4, r5
 80076a4:	10a4      	asrs	r4, r4, #2
 80076a6:	2600      	movs	r6, #0
 80076a8:	42a6      	cmp	r6, r4
 80076aa:	d109      	bne.n	80076c0 <__libc_init_array+0x24>
 80076ac:	4d0b      	ldr	r5, [pc, #44]	@ (80076dc <__libc_init_array+0x40>)
 80076ae:	4c0c      	ldr	r4, [pc, #48]	@ (80076e0 <__libc_init_array+0x44>)
 80076b0:	f000 f818 	bl	80076e4 <_init>
 80076b4:	1b64      	subs	r4, r4, r5
 80076b6:	10a4      	asrs	r4, r4, #2
 80076b8:	2600      	movs	r6, #0
 80076ba:	42a6      	cmp	r6, r4
 80076bc:	d105      	bne.n	80076ca <__libc_init_array+0x2e>
 80076be:	bd70      	pop	{r4, r5, r6, pc}
 80076c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80076c4:	4798      	blx	r3
 80076c6:	3601      	adds	r6, #1
 80076c8:	e7ee      	b.n	80076a8 <__libc_init_array+0xc>
 80076ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80076ce:	4798      	blx	r3
 80076d0:	3601      	adds	r6, #1
 80076d2:	e7f2      	b.n	80076ba <__libc_init_array+0x1e>
 80076d4:	08007744 	.word	0x08007744
 80076d8:	08007744 	.word	0x08007744
 80076dc:	08007744 	.word	0x08007744
 80076e0:	08007748 	.word	0x08007748

080076e4 <_init>:
 80076e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076e6:	bf00      	nop
 80076e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076ea:	bc08      	pop	{r3}
 80076ec:	469e      	mov	lr, r3
 80076ee:	4770      	bx	lr

080076f0 <_fini>:
 80076f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076f2:	bf00      	nop
 80076f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076f6:	bc08      	pop	{r3}
 80076f8:	469e      	mov	lr, r3
 80076fa:	4770      	bx	lr
