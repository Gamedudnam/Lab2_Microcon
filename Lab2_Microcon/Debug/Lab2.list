
Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007acc  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08007ca4  08007ca4  00008ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ce4  08007ce4  0000907c  2**0
                  CONTENTS
  4 .ARM          00000008  08007ce4  08007ce4  00008ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007cec  08007cec  0000907c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cec  08007cec  00008cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007cf0  08007cf0  00008cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08007cf4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000320  2000007c  08007d70  0000907c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  08007d70  0000939c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000907c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017a1c  00000000  00000000  000090ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c99  00000000  00000000  00020ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001510  00000000  00000000  00023768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001077  00000000  00000000  00024c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028dd6  00000000  00000000  00025cef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018a99  00000000  00000000  0004eac5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011412a  00000000  00000000  0006755e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017b688  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c8c  00000000  00000000  0017b6cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00181358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000007c 	.word	0x2000007c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007c8c 	.word	0x08007c8c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000080 	.word	0x20000080
 8000214:	08007c8c 	.word	0x08007c8c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b96a 	b.w	8000d40 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	460c      	mov	r4, r1
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d14e      	bne.n	8000b2e <__udivmoddi4+0xaa>
 8000a90:	4694      	mov	ip, r2
 8000a92:	458c      	cmp	ip, r1
 8000a94:	4686      	mov	lr, r0
 8000a96:	fab2 f282 	clz	r2, r2
 8000a9a:	d962      	bls.n	8000b62 <__udivmoddi4+0xde>
 8000a9c:	b14a      	cbz	r2, 8000ab2 <__udivmoddi4+0x2e>
 8000a9e:	f1c2 0320 	rsb	r3, r2, #32
 8000aa2:	4091      	lsls	r1, r2
 8000aa4:	fa20 f303 	lsr.w	r3, r0, r3
 8000aa8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aac:	4319      	orrs	r1, r3
 8000aae:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ab2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ab6:	fa1f f68c 	uxth.w	r6, ip
 8000aba:	fbb1 f4f7 	udiv	r4, r1, r7
 8000abe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ac2:	fb07 1114 	mls	r1, r7, r4, r1
 8000ac6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aca:	fb04 f106 	mul.w	r1, r4, r6
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	d90a      	bls.n	8000ae8 <__udivmoddi4+0x64>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ada:	f080 8112 	bcs.w	8000d02 <__udivmoddi4+0x27e>
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	f240 810f 	bls.w	8000d02 <__udivmoddi4+0x27e>
 8000ae4:	3c02      	subs	r4, #2
 8000ae6:	4463      	add	r3, ip
 8000ae8:	1a59      	subs	r1, r3, r1
 8000aea:	fa1f f38e 	uxth.w	r3, lr
 8000aee:	fbb1 f0f7 	udiv	r0, r1, r7
 8000af2:	fb07 1110 	mls	r1, r7, r0, r1
 8000af6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000afa:	fb00 f606 	mul.w	r6, r0, r6
 8000afe:	429e      	cmp	r6, r3
 8000b00:	d90a      	bls.n	8000b18 <__udivmoddi4+0x94>
 8000b02:	eb1c 0303 	adds.w	r3, ip, r3
 8000b06:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b0a:	f080 80fc 	bcs.w	8000d06 <__udivmoddi4+0x282>
 8000b0e:	429e      	cmp	r6, r3
 8000b10:	f240 80f9 	bls.w	8000d06 <__udivmoddi4+0x282>
 8000b14:	4463      	add	r3, ip
 8000b16:	3802      	subs	r0, #2
 8000b18:	1b9b      	subs	r3, r3, r6
 8000b1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b1e:	2100      	movs	r1, #0
 8000b20:	b11d      	cbz	r5, 8000b2a <__udivmoddi4+0xa6>
 8000b22:	40d3      	lsrs	r3, r2
 8000b24:	2200      	movs	r2, #0
 8000b26:	e9c5 3200 	strd	r3, r2, [r5]
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d905      	bls.n	8000b3e <__udivmoddi4+0xba>
 8000b32:	b10d      	cbz	r5, 8000b38 <__udivmoddi4+0xb4>
 8000b34:	e9c5 0100 	strd	r0, r1, [r5]
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4608      	mov	r0, r1
 8000b3c:	e7f5      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000b3e:	fab3 f183 	clz	r1, r3
 8000b42:	2900      	cmp	r1, #0
 8000b44:	d146      	bne.n	8000bd4 <__udivmoddi4+0x150>
 8000b46:	42a3      	cmp	r3, r4
 8000b48:	d302      	bcc.n	8000b50 <__udivmoddi4+0xcc>
 8000b4a:	4290      	cmp	r0, r2
 8000b4c:	f0c0 80f0 	bcc.w	8000d30 <__udivmoddi4+0x2ac>
 8000b50:	1a86      	subs	r6, r0, r2
 8000b52:	eb64 0303 	sbc.w	r3, r4, r3
 8000b56:	2001      	movs	r0, #1
 8000b58:	2d00      	cmp	r5, #0
 8000b5a:	d0e6      	beq.n	8000b2a <__udivmoddi4+0xa6>
 8000b5c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b60:	e7e3      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000b62:	2a00      	cmp	r2, #0
 8000b64:	f040 8090 	bne.w	8000c88 <__udivmoddi4+0x204>
 8000b68:	eba1 040c 	sub.w	r4, r1, ip
 8000b6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b70:	fa1f f78c 	uxth.w	r7, ip
 8000b74:	2101      	movs	r1, #1
 8000b76:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b7e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b86:	fb07 f006 	mul.w	r0, r7, r6
 8000b8a:	4298      	cmp	r0, r3
 8000b8c:	d908      	bls.n	8000ba0 <__udivmoddi4+0x11c>
 8000b8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b92:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x11a>
 8000b98:	4298      	cmp	r0, r3
 8000b9a:	f200 80cd 	bhi.w	8000d38 <__udivmoddi4+0x2b4>
 8000b9e:	4626      	mov	r6, r4
 8000ba0:	1a1c      	subs	r4, r3, r0
 8000ba2:	fa1f f38e 	uxth.w	r3, lr
 8000ba6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000baa:	fb08 4410 	mls	r4, r8, r0, r4
 8000bae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bb2:	fb00 f707 	mul.w	r7, r0, r7
 8000bb6:	429f      	cmp	r7, r3
 8000bb8:	d908      	bls.n	8000bcc <__udivmoddi4+0x148>
 8000bba:	eb1c 0303 	adds.w	r3, ip, r3
 8000bbe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bc2:	d202      	bcs.n	8000bca <__udivmoddi4+0x146>
 8000bc4:	429f      	cmp	r7, r3
 8000bc6:	f200 80b0 	bhi.w	8000d2a <__udivmoddi4+0x2a6>
 8000bca:	4620      	mov	r0, r4
 8000bcc:	1bdb      	subs	r3, r3, r7
 8000bce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bd2:	e7a5      	b.n	8000b20 <__udivmoddi4+0x9c>
 8000bd4:	f1c1 0620 	rsb	r6, r1, #32
 8000bd8:	408b      	lsls	r3, r1
 8000bda:	fa22 f706 	lsr.w	r7, r2, r6
 8000bde:	431f      	orrs	r7, r3
 8000be0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000be4:	fa04 f301 	lsl.w	r3, r4, r1
 8000be8:	ea43 030c 	orr.w	r3, r3, ip
 8000bec:	40f4      	lsrs	r4, r6
 8000bee:	fa00 f801 	lsl.w	r8, r0, r1
 8000bf2:	0c38      	lsrs	r0, r7, #16
 8000bf4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bf8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bfc:	fa1f fc87 	uxth.w	ip, r7
 8000c00:	fb00 441e 	mls	r4, r0, lr, r4
 8000c04:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c08:	fb0e f90c 	mul.w	r9, lr, ip
 8000c0c:	45a1      	cmp	r9, r4
 8000c0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c12:	d90a      	bls.n	8000c2a <__udivmoddi4+0x1a6>
 8000c14:	193c      	adds	r4, r7, r4
 8000c16:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c1a:	f080 8084 	bcs.w	8000d26 <__udivmoddi4+0x2a2>
 8000c1e:	45a1      	cmp	r9, r4
 8000c20:	f240 8081 	bls.w	8000d26 <__udivmoddi4+0x2a2>
 8000c24:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c28:	443c      	add	r4, r7
 8000c2a:	eba4 0409 	sub.w	r4, r4, r9
 8000c2e:	fa1f f983 	uxth.w	r9, r3
 8000c32:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c36:	fb00 4413 	mls	r4, r0, r3, r4
 8000c3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c3e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c42:	45a4      	cmp	ip, r4
 8000c44:	d907      	bls.n	8000c56 <__udivmoddi4+0x1d2>
 8000c46:	193c      	adds	r4, r7, r4
 8000c48:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c4c:	d267      	bcs.n	8000d1e <__udivmoddi4+0x29a>
 8000c4e:	45a4      	cmp	ip, r4
 8000c50:	d965      	bls.n	8000d1e <__udivmoddi4+0x29a>
 8000c52:	3b02      	subs	r3, #2
 8000c54:	443c      	add	r4, r7
 8000c56:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c5a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c5e:	eba4 040c 	sub.w	r4, r4, ip
 8000c62:	429c      	cmp	r4, r3
 8000c64:	46ce      	mov	lr, r9
 8000c66:	469c      	mov	ip, r3
 8000c68:	d351      	bcc.n	8000d0e <__udivmoddi4+0x28a>
 8000c6a:	d04e      	beq.n	8000d0a <__udivmoddi4+0x286>
 8000c6c:	b155      	cbz	r5, 8000c84 <__udivmoddi4+0x200>
 8000c6e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c72:	eb64 040c 	sbc.w	r4, r4, ip
 8000c76:	fa04 f606 	lsl.w	r6, r4, r6
 8000c7a:	40cb      	lsrs	r3, r1
 8000c7c:	431e      	orrs	r6, r3
 8000c7e:	40cc      	lsrs	r4, r1
 8000c80:	e9c5 6400 	strd	r6, r4, [r5]
 8000c84:	2100      	movs	r1, #0
 8000c86:	e750      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000c88:	f1c2 0320 	rsb	r3, r2, #32
 8000c8c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c94:	fa24 f303 	lsr.w	r3, r4, r3
 8000c98:	4094      	lsls	r4, r2
 8000c9a:	430c      	orrs	r4, r1
 8000c9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca4:	fa1f f78c 	uxth.w	r7, ip
 8000ca8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cac:	fb08 3110 	mls	r1, r8, r0, r3
 8000cb0:	0c23      	lsrs	r3, r4, #16
 8000cb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb6:	fb00 f107 	mul.w	r1, r0, r7
 8000cba:	4299      	cmp	r1, r3
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x24c>
 8000cbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cc6:	d22c      	bcs.n	8000d22 <__udivmoddi4+0x29e>
 8000cc8:	4299      	cmp	r1, r3
 8000cca:	d92a      	bls.n	8000d22 <__udivmoddi4+0x29e>
 8000ccc:	3802      	subs	r0, #2
 8000cce:	4463      	add	r3, ip
 8000cd0:	1a5b      	subs	r3, r3, r1
 8000cd2:	b2a4      	uxth	r4, r4
 8000cd4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cd8:	fb08 3311 	mls	r3, r8, r1, r3
 8000cdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce0:	fb01 f307 	mul.w	r3, r1, r7
 8000ce4:	42a3      	cmp	r3, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x276>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cf0:	d213      	bcs.n	8000d1a <__udivmoddi4+0x296>
 8000cf2:	42a3      	cmp	r3, r4
 8000cf4:	d911      	bls.n	8000d1a <__udivmoddi4+0x296>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	4464      	add	r4, ip
 8000cfa:	1ae4      	subs	r4, r4, r3
 8000cfc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d00:	e739      	b.n	8000b76 <__udivmoddi4+0xf2>
 8000d02:	4604      	mov	r4, r0
 8000d04:	e6f0      	b.n	8000ae8 <__udivmoddi4+0x64>
 8000d06:	4608      	mov	r0, r1
 8000d08:	e706      	b.n	8000b18 <__udivmoddi4+0x94>
 8000d0a:	45c8      	cmp	r8, r9
 8000d0c:	d2ae      	bcs.n	8000c6c <__udivmoddi4+0x1e8>
 8000d0e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d12:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d16:	3801      	subs	r0, #1
 8000d18:	e7a8      	b.n	8000c6c <__udivmoddi4+0x1e8>
 8000d1a:	4631      	mov	r1, r6
 8000d1c:	e7ed      	b.n	8000cfa <__udivmoddi4+0x276>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	e799      	b.n	8000c56 <__udivmoddi4+0x1d2>
 8000d22:	4630      	mov	r0, r6
 8000d24:	e7d4      	b.n	8000cd0 <__udivmoddi4+0x24c>
 8000d26:	46d6      	mov	lr, sl
 8000d28:	e77f      	b.n	8000c2a <__udivmoddi4+0x1a6>
 8000d2a:	4463      	add	r3, ip
 8000d2c:	3802      	subs	r0, #2
 8000d2e:	e74d      	b.n	8000bcc <__udivmoddi4+0x148>
 8000d30:	4606      	mov	r6, r0
 8000d32:	4623      	mov	r3, r4
 8000d34:	4608      	mov	r0, r1
 8000d36:	e70f      	b.n	8000b58 <__udivmoddi4+0xd4>
 8000d38:	3e02      	subs	r6, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	e730      	b.n	8000ba0 <__udivmoddi4+0x11c>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_idiv0>:
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop

08000d44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d4a:	f001 fa0c 	bl	8002166 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d4e:	f000 fa15 	bl	800117c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d52:	f000 fd39 	bl	80017c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d56:	f000 fd0d 	bl	8001774 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000d5a:	f000 fad3 	bl	8001304 <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 8000d5e:	f000 fc31 	bl	80015c4 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000d62:	f000 fa57 	bl	8001214 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000d66:	f000 fb17 	bl	8001398 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000d6a:	f000 fbd1 	bl	8001510 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000d6e:	f000 fc7f 	bl	8001670 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8000d72:	213c      	movs	r1, #60	@ 0x3c
 8000d74:	487a      	ldr	r0, [pc, #488]	@ (8000f60 <main+0x21c>)
 8000d76:	f005 f837 	bl	8005de8 <HAL_TIM_Encoder_Start>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000d7a:	217f      	movs	r1, #127	@ 0x7f
 8000d7c:	4879      	ldr	r0, [pc, #484]	@ (8000f64 <main+0x220>)
 8000d7e:	f002 ff2b 	bl	8003bd8 <HAL_ADCEx_Calibration_Start>
  PID.Kp =1;
 8000d82:	4b79      	ldr	r3, [pc, #484]	@ (8000f68 <main+0x224>)
 8000d84:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000d88:	619a      	str	r2, [r3, #24]
  PID.Ki =0;
 8000d8a:	4b77      	ldr	r3, [pc, #476]	@ (8000f68 <main+0x224>)
 8000d8c:	f04f 0200 	mov.w	r2, #0
 8000d90:	61da      	str	r2, [r3, #28]
  PID.Kd = 0;
 8000d92:	4b75      	ldr	r3, [pc, #468]	@ (8000f68 <main+0x224>)
 8000d94:	f04f 0200 	mov.w	r2, #0
 8000d98:	621a      	str	r2, [r3, #32]
  arm_pid_init_f32(&PID, 0);
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4872      	ldr	r0, [pc, #456]	@ (8000f68 <main+0x224>)
 8000d9e:	f006 ff13 	bl	8007bc8 <arm_pid_init_f32>
  HAL_TIM_Base_Start(&htim1);
 8000da2:	4872      	ldr	r0, [pc, #456]	@ (8000f6c <main+0x228>)
 8000da4:	f004 fda0 	bl	80058e8 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000da8:	2100      	movs	r1, #0
 8000daa:	4870      	ldr	r0, [pc, #448]	@ (8000f6c <main+0x228>)
 8000dac:	f004 fe64 	bl	8005a78 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000db0:	2104      	movs	r1, #4
 8000db2:	486e      	ldr	r0, [pc, #440]	@ (8000f6c <main+0x228>)
 8000db4:	f004 fe60 	bl	8005a78 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim4);
 8000db8:	486d      	ldr	r0, [pc, #436]	@ (8000f70 <main+0x22c>)
 8000dba:	f004 fd95 	bl	80058e8 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	486b      	ldr	r0, [pc, #428]	@ (8000f70 <main+0x22c>)
 8000dc2:	f004 fe59 	bl	8005a78 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000dc6:	2104      	movs	r1, #4
 8000dc8:	4869      	ldr	r0, [pc, #420]	@ (8000f70 <main+0x22c>)
 8000dca:	f004 fe55 	bl	8005a78 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (check == 1)
 8000dce:	4b69      	ldr	r3, [pc, #420]	@ (8000f74 <main+0x230>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	f040 80de 	bne.w	8000f94 <main+0x250>
	  {
		  NO1();
 8000dd8:	f000 fd66 	bl	80018a8 <NO1>
		  setposition2 = ADC1_Channel[2].data;
 8000ddc:	4b66      	ldr	r3, [pc, #408]	@ (8000f78 <main+0x234>)
 8000dde:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8000de2:	ee07 3a90 	vmov	s15, r3
 8000de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dea:	4b64      	ldr	r3, [pc, #400]	@ (8000f7c <main+0x238>)
 8000dec:	edc3 7a00 	vstr	s15, [r3]
		  position2 = ADC1_Channel[1].data;
 8000df0:	4b61      	ldr	r3, [pc, #388]	@ (8000f78 <main+0x234>)
 8000df2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000df6:	ee07 3a90 	vmov	s15, r3
 8000dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dfe:	4b60      	ldr	r3, [pc, #384]	@ (8000f80 <main+0x23c>)
 8000e00:	edc3 7a00 	vstr	s15, [r3]
		  Diff2 = ADC1_Channel[2].data - ADC1_Channel[1].data;
 8000e04:	4b5c      	ldr	r3, [pc, #368]	@ (8000f78 <main+0x234>)
 8000e06:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	4b5a      	ldr	r3, [pc, #360]	@ (8000f78 <main+0x234>)
 8000e0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000e12:	1ad3      	subs	r3, r2, r3
 8000e14:	4a5b      	ldr	r2, [pc, #364]	@ (8000f84 <main+0x240>)
 8000e16:	6013      	str	r3, [r2, #0]
		  static uint32_t timestamp =0;
		  if(timestamp < HAL_GetTick())
 8000e18:	f001 fa0a 	bl	8002230 <HAL_GetTick>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	4b5a      	ldr	r3, [pc, #360]	@ (8000f88 <main+0x244>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d9d3      	bls.n	8000dce <main+0x8a>
		  {
			  timestamp = HAL_GetTick()+1;
 8000e26:	f001 fa03 	bl	8002230 <HAL_GetTick>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	4a56      	ldr	r2, [pc, #344]	@ (8000f88 <main+0x244>)
 8000e30:	6013      	str	r3, [r2, #0]
			  Vfeedback2 = arm_pid_f32(&PID, setposition2 - position2);
 8000e32:	4b52      	ldr	r3, [pc, #328]	@ (8000f7c <main+0x238>)
 8000e34:	ed93 7a00 	vldr	s14, [r3]
 8000e38:	4b51      	ldr	r3, [pc, #324]	@ (8000f80 <main+0x23c>)
 8000e3a:	edd3 7a00 	vldr	s15, [r3]
 8000e3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e42:	4b49      	ldr	r3, [pc, #292]	@ (8000f68 <main+0x224>)
 8000e44:	617b      	str	r3, [r7, #20]
 8000e46:	edc7 7a04 	vstr	s15, [r7, #16]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	ed93 7a00 	vldr	s14, [r3]
 8000e50:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e54:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	edd3 6a01 	vldr	s13, [r3, #4]
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	edd3 7a03 	vldr	s15, [r3, #12]
 8000e64:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8000e68:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	edd3 6a02 	vldr	s13, [r3, #8]
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	edd3 7a04 	vldr	s15, [r3, #16]
 8000e78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8000e86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e8a:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	68da      	ldr	r2, [r3, #12]
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	68fa      	ldr	r2, [r7, #12]
 8000ea0:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	4a39      	ldr	r2, [pc, #228]	@ (8000f8c <main+0x248>)
 8000ea6:	6013      	str	r3, [r2, #0]
			  position2 = PlantSimulation(Vfeedback2);
 8000ea8:	4b38      	ldr	r3, [pc, #224]	@ (8000f8c <main+0x248>)
 8000eaa:	edd3 7a00 	vldr	s15, [r3]
 8000eae:	eeb0 0a67 	vmov.f32	s0, s15
 8000eb2:	f000 fdf9 	bl	8001aa8 <PlantSimulation>
 8000eb6:	eef0 7a40 	vmov.f32	s15, s0
 8000eba:	4b31      	ldr	r3, [pc, #196]	@ (8000f80 <main+0x23c>)
 8000ebc:	edc3 7a00 	vstr	s15, [r3]
//			  if (Vfeedback > 3199)
//			  {
//				  Vfeedback = 3199;
//			  }
			  if (Diff2 < 0)
 8000ec0:	4b30      	ldr	r3, [pc, #192]	@ (8000f84 <main+0x240>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	da23      	bge.n	8000f10 <main+0x1cc>
			  {
				  G = 1;
 8000ec8:	4b31      	ldr	r3, [pc, #196]	@ (8000f90 <main+0x24c>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	601a      	str	r2, [r3, #0]
				  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8000ece:	4b28      	ldr	r3, [pc, #160]	@ (8000f70 <main+0x22c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	635a      	str	r2, [r3, #52]	@ 0x34
				  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, -Vfeedback2);
 8000ed6:	4b2d      	ldr	r3, [pc, #180]	@ (8000f8c <main+0x248>)
 8000ed8:	edd3 7a00 	vldr	s15, [r3]
 8000edc:	eef1 7a67 	vneg.f32	s15, s15
 8000ee0:	4b23      	ldr	r3, [pc, #140]	@ (8000f70 <main+0x22c>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ee8:	ee17 2a90 	vmov	r2, s15
 8000eec:	639a      	str	r2, [r3, #56]	@ 0x38
				  if (Diff2 == 0)
 8000eee:	4b25      	ldr	r3, [pc, #148]	@ (8000f84 <main+0x240>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	f47f af6b 	bne.w	8000dce <main+0x8a>
				  {
					  G = 2;
 8000ef8:	4b25      	ldr	r3, [pc, #148]	@ (8000f90 <main+0x24c>)
 8000efa:	2202      	movs	r2, #2
 8000efc:	601a      	str	r2, [r3, #0]
					  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8000efe:	4b1c      	ldr	r3, [pc, #112]	@ (8000f70 <main+0x22c>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2200      	movs	r2, #0
 8000f04:	635a      	str	r2, [r3, #52]	@ 0x34
					  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 8000f06:	4b1a      	ldr	r3, [pc, #104]	@ (8000f70 <main+0x22c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f0e:	e75e      	b.n	8000dce <main+0x8a>
				  }
			  }

			  else if (Diff2 > 0)
 8000f10:	4b1c      	ldr	r3, [pc, #112]	@ (8000f84 <main+0x240>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	f77f af5a 	ble.w	8000dce <main+0x8a>
			  {
				  G = 3;
 8000f1a:	4b1d      	ldr	r3, [pc, #116]	@ (8000f90 <main+0x24c>)
 8000f1c:	2203      	movs	r2, #3
 8000f1e:	601a      	str	r2, [r3, #0]
				  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, Vfeedback2);
 8000f20:	4b1a      	ldr	r3, [pc, #104]	@ (8000f8c <main+0x248>)
 8000f22:	edd3 7a00 	vldr	s15, [r3]
 8000f26:	4b12      	ldr	r3, [pc, #72]	@ (8000f70 <main+0x22c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f2e:	ee17 2a90 	vmov	r2, s15
 8000f32:	635a      	str	r2, [r3, #52]	@ 0x34
				  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 8000f34:	4b0e      	ldr	r3, [pc, #56]	@ (8000f70 <main+0x22c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	639a      	str	r2, [r3, #56]	@ 0x38
				  if (Diff2 == 0)
 8000f3c:	4b11      	ldr	r3, [pc, #68]	@ (8000f84 <main+0x240>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	f47f af44 	bne.w	8000dce <main+0x8a>
				  {
					  G = 4;
 8000f46:	4b12      	ldr	r3, [pc, #72]	@ (8000f90 <main+0x24c>)
 8000f48:	2204      	movs	r2, #4
 8000f4a:	601a      	str	r2, [r3, #0]
					  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8000f4c:	4b08      	ldr	r3, [pc, #32]	@ (8000f70 <main+0x22c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2200      	movs	r2, #0
 8000f52:	635a      	str	r2, [r3, #52]	@ 0x34
					  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 8000f54:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <main+0x22c>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f5c:	e737      	b.n	8000dce <main+0x8a>
 8000f5e:	bf00      	nop
 8000f60:	20000290 	.word	0x20000290
 8000f64:	20000098 	.word	0x20000098
 8000f68:	20000334 	.word	0x20000334
 8000f6c:	200001f8 	.word	0x200001f8
 8000f70:	200002dc 	.word	0x200002dc
 8000f74:	20000000 	.word	0x20000000
 8000f78:	20000004 	.word	0x20000004
 8000f7c:	20000368 	.word	0x20000368
 8000f80:	20000364 	.word	0x20000364
 8000f84:	2000037c 	.word	0x2000037c
 8000f88:	20000380 	.word	0x20000380
 8000f8c:	2000036c 	.word	0x2000036c
 8000f90:	20000374 	.word	0x20000374
				  }
			  }
		  }
	  }
	  else if (check == 2)
 8000f94:	4b6c      	ldr	r3, [pc, #432]	@ (8001148 <main+0x404>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	f040 80d1 	bne.w	8001140 <main+0x3fc>
	  {
		  NO2();
 8000f9e:	f000 fcf3 	bl	8001988 <NO2>
		  setposition = Gain;
 8000fa2:	4b6a      	ldr	r3, [pc, #424]	@ (800114c <main+0x408>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a6a      	ldr	r2, [pc, #424]	@ (8001150 <main+0x40c>)
 8000fa8:	6013      	str	r3, [r2, #0]
		  position = QEIReadRaw;
 8000faa:	4b6a      	ldr	r3, [pc, #424]	@ (8001154 <main+0x410>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	ee07 3a90 	vmov	s15, r3
 8000fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fb6:	4b68      	ldr	r3, [pc, #416]	@ (8001158 <main+0x414>)
 8000fb8:	edc3 7a00 	vstr	s15, [r3]
		  Diff = Gain - QEIReadRaw;
 8000fbc:	4b63      	ldr	r3, [pc, #396]	@ (800114c <main+0x408>)
 8000fbe:	ed93 7a00 	vldr	s14, [r3]
 8000fc2:	4b64      	ldr	r3, [pc, #400]	@ (8001154 <main+0x410>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	ee07 3a90 	vmov	s15, r3
 8000fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fd6:	ee17 2a90 	vmov	r2, s15
 8000fda:	4b60      	ldr	r3, [pc, #384]	@ (800115c <main+0x418>)
 8000fdc:	601a      	str	r2, [r3, #0]
		  static uint32_t timestamp =0;
		  if(timestamp < HAL_GetTick())
 8000fde:	f001 f927 	bl	8002230 <HAL_GetTick>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	4b5e      	ldr	r3, [pc, #376]	@ (8001160 <main+0x41c>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	f67f aef0 	bls.w	8000dce <main+0x8a>
		  {
			  timestamp = HAL_GetTick()+1;
 8000fee:	f001 f91f 	bl	8002230 <HAL_GetTick>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	4a5a      	ldr	r2, [pc, #360]	@ (8001160 <main+0x41c>)
 8000ff8:	6013      	str	r3, [r2, #0]
			  Vfeedback = arm_pid_f32(&PID, setposition - position);
 8000ffa:	4b55      	ldr	r3, [pc, #340]	@ (8001150 <main+0x40c>)
 8000ffc:	ed93 7a00 	vldr	s14, [r3]
 8001000:	4b55      	ldr	r3, [pc, #340]	@ (8001158 <main+0x414>)
 8001002:	edd3 7a00 	vldr	s15, [r3]
 8001006:	ee77 7a67 	vsub.f32	s15, s14, s15
 800100a:	4b56      	ldr	r3, [pc, #344]	@ (8001164 <main+0x420>)
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	edc7 7a01 	vstr	s15, [r7, #4]
    out = (S->A0 * in) +
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	ed93 7a00 	vldr	s14, [r3]
 8001018:	edd7 7a01 	vldr	s15, [r7, #4]
 800101c:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	edd3 6a01 	vldr	s13, [r3, #4]
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	edd3 7a03 	vldr	s15, [r3, #12]
 800102c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001030:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	edd3 6a02 	vldr	s13, [r3, #8]
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001040:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001044:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 800104e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001052:	edc7 7a00 	vstr	s15, [r7]
    S->state[1] = S->state[0];
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	68da      	ldr	r2, [r3, #12]
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	683a      	ldr	r2, [r7, #0]
 8001068:	615a      	str	r2, [r3, #20]
    return (out);
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	4a3e      	ldr	r2, [pc, #248]	@ (8001168 <main+0x424>)
 800106e:	6013      	str	r3, [r2, #0]
			  position = PlantSimulation(Vfeedback);
 8001070:	4b3d      	ldr	r3, [pc, #244]	@ (8001168 <main+0x424>)
 8001072:	edd3 7a00 	vldr	s15, [r3]
 8001076:	eeb0 0a67 	vmov.f32	s0, s15
 800107a:	f000 fd15 	bl	8001aa8 <PlantSimulation>
 800107e:	eef0 7a40 	vmov.f32	s15, s0
 8001082:	4b35      	ldr	r3, [pc, #212]	@ (8001158 <main+0x414>)
 8001084:	edc3 7a00 	vstr	s15, [r3]
			  if (Vfeedback > 3199)
 8001088:	4b37      	ldr	r3, [pc, #220]	@ (8001168 <main+0x424>)
 800108a:	edd3 7a00 	vldr	s15, [r3]
 800108e:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 800116c <main+0x428>
 8001092:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800109a:	dd02      	ble.n	80010a2 <main+0x35e>
			  {
				  Vfeedback = 3199;
 800109c:	4b32      	ldr	r3, [pc, #200]	@ (8001168 <main+0x424>)
 800109e:	4a34      	ldr	r2, [pc, #208]	@ (8001170 <main+0x42c>)
 80010a0:	601a      	str	r2, [r3, #0]
			  }
			  if (Diff < 0)
 80010a2:	4b2e      	ldr	r3, [pc, #184]	@ (800115c <main+0x418>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	da23      	bge.n	80010f2 <main+0x3ae>
			  {
				  G = 1;
 80010aa:	4b32      	ldr	r3, [pc, #200]	@ (8001174 <main+0x430>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	601a      	str	r2, [r3, #0]
				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80010b0:	4b31      	ldr	r3, [pc, #196]	@ (8001178 <main+0x434>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2200      	movs	r2, #0
 80010b6:	635a      	str	r2, [r3, #52]	@ 0x34
				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, -Vfeedback);
 80010b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001168 <main+0x424>)
 80010ba:	edd3 7a00 	vldr	s15, [r3]
 80010be:	eef1 7a67 	vneg.f32	s15, s15
 80010c2:	4b2d      	ldr	r3, [pc, #180]	@ (8001178 <main+0x434>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010ca:	ee17 2a90 	vmov	r2, s15
 80010ce:	639a      	str	r2, [r3, #56]	@ 0x38
				  if (Diff == 0)
 80010d0:	4b22      	ldr	r3, [pc, #136]	@ (800115c <main+0x418>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	f47f ae7a 	bne.w	8000dce <main+0x8a>
				  {
	 				  G = 2;
 80010da:	4b26      	ldr	r3, [pc, #152]	@ (8001174 <main+0x430>)
 80010dc:	2202      	movs	r2, #2
 80010de:	601a      	str	r2, [r3, #0]
	  				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80010e0:	4b25      	ldr	r3, [pc, #148]	@ (8001178 <main+0x434>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2200      	movs	r2, #0
 80010e6:	635a      	str	r2, [r3, #52]	@ 0x34
	  				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80010e8:	4b23      	ldr	r3, [pc, #140]	@ (8001178 <main+0x434>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2200      	movs	r2, #0
 80010ee:	639a      	str	r2, [r3, #56]	@ 0x38
 80010f0:	e66d      	b.n	8000dce <main+0x8a>
	  			  }
			  }

			  else if (Diff > 0)
 80010f2:	4b1a      	ldr	r3, [pc, #104]	@ (800115c <main+0x418>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	f77f ae69 	ble.w	8000dce <main+0x8a>
			  {
				  G = 3;
 80010fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001174 <main+0x430>)
 80010fe:	2203      	movs	r2, #3
 8001100:	601a      	str	r2, [r3, #0]
				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, Vfeedback);
 8001102:	4b19      	ldr	r3, [pc, #100]	@ (8001168 <main+0x424>)
 8001104:	edd3 7a00 	vldr	s15, [r3]
 8001108:	4b1b      	ldr	r3, [pc, #108]	@ (8001178 <main+0x434>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001110:	ee17 2a90 	vmov	r2, s15
 8001114:	635a      	str	r2, [r3, #52]	@ 0x34
				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001116:	4b18      	ldr	r3, [pc, #96]	@ (8001178 <main+0x434>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2200      	movs	r2, #0
 800111c:	639a      	str	r2, [r3, #56]	@ 0x38
				  if (Diff == 0)
 800111e:	4b0f      	ldr	r3, [pc, #60]	@ (800115c <main+0x418>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2b00      	cmp	r3, #0
 8001124:	f47f ae53 	bne.w	8000dce <main+0x8a>
				  {
  	 				  G = 4;
 8001128:	4b12      	ldr	r3, [pc, #72]	@ (8001174 <main+0x430>)
 800112a:	2204      	movs	r2, #4
 800112c:	601a      	str	r2, [r3, #0]
  	 				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800112e:	4b12      	ldr	r3, [pc, #72]	@ (8001178 <main+0x434>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2200      	movs	r2, #0
 8001134:	635a      	str	r2, [r3, #52]	@ 0x34
  	 				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001136:	4b10      	ldr	r3, [pc, #64]	@ (8001178 <main+0x434>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2200      	movs	r2, #0
 800113c:	639a      	str	r2, [r3, #56]	@ 0x38
 800113e:	e646      	b.n	8000dce <main+0x8a>
			  }
		  }
	  }
	  else
	  {
		  NO3();
 8001140:	f000 fd22 	bl	8001b88 <NO3>
	  if (check == 1)
 8001144:	e643      	b.n	8000dce <main+0x8a>
 8001146:	bf00      	nop
 8001148:	20000000 	.word	0x20000000
 800114c:	20000370 	.word	0x20000370
 8001150:	2000035c 	.word	0x2000035c
 8001154:	20000328 	.word	0x20000328
 8001158:	20000358 	.word	0x20000358
 800115c:	20000378 	.word	0x20000378
 8001160:	20000384 	.word	0x20000384
 8001164:	20000334 	.word	0x20000334
 8001168:	20000360 	.word	0x20000360
 800116c:	4547f000 	.word	0x4547f000
 8001170:	4547f000 	.word	0x4547f000
 8001174:	20000374 	.word	0x20000374
 8001178:	200001f8 	.word	0x200001f8

0800117c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b094      	sub	sp, #80	@ 0x50
 8001180:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001182:	f107 0318 	add.w	r3, r7, #24
 8001186:	2238      	movs	r2, #56	@ 0x38
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f006 fd52 	bl	8007c34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001190:	1d3b      	adds	r3, r7, #4
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
 800119c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800119e:	2000      	movs	r0, #0
 80011a0:	f003 fb1a 	bl	80047d8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011a4:	2302      	movs	r3, #2
 80011a6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011ae:	2340      	movs	r3, #64	@ 0x40
 80011b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011b2:	2302      	movs	r3, #2
 80011b4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011b6:	2302      	movs	r3, #2
 80011b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80011ba:	2304      	movs	r3, #4
 80011bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80011be:	2355      	movs	r3, #85	@ 0x55
 80011c0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011c2:	2302      	movs	r3, #2
 80011c4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011c6:	2302      	movs	r3, #2
 80011c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011ca:	2302      	movs	r3, #2
 80011cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ce:	f107 0318 	add.w	r3, r7, #24
 80011d2:	4618      	mov	r0, r3
 80011d4:	f003 fbb4 	bl	8004940 <HAL_RCC_OscConfig>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80011de:	f000 fd11 	bl	8001c04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e2:	230f      	movs	r3, #15
 80011e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011e6:	2303      	movs	r3, #3
 80011e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	2104      	movs	r1, #4
 80011fa:	4618      	mov	r0, r3
 80011fc:	f003 feb2 	bl	8004f64 <HAL_RCC_ClockConfig>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001206:	f000 fcfd 	bl	8001c04 <Error_Handler>
  }
}
 800120a:	bf00      	nop
 800120c:	3750      	adds	r7, #80	@ 0x50
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08c      	sub	sp, #48	@ 0x30
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800121a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	2220      	movs	r2, #32
 800122a:	2100      	movs	r1, #0
 800122c:	4618      	mov	r0, r3
 800122e:	f006 fd01 	bl	8007c34 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001232:	4b32      	ldr	r3, [pc, #200]	@ (80012fc <MX_ADC1_Init+0xe8>)
 8001234:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001238:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800123a:	4b30      	ldr	r3, [pc, #192]	@ (80012fc <MX_ADC1_Init+0xe8>)
 800123c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001240:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001242:	4b2e      	ldr	r3, [pc, #184]	@ (80012fc <MX_ADC1_Init+0xe8>)
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001248:	4b2c      	ldr	r3, [pc, #176]	@ (80012fc <MX_ADC1_Init+0xe8>)
 800124a:	2200      	movs	r2, #0
 800124c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800124e:	4b2b      	ldr	r3, [pc, #172]	@ (80012fc <MX_ADC1_Init+0xe8>)
 8001250:	2200      	movs	r2, #0
 8001252:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001254:	4b29      	ldr	r3, [pc, #164]	@ (80012fc <MX_ADC1_Init+0xe8>)
 8001256:	2200      	movs	r2, #0
 8001258:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800125a:	4b28      	ldr	r3, [pc, #160]	@ (80012fc <MX_ADC1_Init+0xe8>)
 800125c:	2204      	movs	r2, #4
 800125e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001260:	4b26      	ldr	r3, [pc, #152]	@ (80012fc <MX_ADC1_Init+0xe8>)
 8001262:	2200      	movs	r2, #0
 8001264:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001266:	4b25      	ldr	r3, [pc, #148]	@ (80012fc <MX_ADC1_Init+0xe8>)
 8001268:	2201      	movs	r2, #1
 800126a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800126c:	4b23      	ldr	r3, [pc, #140]	@ (80012fc <MX_ADC1_Init+0xe8>)
 800126e:	2201      	movs	r2, #1
 8001270:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001272:	4b22      	ldr	r3, [pc, #136]	@ (80012fc <MX_ADC1_Init+0xe8>)
 8001274:	2200      	movs	r2, #0
 8001276:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800127a:	4b20      	ldr	r3, [pc, #128]	@ (80012fc <MX_ADC1_Init+0xe8>)
 800127c:	2200      	movs	r2, #0
 800127e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001280:	4b1e      	ldr	r3, [pc, #120]	@ (80012fc <MX_ADC1_Init+0xe8>)
 8001282:	2200      	movs	r2, #0
 8001284:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001286:	4b1d      	ldr	r3, [pc, #116]	@ (80012fc <MX_ADC1_Init+0xe8>)
 8001288:	2201      	movs	r2, #1
 800128a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800128e:	4b1b      	ldr	r3, [pc, #108]	@ (80012fc <MX_ADC1_Init+0xe8>)
 8001290:	2200      	movs	r2, #0
 8001292:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001294:	4b19      	ldr	r3, [pc, #100]	@ (80012fc <MX_ADC1_Init+0xe8>)
 8001296:	2200      	movs	r2, #0
 8001298:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800129c:	4817      	ldr	r0, [pc, #92]	@ (80012fc <MX_ADC1_Init+0xe8>)
 800129e:	f001 fa6f 	bl	8002780 <HAL_ADC_Init>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80012a8:	f000 fcac 	bl	8001c04 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80012ac:	2300      	movs	r3, #0
 80012ae:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80012b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012b4:	4619      	mov	r1, r3
 80012b6:	4811      	ldr	r0, [pc, #68]	@ (80012fc <MX_ADC1_Init+0xe8>)
 80012b8:	f002 fcf0 	bl	8003c9c <HAL_ADCEx_MultiModeConfigChannel>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80012c2:	f000 fc9f 	bl	8001c04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001300 <MX_ADC1_Init+0xec>)
 80012c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012ca:	2306      	movs	r3, #6
 80012cc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80012ce:	2300      	movs	r3, #0
 80012d0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012d2:	237f      	movs	r3, #127	@ 0x7f
 80012d4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012d6:	2304      	movs	r3, #4
 80012d8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	4619      	mov	r1, r3
 80012e2:	4806      	ldr	r0, [pc, #24]	@ (80012fc <MX_ADC1_Init+0xe8>)
 80012e4:	f001 fe34 	bl	8002f50 <HAL_ADC_ConfigChannel>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80012ee:	f000 fc89 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012f2:	bf00      	nop
 80012f4:	3730      	adds	r7, #48	@ 0x30
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000098 	.word	0x20000098
 8001300:	04300002 	.word	0x04300002

08001304 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001308:	4b21      	ldr	r3, [pc, #132]	@ (8001390 <MX_LPUART1_UART_Init+0x8c>)
 800130a:	4a22      	ldr	r2, [pc, #136]	@ (8001394 <MX_LPUART1_UART_Init+0x90>)
 800130c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800130e:	4b20      	ldr	r3, [pc, #128]	@ (8001390 <MX_LPUART1_UART_Init+0x8c>)
 8001310:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001314:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001316:	4b1e      	ldr	r3, [pc, #120]	@ (8001390 <MX_LPUART1_UART_Init+0x8c>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800131c:	4b1c      	ldr	r3, [pc, #112]	@ (8001390 <MX_LPUART1_UART_Init+0x8c>)
 800131e:	2200      	movs	r2, #0
 8001320:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001322:	4b1b      	ldr	r3, [pc, #108]	@ (8001390 <MX_LPUART1_UART_Init+0x8c>)
 8001324:	2200      	movs	r2, #0
 8001326:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001328:	4b19      	ldr	r3, [pc, #100]	@ (8001390 <MX_LPUART1_UART_Init+0x8c>)
 800132a:	220c      	movs	r2, #12
 800132c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800132e:	4b18      	ldr	r3, [pc, #96]	@ (8001390 <MX_LPUART1_UART_Init+0x8c>)
 8001330:	2200      	movs	r2, #0
 8001332:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001334:	4b16      	ldr	r3, [pc, #88]	@ (8001390 <MX_LPUART1_UART_Init+0x8c>)
 8001336:	2200      	movs	r2, #0
 8001338:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800133a:	4b15      	ldr	r3, [pc, #84]	@ (8001390 <MX_LPUART1_UART_Init+0x8c>)
 800133c:	2200      	movs	r2, #0
 800133e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001340:	4b13      	ldr	r3, [pc, #76]	@ (8001390 <MX_LPUART1_UART_Init+0x8c>)
 8001342:	2200      	movs	r2, #0
 8001344:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001346:	4812      	ldr	r0, [pc, #72]	@ (8001390 <MX_LPUART1_UART_Init+0x8c>)
 8001348:	f005 fdd0 	bl	8006eec <HAL_UART_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001352:	f000 fc57 	bl	8001c04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001356:	2100      	movs	r1, #0
 8001358:	480d      	ldr	r0, [pc, #52]	@ (8001390 <MX_LPUART1_UART_Init+0x8c>)
 800135a:	f006 fb6b 	bl	8007a34 <HAL_UARTEx_SetTxFifoThreshold>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001364:	f000 fc4e 	bl	8001c04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001368:	2100      	movs	r1, #0
 800136a:	4809      	ldr	r0, [pc, #36]	@ (8001390 <MX_LPUART1_UART_Init+0x8c>)
 800136c:	f006 fba0 	bl	8007ab0 <HAL_UARTEx_SetRxFifoThreshold>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001376:	f000 fc45 	bl	8001c04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800137a:	4805      	ldr	r0, [pc, #20]	@ (8001390 <MX_LPUART1_UART_Init+0x8c>)
 800137c:	f006 fb21 	bl	80079c2 <HAL_UARTEx_DisableFifoMode>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001386:	f000 fc3d 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000164 	.word	0x20000164
 8001394:	40008000 	.word	0x40008000

08001398 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b09c      	sub	sp, #112	@ 0x70
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800139e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ac:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013b8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
 80013c8:	615a      	str	r2, [r3, #20]
 80013ca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013cc:	1d3b      	adds	r3, r7, #4
 80013ce:	2234      	movs	r2, #52	@ 0x34
 80013d0:	2100      	movs	r1, #0
 80013d2:	4618      	mov	r0, r3
 80013d4:	f006 fc2e 	bl	8007c34 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013d8:	4b4b      	ldr	r3, [pc, #300]	@ (8001508 <MX_TIM1_Init+0x170>)
 80013da:	4a4c      	ldr	r2, [pc, #304]	@ (800150c <MX_TIM1_Init+0x174>)
 80013dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 80013de:	4b4a      	ldr	r3, [pc, #296]	@ (8001508 <MX_TIM1_Init+0x170>)
 80013e0:	22a9      	movs	r2, #169	@ 0xa9
 80013e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e4:	4b48      	ldr	r3, [pc, #288]	@ (8001508 <MX_TIM1_Init+0x170>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3199;
 80013ea:	4b47      	ldr	r3, [pc, #284]	@ (8001508 <MX_TIM1_Init+0x170>)
 80013ec:	f640 427f 	movw	r2, #3199	@ 0xc7f
 80013f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f2:	4b45      	ldr	r3, [pc, #276]	@ (8001508 <MX_TIM1_Init+0x170>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013f8:	4b43      	ldr	r3, [pc, #268]	@ (8001508 <MX_TIM1_Init+0x170>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fe:	4b42      	ldr	r3, [pc, #264]	@ (8001508 <MX_TIM1_Init+0x170>)
 8001400:	2200      	movs	r2, #0
 8001402:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001404:	4840      	ldr	r0, [pc, #256]	@ (8001508 <MX_TIM1_Init+0x170>)
 8001406:	f004 fa17 	bl	8005838 <HAL_TIM_Base_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001410:	f000 fbf8 	bl	8001c04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001414:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001418:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800141a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800141e:	4619      	mov	r1, r3
 8001420:	4839      	ldr	r0, [pc, #228]	@ (8001508 <MX_TIM1_Init+0x170>)
 8001422:	f004 fe83 	bl	800612c <HAL_TIM_ConfigClockSource>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800142c:	f000 fbea 	bl	8001c04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001430:	4835      	ldr	r0, [pc, #212]	@ (8001508 <MX_TIM1_Init+0x170>)
 8001432:	f004 fac9 	bl	80059c8 <HAL_TIM_PWM_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800143c:	f000 fbe2 	bl	8001c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001440:	2300      	movs	r3, #0
 8001442:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001444:	2300      	movs	r3, #0
 8001446:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001448:	2300      	movs	r3, #0
 800144a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800144c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001450:	4619      	mov	r1, r3
 8001452:	482d      	ldr	r0, [pc, #180]	@ (8001508 <MX_TIM1_Init+0x170>)
 8001454:	f005 fc20 	bl	8006c98 <HAL_TIMEx_MasterConfigSynchronization>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800145e:	f000 fbd1 	bl	8001c04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001462:	2360      	movs	r3, #96	@ 0x60
 8001464:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800146a:	2300      	movs	r3, #0
 800146c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800146e:	2300      	movs	r3, #0
 8001470:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001472:	2300      	movs	r3, #0
 8001474:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001476:	2300      	movs	r3, #0
 8001478:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800147a:	2300      	movs	r3, #0
 800147c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800147e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001482:	2200      	movs	r2, #0
 8001484:	4619      	mov	r1, r3
 8001486:	4820      	ldr	r0, [pc, #128]	@ (8001508 <MX_TIM1_Init+0x170>)
 8001488:	f004 fd3c 	bl	8005f04 <HAL_TIM_PWM_ConfigChannel>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001492:	f000 fbb7 	bl	8001c04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001496:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800149a:	2204      	movs	r2, #4
 800149c:	4619      	mov	r1, r3
 800149e:	481a      	ldr	r0, [pc, #104]	@ (8001508 <MX_TIM1_Init+0x170>)
 80014a0:	f004 fd30 	bl	8005f04 <HAL_TIM_PWM_ConfigChannel>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80014aa:	f000 fbab 	bl	8001c04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014ae:	2300      	movs	r3, #0
 80014b0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014b2:	2300      	movs	r3, #0
 80014b4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014c6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80014cc:	2300      	movs	r3, #0
 80014ce:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80014d0:	2300      	movs	r3, #0
 80014d2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80014d4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80014d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80014de:	2300      	movs	r3, #0
 80014e0:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014e2:	2300      	movs	r3, #0
 80014e4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014e6:	1d3b      	adds	r3, r7, #4
 80014e8:	4619      	mov	r1, r3
 80014ea:	4807      	ldr	r0, [pc, #28]	@ (8001508 <MX_TIM1_Init+0x170>)
 80014ec:	f005 fc6a 	bl	8006dc4 <HAL_TIMEx_ConfigBreakDeadTime>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 80014f6:	f000 fb85 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014fa:	4803      	ldr	r0, [pc, #12]	@ (8001508 <MX_TIM1_Init+0x170>)
 80014fc:	f000 fd34 	bl	8001f68 <HAL_TIM_MspPostInit>

}
 8001500:	bf00      	nop
 8001502:	3770      	adds	r7, #112	@ 0x70
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	200001f8 	.word	0x200001f8
 800150c:	40012c00 	.word	0x40012c00

08001510 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08a      	sub	sp, #40	@ 0x28
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001516:	f107 031c 	add.w	r3, r7, #28
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001522:	463b      	mov	r3, r7
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
 8001530:	615a      	str	r2, [r3, #20]
 8001532:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001534:	4b22      	ldr	r3, [pc, #136]	@ (80015c0 <MX_TIM2_Init+0xb0>)
 8001536:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800153a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800153c:	4b20      	ldr	r3, [pc, #128]	@ (80015c0 <MX_TIM2_Init+0xb0>)
 800153e:	2200      	movs	r2, #0
 8001540:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001542:	4b1f      	ldr	r3, [pc, #124]	@ (80015c0 <MX_TIM2_Init+0xb0>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001548:	4b1d      	ldr	r3, [pc, #116]	@ (80015c0 <MX_TIM2_Init+0xb0>)
 800154a:	f04f 32ff 	mov.w	r2, #4294967295
 800154e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001550:	4b1b      	ldr	r3, [pc, #108]	@ (80015c0 <MX_TIM2_Init+0xb0>)
 8001552:	2200      	movs	r2, #0
 8001554:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001556:	4b1a      	ldr	r3, [pc, #104]	@ (80015c0 <MX_TIM2_Init+0xb0>)
 8001558:	2200      	movs	r2, #0
 800155a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800155c:	4818      	ldr	r0, [pc, #96]	@ (80015c0 <MX_TIM2_Init+0xb0>)
 800155e:	f004 fa33 	bl	80059c8 <HAL_TIM_PWM_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001568:	f000 fb4c 	bl	8001c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800156c:	2300      	movs	r3, #0
 800156e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001570:	2300      	movs	r3, #0
 8001572:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001574:	f107 031c 	add.w	r3, r7, #28
 8001578:	4619      	mov	r1, r3
 800157a:	4811      	ldr	r0, [pc, #68]	@ (80015c0 <MX_TIM2_Init+0xb0>)
 800157c:	f005 fb8c 	bl	8006c98 <HAL_TIMEx_MasterConfigSynchronization>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001586:	f000 fb3d 	bl	8001c04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800158a:	2360      	movs	r3, #96	@ 0x60
 800158c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800158e:	2300      	movs	r3, #0
 8001590:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001592:	2300      	movs	r3, #0
 8001594:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001596:	2300      	movs	r3, #0
 8001598:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800159a:	463b      	mov	r3, r7
 800159c:	2200      	movs	r2, #0
 800159e:	4619      	mov	r1, r3
 80015a0:	4807      	ldr	r0, [pc, #28]	@ (80015c0 <MX_TIM2_Init+0xb0>)
 80015a2:	f004 fcaf 	bl	8005f04 <HAL_TIM_PWM_ConfigChannel>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80015ac:	f000 fb2a 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015b0:	4803      	ldr	r0, [pc, #12]	@ (80015c0 <MX_TIM2_Init+0xb0>)
 80015b2:	f000 fcd9 	bl	8001f68 <HAL_TIM_MspPostInit>

}
 80015b6:	bf00      	nop
 80015b8:	3728      	adds	r7, #40	@ 0x28
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000244 	.word	0x20000244

080015c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08c      	sub	sp, #48	@ 0x30
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015ca:	f107 030c 	add.w	r3, r7, #12
 80015ce:	2224      	movs	r2, #36	@ 0x24
 80015d0:	2100      	movs	r1, #0
 80015d2:	4618      	mov	r0, r3
 80015d4:	f006 fb2e 	bl	8007c34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d8:	463b      	mov	r3, r7
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015e2:	4b21      	ldr	r3, [pc, #132]	@ (8001668 <MX_TIM3_Init+0xa4>)
 80015e4:	4a21      	ldr	r2, [pc, #132]	@ (800166c <MX_TIM3_Init+0xa8>)
 80015e6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80015e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001668 <MX_TIM3_Init+0xa4>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001668 <MX_TIM3_Init+0xa4>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3071;
 80015f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001668 <MX_TIM3_Init+0xa4>)
 80015f6:	f640 32ff 	movw	r2, #3071	@ 0xbff
 80015fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001668 <MX_TIM3_Init+0xa4>)
 80015fe:	2200      	movs	r2, #0
 8001600:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001602:	4b19      	ldr	r3, [pc, #100]	@ (8001668 <MX_TIM3_Init+0xa4>)
 8001604:	2200      	movs	r2, #0
 8001606:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001608:	2303      	movs	r3, #3
 800160a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800160c:	2300      	movs	r3, #0
 800160e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001610:	2301      	movs	r3, #1
 8001612:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001614:	2300      	movs	r3, #0
 8001616:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800161c:	2300      	movs	r3, #0
 800161e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001620:	2301      	movs	r3, #1
 8001622:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001624:	2300      	movs	r3, #0
 8001626:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001628:	2300      	movs	r3, #0
 800162a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800162c:	f107 030c 	add.w	r3, r7, #12
 8001630:	4619      	mov	r1, r3
 8001632:	480d      	ldr	r0, [pc, #52]	@ (8001668 <MX_TIM3_Init+0xa4>)
 8001634:	f004 fb32 	bl	8005c9c <HAL_TIM_Encoder_Init>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800163e:	f000 fae1 	bl	8001c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001642:	2300      	movs	r3, #0
 8001644:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001646:	2300      	movs	r3, #0
 8001648:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800164a:	463b      	mov	r3, r7
 800164c:	4619      	mov	r1, r3
 800164e:	4806      	ldr	r0, [pc, #24]	@ (8001668 <MX_TIM3_Init+0xa4>)
 8001650:	f005 fb22 	bl	8006c98 <HAL_TIMEx_MasterConfigSynchronization>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800165a:	f000 fad3 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800165e:	bf00      	nop
 8001660:	3730      	adds	r7, #48	@ 0x30
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000290 	.word	0x20000290
 800166c:	40000400 	.word	0x40000400

08001670 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08e      	sub	sp, #56	@ 0x38
 8001674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001676:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	605a      	str	r2, [r3, #4]
 8001680:	609a      	str	r2, [r3, #8]
 8001682:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001684:	f107 031c 	add.w	r3, r7, #28
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001690:	463b      	mov	r3, r7
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]
 8001698:	609a      	str	r2, [r3, #8]
 800169a:	60da      	str	r2, [r3, #12]
 800169c:	611a      	str	r2, [r3, #16]
 800169e:	615a      	str	r2, [r3, #20]
 80016a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016a2:	4b32      	ldr	r3, [pc, #200]	@ (800176c <MX_TIM4_Init+0xfc>)
 80016a4:	4a32      	ldr	r2, [pc, #200]	@ (8001770 <MX_TIM4_Init+0x100>)
 80016a6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 80016a8:	4b30      	ldr	r3, [pc, #192]	@ (800176c <MX_TIM4_Init+0xfc>)
 80016aa:	22a9      	movs	r2, #169	@ 0xa9
 80016ac:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ae:	4b2f      	ldr	r3, [pc, #188]	@ (800176c <MX_TIM4_Init+0xfc>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 80016b4:	4b2d      	ldr	r3, [pc, #180]	@ (800176c <MX_TIM4_Init+0xfc>)
 80016b6:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80016ba:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016bc:	4b2b      	ldr	r3, [pc, #172]	@ (800176c <MX_TIM4_Init+0xfc>)
 80016be:	2200      	movs	r2, #0
 80016c0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c2:	4b2a      	ldr	r3, [pc, #168]	@ (800176c <MX_TIM4_Init+0xfc>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80016c8:	4828      	ldr	r0, [pc, #160]	@ (800176c <MX_TIM4_Init+0xfc>)
 80016ca:	f004 f8b5 	bl	8005838 <HAL_TIM_Base_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80016d4:	f000 fa96 	bl	8001c04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80016de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016e2:	4619      	mov	r1, r3
 80016e4:	4821      	ldr	r0, [pc, #132]	@ (800176c <MX_TIM4_Init+0xfc>)
 80016e6:	f004 fd21 	bl	800612c <HAL_TIM_ConfigClockSource>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80016f0:	f000 fa88 	bl	8001c04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80016f4:	481d      	ldr	r0, [pc, #116]	@ (800176c <MX_TIM4_Init+0xfc>)
 80016f6:	f004 f967 	bl	80059c8 <HAL_TIM_PWM_Init>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001700:	f000 fa80 	bl	8001c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001704:	2300      	movs	r3, #0
 8001706:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001708:	2300      	movs	r3, #0
 800170a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800170c:	f107 031c 	add.w	r3, r7, #28
 8001710:	4619      	mov	r1, r3
 8001712:	4816      	ldr	r0, [pc, #88]	@ (800176c <MX_TIM4_Init+0xfc>)
 8001714:	f005 fac0 	bl	8006c98 <HAL_TIMEx_MasterConfigSynchronization>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800171e:	f000 fa71 	bl	8001c04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001722:	2360      	movs	r3, #96	@ 0x60
 8001724:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800172a:	2300      	movs	r3, #0
 800172c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800172e:	2300      	movs	r3, #0
 8001730:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001732:	463b      	mov	r3, r7
 8001734:	2200      	movs	r2, #0
 8001736:	4619      	mov	r1, r3
 8001738:	480c      	ldr	r0, [pc, #48]	@ (800176c <MX_TIM4_Init+0xfc>)
 800173a:	f004 fbe3 	bl	8005f04 <HAL_TIM_PWM_ConfigChannel>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001744:	f000 fa5e 	bl	8001c04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001748:	463b      	mov	r3, r7
 800174a:	2204      	movs	r2, #4
 800174c:	4619      	mov	r1, r3
 800174e:	4807      	ldr	r0, [pc, #28]	@ (800176c <MX_TIM4_Init+0xfc>)
 8001750:	f004 fbd8 	bl	8005f04 <HAL_TIM_PWM_ConfigChannel>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 800175a:	f000 fa53 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800175e:	4803      	ldr	r0, [pc, #12]	@ (800176c <MX_TIM4_Init+0xfc>)
 8001760:	f000 fc02 	bl	8001f68 <HAL_TIM_MspPostInit>

}
 8001764:	bf00      	nop
 8001766:	3738      	adds	r7, #56	@ 0x38
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	200002dc 	.word	0x200002dc
 8001770:	40000800 	.word	0x40000800

08001774 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800177a:	4b12      	ldr	r3, [pc, #72]	@ (80017c4 <MX_DMA_Init+0x50>)
 800177c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800177e:	4a11      	ldr	r2, [pc, #68]	@ (80017c4 <MX_DMA_Init+0x50>)
 8001780:	f043 0304 	orr.w	r3, r3, #4
 8001784:	6493      	str	r3, [r2, #72]	@ 0x48
 8001786:	4b0f      	ldr	r3, [pc, #60]	@ (80017c4 <MX_DMA_Init+0x50>)
 8001788:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800178a:	f003 0304 	and.w	r3, r3, #4
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001792:	4b0c      	ldr	r3, [pc, #48]	@ (80017c4 <MX_DMA_Init+0x50>)
 8001794:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001796:	4a0b      	ldr	r2, [pc, #44]	@ (80017c4 <MX_DMA_Init+0x50>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	6493      	str	r3, [r2, #72]	@ 0x48
 800179e:	4b09      	ldr	r3, [pc, #36]	@ (80017c4 <MX_DMA_Init+0x50>)
 80017a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	603b      	str	r3, [r7, #0]
 80017a8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80017aa:	2200      	movs	r2, #0
 80017ac:	2100      	movs	r1, #0
 80017ae:	200b      	movs	r0, #11
 80017b0:	f002 fc57 	bl	8004062 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80017b4:	200b      	movs	r0, #11
 80017b6:	f002 fc6e 	bl	8004096 <HAL_NVIC_EnableIRQ>

}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40021000 	.word	0x40021000

080017c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b08a      	sub	sp, #40	@ 0x28
 80017cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ce:	f107 0314 	add.w	r3, r7, #20
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	605a      	str	r2, [r3, #4]
 80017d8:	609a      	str	r2, [r3, #8]
 80017da:	60da      	str	r2, [r3, #12]
 80017dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017de:	4b2f      	ldr	r3, [pc, #188]	@ (800189c <MX_GPIO_Init+0xd4>)
 80017e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017e2:	4a2e      	ldr	r2, [pc, #184]	@ (800189c <MX_GPIO_Init+0xd4>)
 80017e4:	f043 0304 	orr.w	r3, r3, #4
 80017e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017ea:	4b2c      	ldr	r3, [pc, #176]	@ (800189c <MX_GPIO_Init+0xd4>)
 80017ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ee:	f003 0304 	and.w	r3, r3, #4
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017f6:	4b29      	ldr	r3, [pc, #164]	@ (800189c <MX_GPIO_Init+0xd4>)
 80017f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017fa:	4a28      	ldr	r2, [pc, #160]	@ (800189c <MX_GPIO_Init+0xd4>)
 80017fc:	f043 0320 	orr.w	r3, r3, #32
 8001800:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001802:	4b26      	ldr	r3, [pc, #152]	@ (800189c <MX_GPIO_Init+0xd4>)
 8001804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001806:	f003 0320 	and.w	r3, r3, #32
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800180e:	4b23      	ldr	r3, [pc, #140]	@ (800189c <MX_GPIO_Init+0xd4>)
 8001810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001812:	4a22      	ldr	r2, [pc, #136]	@ (800189c <MX_GPIO_Init+0xd4>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800181a:	4b20      	ldr	r3, [pc, #128]	@ (800189c <MX_GPIO_Init+0xd4>)
 800181c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	60bb      	str	r3, [r7, #8]
 8001824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001826:	4b1d      	ldr	r3, [pc, #116]	@ (800189c <MX_GPIO_Init+0xd4>)
 8001828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800182a:	4a1c      	ldr	r2, [pc, #112]	@ (800189c <MX_GPIO_Init+0xd4>)
 800182c:	f043 0302 	orr.w	r3, r3, #2
 8001830:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001832:	4b1a      	ldr	r3, [pc, #104]	@ (800189c <MX_GPIO_Init+0xd4>)
 8001834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	607b      	str	r3, [r7, #4]
 800183c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800183e:	2200      	movs	r2, #0
 8001840:	2120      	movs	r1, #32
 8001842:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001846:	f002 ff7d 	bl	8004744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800184a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800184e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001850:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001854:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	2300      	movs	r3, #0
 8001858:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800185a:	f107 0314 	add.w	r3, r7, #20
 800185e:	4619      	mov	r1, r3
 8001860:	480f      	ldr	r0, [pc, #60]	@ (80018a0 <MX_GPIO_Init+0xd8>)
 8001862:	f002 fded 	bl	8004440 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001866:	2320      	movs	r3, #32
 8001868:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186a:	2301      	movs	r3, #1
 800186c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001872:	2300      	movs	r3, #0
 8001874:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001876:	f107 0314 	add.w	r3, r7, #20
 800187a:	4619      	mov	r1, r3
 800187c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001880:	f002 fdde 	bl	8004440 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001884:	2200      	movs	r2, #0
 8001886:	2100      	movs	r1, #0
 8001888:	2028      	movs	r0, #40	@ 0x28
 800188a:	f002 fbea 	bl	8004062 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800188e:	2028      	movs	r0, #40	@ 0x28
 8001890:	f002 fc01 	bl	8004096 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001894:	bf00      	nop
 8001896:	3728      	adds	r7, #40	@ 0x28
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40021000 	.word	0x40021000
 80018a0:	48000800 	.word	0x48000800
 80018a4:	00000000 	.word	0x00000000

080018a8 <NO1>:

/* USER CODE BEGIN 4 */
void NO1()
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
	//LD2
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,GPIO_PIN_SET);
 80018ac:	2201      	movs	r2, #1
 80018ae:	2120      	movs	r1, #32
 80018b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018b4:	f002 ff46 	bl	8004744 <HAL_GPIO_WritePin>
	ADC1_Channel[0].data = 0;
 80018b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001970 <NO1+0xc8>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	841a      	strh	r2, [r3, #32]

	//ADC Position[1], Setposition[2]
	static uint32_t TimeStamp = 0;
	if( HAL_GetTick()<TimeStamp) return;
 80018be:	f000 fcb7 	bl	8002230 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001974 <NO1+0xcc>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d347      	bcc.n	800195c <NO1+0xb4>
	TimeStamp = HAL_GetTick()+500;
 80018cc:	f000 fcb0 	bl	8002230 <HAL_GetTick>
 80018d0:	4603      	mov	r3, r0
 80018d2:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80018d6:	4a27      	ldr	r2, [pc, #156]	@ (8001974 <NO1+0xcc>)
 80018d8:	6013      	str	r3, [r2, #0]
	HAL_ADC_ConfigChannel(&hadc1, &ADC1_Channel[1].Config);
 80018da:	4927      	ldr	r1, [pc, #156]	@ (8001978 <NO1+0xd0>)
 80018dc:	4827      	ldr	r0, [pc, #156]	@ (800197c <NO1+0xd4>)
 80018de:	f001 fb37 	bl	8002f50 <HAL_ADC_ConfigChannel>
	HAL_ADC_ConfigChannel(&hadc1, &ADC1_Channel[2].Config);
 80018e2:	4927      	ldr	r1, [pc, #156]	@ (8001980 <NO1+0xd8>)
 80018e4:	4825      	ldr	r0, [pc, #148]	@ (800197c <NO1+0xd4>)
 80018e6:	f001 fb33 	bl	8002f50 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 80018ea:	4824      	ldr	r0, [pc, #144]	@ (800197c <NO1+0xd4>)
 80018ec:	f001 f904 	bl	8002af8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 500);
 80018f0:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80018f4:	4821      	ldr	r0, [pc, #132]	@ (800197c <NO1+0xd4>)
 80018f6:	f001 fa17 	bl	8002d28 <HAL_ADC_PollForConversion>
	ADC1_Channel[1].data = HAL_ADC_GetValue(&hadc1);
 80018fa:	4820      	ldr	r0, [pc, #128]	@ (800197c <NO1+0xd4>)
 80018fc:	f001 fb1a 	bl	8002f34 <HAL_ADC_GetValue>
 8001900:	4603      	mov	r3, r0
 8001902:	b29a      	uxth	r2, r3
 8001904:	4b1a      	ldr	r3, [pc, #104]	@ (8001970 <NO1+0xc8>)
 8001906:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
	ADC1_Channel[2].data = HAL_ADC_GetValue(&hadc1);
 800190a:	481c      	ldr	r0, [pc, #112]	@ (800197c <NO1+0xd4>)
 800190c:	f001 fb12 	bl	8002f34 <HAL_ADC_GetValue>
 8001910:	4603      	mov	r3, r0
 8001912:	b29a      	uxth	r2, r3
 8001914:	4b16      	ldr	r3, [pc, #88]	@ (8001970 <NO1+0xc8>)
 8001916:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
	HAL_ADC_Stop(&hadc1);
 800191a:	4818      	ldr	r0, [pc, #96]	@ (800197c <NO1+0xd4>)
 800191c:	f001 f9d0 	bl	8002cc0 <HAL_ADC_Stop>
	Radiant2 = (ADC1_Channel[1].data*6.28)/4095.0;
 8001920:	4b13      	ldr	r3, [pc, #76]	@ (8001970 <NO1+0xc8>)
 8001922:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001926:	4618      	mov	r0, r3
 8001928:	f7fe fdc8 	bl	80004bc <__aeabi_i2d>
 800192c:	a30c      	add	r3, pc, #48	@ (adr r3, 8001960 <NO1+0xb8>)
 800192e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001932:	f7fe fe2d 	bl	8000590 <__aeabi_dmul>
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	4610      	mov	r0, r2
 800193c:	4619      	mov	r1, r3
 800193e:	a30a      	add	r3, pc, #40	@ (adr r3, 8001968 <NO1+0xc0>)
 8001940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001944:	f7fe ff4e 	bl	80007e4 <__aeabi_ddiv>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	4610      	mov	r0, r2
 800194e:	4619      	mov	r1, r3
 8001950:	f7ff f830 	bl	80009b4 <__aeabi_d2f>
 8001954:	4603      	mov	r3, r0
 8001956:	4a0b      	ldr	r2, [pc, #44]	@ (8001984 <NO1+0xdc>)
 8001958:	6013      	str	r3, [r2, #0]
 800195a:	e000      	b.n	800195e <NO1+0xb6>
	if( HAL_GetTick()<TimeStamp) return;
 800195c:	bf00      	nop

}
 800195e:	bd80      	pop	{r7, pc}
 8001960:	51eb851f 	.word	0x51eb851f
 8001964:	40191eb8 	.word	0x40191eb8
 8001968:	00000000 	.word	0x00000000
 800196c:	40affe00 	.word	0x40affe00
 8001970:	20000004 	.word	0x20000004
 8001974:	20000388 	.word	0x20000388
 8001978:	20000028 	.word	0x20000028
 800197c:	20000098 	.word	0x20000098
 8001980:	2000004c 	.word	0x2000004c
 8001984:	20000330 	.word	0x20000330

08001988 <NO2>:

void NO2()
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
	// LD2
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,GPIO_PIN_RESET);
 800198c:	2200      	movs	r2, #0
 800198e:	2120      	movs	r1, #32
 8001990:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001994:	f002 fed6 	bl	8004744 <HAL_GPIO_WritePin>
	ADC1_Channel[1].data = 0;
 8001998:	4b3b      	ldr	r3, [pc, #236]	@ (8001a88 <NO2+0x100>)
 800199a:	2200      	movs	r2, #0
 800199c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
	ADC1_Channel[2].data = 0;
 80019a0:	4b39      	ldr	r3, [pc, #228]	@ (8001a88 <NO2+0x100>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

	// QEI
	QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim3);
 80019a8:	4b38      	ldr	r3, [pc, #224]	@ (8001a8c <NO2+0x104>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ae:	4a38      	ldr	r2, [pc, #224]	@ (8001a90 <NO2+0x108>)
 80019b0:	6013      	str	r3, [r2, #0]
	Radiant = (QEIReadRaw*6.28)/3071.0;
 80019b2:	4b37      	ldr	r3, [pc, #220]	@ (8001a90 <NO2+0x108>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7fe fd70 	bl	800049c <__aeabi_ui2d>
 80019bc:	a32c      	add	r3, pc, #176	@ (adr r3, 8001a70 <NO2+0xe8>)
 80019be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c2:	f7fe fde5 	bl	8000590 <__aeabi_dmul>
 80019c6:	4602      	mov	r2, r0
 80019c8:	460b      	mov	r3, r1
 80019ca:	4610      	mov	r0, r2
 80019cc:	4619      	mov	r1, r3
 80019ce:	a32a      	add	r3, pc, #168	@ (adr r3, 8001a78 <NO2+0xf0>)
 80019d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d4:	f7fe ff06 	bl	80007e4 <__aeabi_ddiv>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	4610      	mov	r0, r2
 80019de:	4619      	mov	r1, r3
 80019e0:	f7fe ffe8 	bl	80009b4 <__aeabi_d2f>
 80019e4:	4603      	mov	r3, r0
 80019e6:	4a2b      	ldr	r2, [pc, #172]	@ (8001a94 <NO2+0x10c>)
 80019e8:	6013      	str	r3, [r2, #0]

	// ADC
	static uint32_t TimeStamp = 0;
	if( HAL_GetTick()<TimeStamp) return;
 80019ea:	f000 fc21 	bl	8002230 <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	4b29      	ldr	r3, [pc, #164]	@ (8001a98 <NO2+0x110>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d339      	bcc.n	8001a6c <NO2+0xe4>
	TimeStamp = HAL_GetTick()+500;
 80019f8:	f000 fc1a 	bl	8002230 <HAL_GetTick>
 80019fc:	4603      	mov	r3, r0
 80019fe:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001a02:	4a25      	ldr	r2, [pc, #148]	@ (8001a98 <NO2+0x110>)
 8001a04:	6013      	str	r3, [r2, #0]
	HAL_ADC_ConfigChannel(&hadc1, &ADC1_Channel[0].Config);
 8001a06:	4920      	ldr	r1, [pc, #128]	@ (8001a88 <NO2+0x100>)
 8001a08:	4824      	ldr	r0, [pc, #144]	@ (8001a9c <NO2+0x114>)
 8001a0a:	f001 faa1 	bl	8002f50 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 8001a0e:	4823      	ldr	r0, [pc, #140]	@ (8001a9c <NO2+0x114>)
 8001a10:	f001 f872 	bl	8002af8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 500);
 8001a14:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001a18:	4820      	ldr	r0, [pc, #128]	@ (8001a9c <NO2+0x114>)
 8001a1a:	f001 f985 	bl	8002d28 <HAL_ADC_PollForConversion>
	ADC1_Channel[0].data = HAL_ADC_GetValue(&hadc1);
 8001a1e:	481f      	ldr	r0, [pc, #124]	@ (8001a9c <NO2+0x114>)
 8001a20:	f001 fa88 	bl	8002f34 <HAL_ADC_GetValue>
 8001a24:	4603      	mov	r3, r0
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	4b17      	ldr	r3, [pc, #92]	@ (8001a88 <NO2+0x100>)
 8001a2a:	841a      	strh	r2, [r3, #32]
	HAL_ADC_Stop(&hadc1);
 8001a2c:	481b      	ldr	r0, [pc, #108]	@ (8001a9c <NO2+0x114>)
 8001a2e:	f001 f947 	bl	8002cc0 <HAL_ADC_Stop>

	// Scale 4095 to 3071
	Gain = (ADC1_Channel[0].data*3071.0)/4095.0;
 8001a32:	4b15      	ldr	r3, [pc, #84]	@ (8001a88 <NO2+0x100>)
 8001a34:	8c1b      	ldrh	r3, [r3, #32]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7fe fd40 	bl	80004bc <__aeabi_i2d>
 8001a3c:	a30e      	add	r3, pc, #56	@ (adr r3, 8001a78 <NO2+0xf0>)
 8001a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a42:	f7fe fda5 	bl	8000590 <__aeabi_dmul>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	4610      	mov	r0, r2
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	a30c      	add	r3, pc, #48	@ (adr r3, 8001a80 <NO2+0xf8>)
 8001a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a54:	f7fe fec6 	bl	80007e4 <__aeabi_ddiv>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4610      	mov	r0, r2
 8001a5e:	4619      	mov	r1, r3
 8001a60:	f7fe ffa8 	bl	80009b4 <__aeabi_d2f>
 8001a64:	4603      	mov	r3, r0
 8001a66:	4a0e      	ldr	r2, [pc, #56]	@ (8001aa0 <NO2+0x118>)
 8001a68:	6013      	str	r3, [r2, #0]
 8001a6a:	e000      	b.n	8001a6e <NO2+0xe6>
	if( HAL_GetTick()<TimeStamp) return;
 8001a6c:	bf00      	nop
}
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	51eb851f 	.word	0x51eb851f
 8001a74:	40191eb8 	.word	0x40191eb8
 8001a78:	00000000 	.word	0x00000000
 8001a7c:	40a7fe00 	.word	0x40a7fe00
 8001a80:	00000000 	.word	0x00000000
 8001a84:	40affe00 	.word	0x40affe00
 8001a88:	20000004 	.word	0x20000004
 8001a8c:	20000290 	.word	0x20000290
 8001a90:	20000328 	.word	0x20000328
 8001a94:	2000032c 	.word	0x2000032c
 8001a98:	2000038c 	.word	0x2000038c
 8001a9c:	20000098 	.word	0x20000098
 8001aa0:	20000370 	.word	0x20000370
 8001aa4:	00000000 	.word	0x00000000

08001aa8 <PlantSimulation>:
float PlantSimulation(float VIn) // run with fix frequency
{
 8001aa8:	b5b0      	push	{r4, r5, r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	ed87 0a01 	vstr	s0, [r7, #4]
	static float speed =0;
	static float position =0;
	float current= VIn - speed * 0.0123;
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7fe fd14 	bl	80004e0 <__aeabi_f2d>
 8001ab8:	4604      	mov	r4, r0
 8001aba:	460d      	mov	r5, r1
 8001abc:	4b30      	ldr	r3, [pc, #192]	@ (8001b80 <PlantSimulation+0xd8>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe fd0d 	bl	80004e0 <__aeabi_f2d>
 8001ac6:	a328      	add	r3, pc, #160	@ (adr r3, 8001b68 <PlantSimulation+0xc0>)
 8001ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001acc:	f7fe fd60 	bl	8000590 <__aeabi_dmul>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4620      	mov	r0, r4
 8001ad6:	4629      	mov	r1, r5
 8001ad8:	f7fe fba2 	bl	8000220 <__aeabi_dsub>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	f7fe ff66 	bl	80009b4 <__aeabi_d2f>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	617b      	str	r3, [r7, #20]
	float torque = current * 0.456;
 8001aec:	6978      	ldr	r0, [r7, #20]
 8001aee:	f7fe fcf7 	bl	80004e0 <__aeabi_f2d>
 8001af2:	a31f      	add	r3, pc, #124	@ (adr r3, 8001b70 <PlantSimulation+0xc8>)
 8001af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af8:	f7fe fd4a 	bl	8000590 <__aeabi_dmul>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	4610      	mov	r0, r2
 8001b02:	4619      	mov	r1, r3
 8001b04:	f7fe ff56 	bl	80009b4 <__aeabi_d2f>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	613b      	str	r3, [r7, #16]
	float acc = torque * 0.789;
 8001b0c:	6938      	ldr	r0, [r7, #16]
 8001b0e:	f7fe fce7 	bl	80004e0 <__aeabi_f2d>
 8001b12:	a319      	add	r3, pc, #100	@ (adr r3, 8001b78 <PlantSimulation+0xd0>)
 8001b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b18:	f7fe fd3a 	bl	8000590 <__aeabi_dmul>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	4610      	mov	r0, r2
 8001b22:	4619      	mov	r1, r3
 8001b24:	f7fe ff46 	bl	80009b4 <__aeabi_d2f>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	60fb      	str	r3, [r7, #12]
	speed += acc;
 8001b2c:	4b14      	ldr	r3, [pc, #80]	@ (8001b80 <PlantSimulation+0xd8>)
 8001b2e:	ed93 7a00 	vldr	s14, [r3]
 8001b32:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b3a:	4b11      	ldr	r3, [pc, #68]	@ (8001b80 <PlantSimulation+0xd8>)
 8001b3c:	edc3 7a00 	vstr	s15, [r3]
	position += speed;
 8001b40:	4b10      	ldr	r3, [pc, #64]	@ (8001b84 <PlantSimulation+0xdc>)
 8001b42:	ed93 7a00 	vldr	s14, [r3]
 8001b46:	4b0e      	ldr	r3, [pc, #56]	@ (8001b80 <PlantSimulation+0xd8>)
 8001b48:	edd3 7a00 	vldr	s15, [r3]
 8001b4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b50:	4b0c      	ldr	r3, [pc, #48]	@ (8001b84 <PlantSimulation+0xdc>)
 8001b52:	edc3 7a00 	vstr	s15, [r3]
	return position;
 8001b56:	4b0b      	ldr	r3, [pc, #44]	@ (8001b84 <PlantSimulation+0xdc>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	ee07 3a90 	vmov	s15, r3
}
 8001b5e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b62:	3718      	adds	r7, #24
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bdb0      	pop	{r4, r5, r7, pc}
 8001b68:	0ded288d 	.word	0x0ded288d
 8001b6c:	3f8930be 	.word	0x3f8930be
 8001b70:	9fbe76c9 	.word	0x9fbe76c9
 8001b74:	3fdd2f1a 	.word	0x3fdd2f1a
 8001b78:	ed916873 	.word	0xed916873
 8001b7c:	3fe93f7c 	.word	0x3fe93f7c
 8001b80:	20000390 	.word	0x20000390
 8001b84:	20000394 	.word	0x20000394

08001b88 <NO3>:

void NO3()
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
	//LD2
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001b8c:	2120      	movs	r1, #32
 8001b8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b92:	f002 fdef 	bl	8004774 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8001b96:	2064      	movs	r0, #100	@ 0x64
 8001b98:	f000 fb56 	bl	8002248 <HAL_Delay>
	ADC1_Channel[0].data = 0;
 8001b9c:	4b06      	ldr	r3, [pc, #24]	@ (8001bb8 <NO3+0x30>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	841a      	strh	r2, [r3, #32]
	ADC1_Channel[1].data = 0;
 8001ba2:	4b05      	ldr	r3, [pc, #20]	@ (8001bb8 <NO3+0x30>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
	ADC1_Channel[2].data = 0;
 8001baa:	4b03      	ldr	r3, [pc, #12]	@ (8001bb8 <NO3+0x30>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000004 	.word	0x20000004

08001bbc <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13)
 8001bc6:	88fb      	ldrh	r3, [r7, #6]
 8001bc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001bcc:	d112      	bne.n	8001bf4 <HAL_GPIO_EXTI_Callback+0x38>
	{
		if (check == 1)
 8001bce:	4b0c      	ldr	r3, [pc, #48]	@ (8001c00 <HAL_GPIO_EXTI_Callback+0x44>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d103      	bne.n	8001bde <HAL_GPIO_EXTI_Callback+0x22>
		{
			check = 2;
 8001bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8001c00 <HAL_GPIO_EXTI_Callback+0x44>)
 8001bd8:	2202      	movs	r2, #2
 8001bda:	601a      	str	r2, [r3, #0]
		else
		{
			check = 1;
		}
	}
}
 8001bdc:	e00a      	b.n	8001bf4 <HAL_GPIO_EXTI_Callback+0x38>
		else if (check == 2)
 8001bde:	4b08      	ldr	r3, [pc, #32]	@ (8001c00 <HAL_GPIO_EXTI_Callback+0x44>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d103      	bne.n	8001bee <HAL_GPIO_EXTI_Callback+0x32>
			check= 3;
 8001be6:	4b06      	ldr	r3, [pc, #24]	@ (8001c00 <HAL_GPIO_EXTI_Callback+0x44>)
 8001be8:	2203      	movs	r2, #3
 8001bea:	601a      	str	r2, [r3, #0]
}
 8001bec:	e002      	b.n	8001bf4 <HAL_GPIO_EXTI_Callback+0x38>
			check = 1;
 8001bee:	4b04      	ldr	r3, [pc, #16]	@ (8001c00 <HAL_GPIO_EXTI_Callback+0x44>)
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	20000000 	.word	0x20000000

08001c04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c08:	b672      	cpsid	i
}
 8001c0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c0c:	bf00      	nop
 8001c0e:	e7fd      	b.n	8001c0c <Error_Handler+0x8>

08001c10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c16:	4b0f      	ldr	r3, [pc, #60]	@ (8001c54 <HAL_MspInit+0x44>)
 8001c18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c1a:	4a0e      	ldr	r2, [pc, #56]	@ (8001c54 <HAL_MspInit+0x44>)
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c22:	4b0c      	ldr	r3, [pc, #48]	@ (8001c54 <HAL_MspInit+0x44>)
 8001c24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	607b      	str	r3, [r7, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c2e:	4b09      	ldr	r3, [pc, #36]	@ (8001c54 <HAL_MspInit+0x44>)
 8001c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c32:	4a08      	ldr	r2, [pc, #32]	@ (8001c54 <HAL_MspInit+0x44>)
 8001c34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c38:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c3a:	4b06      	ldr	r3, [pc, #24]	@ (8001c54 <HAL_MspInit+0x44>)
 8001c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c42:	603b      	str	r3, [r7, #0]
 8001c44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001c46:	f002 fe6b 	bl	8004920 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40021000 	.word	0x40021000

08001c58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b0a0      	sub	sp, #128	@ 0x80
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c60:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
 8001c6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c70:	f107 0318 	add.w	r3, r7, #24
 8001c74:	2254      	movs	r2, #84	@ 0x54
 8001c76:	2100      	movs	r1, #0
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f005 ffdb 	bl	8007c34 <memset>
  if(hadc->Instance==ADC1)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c86:	d177      	bne.n	8001d78 <HAL_ADC_MspInit+0x120>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001c88:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c8c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001c8e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001c92:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c94:	f107 0318 	add.w	r3, r7, #24
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f003 fb7f 	bl	800539c <HAL_RCCEx_PeriphCLKConfig>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001ca4:	f7ff ffae 	bl	8001c04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001ca8:	4b35      	ldr	r3, [pc, #212]	@ (8001d80 <HAL_ADC_MspInit+0x128>)
 8001caa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cac:	4a34      	ldr	r2, [pc, #208]	@ (8001d80 <HAL_ADC_MspInit+0x128>)
 8001cae:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001cb2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cb4:	4b32      	ldr	r3, [pc, #200]	@ (8001d80 <HAL_ADC_MspInit+0x128>)
 8001cb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cbc:	617b      	str	r3, [r7, #20]
 8001cbe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc0:	4b2f      	ldr	r3, [pc, #188]	@ (8001d80 <HAL_ADC_MspInit+0x128>)
 8001cc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cc4:	4a2e      	ldr	r2, [pc, #184]	@ (8001d80 <HAL_ADC_MspInit+0x128>)
 8001cc6:	f043 0301 	orr.w	r3, r3, #1
 8001cca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ccc:	4b2c      	ldr	r3, [pc, #176]	@ (8001d80 <HAL_ADC_MspInit+0x128>)
 8001cce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	613b      	str	r3, [r7, #16]
 8001cd6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd8:	4b29      	ldr	r3, [pc, #164]	@ (8001d80 <HAL_ADC_MspInit+0x128>)
 8001cda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cdc:	4a28      	ldr	r2, [pc, #160]	@ (8001d80 <HAL_ADC_MspInit+0x128>)
 8001cde:	f043 0302 	orr.w	r3, r3, #2
 8001ce2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ce4:	4b26      	ldr	r3, [pc, #152]	@ (8001d80 <HAL_ADC_MspInit+0x128>)
 8001ce6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001d00:	4619      	mov	r1, r3
 8001d02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d06:	f002 fb9b 	bl	8004440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d16:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4819      	ldr	r0, [pc, #100]	@ (8001d84 <HAL_ADC_MspInit+0x12c>)
 8001d1e:	f002 fb8f 	bl	8004440 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001d22:	4b19      	ldr	r3, [pc, #100]	@ (8001d88 <HAL_ADC_MspInit+0x130>)
 8001d24:	4a19      	ldr	r2, [pc, #100]	@ (8001d8c <HAL_ADC_MspInit+0x134>)
 8001d26:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001d28:	4b17      	ldr	r3, [pc, #92]	@ (8001d88 <HAL_ADC_MspInit+0x130>)
 8001d2a:	2205      	movs	r2, #5
 8001d2c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d2e:	4b16      	ldr	r3, [pc, #88]	@ (8001d88 <HAL_ADC_MspInit+0x130>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d34:	4b14      	ldr	r3, [pc, #80]	@ (8001d88 <HAL_ADC_MspInit+0x130>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001d3a:	4b13      	ldr	r3, [pc, #76]	@ (8001d88 <HAL_ADC_MspInit+0x130>)
 8001d3c:	2280      	movs	r2, #128	@ 0x80
 8001d3e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d40:	4b11      	ldr	r3, [pc, #68]	@ (8001d88 <HAL_ADC_MspInit+0x130>)
 8001d42:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d46:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d48:	4b0f      	ldr	r3, [pc, #60]	@ (8001d88 <HAL_ADC_MspInit+0x130>)
 8001d4a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d4e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001d50:	4b0d      	ldr	r3, [pc, #52]	@ (8001d88 <HAL_ADC_MspInit+0x130>)
 8001d52:	2220      	movs	r2, #32
 8001d54:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001d56:	4b0c      	ldr	r3, [pc, #48]	@ (8001d88 <HAL_ADC_MspInit+0x130>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d5c:	480a      	ldr	r0, [pc, #40]	@ (8001d88 <HAL_ADC_MspInit+0x130>)
 8001d5e:	f002 f9b5 	bl	80040cc <HAL_DMA_Init>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 8001d68:	f7ff ff4c 	bl	8001c04 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4a06      	ldr	r2, [pc, #24]	@ (8001d88 <HAL_ADC_MspInit+0x130>)
 8001d70:	655a      	str	r2, [r3, #84]	@ 0x54
 8001d72:	4a05      	ldr	r2, [pc, #20]	@ (8001d88 <HAL_ADC_MspInit+0x130>)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d78:	bf00      	nop
 8001d7a:	3780      	adds	r7, #128	@ 0x80
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40021000 	.word	0x40021000
 8001d84:	48000400 	.word	0x48000400
 8001d88:	20000104 	.word	0x20000104
 8001d8c:	40020008 	.word	0x40020008

08001d90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b09e      	sub	sp, #120	@ 0x78
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d98:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001da8:	f107 0310 	add.w	r3, r7, #16
 8001dac:	2254      	movs	r2, #84	@ 0x54
 8001dae:	2100      	movs	r1, #0
 8001db0:	4618      	mov	r0, r3
 8001db2:	f005 ff3f 	bl	8007c34 <memset>
  if(huart->Instance==LPUART1)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a1f      	ldr	r2, [pc, #124]	@ (8001e38 <HAL_UART_MspInit+0xa8>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d136      	bne.n	8001e2e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001dc0:	2320      	movs	r3, #32
 8001dc2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dc8:	f107 0310 	add.w	r3, r7, #16
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f003 fae5 	bl	800539c <HAL_RCCEx_PeriphCLKConfig>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001dd8:	f7ff ff14 	bl	8001c04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001ddc:	4b17      	ldr	r3, [pc, #92]	@ (8001e3c <HAL_UART_MspInit+0xac>)
 8001dde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001de0:	4a16      	ldr	r2, [pc, #88]	@ (8001e3c <HAL_UART_MspInit+0xac>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001de8:	4b14      	ldr	r3, [pc, #80]	@ (8001e3c <HAL_UART_MspInit+0xac>)
 8001dea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df4:	4b11      	ldr	r3, [pc, #68]	@ (8001e3c <HAL_UART_MspInit+0xac>)
 8001df6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001df8:	4a10      	ldr	r2, [pc, #64]	@ (8001e3c <HAL_UART_MspInit+0xac>)
 8001dfa:	f043 0301 	orr.w	r3, r3, #1
 8001dfe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e00:	4b0e      	ldr	r3, [pc, #56]	@ (8001e3c <HAL_UART_MspInit+0xac>)
 8001e02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	60bb      	str	r3, [r7, #8]
 8001e0a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001e0c:	230c      	movs	r3, #12
 8001e0e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e10:	2302      	movs	r3, #2
 8001e12:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001e1c:	230c      	movs	r3, #12
 8001e1e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e20:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001e24:	4619      	mov	r1, r3
 8001e26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e2a:	f002 fb09 	bl	8004440 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001e2e:	bf00      	nop
 8001e30:	3778      	adds	r7, #120	@ 0x78
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40008000 	.word	0x40008000
 8001e3c:	40021000 	.word	0x40021000

08001e40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a13      	ldr	r2, [pc, #76]	@ (8001e9c <HAL_TIM_Base_MspInit+0x5c>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d10c      	bne.n	8001e6c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e52:	4b13      	ldr	r3, [pc, #76]	@ (8001ea0 <HAL_TIM_Base_MspInit+0x60>)
 8001e54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e56:	4a12      	ldr	r2, [pc, #72]	@ (8001ea0 <HAL_TIM_Base_MspInit+0x60>)
 8001e58:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e5c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e5e:	4b10      	ldr	r3, [pc, #64]	@ (8001ea0 <HAL_TIM_Base_MspInit+0x60>)
 8001e60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001e6a:	e010      	b.n	8001e8e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a0c      	ldr	r2, [pc, #48]	@ (8001ea4 <HAL_TIM_Base_MspInit+0x64>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d10b      	bne.n	8001e8e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e76:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea0 <HAL_TIM_Base_MspInit+0x60>)
 8001e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e7a:	4a09      	ldr	r2, [pc, #36]	@ (8001ea0 <HAL_TIM_Base_MspInit+0x60>)
 8001e7c:	f043 0304 	orr.w	r3, r3, #4
 8001e80:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e82:	4b07      	ldr	r3, [pc, #28]	@ (8001ea0 <HAL_TIM_Base_MspInit+0x60>)
 8001e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e86:	f003 0304 	and.w	r3, r3, #4
 8001e8a:	60bb      	str	r3, [r7, #8]
 8001e8c:	68bb      	ldr	r3, [r7, #8]
}
 8001e8e:	bf00      	nop
 8001e90:	3714      	adds	r7, #20
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	40012c00 	.word	0x40012c00
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	40000800 	.word	0x40000800

08001ea8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001eb8:	d10b      	bne.n	8001ed2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001eba:	4b09      	ldr	r3, [pc, #36]	@ (8001ee0 <HAL_TIM_PWM_MspInit+0x38>)
 8001ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ebe:	4a08      	ldr	r2, [pc, #32]	@ (8001ee0 <HAL_TIM_PWM_MspInit+0x38>)
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ec6:	4b06      	ldr	r3, [pc, #24]	@ (8001ee0 <HAL_TIM_PWM_MspInit+0x38>)
 8001ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ed2:	bf00      	nop
 8001ed4:	3714      	adds	r7, #20
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	40021000 	.word	0x40021000

08001ee4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08a      	sub	sp, #40	@ 0x28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 0314 	add.w	r3, r7, #20
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a17      	ldr	r2, [pc, #92]	@ (8001f60 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d128      	bne.n	8001f58 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f06:	4b17      	ldr	r3, [pc, #92]	@ (8001f64 <HAL_TIM_Encoder_MspInit+0x80>)
 8001f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f0a:	4a16      	ldr	r2, [pc, #88]	@ (8001f64 <HAL_TIM_Encoder_MspInit+0x80>)
 8001f0c:	f043 0302 	orr.w	r3, r3, #2
 8001f10:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f12:	4b14      	ldr	r3, [pc, #80]	@ (8001f64 <HAL_TIM_Encoder_MspInit+0x80>)
 8001f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	613b      	str	r3, [r7, #16]
 8001f1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f1e:	4b11      	ldr	r3, [pc, #68]	@ (8001f64 <HAL_TIM_Encoder_MspInit+0x80>)
 8001f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f22:	4a10      	ldr	r2, [pc, #64]	@ (8001f64 <HAL_TIM_Encoder_MspInit+0x80>)
 8001f24:	f043 0301 	orr.w	r3, r3, #1
 8001f28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f64 <HAL_TIM_Encoder_MspInit+0x80>)
 8001f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f36:	23c0      	movs	r3, #192	@ 0xc0
 8001f38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f42:	2300      	movs	r3, #0
 8001f44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f46:	2302      	movs	r3, #2
 8001f48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4a:	f107 0314 	add.w	r3, r7, #20
 8001f4e:	4619      	mov	r1, r3
 8001f50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f54:	f002 fa74 	bl	8004440 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f58:	bf00      	nop
 8001f5a:	3728      	adds	r7, #40	@ 0x28
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40000400 	.word	0x40000400
 8001f64:	40021000 	.word	0x40021000

08001f68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b08a      	sub	sp, #40	@ 0x28
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f70:	f107 0314 	add.w	r3, r7, #20
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	60da      	str	r2, [r3, #12]
 8001f7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a35      	ldr	r2, [pc, #212]	@ (800205c <HAL_TIM_MspPostInit+0xf4>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d11c      	bne.n	8001fc4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f8a:	4b35      	ldr	r3, [pc, #212]	@ (8002060 <HAL_TIM_MspPostInit+0xf8>)
 8001f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f8e:	4a34      	ldr	r2, [pc, #208]	@ (8002060 <HAL_TIM_MspPostInit+0xf8>)
 8001f90:	f043 0304 	orr.w	r3, r3, #4
 8001f94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f96:	4b32      	ldr	r3, [pc, #200]	@ (8002060 <HAL_TIM_MspPostInit+0xf8>)
 8001f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f9a:	f003 0304 	and.w	r3, r3, #4
 8001f9e:	613b      	str	r3, [r7, #16]
 8001fa0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fb6:	f107 0314 	add.w	r3, r7, #20
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4829      	ldr	r0, [pc, #164]	@ (8002064 <HAL_TIM_MspPostInit+0xfc>)
 8001fbe:	f002 fa3f 	bl	8004440 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001fc2:	e046      	b.n	8002052 <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM2)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fcc:	d11e      	bne.n	800200c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fce:	4b24      	ldr	r3, [pc, #144]	@ (8002060 <HAL_TIM_MspPostInit+0xf8>)
 8001fd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fd2:	4a23      	ldr	r2, [pc, #140]	@ (8002060 <HAL_TIM_MspPostInit+0xf8>)
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fda:	4b21      	ldr	r3, [pc, #132]	@ (8002060 <HAL_TIM_MspPostInit+0xf8>)
 8001fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001fe6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001fea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fec:	2302      	movs	r3, #2
 8001fee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ffc:	f107 0314 	add.w	r3, r7, #20
 8002000:	4619      	mov	r1, r3
 8002002:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002006:	f002 fa1b 	bl	8004440 <HAL_GPIO_Init>
}
 800200a:	e022      	b.n	8002052 <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM4)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a15      	ldr	r2, [pc, #84]	@ (8002068 <HAL_TIM_MspPostInit+0x100>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d11d      	bne.n	8002052 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002016:	4b12      	ldr	r3, [pc, #72]	@ (8002060 <HAL_TIM_MspPostInit+0xf8>)
 8002018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800201a:	4a11      	ldr	r2, [pc, #68]	@ (8002060 <HAL_TIM_MspPostInit+0xf8>)
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002022:	4b0f      	ldr	r3, [pc, #60]	@ (8002060 <HAL_TIM_MspPostInit+0xf8>)
 8002024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	60bb      	str	r3, [r7, #8]
 800202c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800202e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002032:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002034:	2302      	movs	r3, #2
 8002036:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002038:	2300      	movs	r3, #0
 800203a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203c:	2300      	movs	r3, #0
 800203e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002040:	230a      	movs	r3, #10
 8002042:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002044:	f107 0314 	add.w	r3, r7, #20
 8002048:	4619      	mov	r1, r3
 800204a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800204e:	f002 f9f7 	bl	8004440 <HAL_GPIO_Init>
}
 8002052:	bf00      	nop
 8002054:	3728      	adds	r7, #40	@ 0x28
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40012c00 	.word	0x40012c00
 8002060:	40021000 	.word	0x40021000
 8002064:	48000800 	.word	0x48000800
 8002068:	40000800 	.word	0x40000800

0800206c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002070:	bf00      	nop
 8002072:	e7fd      	b.n	8002070 <NMI_Handler+0x4>

08002074 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002078:	bf00      	nop
 800207a:	e7fd      	b.n	8002078 <HardFault_Handler+0x4>

0800207c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002080:	bf00      	nop
 8002082:	e7fd      	b.n	8002080 <MemManage_Handler+0x4>

08002084 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002088:	bf00      	nop
 800208a:	e7fd      	b.n	8002088 <BusFault_Handler+0x4>

0800208c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002090:	bf00      	nop
 8002092:	e7fd      	b.n	8002090 <UsageFault_Handler+0x4>

08002094 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020a2:	b480      	push	{r7}
 80020a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020a6:	bf00      	nop
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020b4:	bf00      	nop
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020c2:	f000 f8a3 	bl	800220c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
	...

080020cc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80020d0:	4802      	ldr	r0, [pc, #8]	@ (80020dc <DMA1_Channel1_IRQHandler+0x10>)
 80020d2:	f002 f8a3 	bl	800421c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	20000104 	.word	0x20000104

080020e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80020e4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80020e8:	f002 fb5e 	bl	80047a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80020ec:	bf00      	nop
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80020f4:	4b06      	ldr	r3, [pc, #24]	@ (8002110 <SystemInit+0x20>)
 80020f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020fa:	4a05      	ldr	r2, [pc, #20]	@ (8002110 <SystemInit+0x20>)
 80020fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002100:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002104:	bf00      	nop
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	e000ed00 	.word	0xe000ed00

08002114 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002114:	480d      	ldr	r0, [pc, #52]	@ (800214c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002116:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002118:	f7ff ffea 	bl	80020f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800211c:	480c      	ldr	r0, [pc, #48]	@ (8002150 <LoopForever+0x6>)
  ldr r1, =_edata
 800211e:	490d      	ldr	r1, [pc, #52]	@ (8002154 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002120:	4a0d      	ldr	r2, [pc, #52]	@ (8002158 <LoopForever+0xe>)
  movs r3, #0
 8002122:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002124:	e002      	b.n	800212c <LoopCopyDataInit>

08002126 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002126:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002128:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800212a:	3304      	adds	r3, #4

0800212c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800212c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800212e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002130:	d3f9      	bcc.n	8002126 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002132:	4a0a      	ldr	r2, [pc, #40]	@ (800215c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002134:	4c0a      	ldr	r4, [pc, #40]	@ (8002160 <LoopForever+0x16>)
  movs r3, #0
 8002136:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002138:	e001      	b.n	800213e <LoopFillZerobss>

0800213a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800213a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800213c:	3204      	adds	r2, #4

0800213e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800213e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002140:	d3fb      	bcc.n	800213a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002142:	f005 fd7f 	bl	8007c44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002146:	f7fe fdfd 	bl	8000d44 <main>

0800214a <LoopForever>:

LoopForever:
    b LoopForever
 800214a:	e7fe      	b.n	800214a <LoopForever>
  ldr   r0, =_estack
 800214c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002150:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002154:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002158:	08007cf4 	.word	0x08007cf4
  ldr r2, =_sbss
 800215c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8002160:	2000039c 	.word	0x2000039c

08002164 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002164:	e7fe      	b.n	8002164 <ADC1_2_IRQHandler>

08002166 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b082      	sub	sp, #8
 800216a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800216c:	2300      	movs	r3, #0
 800216e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002170:	2003      	movs	r0, #3
 8002172:	f001 ff6b 	bl	800404c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002176:	2000      	movs	r0, #0
 8002178:	f000 f80e 	bl	8002198 <HAL_InitTick>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d002      	beq.n	8002188 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	71fb      	strb	r3, [r7, #7]
 8002186:	e001      	b.n	800218c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002188:	f7ff fd42 	bl	8001c10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800218c:	79fb      	ldrb	r3, [r7, #7]

}
 800218e:	4618      	mov	r0, r3
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
	...

08002198 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80021a0:	2300      	movs	r3, #0
 80021a2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80021a4:	4b16      	ldr	r3, [pc, #88]	@ (8002200 <HAL_InitTick+0x68>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d022      	beq.n	80021f2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80021ac:	4b15      	ldr	r3, [pc, #84]	@ (8002204 <HAL_InitTick+0x6c>)
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	4b13      	ldr	r3, [pc, #76]	@ (8002200 <HAL_InitTick+0x68>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80021b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80021bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c0:	4618      	mov	r0, r3
 80021c2:	f001 ff76 	bl	80040b2 <HAL_SYSTICK_Config>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d10f      	bne.n	80021ec <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2b0f      	cmp	r3, #15
 80021d0:	d809      	bhi.n	80021e6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021d2:	2200      	movs	r2, #0
 80021d4:	6879      	ldr	r1, [r7, #4]
 80021d6:	f04f 30ff 	mov.w	r0, #4294967295
 80021da:	f001 ff42 	bl	8004062 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021de:	4a0a      	ldr	r2, [pc, #40]	@ (8002208 <HAL_InitTick+0x70>)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6013      	str	r3, [r2, #0]
 80021e4:	e007      	b.n	80021f6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	73fb      	strb	r3, [r7, #15]
 80021ea:	e004      	b.n	80021f6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	73fb      	strb	r3, [r7, #15]
 80021f0:	e001      	b.n	80021f6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80021f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	20000078 	.word	0x20000078
 8002204:	20000070 	.word	0x20000070
 8002208:	20000074 	.word	0x20000074

0800220c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002210:	4b05      	ldr	r3, [pc, #20]	@ (8002228 <HAL_IncTick+0x1c>)
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	4b05      	ldr	r3, [pc, #20]	@ (800222c <HAL_IncTick+0x20>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4413      	add	r3, r2
 800221a:	4a03      	ldr	r2, [pc, #12]	@ (8002228 <HAL_IncTick+0x1c>)
 800221c:	6013      	str	r3, [r2, #0]
}
 800221e:	bf00      	nop
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	20000398 	.word	0x20000398
 800222c:	20000078 	.word	0x20000078

08002230 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  return uwTick;
 8002234:	4b03      	ldr	r3, [pc, #12]	@ (8002244 <HAL_GetTick+0x14>)
 8002236:	681b      	ldr	r3, [r3, #0]
}
 8002238:	4618      	mov	r0, r3
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	20000398 	.word	0x20000398

08002248 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002250:	f7ff ffee 	bl	8002230 <HAL_GetTick>
 8002254:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002260:	d004      	beq.n	800226c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002262:	4b09      	ldr	r3, [pc, #36]	@ (8002288 <HAL_Delay+0x40>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	4413      	add	r3, r2
 800226a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800226c:	bf00      	nop
 800226e:	f7ff ffdf 	bl	8002230 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	429a      	cmp	r2, r3
 800227c:	d8f7      	bhi.n	800226e <HAL_Delay+0x26>
  {
  }
}
 800227e:	bf00      	nop
 8002280:	bf00      	nop
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	20000078 	.word	0x20000078

0800228c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	431a      	orrs	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	609a      	str	r2, [r3, #8]
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80022b2:	b480      	push	{r7}
 80022b4:	b083      	sub	sp, #12
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
 80022ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	431a      	orrs	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	609a      	str	r2, [r3, #8]
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b087      	sub	sp, #28
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
 8002300:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	3360      	adds	r3, #96	@ 0x60
 8002306:	461a      	mov	r2, r3
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	4b08      	ldr	r3, [pc, #32]	@ (8002338 <LL_ADC_SetOffset+0x44>)
 8002316:	4013      	ands	r3, r2
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	430a      	orrs	r2, r1
 8002322:	4313      	orrs	r3, r2
 8002324:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800232c:	bf00      	nop
 800232e:	371c      	adds	r7, #28
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	03fff000 	.word	0x03fff000

0800233c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	3360      	adds	r3, #96	@ 0x60
 800234a:	461a      	mov	r2, r3
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	4413      	add	r3, r2
 8002352:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800235c:	4618      	mov	r0, r3
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002368:	b480      	push	{r7}
 800236a:	b087      	sub	sp, #28
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	3360      	adds	r3, #96	@ 0x60
 8002378:	461a      	mov	r2, r3
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	4413      	add	r3, r2
 8002380:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	431a      	orrs	r2, r3
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002392:	bf00      	nop
 8002394:	371c      	adds	r7, #28
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800239e:	b480      	push	{r7}
 80023a0:	b087      	sub	sp, #28
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	60f8      	str	r0, [r7, #12]
 80023a6:	60b9      	str	r1, [r7, #8]
 80023a8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	3360      	adds	r3, #96	@ 0x60
 80023ae:	461a      	mov	r2, r3
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	4413      	add	r3, r2
 80023b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	431a      	orrs	r2, r3
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80023c8:	bf00      	nop
 80023ca:	371c      	adds	r7, #28
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b087      	sub	sp, #28
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	3360      	adds	r3, #96	@ 0x60
 80023e4:	461a      	mov	r2, r3
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4413      	add	r3, r2
 80023ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	431a      	orrs	r2, r3
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80023fe:	bf00      	nop
 8002400:	371c      	adds	r7, #28
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800240a:	b480      	push	{r7}
 800240c:	b083      	sub	sp, #12
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
 8002412:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	695b      	ldr	r3, [r3, #20]
 8002418:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	431a      	orrs	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	615a      	str	r2, [r3, #20]
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002444:	2301      	movs	r3, #1
 8002446:	e000      	b.n	800244a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002456:	b480      	push	{r7}
 8002458:	b087      	sub	sp, #28
 800245a:	af00      	add	r7, sp, #0
 800245c:	60f8      	str	r0, [r7, #12]
 800245e:	60b9      	str	r1, [r7, #8]
 8002460:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	3330      	adds	r3, #48	@ 0x30
 8002466:	461a      	mov	r2, r3
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	0a1b      	lsrs	r3, r3, #8
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	f003 030c 	and.w	r3, r3, #12
 8002472:	4413      	add	r3, r2
 8002474:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	f003 031f 	and.w	r3, r3, #31
 8002480:	211f      	movs	r1, #31
 8002482:	fa01 f303 	lsl.w	r3, r1, r3
 8002486:	43db      	mvns	r3, r3
 8002488:	401a      	ands	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	0e9b      	lsrs	r3, r3, #26
 800248e:	f003 011f 	and.w	r1, r3, #31
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	f003 031f 	and.w	r3, r3, #31
 8002498:	fa01 f303 	lsl.w	r3, r1, r3
 800249c:	431a      	orrs	r2, r3
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80024a2:	bf00      	nop
 80024a4:	371c      	adds	r7, #28
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b087      	sub	sp, #28
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	60f8      	str	r0, [r7, #12]
 80024b6:	60b9      	str	r1, [r7, #8]
 80024b8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	3314      	adds	r3, #20
 80024be:	461a      	mov	r2, r3
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	0e5b      	lsrs	r3, r3, #25
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	f003 0304 	and.w	r3, r3, #4
 80024ca:	4413      	add	r3, r2
 80024cc:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	0d1b      	lsrs	r3, r3, #20
 80024d6:	f003 031f 	and.w	r3, r3, #31
 80024da:	2107      	movs	r1, #7
 80024dc:	fa01 f303 	lsl.w	r3, r1, r3
 80024e0:	43db      	mvns	r3, r3
 80024e2:	401a      	ands	r2, r3
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	0d1b      	lsrs	r3, r3, #20
 80024e8:	f003 031f 	and.w	r3, r3, #31
 80024ec:	6879      	ldr	r1, [r7, #4]
 80024ee:	fa01 f303 	lsl.w	r3, r1, r3
 80024f2:	431a      	orrs	r2, r3
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80024f8:	bf00      	nop
 80024fa:	371c      	adds	r7, #28
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800251c:	43db      	mvns	r3, r3
 800251e:	401a      	ands	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f003 0318 	and.w	r3, r3, #24
 8002526:	4908      	ldr	r1, [pc, #32]	@ (8002548 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002528:	40d9      	lsrs	r1, r3
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	400b      	ands	r3, r1
 800252e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002532:	431a      	orrs	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800253a:	bf00      	nop
 800253c:	3714      	adds	r7, #20
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	0007ffff 	.word	0x0007ffff

0800254c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f003 031f 	and.w	r3, r3, #31
}
 800255c:	4618      	mov	r0, r3
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002578:	4618      	mov	r0, r3
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002594:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	6093      	str	r3, [r2, #8]
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80025b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80025bc:	d101      	bne.n	80025c2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80025be:	2301      	movs	r3, #1
 80025c0:	e000      	b.n	80025c4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80025e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025e4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002608:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800260c:	d101      	bne.n	8002612 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800260e:	2301      	movs	r3, #1
 8002610:	e000      	b.n	8002614 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002630:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002634:	f043 0201 	orr.w	r2, r3, #1
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002658:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800265c:	f043 0202 	orr.w	r2, r3, #2
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b01      	cmp	r3, #1
 8002682:	d101      	bne.n	8002688 <LL_ADC_IsEnabled+0x18>
 8002684:	2301      	movs	r3, #1
 8002686:	e000      	b.n	800268a <LL_ADC_IsEnabled+0x1a>
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr

08002696 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002696:	b480      	push	{r7}
 8002698:	b083      	sub	sp, #12
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d101      	bne.n	80026ae <LL_ADC_IsDisableOngoing+0x18>
 80026aa:	2301      	movs	r3, #1
 80026ac:	e000      	b.n	80026b0 <LL_ADC_IsDisableOngoing+0x1a>
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80026cc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80026d0:	f043 0204 	orr.w	r2, r3, #4
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80026f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80026f8:	f043 0210 	orr.w	r2, r3, #16
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b04      	cmp	r3, #4
 800271e:	d101      	bne.n	8002724 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002720:	2301      	movs	r3, #1
 8002722:	e000      	b.n	8002726 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002732:	b480      	push	{r7}
 8002734:	b083      	sub	sp, #12
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002742:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002746:	f043 0220 	orr.w	r2, r3, #32
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800274e:	bf00      	nop
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800275a:	b480      	push	{r7}
 800275c:	b083      	sub	sp, #12
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f003 0308 	and.w	r3, r3, #8
 800276a:	2b08      	cmp	r3, #8
 800276c:	d101      	bne.n	8002772 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800276e:	2301      	movs	r3, #1
 8002770:	e000      	b.n	8002774 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002780:	b590      	push	{r4, r7, lr}
 8002782:	b089      	sub	sp, #36	@ 0x24
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002788:	2300      	movs	r3, #0
 800278a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800278c:	2300      	movs	r3, #0
 800278e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e1a9      	b.n	8002aee <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d109      	bne.n	80027bc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f7ff fa55 	bl	8001c58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff fef1 	bl	80025a8 <LL_ADC_IsDeepPowerDownEnabled>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d004      	beq.n	80027d6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff fed7 	bl	8002584 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff ff0c 	bl	80025f8 <LL_ADC_IsInternalRegulatorEnabled>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d115      	bne.n	8002812 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff fef0 	bl	80025d0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027f0:	4b9c      	ldr	r3, [pc, #624]	@ (8002a64 <HAL_ADC_Init+0x2e4>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	099b      	lsrs	r3, r3, #6
 80027f6:	4a9c      	ldr	r2, [pc, #624]	@ (8002a68 <HAL_ADC_Init+0x2e8>)
 80027f8:	fba2 2303 	umull	r2, r3, r2, r3
 80027fc:	099b      	lsrs	r3, r3, #6
 80027fe:	3301      	adds	r3, #1
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002804:	e002      	b.n	800280c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	3b01      	subs	r3, #1
 800280a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1f9      	bne.n	8002806 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f7ff feee 	bl	80025f8 <LL_ADC_IsInternalRegulatorEnabled>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10d      	bne.n	800283e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002826:	f043 0210 	orr.w	r2, r3, #16
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002832:	f043 0201 	orr.w	r2, r3, #1
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff ff62 	bl	800270c <LL_ADC_REG_IsConversionOngoing>
 8002848:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800284e:	f003 0310 	and.w	r3, r3, #16
 8002852:	2b00      	cmp	r3, #0
 8002854:	f040 8142 	bne.w	8002adc <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	2b00      	cmp	r3, #0
 800285c:	f040 813e 	bne.w	8002adc <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002864:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002868:	f043 0202 	orr.w	r2, r3, #2
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4618      	mov	r0, r3
 8002876:	f7ff fefb 	bl	8002670 <LL_ADC_IsEnabled>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d141      	bne.n	8002904 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002888:	d004      	beq.n	8002894 <HAL_ADC_Init+0x114>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a77      	ldr	r2, [pc, #476]	@ (8002a6c <HAL_ADC_Init+0x2ec>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d10f      	bne.n	80028b4 <HAL_ADC_Init+0x134>
 8002894:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002898:	f7ff feea 	bl	8002670 <LL_ADC_IsEnabled>
 800289c:	4604      	mov	r4, r0
 800289e:	4873      	ldr	r0, [pc, #460]	@ (8002a6c <HAL_ADC_Init+0x2ec>)
 80028a0:	f7ff fee6 	bl	8002670 <LL_ADC_IsEnabled>
 80028a4:	4603      	mov	r3, r0
 80028a6:	4323      	orrs	r3, r4
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	bf0c      	ite	eq
 80028ac:	2301      	moveq	r3, #1
 80028ae:	2300      	movne	r3, #0
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	e012      	b.n	80028da <HAL_ADC_Init+0x15a>
 80028b4:	486e      	ldr	r0, [pc, #440]	@ (8002a70 <HAL_ADC_Init+0x2f0>)
 80028b6:	f7ff fedb 	bl	8002670 <LL_ADC_IsEnabled>
 80028ba:	4604      	mov	r4, r0
 80028bc:	486d      	ldr	r0, [pc, #436]	@ (8002a74 <HAL_ADC_Init+0x2f4>)
 80028be:	f7ff fed7 	bl	8002670 <LL_ADC_IsEnabled>
 80028c2:	4603      	mov	r3, r0
 80028c4:	431c      	orrs	r4, r3
 80028c6:	486c      	ldr	r0, [pc, #432]	@ (8002a78 <HAL_ADC_Init+0x2f8>)
 80028c8:	f7ff fed2 	bl	8002670 <LL_ADC_IsEnabled>
 80028cc:	4603      	mov	r3, r0
 80028ce:	4323      	orrs	r3, r4
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	bf0c      	ite	eq
 80028d4:	2301      	moveq	r3, #1
 80028d6:	2300      	movne	r3, #0
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d012      	beq.n	8002904 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028e6:	d004      	beq.n	80028f2 <HAL_ADC_Init+0x172>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a5f      	ldr	r2, [pc, #380]	@ (8002a6c <HAL_ADC_Init+0x2ec>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d101      	bne.n	80028f6 <HAL_ADC_Init+0x176>
 80028f2:	4a62      	ldr	r2, [pc, #392]	@ (8002a7c <HAL_ADC_Init+0x2fc>)
 80028f4:	e000      	b.n	80028f8 <HAL_ADC_Init+0x178>
 80028f6:	4a62      	ldr	r2, [pc, #392]	@ (8002a80 <HAL_ADC_Init+0x300>)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	4619      	mov	r1, r3
 80028fe:	4610      	mov	r0, r2
 8002900:	f7ff fcc4 	bl	800228c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	7f5b      	ldrb	r3, [r3, #29]
 8002908:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800290e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002914:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800291a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002922:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002924:	4313      	orrs	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800292e:	2b01      	cmp	r3, #1
 8002930:	d106      	bne.n	8002940 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002936:	3b01      	subs	r3, #1
 8002938:	045b      	lsls	r3, r3, #17
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	4313      	orrs	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002944:	2b00      	cmp	r3, #0
 8002946:	d009      	beq.n	800295c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800294c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002954:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	4313      	orrs	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68da      	ldr	r2, [r3, #12]
 8002962:	4b48      	ldr	r3, [pc, #288]	@ (8002a84 <HAL_ADC_Init+0x304>)
 8002964:	4013      	ands	r3, r2
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	6812      	ldr	r2, [r2, #0]
 800296a:	69b9      	ldr	r1, [r7, #24]
 800296c:	430b      	orrs	r3, r1
 800296e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	430a      	orrs	r2, r1
 8002984:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff fee5 	bl	800275a <LL_ADC_INJ_IsConversionOngoing>
 8002990:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d17f      	bne.n	8002a98 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d17c      	bne.n	8002a98 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80029a2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80029aa:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80029ac:	4313      	orrs	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80029ba:	f023 0302 	bic.w	r3, r3, #2
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	6812      	ldr	r2, [r2, #0]
 80029c2:	69b9      	ldr	r1, [r7, #24]
 80029c4:	430b      	orrs	r3, r1
 80029c6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d017      	beq.n	8002a00 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	691a      	ldr	r2, [r3, #16]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80029de:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80029e8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80029ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	6911      	ldr	r1, [r2, #16]
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	6812      	ldr	r2, [r2, #0]
 80029f8:	430b      	orrs	r3, r1
 80029fa:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80029fe:	e013      	b.n	8002a28 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	691a      	ldr	r2, [r3, #16]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002a0e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	6812      	ldr	r2, [r2, #0]
 8002a1c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002a20:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a24:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d12a      	bne.n	8002a88 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002a3c:	f023 0304 	bic.w	r3, r3, #4
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002a48:	4311      	orrs	r1, r2
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002a4e:	4311      	orrs	r1, r2
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002a54:	430a      	orrs	r2, r1
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f042 0201 	orr.w	r2, r2, #1
 8002a60:	611a      	str	r2, [r3, #16]
 8002a62:	e019      	b.n	8002a98 <HAL_ADC_Init+0x318>
 8002a64:	20000070 	.word	0x20000070
 8002a68:	053e2d63 	.word	0x053e2d63
 8002a6c:	50000100 	.word	0x50000100
 8002a70:	50000400 	.word	0x50000400
 8002a74:	50000500 	.word	0x50000500
 8002a78:	50000600 	.word	0x50000600
 8002a7c:	50000300 	.word	0x50000300
 8002a80:	50000700 	.word	0x50000700
 8002a84:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	691a      	ldr	r2, [r3, #16]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f022 0201 	bic.w	r2, r2, #1
 8002a96:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	695b      	ldr	r3, [r3, #20]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d10c      	bne.n	8002aba <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa6:	f023 010f 	bic.w	r1, r3, #15
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	1e5a      	subs	r2, r3, #1
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ab8:	e007      	b.n	8002aca <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f022 020f 	bic.w	r2, r2, #15
 8002ac8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ace:	f023 0303 	bic.w	r3, r3, #3
 8002ad2:	f043 0201 	orr.w	r2, r3, #1
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ada:	e007      	b.n	8002aec <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ae0:	f043 0210 	orr.w	r2, r3, #16
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002aec:	7ffb      	ldrb	r3, [r7, #31]
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3724      	adds	r7, #36	@ 0x24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd90      	pop	{r4, r7, pc}
 8002af6:	bf00      	nop

08002af8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b08:	d004      	beq.n	8002b14 <HAL_ADC_Start+0x1c>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a67      	ldr	r2, [pc, #412]	@ (8002cac <HAL_ADC_Start+0x1b4>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d101      	bne.n	8002b18 <HAL_ADC_Start+0x20>
 8002b14:	4b66      	ldr	r3, [pc, #408]	@ (8002cb0 <HAL_ADC_Start+0x1b8>)
 8002b16:	e000      	b.n	8002b1a <HAL_ADC_Start+0x22>
 8002b18:	4b66      	ldr	r3, [pc, #408]	@ (8002cb4 <HAL_ADC_Start+0x1bc>)
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7ff fd16 	bl	800254c <LL_ADC_GetMultimode>
 8002b20:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7ff fdf0 	bl	800270c <LL_ADC_REG_IsConversionOngoing>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f040 80b4 	bne.w	8002c9c <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d101      	bne.n	8002b42 <HAL_ADC_Start+0x4a>
 8002b3e:	2302      	movs	r3, #2
 8002b40:	e0af      	b.n	8002ca2 <HAL_ADC_Start+0x1aa>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 fefc 	bl	8003948 <ADC_Enable>
 8002b50:	4603      	mov	r3, r0
 8002b52:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002b54:	7dfb      	ldrb	r3, [r7, #23]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f040 809b 	bne.w	8002c92 <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b60:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002b64:	f023 0301 	bic.w	r3, r3, #1
 8002b68:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a4d      	ldr	r2, [pc, #308]	@ (8002cac <HAL_ADC_Start+0x1b4>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d009      	beq.n	8002b8e <HAL_ADC_Start+0x96>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a4e      	ldr	r2, [pc, #312]	@ (8002cb8 <HAL_ADC_Start+0x1c0>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d002      	beq.n	8002b8a <HAL_ADC_Start+0x92>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	e003      	b.n	8002b92 <HAL_ADC_Start+0x9a>
 8002b8a:	4b4c      	ldr	r3, [pc, #304]	@ (8002cbc <HAL_ADC_Start+0x1c4>)
 8002b8c:	e001      	b.n	8002b92 <HAL_ADC_Start+0x9a>
 8002b8e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6812      	ldr	r2, [r2, #0]
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d002      	beq.n	8002ba0 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d105      	bne.n	8002bac <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ba4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bb0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bb8:	d106      	bne.n	8002bc8 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bbe:	f023 0206 	bic.w	r2, r3, #6
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	661a      	str	r2, [r3, #96]	@ 0x60
 8002bc6:	e002      	b.n	8002bce <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	221c      	movs	r2, #28
 8002bd4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a32      	ldr	r2, [pc, #200]	@ (8002cac <HAL_ADC_Start+0x1b4>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d009      	beq.n	8002bfc <HAL_ADC_Start+0x104>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a32      	ldr	r2, [pc, #200]	@ (8002cb8 <HAL_ADC_Start+0x1c0>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d002      	beq.n	8002bf8 <HAL_ADC_Start+0x100>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	e003      	b.n	8002c00 <HAL_ADC_Start+0x108>
 8002bf8:	4b30      	ldr	r3, [pc, #192]	@ (8002cbc <HAL_ADC_Start+0x1c4>)
 8002bfa:	e001      	b.n	8002c00 <HAL_ADC_Start+0x108>
 8002bfc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	6812      	ldr	r2, [r2, #0]
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d008      	beq.n	8002c1a <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d005      	beq.n	8002c1a <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	2b05      	cmp	r3, #5
 8002c12:	d002      	beq.n	8002c1a <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	2b09      	cmp	r3, #9
 8002c18:	d114      	bne.n	8002c44 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d007      	beq.n	8002c38 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c2c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002c30:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff fd3d 	bl	80026bc <LL_ADC_REG_StartConversion>
 8002c42:	e02d      	b.n	8002ca0 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c48:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a15      	ldr	r2, [pc, #84]	@ (8002cac <HAL_ADC_Start+0x1b4>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d009      	beq.n	8002c6e <HAL_ADC_Start+0x176>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a16      	ldr	r2, [pc, #88]	@ (8002cb8 <HAL_ADC_Start+0x1c0>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d002      	beq.n	8002c6a <HAL_ADC_Start+0x172>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	e003      	b.n	8002c72 <HAL_ADC_Start+0x17a>
 8002c6a:	4b14      	ldr	r3, [pc, #80]	@ (8002cbc <HAL_ADC_Start+0x1c4>)
 8002c6c:	e001      	b.n	8002c72 <HAL_ADC_Start+0x17a>
 8002c6e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002c72:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00f      	beq.n	8002ca0 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c84:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002c88:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002c90:	e006      	b.n	8002ca0 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002c9a:	e001      	b.n	8002ca0 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ca0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3718      	adds	r7, #24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	50000100 	.word	0x50000100
 8002cb0:	50000300 	.word	0x50000300
 8002cb4:	50000700 	.word	0x50000700
 8002cb8:	50000500 	.word	0x50000500
 8002cbc:	50000400 	.word	0x50000400

08002cc0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d101      	bne.n	8002cd6 <HAL_ADC_Stop+0x16>
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	e023      	b.n	8002d1e <HAL_ADC_Stop+0x5e>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002cde:	2103      	movs	r1, #3
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 fd75 	bl	80037d0 <ADC_ConversionStop>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002cea:	7bfb      	ldrb	r3, [r7, #15]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d111      	bne.n	8002d14 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 febf 	bl	8003a74 <ADC_Disable>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002cfa:	7bfb      	ldrb	r3, [r7, #15]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d109      	bne.n	8002d14 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d04:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002d08:	f023 0301 	bic.w	r3, r3, #1
 8002d0c:	f043 0201 	orr.w	r2, r3, #1
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	65da      	str	r2, [r3, #92]	@ 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
	...

08002d28 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b088      	sub	sp, #32
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d3a:	d004      	beq.n	8002d46 <HAL_ADC_PollForConversion+0x1e>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a77      	ldr	r2, [pc, #476]	@ (8002f20 <HAL_ADC_PollForConversion+0x1f8>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d101      	bne.n	8002d4a <HAL_ADC_PollForConversion+0x22>
 8002d46:	4b77      	ldr	r3, [pc, #476]	@ (8002f24 <HAL_ADC_PollForConversion+0x1fc>)
 8002d48:	e000      	b.n	8002d4c <HAL_ADC_PollForConversion+0x24>
 8002d4a:	4b77      	ldr	r3, [pc, #476]	@ (8002f28 <HAL_ADC_PollForConversion+0x200>)
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff fbfd 	bl	800254c <LL_ADC_GetMultimode>
 8002d52:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	2b08      	cmp	r3, #8
 8002d5a:	d102      	bne.n	8002d62 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002d5c:	2308      	movs	r3, #8
 8002d5e:	61fb      	str	r3, [r7, #28]
 8002d60:	e037      	b.n	8002dd2 <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d005      	beq.n	8002d74 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	2b05      	cmp	r3, #5
 8002d6c:	d002      	beq.n	8002d74 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	2b09      	cmp	r3, #9
 8002d72:	d111      	bne.n	8002d98 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d007      	beq.n	8002d92 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d86:	f043 0220 	orr.w	r2, r3, #32
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e0c1      	b.n	8002f16 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002d92:	2304      	movs	r3, #4
 8002d94:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002d96:	e01c      	b.n	8002dd2 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002da0:	d004      	beq.n	8002dac <HAL_ADC_PollForConversion+0x84>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a5e      	ldr	r2, [pc, #376]	@ (8002f20 <HAL_ADC_PollForConversion+0x1f8>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d101      	bne.n	8002db0 <HAL_ADC_PollForConversion+0x88>
 8002dac:	4b5d      	ldr	r3, [pc, #372]	@ (8002f24 <HAL_ADC_PollForConversion+0x1fc>)
 8002dae:	e000      	b.n	8002db2 <HAL_ADC_PollForConversion+0x8a>
 8002db0:	4b5d      	ldr	r3, [pc, #372]	@ (8002f28 <HAL_ADC_PollForConversion+0x200>)
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff fbd8 	bl	8002568 <LL_ADC_GetMultiDMATransfer>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d007      	beq.n	8002dce <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dc2:	f043 0220 	orr.w	r2, r3, #32
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e0a3      	b.n	8002f16 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002dce:	2304      	movs	r3, #4
 8002dd0:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002dd2:	f7ff fa2d 	bl	8002230 <HAL_GetTick>
 8002dd6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002dd8:	e021      	b.n	8002e1e <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de0:	d01d      	beq.n	8002e1e <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002de2:	f7ff fa25 	bl	8002230 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d302      	bcc.n	8002df8 <HAL_ADC_PollForConversion+0xd0>
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d112      	bne.n	8002e1e <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	4013      	ands	r3, r2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10b      	bne.n	8002e1e <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e0a:	f043 0204 	orr.w	r2, r3, #4
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e07b      	b.n	8002f16 <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	4013      	ands	r3, r2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d0d6      	beq.n	8002dda <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e30:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff faf7 	bl	8002430 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d01c      	beq.n	8002e82 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	7f5b      	ldrb	r3, [r3, #29]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d118      	bne.n	8002e82 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0308 	and.w	r3, r3, #8
 8002e5a:	2b08      	cmp	r3, #8
 8002e5c:	d111      	bne.n	8002e82 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e62:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d105      	bne.n	8002e82 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e7a:	f043 0201 	orr.w	r2, r3, #1
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a26      	ldr	r2, [pc, #152]	@ (8002f20 <HAL_ADC_PollForConversion+0x1f8>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d009      	beq.n	8002ea0 <HAL_ADC_PollForConversion+0x178>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a26      	ldr	r2, [pc, #152]	@ (8002f2c <HAL_ADC_PollForConversion+0x204>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d002      	beq.n	8002e9c <HAL_ADC_PollForConversion+0x174>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	e003      	b.n	8002ea4 <HAL_ADC_PollForConversion+0x17c>
 8002e9c:	4b24      	ldr	r3, [pc, #144]	@ (8002f30 <HAL_ADC_PollForConversion+0x208>)
 8002e9e:	e001      	b.n	8002ea4 <HAL_ADC_PollForConversion+0x17c>
 8002ea0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	6812      	ldr	r2, [r2, #0]
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d008      	beq.n	8002ebe <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d005      	beq.n	8002ebe <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	2b05      	cmp	r3, #5
 8002eb6:	d002      	beq.n	8002ebe <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	2b09      	cmp	r3, #9
 8002ebc:	d104      	bne.n	8002ec8 <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	61bb      	str	r3, [r7, #24]
 8002ec6:	e014      	b.n	8002ef2 <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a14      	ldr	r2, [pc, #80]	@ (8002f20 <HAL_ADC_PollForConversion+0x1f8>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d009      	beq.n	8002ee6 <HAL_ADC_PollForConversion+0x1be>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a15      	ldr	r2, [pc, #84]	@ (8002f2c <HAL_ADC_PollForConversion+0x204>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d002      	beq.n	8002ee2 <HAL_ADC_PollForConversion+0x1ba>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	e003      	b.n	8002eea <HAL_ADC_PollForConversion+0x1c2>
 8002ee2:	4b13      	ldr	r3, [pc, #76]	@ (8002f30 <HAL_ADC_PollForConversion+0x208>)
 8002ee4:	e001      	b.n	8002eea <HAL_ADC_PollForConversion+0x1c2>
 8002ee6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002eea:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	2b08      	cmp	r3, #8
 8002ef6:	d104      	bne.n	8002f02 <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2208      	movs	r2, #8
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	e008      	b.n	8002f14 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d103      	bne.n	8002f14 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	220c      	movs	r2, #12
 8002f12:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3720      	adds	r7, #32
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	50000100 	.word	0x50000100
 8002f24:	50000300 	.word	0x50000300
 8002f28:	50000700 	.word	0x50000700
 8002f2c:	50000500 	.word	0x50000500
 8002f30:	50000400 	.word	0x50000400

08002f34 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
	...

08002f50 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b0b6      	sub	sp, #216	@ 0xd8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002f60:	2300      	movs	r3, #0
 8002f62:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d102      	bne.n	8002f74 <HAL_ADC_ConfigChannel+0x24>
 8002f6e:	2302      	movs	r3, #2
 8002f70:	f000 bc13 	b.w	800379a <HAL_ADC_ConfigChannel+0x84a>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff fbc3 	bl	800270c <LL_ADC_REG_IsConversionOngoing>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f040 83f3 	bne.w	8003774 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6818      	ldr	r0, [r3, #0]
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	6859      	ldr	r1, [r3, #4]
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	f7ff fa5b 	bl	8002456 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff fbb1 	bl	800270c <LL_ADC_REG_IsConversionOngoing>
 8002faa:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7ff fbd1 	bl	800275a <LL_ADC_INJ_IsConversionOngoing>
 8002fb8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002fbc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f040 81d9 	bne.w	8003378 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002fc6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f040 81d4 	bne.w	8003378 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002fd8:	d10f      	bne.n	8002ffa <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6818      	ldr	r0, [r3, #0]
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	f7ff fa62 	bl	80024ae <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff fa09 	bl	800240a <LL_ADC_SetSamplingTimeCommonConfig>
 8002ff8:	e00e      	b.n	8003018 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6818      	ldr	r0, [r3, #0]
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	6819      	ldr	r1, [r3, #0]
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	461a      	mov	r2, r3
 8003008:	f7ff fa51 	bl	80024ae <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2100      	movs	r1, #0
 8003012:	4618      	mov	r0, r3
 8003014:	f7ff f9f9 	bl	800240a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	695a      	ldr	r2, [r3, #20]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	08db      	lsrs	r3, r3, #3
 8003024:	f003 0303 	and.w	r3, r3, #3
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	fa02 f303 	lsl.w	r3, r2, r3
 800302e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	2b04      	cmp	r3, #4
 8003038:	d022      	beq.n	8003080 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6818      	ldr	r0, [r3, #0]
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	6919      	ldr	r1, [r3, #16]
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800304a:	f7ff f953 	bl	80022f4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6818      	ldr	r0, [r3, #0]
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	6919      	ldr	r1, [r3, #16]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	461a      	mov	r2, r3
 800305c:	f7ff f99f 	bl	800239e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6818      	ldr	r0, [r3, #0]
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800306c:	2b01      	cmp	r3, #1
 800306e:	d102      	bne.n	8003076 <HAL_ADC_ConfigChannel+0x126>
 8003070:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003074:	e000      	b.n	8003078 <HAL_ADC_ConfigChannel+0x128>
 8003076:	2300      	movs	r3, #0
 8003078:	461a      	mov	r2, r3
 800307a:	f7ff f9ab 	bl	80023d4 <LL_ADC_SetOffsetSaturation>
 800307e:	e17b      	b.n	8003378 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2100      	movs	r1, #0
 8003086:	4618      	mov	r0, r3
 8003088:	f7ff f958 	bl	800233c <LL_ADC_GetOffsetChannel>
 800308c:	4603      	mov	r3, r0
 800308e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10a      	bne.n	80030ac <HAL_ADC_ConfigChannel+0x15c>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2100      	movs	r1, #0
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff f94d 	bl	800233c <LL_ADC_GetOffsetChannel>
 80030a2:	4603      	mov	r3, r0
 80030a4:	0e9b      	lsrs	r3, r3, #26
 80030a6:	f003 021f 	and.w	r2, r3, #31
 80030aa:	e01e      	b.n	80030ea <HAL_ADC_ConfigChannel+0x19a>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2100      	movs	r1, #0
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff f942 	bl	800233c <LL_ADC_GetOffsetChannel>
 80030b8:	4603      	mov	r3, r0
 80030ba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030be:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80030c2:	fa93 f3a3 	rbit	r3, r3
 80030c6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80030ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80030ce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80030d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80030da:	2320      	movs	r3, #32
 80030dc:	e004      	b.n	80030e8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80030de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80030e2:	fab3 f383 	clz	r3, r3
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d105      	bne.n	8003102 <HAL_ADC_ConfigChannel+0x1b2>
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	0e9b      	lsrs	r3, r3, #26
 80030fc:	f003 031f 	and.w	r3, r3, #31
 8003100:	e018      	b.n	8003134 <HAL_ADC_ConfigChannel+0x1e4>
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800310e:	fa93 f3a3 	rbit	r3, r3
 8003112:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003116:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800311a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800311e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003126:	2320      	movs	r3, #32
 8003128:	e004      	b.n	8003134 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800312a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800312e:	fab3 f383 	clz	r3, r3
 8003132:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003134:	429a      	cmp	r2, r3
 8003136:	d106      	bne.n	8003146 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2200      	movs	r2, #0
 800313e:	2100      	movs	r1, #0
 8003140:	4618      	mov	r0, r3
 8003142:	f7ff f911 	bl	8002368 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2101      	movs	r1, #1
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff f8f5 	bl	800233c <LL_ADC_GetOffsetChannel>
 8003152:	4603      	mov	r3, r0
 8003154:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003158:	2b00      	cmp	r3, #0
 800315a:	d10a      	bne.n	8003172 <HAL_ADC_ConfigChannel+0x222>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2101      	movs	r1, #1
 8003162:	4618      	mov	r0, r3
 8003164:	f7ff f8ea 	bl	800233c <LL_ADC_GetOffsetChannel>
 8003168:	4603      	mov	r3, r0
 800316a:	0e9b      	lsrs	r3, r3, #26
 800316c:	f003 021f 	and.w	r2, r3, #31
 8003170:	e01e      	b.n	80031b0 <HAL_ADC_ConfigChannel+0x260>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2101      	movs	r1, #1
 8003178:	4618      	mov	r0, r3
 800317a:	f7ff f8df 	bl	800233c <LL_ADC_GetOffsetChannel>
 800317e:	4603      	mov	r3, r0
 8003180:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003184:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003188:	fa93 f3a3 	rbit	r3, r3
 800318c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003190:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003194:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003198:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80031a0:	2320      	movs	r3, #32
 80031a2:	e004      	b.n	80031ae <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80031a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80031a8:	fab3 f383 	clz	r3, r3
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d105      	bne.n	80031c8 <HAL_ADC_ConfigChannel+0x278>
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	0e9b      	lsrs	r3, r3, #26
 80031c2:	f003 031f 	and.w	r3, r3, #31
 80031c6:	e018      	b.n	80031fa <HAL_ADC_ConfigChannel+0x2aa>
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80031d4:	fa93 f3a3 	rbit	r3, r3
 80031d8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80031dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80031e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80031e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d101      	bne.n	80031f0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80031ec:	2320      	movs	r3, #32
 80031ee:	e004      	b.n	80031fa <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80031f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80031f4:	fab3 f383 	clz	r3, r3
 80031f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d106      	bne.n	800320c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2200      	movs	r2, #0
 8003204:	2101      	movs	r1, #1
 8003206:	4618      	mov	r0, r3
 8003208:	f7ff f8ae 	bl	8002368 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2102      	movs	r1, #2
 8003212:	4618      	mov	r0, r3
 8003214:	f7ff f892 	bl	800233c <LL_ADC_GetOffsetChannel>
 8003218:	4603      	mov	r3, r0
 800321a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10a      	bne.n	8003238 <HAL_ADC_ConfigChannel+0x2e8>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2102      	movs	r1, #2
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff f887 	bl	800233c <LL_ADC_GetOffsetChannel>
 800322e:	4603      	mov	r3, r0
 8003230:	0e9b      	lsrs	r3, r3, #26
 8003232:	f003 021f 	and.w	r2, r3, #31
 8003236:	e01e      	b.n	8003276 <HAL_ADC_ConfigChannel+0x326>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2102      	movs	r1, #2
 800323e:	4618      	mov	r0, r3
 8003240:	f7ff f87c 	bl	800233c <LL_ADC_GetOffsetChannel>
 8003244:	4603      	mov	r3, r0
 8003246:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800324e:	fa93 f3a3 	rbit	r3, r3
 8003252:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003256:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800325a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800325e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003266:	2320      	movs	r3, #32
 8003268:	e004      	b.n	8003274 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800326a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800326e:	fab3 f383 	clz	r3, r3
 8003272:	b2db      	uxtb	r3, r3
 8003274:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800327e:	2b00      	cmp	r3, #0
 8003280:	d105      	bne.n	800328e <HAL_ADC_ConfigChannel+0x33e>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	0e9b      	lsrs	r3, r3, #26
 8003288:	f003 031f 	and.w	r3, r3, #31
 800328c:	e016      	b.n	80032bc <HAL_ADC_ConfigChannel+0x36c>
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003296:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800329a:	fa93 f3a3 	rbit	r3, r3
 800329e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80032a0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80032a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80032a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80032ae:	2320      	movs	r3, #32
 80032b0:	e004      	b.n	80032bc <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80032b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80032b6:	fab3 f383 	clz	r3, r3
 80032ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80032bc:	429a      	cmp	r2, r3
 80032be:	d106      	bne.n	80032ce <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2200      	movs	r2, #0
 80032c6:	2102      	movs	r1, #2
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7ff f84d 	bl	8002368 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2103      	movs	r1, #3
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7ff f831 	bl	800233c <LL_ADC_GetOffsetChannel>
 80032da:	4603      	mov	r3, r0
 80032dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d10a      	bne.n	80032fa <HAL_ADC_ConfigChannel+0x3aa>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2103      	movs	r1, #3
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7ff f826 	bl	800233c <LL_ADC_GetOffsetChannel>
 80032f0:	4603      	mov	r3, r0
 80032f2:	0e9b      	lsrs	r3, r3, #26
 80032f4:	f003 021f 	and.w	r2, r3, #31
 80032f8:	e017      	b.n	800332a <HAL_ADC_ConfigChannel+0x3da>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2103      	movs	r1, #3
 8003300:	4618      	mov	r0, r3
 8003302:	f7ff f81b 	bl	800233c <LL_ADC_GetOffsetChannel>
 8003306:	4603      	mov	r3, r0
 8003308:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800330c:	fa93 f3a3 	rbit	r3, r3
 8003310:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003312:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003314:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003316:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003318:	2b00      	cmp	r3, #0
 800331a:	d101      	bne.n	8003320 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800331c:	2320      	movs	r3, #32
 800331e:	e003      	b.n	8003328 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003320:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003322:	fab3 f383 	clz	r3, r3
 8003326:	b2db      	uxtb	r3, r3
 8003328:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003332:	2b00      	cmp	r3, #0
 8003334:	d105      	bne.n	8003342 <HAL_ADC_ConfigChannel+0x3f2>
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	0e9b      	lsrs	r3, r3, #26
 800333c:	f003 031f 	and.w	r3, r3, #31
 8003340:	e011      	b.n	8003366 <HAL_ADC_ConfigChannel+0x416>
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003348:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800334a:	fa93 f3a3 	rbit	r3, r3
 800334e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003350:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003352:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003354:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800335a:	2320      	movs	r3, #32
 800335c:	e003      	b.n	8003366 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800335e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003360:	fab3 f383 	clz	r3, r3
 8003364:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003366:	429a      	cmp	r2, r3
 8003368:	d106      	bne.n	8003378 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2200      	movs	r2, #0
 8003370:	2103      	movs	r1, #3
 8003372:	4618      	mov	r0, r3
 8003374:	f7fe fff8 	bl	8002368 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff f977 	bl	8002670 <LL_ADC_IsEnabled>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	f040 813d 	bne.w	8003604 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6818      	ldr	r0, [r3, #0]
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	6819      	ldr	r1, [r3, #0]
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	461a      	mov	r2, r3
 8003398:	f7ff f8b4 	bl	8002504 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	4aa2      	ldr	r2, [pc, #648]	@ (800362c <HAL_ADC_ConfigChannel+0x6dc>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	f040 812e 	bne.w	8003604 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d10b      	bne.n	80033d0 <HAL_ADC_ConfigChannel+0x480>
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	0e9b      	lsrs	r3, r3, #26
 80033be:	3301      	adds	r3, #1
 80033c0:	f003 031f 	and.w	r3, r3, #31
 80033c4:	2b09      	cmp	r3, #9
 80033c6:	bf94      	ite	ls
 80033c8:	2301      	movls	r3, #1
 80033ca:	2300      	movhi	r3, #0
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	e019      	b.n	8003404 <HAL_ADC_ConfigChannel+0x4b4>
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033d8:	fa93 f3a3 	rbit	r3, r3
 80033dc:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80033de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80033e0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80033e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d101      	bne.n	80033ec <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80033e8:	2320      	movs	r3, #32
 80033ea:	e003      	b.n	80033f4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80033ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033ee:	fab3 f383 	clz	r3, r3
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	3301      	adds	r3, #1
 80033f6:	f003 031f 	and.w	r3, r3, #31
 80033fa:	2b09      	cmp	r3, #9
 80033fc:	bf94      	ite	ls
 80033fe:	2301      	movls	r3, #1
 8003400:	2300      	movhi	r3, #0
 8003402:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003404:	2b00      	cmp	r3, #0
 8003406:	d079      	beq.n	80034fc <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003410:	2b00      	cmp	r3, #0
 8003412:	d107      	bne.n	8003424 <HAL_ADC_ConfigChannel+0x4d4>
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	0e9b      	lsrs	r3, r3, #26
 800341a:	3301      	adds	r3, #1
 800341c:	069b      	lsls	r3, r3, #26
 800341e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003422:	e015      	b.n	8003450 <HAL_ADC_ConfigChannel+0x500>
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800342c:	fa93 f3a3 	rbit	r3, r3
 8003430:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003432:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003434:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003436:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003438:	2b00      	cmp	r3, #0
 800343a:	d101      	bne.n	8003440 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800343c:	2320      	movs	r3, #32
 800343e:	e003      	b.n	8003448 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003440:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003442:	fab3 f383 	clz	r3, r3
 8003446:	b2db      	uxtb	r3, r3
 8003448:	3301      	adds	r3, #1
 800344a:	069b      	lsls	r3, r3, #26
 800344c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003458:	2b00      	cmp	r3, #0
 800345a:	d109      	bne.n	8003470 <HAL_ADC_ConfigChannel+0x520>
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	0e9b      	lsrs	r3, r3, #26
 8003462:	3301      	adds	r3, #1
 8003464:	f003 031f 	and.w	r3, r3, #31
 8003468:	2101      	movs	r1, #1
 800346a:	fa01 f303 	lsl.w	r3, r1, r3
 800346e:	e017      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x550>
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003476:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003478:	fa93 f3a3 	rbit	r3, r3
 800347c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800347e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003480:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003482:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003484:	2b00      	cmp	r3, #0
 8003486:	d101      	bne.n	800348c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003488:	2320      	movs	r3, #32
 800348a:	e003      	b.n	8003494 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800348c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800348e:	fab3 f383 	clz	r3, r3
 8003492:	b2db      	uxtb	r3, r3
 8003494:	3301      	adds	r3, #1
 8003496:	f003 031f 	and.w	r3, r3, #31
 800349a:	2101      	movs	r1, #1
 800349c:	fa01 f303 	lsl.w	r3, r1, r3
 80034a0:	ea42 0103 	orr.w	r1, r2, r3
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d10a      	bne.n	80034c6 <HAL_ADC_ConfigChannel+0x576>
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	0e9b      	lsrs	r3, r3, #26
 80034b6:	3301      	adds	r3, #1
 80034b8:	f003 021f 	and.w	r2, r3, #31
 80034bc:	4613      	mov	r3, r2
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	4413      	add	r3, r2
 80034c2:	051b      	lsls	r3, r3, #20
 80034c4:	e018      	b.n	80034f8 <HAL_ADC_ConfigChannel+0x5a8>
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034ce:	fa93 f3a3 	rbit	r3, r3
 80034d2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80034d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80034d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80034de:	2320      	movs	r3, #32
 80034e0:	e003      	b.n	80034ea <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80034e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034e4:	fab3 f383 	clz	r3, r3
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	3301      	adds	r3, #1
 80034ec:	f003 021f 	and.w	r2, r3, #31
 80034f0:	4613      	mov	r3, r2
 80034f2:	005b      	lsls	r3, r3, #1
 80034f4:	4413      	add	r3, r2
 80034f6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034f8:	430b      	orrs	r3, r1
 80034fa:	e07e      	b.n	80035fa <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003504:	2b00      	cmp	r3, #0
 8003506:	d107      	bne.n	8003518 <HAL_ADC_ConfigChannel+0x5c8>
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	0e9b      	lsrs	r3, r3, #26
 800350e:	3301      	adds	r3, #1
 8003510:	069b      	lsls	r3, r3, #26
 8003512:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003516:	e015      	b.n	8003544 <HAL_ADC_ConfigChannel+0x5f4>
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003520:	fa93 f3a3 	rbit	r3, r3
 8003524:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003528:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800352a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800352c:	2b00      	cmp	r3, #0
 800352e:	d101      	bne.n	8003534 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003530:	2320      	movs	r3, #32
 8003532:	e003      	b.n	800353c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003536:	fab3 f383 	clz	r3, r3
 800353a:	b2db      	uxtb	r3, r3
 800353c:	3301      	adds	r3, #1
 800353e:	069b      	lsls	r3, r3, #26
 8003540:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800354c:	2b00      	cmp	r3, #0
 800354e:	d109      	bne.n	8003564 <HAL_ADC_ConfigChannel+0x614>
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	0e9b      	lsrs	r3, r3, #26
 8003556:	3301      	adds	r3, #1
 8003558:	f003 031f 	and.w	r3, r3, #31
 800355c:	2101      	movs	r1, #1
 800355e:	fa01 f303 	lsl.w	r3, r1, r3
 8003562:	e017      	b.n	8003594 <HAL_ADC_ConfigChannel+0x644>
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356a:	6a3b      	ldr	r3, [r7, #32]
 800356c:	fa93 f3a3 	rbit	r3, r3
 8003570:	61fb      	str	r3, [r7, #28]
  return result;
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800357c:	2320      	movs	r3, #32
 800357e:	e003      	b.n	8003588 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003582:	fab3 f383 	clz	r3, r3
 8003586:	b2db      	uxtb	r3, r3
 8003588:	3301      	adds	r3, #1
 800358a:	f003 031f 	and.w	r3, r3, #31
 800358e:	2101      	movs	r1, #1
 8003590:	fa01 f303 	lsl.w	r3, r1, r3
 8003594:	ea42 0103 	orr.w	r1, r2, r3
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10d      	bne.n	80035c0 <HAL_ADC_ConfigChannel+0x670>
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	0e9b      	lsrs	r3, r3, #26
 80035aa:	3301      	adds	r3, #1
 80035ac:	f003 021f 	and.w	r2, r3, #31
 80035b0:	4613      	mov	r3, r2
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	4413      	add	r3, r2
 80035b6:	3b1e      	subs	r3, #30
 80035b8:	051b      	lsls	r3, r3, #20
 80035ba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80035be:	e01b      	b.n	80035f8 <HAL_ADC_ConfigChannel+0x6a8>
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	fa93 f3a3 	rbit	r3, r3
 80035cc:	613b      	str	r3, [r7, #16]
  return result;
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d101      	bne.n	80035dc <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80035d8:	2320      	movs	r3, #32
 80035da:	e003      	b.n	80035e4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	fab3 f383 	clz	r3, r3
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	3301      	adds	r3, #1
 80035e6:	f003 021f 	and.w	r2, r3, #31
 80035ea:	4613      	mov	r3, r2
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	4413      	add	r3, r2
 80035f0:	3b1e      	subs	r3, #30
 80035f2:	051b      	lsls	r3, r3, #20
 80035f4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035f8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035fe:	4619      	mov	r1, r3
 8003600:	f7fe ff55 	bl	80024ae <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	4b09      	ldr	r3, [pc, #36]	@ (8003630 <HAL_ADC_ConfigChannel+0x6e0>)
 800360a:	4013      	ands	r3, r2
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 80be 	beq.w	800378e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800361a:	d004      	beq.n	8003626 <HAL_ADC_ConfigChannel+0x6d6>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a04      	ldr	r2, [pc, #16]	@ (8003634 <HAL_ADC_ConfigChannel+0x6e4>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d10a      	bne.n	800363c <HAL_ADC_ConfigChannel+0x6ec>
 8003626:	4b04      	ldr	r3, [pc, #16]	@ (8003638 <HAL_ADC_ConfigChannel+0x6e8>)
 8003628:	e009      	b.n	800363e <HAL_ADC_ConfigChannel+0x6ee>
 800362a:	bf00      	nop
 800362c:	407f0000 	.word	0x407f0000
 8003630:	80080000 	.word	0x80080000
 8003634:	50000100 	.word	0x50000100
 8003638:	50000300 	.word	0x50000300
 800363c:	4b59      	ldr	r3, [pc, #356]	@ (80037a4 <HAL_ADC_ConfigChannel+0x854>)
 800363e:	4618      	mov	r0, r3
 8003640:	f7fe fe4a 	bl	80022d8 <LL_ADC_GetCommonPathInternalCh>
 8003644:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a56      	ldr	r2, [pc, #344]	@ (80037a8 <HAL_ADC_ConfigChannel+0x858>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d004      	beq.n	800365c <HAL_ADC_ConfigChannel+0x70c>
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a55      	ldr	r2, [pc, #340]	@ (80037ac <HAL_ADC_ConfigChannel+0x85c>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d13a      	bne.n	80036d2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800365c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003660:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d134      	bne.n	80036d2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003670:	d005      	beq.n	800367e <HAL_ADC_ConfigChannel+0x72e>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a4e      	ldr	r2, [pc, #312]	@ (80037b0 <HAL_ADC_ConfigChannel+0x860>)
 8003678:	4293      	cmp	r3, r2
 800367a:	f040 8085 	bne.w	8003788 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003686:	d004      	beq.n	8003692 <HAL_ADC_ConfigChannel+0x742>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a49      	ldr	r2, [pc, #292]	@ (80037b4 <HAL_ADC_ConfigChannel+0x864>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d101      	bne.n	8003696 <HAL_ADC_ConfigChannel+0x746>
 8003692:	4a49      	ldr	r2, [pc, #292]	@ (80037b8 <HAL_ADC_ConfigChannel+0x868>)
 8003694:	e000      	b.n	8003698 <HAL_ADC_ConfigChannel+0x748>
 8003696:	4a43      	ldr	r2, [pc, #268]	@ (80037a4 <HAL_ADC_ConfigChannel+0x854>)
 8003698:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800369c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80036a0:	4619      	mov	r1, r3
 80036a2:	4610      	mov	r0, r2
 80036a4:	f7fe fe05 	bl	80022b2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036a8:	4b44      	ldr	r3, [pc, #272]	@ (80037bc <HAL_ADC_ConfigChannel+0x86c>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	099b      	lsrs	r3, r3, #6
 80036ae:	4a44      	ldr	r2, [pc, #272]	@ (80037c0 <HAL_ADC_ConfigChannel+0x870>)
 80036b0:	fba2 2303 	umull	r2, r3, r2, r3
 80036b4:	099b      	lsrs	r3, r3, #6
 80036b6:	1c5a      	adds	r2, r3, #1
 80036b8:	4613      	mov	r3, r2
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	4413      	add	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80036c2:	e002      	b.n	80036ca <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	3b01      	subs	r3, #1
 80036c8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1f9      	bne.n	80036c4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036d0:	e05a      	b.n	8003788 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a3b      	ldr	r2, [pc, #236]	@ (80037c4 <HAL_ADC_ConfigChannel+0x874>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d125      	bne.n	8003728 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80036dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80036e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d11f      	bne.n	8003728 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a31      	ldr	r2, [pc, #196]	@ (80037b4 <HAL_ADC_ConfigChannel+0x864>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d104      	bne.n	80036fc <HAL_ADC_ConfigChannel+0x7ac>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a34      	ldr	r2, [pc, #208]	@ (80037c8 <HAL_ADC_ConfigChannel+0x878>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d047      	beq.n	800378c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003704:	d004      	beq.n	8003710 <HAL_ADC_ConfigChannel+0x7c0>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a2a      	ldr	r2, [pc, #168]	@ (80037b4 <HAL_ADC_ConfigChannel+0x864>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d101      	bne.n	8003714 <HAL_ADC_ConfigChannel+0x7c4>
 8003710:	4a29      	ldr	r2, [pc, #164]	@ (80037b8 <HAL_ADC_ConfigChannel+0x868>)
 8003712:	e000      	b.n	8003716 <HAL_ADC_ConfigChannel+0x7c6>
 8003714:	4a23      	ldr	r2, [pc, #140]	@ (80037a4 <HAL_ADC_ConfigChannel+0x854>)
 8003716:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800371a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800371e:	4619      	mov	r1, r3
 8003720:	4610      	mov	r0, r2
 8003722:	f7fe fdc6 	bl	80022b2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003726:	e031      	b.n	800378c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a27      	ldr	r2, [pc, #156]	@ (80037cc <HAL_ADC_ConfigChannel+0x87c>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d12d      	bne.n	800378e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003732:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003736:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d127      	bne.n	800378e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a1c      	ldr	r2, [pc, #112]	@ (80037b4 <HAL_ADC_ConfigChannel+0x864>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d022      	beq.n	800378e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003750:	d004      	beq.n	800375c <HAL_ADC_ConfigChannel+0x80c>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a17      	ldr	r2, [pc, #92]	@ (80037b4 <HAL_ADC_ConfigChannel+0x864>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d101      	bne.n	8003760 <HAL_ADC_ConfigChannel+0x810>
 800375c:	4a16      	ldr	r2, [pc, #88]	@ (80037b8 <HAL_ADC_ConfigChannel+0x868>)
 800375e:	e000      	b.n	8003762 <HAL_ADC_ConfigChannel+0x812>
 8003760:	4a10      	ldr	r2, [pc, #64]	@ (80037a4 <HAL_ADC_ConfigChannel+0x854>)
 8003762:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003766:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800376a:	4619      	mov	r1, r3
 800376c:	4610      	mov	r0, r2
 800376e:	f7fe fda0 	bl	80022b2 <LL_ADC_SetCommonPathInternalCh>
 8003772:	e00c      	b.n	800378e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003778:	f043 0220 	orr.w	r2, r3, #32
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003786:	e002      	b.n	800378e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003788:	bf00      	nop
 800378a:	e000      	b.n	800378e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800378c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003796:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800379a:	4618      	mov	r0, r3
 800379c:	37d8      	adds	r7, #216	@ 0xd8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	50000700 	.word	0x50000700
 80037a8:	c3210000 	.word	0xc3210000
 80037ac:	90c00010 	.word	0x90c00010
 80037b0:	50000600 	.word	0x50000600
 80037b4:	50000100 	.word	0x50000100
 80037b8:	50000300 	.word	0x50000300
 80037bc:	20000070 	.word	0x20000070
 80037c0:	053e2d63 	.word	0x053e2d63
 80037c4:	c7520000 	.word	0xc7520000
 80037c8:	50000500 	.word	0x50000500
 80037cc:	cb840000 	.word	0xcb840000

080037d0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b088      	sub	sp, #32
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80037da:	2300      	movs	r3, #0
 80037dc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7fe ff90 	bl	800270c <LL_ADC_REG_IsConversionOngoing>
 80037ec:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7fe ffb1 	bl	800275a <LL_ADC_INJ_IsConversionOngoing>
 80037f8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d103      	bne.n	8003808 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2b00      	cmp	r3, #0
 8003804:	f000 8098 	beq.w	8003938 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d02a      	beq.n	800386c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	7f5b      	ldrb	r3, [r3, #29]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d126      	bne.n	800386c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	7f1b      	ldrb	r3, [r3, #28]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d122      	bne.n	800386c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003826:	2301      	movs	r3, #1
 8003828:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800382a:	e014      	b.n	8003856 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	4a45      	ldr	r2, [pc, #276]	@ (8003944 <ADC_ConversionStop+0x174>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d90d      	bls.n	8003850 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003838:	f043 0210 	orr.w	r2, r3, #16
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003844:	f043 0201 	orr.w	r2, r3, #1
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e074      	b.n	800393a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	3301      	adds	r3, #1
 8003854:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003860:	2b40      	cmp	r3, #64	@ 0x40
 8003862:	d1e3      	bne.n	800382c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2240      	movs	r2, #64	@ 0x40
 800386a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	2b02      	cmp	r3, #2
 8003870:	d014      	beq.n	800389c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f7fe ff48 	bl	800270c <LL_ADC_REG_IsConversionOngoing>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00c      	beq.n	800389c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4618      	mov	r0, r3
 8003888:	f7fe ff05 	bl	8002696 <LL_ADC_IsDisableOngoing>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d104      	bne.n	800389c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4618      	mov	r0, r3
 8003898:	f7fe ff24 	bl	80026e4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d014      	beq.n	80038cc <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7fe ff57 	bl	800275a <LL_ADC_INJ_IsConversionOngoing>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00c      	beq.n	80038cc <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7fe feed 	bl	8002696 <LL_ADC_IsDisableOngoing>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d104      	bne.n	80038cc <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7fe ff33 	bl	8002732 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d005      	beq.n	80038de <ADC_ConversionStop+0x10e>
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	2b03      	cmp	r3, #3
 80038d6:	d105      	bne.n	80038e4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80038d8:	230c      	movs	r3, #12
 80038da:	617b      	str	r3, [r7, #20]
        break;
 80038dc:	e005      	b.n	80038ea <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80038de:	2308      	movs	r3, #8
 80038e0:	617b      	str	r3, [r7, #20]
        break;
 80038e2:	e002      	b.n	80038ea <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80038e4:	2304      	movs	r3, #4
 80038e6:	617b      	str	r3, [r7, #20]
        break;
 80038e8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80038ea:	f7fe fca1 	bl	8002230 <HAL_GetTick>
 80038ee:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80038f0:	e01b      	b.n	800392a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80038f2:	f7fe fc9d 	bl	8002230 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b05      	cmp	r3, #5
 80038fe:	d914      	bls.n	800392a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	689a      	ldr	r2, [r3, #8]
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	4013      	ands	r3, r2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00d      	beq.n	800392a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003912:	f043 0210 	orr.w	r2, r3, #16
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800391e:	f043 0201 	orr.w	r2, r3, #1
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e007      	b.n	800393a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	689a      	ldr	r2, [r3, #8]
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	4013      	ands	r3, r2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1dc      	bne.n	80038f2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3720      	adds	r7, #32
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	a33fffff 	.word	0xa33fffff

08003948 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003950:	2300      	movs	r3, #0
 8003952:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4618      	mov	r0, r3
 800395a:	f7fe fe89 	bl	8002670 <LL_ADC_IsEnabled>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d176      	bne.n	8003a52 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	689a      	ldr	r2, [r3, #8]
 800396a:	4b3c      	ldr	r3, [pc, #240]	@ (8003a5c <ADC_Enable+0x114>)
 800396c:	4013      	ands	r3, r2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00d      	beq.n	800398e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003976:	f043 0210 	orr.w	r2, r3, #16
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003982:	f043 0201 	orr.w	r2, r3, #1
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e062      	b.n	8003a54 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4618      	mov	r0, r3
 8003994:	f7fe fe44 	bl	8002620 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039a0:	d004      	beq.n	80039ac <ADC_Enable+0x64>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a2e      	ldr	r2, [pc, #184]	@ (8003a60 <ADC_Enable+0x118>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d101      	bne.n	80039b0 <ADC_Enable+0x68>
 80039ac:	4b2d      	ldr	r3, [pc, #180]	@ (8003a64 <ADC_Enable+0x11c>)
 80039ae:	e000      	b.n	80039b2 <ADC_Enable+0x6a>
 80039b0:	4b2d      	ldr	r3, [pc, #180]	@ (8003a68 <ADC_Enable+0x120>)
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7fe fc90 	bl	80022d8 <LL_ADC_GetCommonPathInternalCh>
 80039b8:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80039ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d013      	beq.n	80039ea <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80039c2:	4b2a      	ldr	r3, [pc, #168]	@ (8003a6c <ADC_Enable+0x124>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	099b      	lsrs	r3, r3, #6
 80039c8:	4a29      	ldr	r2, [pc, #164]	@ (8003a70 <ADC_Enable+0x128>)
 80039ca:	fba2 2303 	umull	r2, r3, r2, r3
 80039ce:	099b      	lsrs	r3, r3, #6
 80039d0:	1c5a      	adds	r2, r3, #1
 80039d2:	4613      	mov	r3, r2
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	4413      	add	r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80039dc:	e002      	b.n	80039e4 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	3b01      	subs	r3, #1
 80039e2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1f9      	bne.n	80039de <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80039ea:	f7fe fc21 	bl	8002230 <HAL_GetTick>
 80039ee:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039f0:	e028      	b.n	8003a44 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7fe fe3a 	bl	8002670 <LL_ADC_IsEnabled>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d104      	bne.n	8003a0c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fe fe0a 	bl	8002620 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a0c:	f7fe fc10 	bl	8002230 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d914      	bls.n	8003a44 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d00d      	beq.n	8003a44 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a2c:	f043 0210 	orr.w	r2, r3, #16
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a38:	f043 0201 	orr.w	r2, r3, #1
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e007      	b.n	8003a54 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d1cf      	bne.n	80039f2 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	8000003f 	.word	0x8000003f
 8003a60:	50000100 	.word	0x50000100
 8003a64:	50000300 	.word	0x50000300
 8003a68:	50000700 	.word	0x50000700
 8003a6c:	20000070 	.word	0x20000070
 8003a70:	053e2d63 	.word	0x053e2d63

08003a74 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7fe fe08 	bl	8002696 <LL_ADC_IsDisableOngoing>
 8003a86:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7fe fdef 	bl	8002670 <LL_ADC_IsEnabled>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d047      	beq.n	8003b28 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d144      	bne.n	8003b28 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f003 030d 	and.w	r3, r3, #13
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d10c      	bne.n	8003ac6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7fe fdc9 	bl	8002648 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2203      	movs	r2, #3
 8003abc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003abe:	f7fe fbb7 	bl	8002230 <HAL_GetTick>
 8003ac2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ac4:	e029      	b.n	8003b1a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aca:	f043 0210 	orr.w	r2, r3, #16
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ad6:	f043 0201 	orr.w	r2, r3, #1
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e023      	b.n	8003b2a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003ae2:	f7fe fba5 	bl	8002230 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d914      	bls.n	8003b1a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00d      	beq.n	8003b1a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b02:	f043 0210 	orr.w	r2, r3, #16
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b0e:	f043 0201 	orr.w	r2, r3, #1
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e007      	b.n	8003b2a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1dc      	bne.n	8003ae2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <LL_ADC_IsEnabled>:
{
 8003b32:	b480      	push	{r7}
 8003b34:	b083      	sub	sp, #12
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d101      	bne.n	8003b4a <LL_ADC_IsEnabled+0x18>
 8003b46:	2301      	movs	r3, #1
 8003b48:	e000      	b.n	8003b4c <LL_ADC_IsEnabled+0x1a>
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <LL_ADC_StartCalibration>:
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003b6a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003b74:	4313      	orrs	r3, r2
 8003b76:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	609a      	str	r2, [r3, #8]
}
 8003b7e:	bf00      	nop
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr

08003b8a <LL_ADC_IsCalibrationOnGoing>:
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	b083      	sub	sp, #12
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b9e:	d101      	bne.n	8003ba4 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e000      	b.n	8003ba6 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <LL_ADC_REG_IsConversionOngoing>:
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b083      	sub	sp, #12
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f003 0304 	and.w	r3, r3, #4
 8003bc2:	2b04      	cmp	r3, #4
 8003bc4:	d101      	bne.n	8003bca <LL_ADC_REG_IsConversionOngoing+0x18>
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e000      	b.n	8003bcc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003be2:	2300      	movs	r3, #0
 8003be4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d101      	bne.n	8003bf4 <HAL_ADCEx_Calibration_Start+0x1c>
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	e04d      	b.n	8003c90 <HAL_ADCEx_Calibration_Start+0xb8>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f7ff ff39 	bl	8003a74 <ADC_Disable>
 8003c02:	4603      	mov	r3, r0
 8003c04:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003c06:	7bfb      	ldrb	r3, [r7, #15]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d136      	bne.n	8003c7a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c10:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003c14:	f023 0302 	bic.w	r3, r3, #2
 8003c18:	f043 0202 	orr.w	r2, r3, #2
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	6839      	ldr	r1, [r7, #0]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7ff ff96 	bl	8003b58 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003c2c:	e014      	b.n	8003c58 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	3301      	adds	r3, #1
 8003c32:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	4a18      	ldr	r2, [pc, #96]	@ (8003c98 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d90d      	bls.n	8003c58 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c40:	f023 0312 	bic.w	r3, r3, #18
 8003c44:	f043 0210 	orr.w	r2, r3, #16
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e01b      	b.n	8003c90 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7ff ff94 	bl	8003b8a <LL_ADC_IsCalibrationOnGoing>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1e2      	bne.n	8003c2e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c6c:	f023 0303 	bic.w	r3, r3, #3
 8003c70:	f043 0201 	orr.w	r2, r3, #1
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003c78:	e005      	b.n	8003c86 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c7e:	f043 0210 	orr.w	r2, r3, #16
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	0004de01 	.word	0x0004de01

08003c9c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003c9c:	b590      	push	{r4, r7, lr}
 8003c9e:	b0a1      	sub	sp, #132	@ 0x84
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d101      	bne.n	8003cba <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	e0e7      	b.n	8003e8a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003cd2:	d102      	bne.n	8003cda <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003cd4:	4b6f      	ldr	r3, [pc, #444]	@ (8003e94 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003cd6:	60bb      	str	r3, [r7, #8]
 8003cd8:	e009      	b.n	8003cee <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a6e      	ldr	r2, [pc, #440]	@ (8003e98 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d102      	bne.n	8003cea <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003ce4:	4b6d      	ldr	r3, [pc, #436]	@ (8003e9c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003ce6:	60bb      	str	r3, [r7, #8]
 8003ce8:	e001      	b.n	8003cee <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003cea:	2300      	movs	r3, #0
 8003cec:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d10b      	bne.n	8003d0c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cf8:	f043 0220 	orr.w	r2, r3, #32
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e0be      	b.n	8003e8a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7ff ff4f 	bl	8003bb2 <LL_ADC_REG_IsConversionOngoing>
 8003d14:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7ff ff49 	bl	8003bb2 <LL_ADC_REG_IsConversionOngoing>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f040 80a0 	bne.w	8003e68 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003d28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f040 809c 	bne.w	8003e68 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d38:	d004      	beq.n	8003d44 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a55      	ldr	r2, [pc, #340]	@ (8003e94 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d101      	bne.n	8003d48 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003d44:	4b56      	ldr	r3, [pc, #344]	@ (8003ea0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003d46:	e000      	b.n	8003d4a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003d48:	4b56      	ldr	r3, [pc, #344]	@ (8003ea4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003d4a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d04b      	beq.n	8003dec <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003d54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	6859      	ldr	r1, [r3, #4]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003d66:	035b      	lsls	r3, r3, #13
 8003d68:	430b      	orrs	r3, r1
 8003d6a:	431a      	orrs	r2, r3
 8003d6c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d6e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d78:	d004      	beq.n	8003d84 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a45      	ldr	r2, [pc, #276]	@ (8003e94 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d10f      	bne.n	8003da4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003d84:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003d88:	f7ff fed3 	bl	8003b32 <LL_ADC_IsEnabled>
 8003d8c:	4604      	mov	r4, r0
 8003d8e:	4841      	ldr	r0, [pc, #260]	@ (8003e94 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003d90:	f7ff fecf 	bl	8003b32 <LL_ADC_IsEnabled>
 8003d94:	4603      	mov	r3, r0
 8003d96:	4323      	orrs	r3, r4
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	bf0c      	ite	eq
 8003d9c:	2301      	moveq	r3, #1
 8003d9e:	2300      	movne	r3, #0
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	e012      	b.n	8003dca <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003da4:	483c      	ldr	r0, [pc, #240]	@ (8003e98 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003da6:	f7ff fec4 	bl	8003b32 <LL_ADC_IsEnabled>
 8003daa:	4604      	mov	r4, r0
 8003dac:	483b      	ldr	r0, [pc, #236]	@ (8003e9c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003dae:	f7ff fec0 	bl	8003b32 <LL_ADC_IsEnabled>
 8003db2:	4603      	mov	r3, r0
 8003db4:	431c      	orrs	r4, r3
 8003db6:	483c      	ldr	r0, [pc, #240]	@ (8003ea8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003db8:	f7ff febb 	bl	8003b32 <LL_ADC_IsEnabled>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	4323      	orrs	r3, r4
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	bf0c      	ite	eq
 8003dc4:	2301      	moveq	r3, #1
 8003dc6:	2300      	movne	r3, #0
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d056      	beq.n	8003e7c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003dce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003dd6:	f023 030f 	bic.w	r3, r3, #15
 8003dda:	683a      	ldr	r2, [r7, #0]
 8003ddc:	6811      	ldr	r1, [r2, #0]
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	6892      	ldr	r2, [r2, #8]
 8003de2:	430a      	orrs	r2, r1
 8003de4:	431a      	orrs	r2, r3
 8003de6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003de8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003dea:	e047      	b.n	8003e7c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003dec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003df4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003df6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e00:	d004      	beq.n	8003e0c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a23      	ldr	r2, [pc, #140]	@ (8003e94 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d10f      	bne.n	8003e2c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003e0c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003e10:	f7ff fe8f 	bl	8003b32 <LL_ADC_IsEnabled>
 8003e14:	4604      	mov	r4, r0
 8003e16:	481f      	ldr	r0, [pc, #124]	@ (8003e94 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003e18:	f7ff fe8b 	bl	8003b32 <LL_ADC_IsEnabled>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	4323      	orrs	r3, r4
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	bf0c      	ite	eq
 8003e24:	2301      	moveq	r3, #1
 8003e26:	2300      	movne	r3, #0
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	e012      	b.n	8003e52 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003e2c:	481a      	ldr	r0, [pc, #104]	@ (8003e98 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003e2e:	f7ff fe80 	bl	8003b32 <LL_ADC_IsEnabled>
 8003e32:	4604      	mov	r4, r0
 8003e34:	4819      	ldr	r0, [pc, #100]	@ (8003e9c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003e36:	f7ff fe7c 	bl	8003b32 <LL_ADC_IsEnabled>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	431c      	orrs	r4, r3
 8003e3e:	481a      	ldr	r0, [pc, #104]	@ (8003ea8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003e40:	f7ff fe77 	bl	8003b32 <LL_ADC_IsEnabled>
 8003e44:	4603      	mov	r3, r0
 8003e46:	4323      	orrs	r3, r4
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	bf0c      	ite	eq
 8003e4c:	2301      	moveq	r3, #1
 8003e4e:	2300      	movne	r3, #0
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d012      	beq.n	8003e7c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003e56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003e5e:	f023 030f 	bic.w	r3, r3, #15
 8003e62:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003e64:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003e66:	e009      	b.n	8003e7c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e6c:	f043 0220 	orr.w	r2, r3, #32
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003e7a:	e000      	b.n	8003e7e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003e7c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003e86:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3784      	adds	r7, #132	@ 0x84
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd90      	pop	{r4, r7, pc}
 8003e92:	bf00      	nop
 8003e94:	50000100 	.word	0x50000100
 8003e98:	50000400 	.word	0x50000400
 8003e9c:	50000500 	.word	0x50000500
 8003ea0:	50000300 	.word	0x50000300
 8003ea4:	50000700 	.word	0x50000700
 8003ea8:	50000600 	.word	0x50000600

08003eac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f003 0307 	and.w	r3, r3, #7
 8003eba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8003ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ec8:	4013      	ands	r3, r2
 8003eca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ed4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003ed8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003edc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ede:	4a04      	ldr	r2, [pc, #16]	@ (8003ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	60d3      	str	r3, [r2, #12]
}
 8003ee4:	bf00      	nop
 8003ee6:	3714      	adds	r7, #20
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	e000ed00 	.word	0xe000ed00

08003ef4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ef8:	4b04      	ldr	r3, [pc, #16]	@ (8003f0c <__NVIC_GetPriorityGrouping+0x18>)
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	0a1b      	lsrs	r3, r3, #8
 8003efe:	f003 0307 	and.w	r3, r3, #7
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr
 8003f0c:	e000ed00 	.word	0xe000ed00

08003f10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	4603      	mov	r3, r0
 8003f18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	db0b      	blt.n	8003f3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f22:	79fb      	ldrb	r3, [r7, #7]
 8003f24:	f003 021f 	and.w	r2, r3, #31
 8003f28:	4907      	ldr	r1, [pc, #28]	@ (8003f48 <__NVIC_EnableIRQ+0x38>)
 8003f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f2e:	095b      	lsrs	r3, r3, #5
 8003f30:	2001      	movs	r0, #1
 8003f32:	fa00 f202 	lsl.w	r2, r0, r2
 8003f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f3a:	bf00      	nop
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	e000e100 	.word	0xe000e100

08003f4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	4603      	mov	r3, r0
 8003f54:	6039      	str	r1, [r7, #0]
 8003f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	db0a      	blt.n	8003f76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	b2da      	uxtb	r2, r3
 8003f64:	490c      	ldr	r1, [pc, #48]	@ (8003f98 <__NVIC_SetPriority+0x4c>)
 8003f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f6a:	0112      	lsls	r2, r2, #4
 8003f6c:	b2d2      	uxtb	r2, r2
 8003f6e:	440b      	add	r3, r1
 8003f70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f74:	e00a      	b.n	8003f8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	b2da      	uxtb	r2, r3
 8003f7a:	4908      	ldr	r1, [pc, #32]	@ (8003f9c <__NVIC_SetPriority+0x50>)
 8003f7c:	79fb      	ldrb	r3, [r7, #7]
 8003f7e:	f003 030f 	and.w	r3, r3, #15
 8003f82:	3b04      	subs	r3, #4
 8003f84:	0112      	lsls	r2, r2, #4
 8003f86:	b2d2      	uxtb	r2, r2
 8003f88:	440b      	add	r3, r1
 8003f8a:	761a      	strb	r2, [r3, #24]
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr
 8003f98:	e000e100 	.word	0xe000e100
 8003f9c:	e000ed00 	.word	0xe000ed00

08003fa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b089      	sub	sp, #36	@ 0x24
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f003 0307 	and.w	r3, r3, #7
 8003fb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	f1c3 0307 	rsb	r3, r3, #7
 8003fba:	2b04      	cmp	r3, #4
 8003fbc:	bf28      	it	cs
 8003fbe:	2304      	movcs	r3, #4
 8003fc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	3304      	adds	r3, #4
 8003fc6:	2b06      	cmp	r3, #6
 8003fc8:	d902      	bls.n	8003fd0 <NVIC_EncodePriority+0x30>
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	3b03      	subs	r3, #3
 8003fce:	e000      	b.n	8003fd2 <NVIC_EncodePriority+0x32>
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	fa02 f303 	lsl.w	r3, r2, r3
 8003fde:	43da      	mvns	r2, r3
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	401a      	ands	r2, r3
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff2:	43d9      	mvns	r1, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ff8:	4313      	orrs	r3, r2
         );
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3724      	adds	r7, #36	@ 0x24
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
	...

08004008 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3b01      	subs	r3, #1
 8004014:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004018:	d301      	bcc.n	800401e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800401a:	2301      	movs	r3, #1
 800401c:	e00f      	b.n	800403e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800401e:	4a0a      	ldr	r2, [pc, #40]	@ (8004048 <SysTick_Config+0x40>)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	3b01      	subs	r3, #1
 8004024:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004026:	210f      	movs	r1, #15
 8004028:	f04f 30ff 	mov.w	r0, #4294967295
 800402c:	f7ff ff8e 	bl	8003f4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004030:	4b05      	ldr	r3, [pc, #20]	@ (8004048 <SysTick_Config+0x40>)
 8004032:	2200      	movs	r2, #0
 8004034:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004036:	4b04      	ldr	r3, [pc, #16]	@ (8004048 <SysTick_Config+0x40>)
 8004038:	2207      	movs	r2, #7
 800403a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	e000e010 	.word	0xe000e010

0800404c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f7ff ff29 	bl	8003eac <__NVIC_SetPriorityGrouping>
}
 800405a:	bf00      	nop
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b086      	sub	sp, #24
 8004066:	af00      	add	r7, sp, #0
 8004068:	4603      	mov	r3, r0
 800406a:	60b9      	str	r1, [r7, #8]
 800406c:	607a      	str	r2, [r7, #4]
 800406e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004070:	f7ff ff40 	bl	8003ef4 <__NVIC_GetPriorityGrouping>
 8004074:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	68b9      	ldr	r1, [r7, #8]
 800407a:	6978      	ldr	r0, [r7, #20]
 800407c:	f7ff ff90 	bl	8003fa0 <NVIC_EncodePriority>
 8004080:	4602      	mov	r2, r0
 8004082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004086:	4611      	mov	r1, r2
 8004088:	4618      	mov	r0, r3
 800408a:	f7ff ff5f 	bl	8003f4c <__NVIC_SetPriority>
}
 800408e:	bf00      	nop
 8004090:	3718      	adds	r7, #24
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b082      	sub	sp, #8
 800409a:	af00      	add	r7, sp, #0
 800409c:	4603      	mov	r3, r0
 800409e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7ff ff33 	bl	8003f10 <__NVIC_EnableIRQ>
}
 80040aa:	bf00      	nop
 80040ac:	3708      	adds	r7, #8
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b082      	sub	sp, #8
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f7ff ffa4 	bl	8004008 <SysTick_Config>
 80040c0:	4603      	mov	r3, r0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3708      	adds	r7, #8
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
	...

080040cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e08d      	b.n	80041fa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	461a      	mov	r2, r3
 80040e4:	4b47      	ldr	r3, [pc, #284]	@ (8004204 <HAL_DMA_Init+0x138>)
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d80f      	bhi.n	800410a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	461a      	mov	r2, r3
 80040f0:	4b45      	ldr	r3, [pc, #276]	@ (8004208 <HAL_DMA_Init+0x13c>)
 80040f2:	4413      	add	r3, r2
 80040f4:	4a45      	ldr	r2, [pc, #276]	@ (800420c <HAL_DMA_Init+0x140>)
 80040f6:	fba2 2303 	umull	r2, r3, r2, r3
 80040fa:	091b      	lsrs	r3, r3, #4
 80040fc:	009a      	lsls	r2, r3, #2
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a42      	ldr	r2, [pc, #264]	@ (8004210 <HAL_DMA_Init+0x144>)
 8004106:	641a      	str	r2, [r3, #64]	@ 0x40
 8004108:	e00e      	b.n	8004128 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	461a      	mov	r2, r3
 8004110:	4b40      	ldr	r3, [pc, #256]	@ (8004214 <HAL_DMA_Init+0x148>)
 8004112:	4413      	add	r3, r2
 8004114:	4a3d      	ldr	r2, [pc, #244]	@ (800420c <HAL_DMA_Init+0x140>)
 8004116:	fba2 2303 	umull	r2, r3, r2, r3
 800411a:	091b      	lsrs	r3, r3, #4
 800411c:	009a      	lsls	r2, r3, #2
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a3c      	ldr	r2, [pc, #240]	@ (8004218 <HAL_DMA_Init+0x14c>)
 8004126:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2202      	movs	r2, #2
 800412c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800413e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004142:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800414c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004158:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004164:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a1b      	ldr	r3, [r3, #32]
 800416a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	4313      	orrs	r3, r2
 8004170:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 f8fe 	bl	800437c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004188:	d102      	bne.n	8004190 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685a      	ldr	r2, [r3, #4]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004198:	b2d2      	uxtb	r2, r2
 800419a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80041a4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d010      	beq.n	80041d0 <HAL_DMA_Init+0x104>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	2b04      	cmp	r3, #4
 80041b4:	d80c      	bhi.n	80041d0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 f91e 	bl	80043f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041c0:	2200      	movs	r2, #0
 80041c2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80041cc:	605a      	str	r2, [r3, #4]
 80041ce:	e008      	b.n	80041e2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	40020407 	.word	0x40020407
 8004208:	bffdfff8 	.word	0xbffdfff8
 800420c:	cccccccd 	.word	0xcccccccd
 8004210:	40020000 	.word	0x40020000
 8004214:	bffdfbf8 	.word	0xbffdfbf8
 8004218:	40020400 	.word	0x40020400

0800421c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004238:	f003 031f 	and.w	r3, r3, #31
 800423c:	2204      	movs	r2, #4
 800423e:	409a      	lsls	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	4013      	ands	r3, r2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d026      	beq.n	8004296 <HAL_DMA_IRQHandler+0x7a>
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	f003 0304 	and.w	r3, r3, #4
 800424e:	2b00      	cmp	r3, #0
 8004250:	d021      	beq.n	8004296 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0320 	and.w	r3, r3, #32
 800425c:	2b00      	cmp	r3, #0
 800425e:	d107      	bne.n	8004270 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f022 0204 	bic.w	r2, r2, #4
 800426e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004274:	f003 021f 	and.w	r2, r3, #31
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800427c:	2104      	movs	r1, #4
 800427e:	fa01 f202 	lsl.w	r2, r1, r2
 8004282:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004288:	2b00      	cmp	r3, #0
 800428a:	d071      	beq.n	8004370 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004294:	e06c      	b.n	8004370 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800429a:	f003 031f 	and.w	r3, r3, #31
 800429e:	2202      	movs	r2, #2
 80042a0:	409a      	lsls	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	4013      	ands	r3, r2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d02e      	beq.n	8004308 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d029      	beq.n	8004308 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0320 	and.w	r3, r3, #32
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10b      	bne.n	80042da <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 020a 	bic.w	r2, r2, #10
 80042d0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042de:	f003 021f 	and.w	r2, r3, #31
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e6:	2102      	movs	r1, #2
 80042e8:	fa01 f202 	lsl.w	r2, r1, r2
 80042ec:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d038      	beq.n	8004370 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004306:	e033      	b.n	8004370 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800430c:	f003 031f 	and.w	r3, r3, #31
 8004310:	2208      	movs	r2, #8
 8004312:	409a      	lsls	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	4013      	ands	r3, r2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d02a      	beq.n	8004372 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	f003 0308 	and.w	r3, r3, #8
 8004322:	2b00      	cmp	r3, #0
 8004324:	d025      	beq.n	8004372 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 020e 	bic.w	r2, r2, #14
 8004334:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800433a:	f003 021f 	and.w	r2, r3, #31
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004342:	2101      	movs	r1, #1
 8004344:	fa01 f202 	lsl.w	r2, r1, r2
 8004348:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2201      	movs	r2, #1
 800434e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004364:	2b00      	cmp	r3, #0
 8004366:	d004      	beq.n	8004372 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004370:	bf00      	nop
 8004372:	bf00      	nop
}
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
	...

0800437c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800437c:	b480      	push	{r7}
 800437e:	b087      	sub	sp, #28
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	461a      	mov	r2, r3
 800438a:	4b16      	ldr	r3, [pc, #88]	@ (80043e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800438c:	429a      	cmp	r2, r3
 800438e:	d802      	bhi.n	8004396 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004390:	4b15      	ldr	r3, [pc, #84]	@ (80043e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004392:	617b      	str	r3, [r7, #20]
 8004394:	e001      	b.n	800439a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004396:	4b15      	ldr	r3, [pc, #84]	@ (80043ec <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004398:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	3b08      	subs	r3, #8
 80043a6:	4a12      	ldr	r2, [pc, #72]	@ (80043f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80043a8:	fba2 2303 	umull	r2, r3, r2, r3
 80043ac:	091b      	lsrs	r3, r3, #4
 80043ae:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043b4:	089b      	lsrs	r3, r3, #2
 80043b6:	009a      	lsls	r2, r3, #2
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	4413      	add	r3, r2
 80043bc:	461a      	mov	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a0b      	ldr	r2, [pc, #44]	@ (80043f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80043c6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f003 031f 	and.w	r3, r3, #31
 80043ce:	2201      	movs	r2, #1
 80043d0:	409a      	lsls	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80043d6:	bf00      	nop
 80043d8:	371c      	adds	r7, #28
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	40020407 	.word	0x40020407
 80043e8:	40020800 	.word	0x40020800
 80043ec:	40020820 	.word	0x40020820
 80043f0:	cccccccd 	.word	0xcccccccd
 80043f4:	40020880 	.word	0x40020880

080043f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	b2db      	uxtb	r3, r3
 8004406:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	4b0b      	ldr	r3, [pc, #44]	@ (8004438 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800440c:	4413      	add	r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	461a      	mov	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a08      	ldr	r2, [pc, #32]	@ (800443c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800441a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	3b01      	subs	r3, #1
 8004420:	f003 031f 	and.w	r3, r3, #31
 8004424:	2201      	movs	r2, #1
 8004426:	409a      	lsls	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800442c:	bf00      	nop
 800442e:	3714      	adds	r7, #20
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr
 8004438:	1000823f 	.word	0x1000823f
 800443c:	40020940 	.word	0x40020940

08004440 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004440:	b480      	push	{r7}
 8004442:	b087      	sub	sp, #28
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800444a:	2300      	movs	r3, #0
 800444c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800444e:	e15a      	b.n	8004706 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	2101      	movs	r1, #1
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	fa01 f303 	lsl.w	r3, r1, r3
 800445c:	4013      	ands	r3, r2
 800445e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2b00      	cmp	r3, #0
 8004464:	f000 814c 	beq.w	8004700 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f003 0303 	and.w	r3, r3, #3
 8004470:	2b01      	cmp	r3, #1
 8004472:	d005      	beq.n	8004480 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800447c:	2b02      	cmp	r3, #2
 800447e:	d130      	bne.n	80044e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	2203      	movs	r2, #3
 800448c:	fa02 f303 	lsl.w	r3, r2, r3
 8004490:	43db      	mvns	r3, r3
 8004492:	693a      	ldr	r2, [r7, #16]
 8004494:	4013      	ands	r3, r2
 8004496:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	68da      	ldr	r2, [r3, #12]
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	005b      	lsls	r3, r3, #1
 80044a0:	fa02 f303 	lsl.w	r3, r2, r3
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044b6:	2201      	movs	r2, #1
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	fa02 f303 	lsl.w	r3, r2, r3
 80044be:	43db      	mvns	r3, r3
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	4013      	ands	r3, r2
 80044c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	091b      	lsrs	r3, r3, #4
 80044cc:	f003 0201 	and.w	r2, r3, #1
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	fa02 f303 	lsl.w	r3, r2, r3
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	4313      	orrs	r3, r2
 80044da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f003 0303 	and.w	r3, r3, #3
 80044ea:	2b03      	cmp	r3, #3
 80044ec:	d017      	beq.n	800451e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	2203      	movs	r2, #3
 80044fa:	fa02 f303 	lsl.w	r3, r2, r3
 80044fe:	43db      	mvns	r3, r3
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	4013      	ands	r3, r2
 8004504:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	689a      	ldr	r2, [r3, #8]
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	fa02 f303 	lsl.w	r3, r2, r3
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	4313      	orrs	r3, r2
 8004516:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f003 0303 	and.w	r3, r3, #3
 8004526:	2b02      	cmp	r3, #2
 8004528:	d123      	bne.n	8004572 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	08da      	lsrs	r2, r3, #3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	3208      	adds	r2, #8
 8004532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004536:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	f003 0307 	and.w	r3, r3, #7
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	220f      	movs	r2, #15
 8004542:	fa02 f303 	lsl.w	r3, r2, r3
 8004546:	43db      	mvns	r3, r3
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	4013      	ands	r3, r2
 800454c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	691a      	ldr	r2, [r3, #16]
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	f003 0307 	and.w	r3, r3, #7
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	fa02 f303 	lsl.w	r3, r2, r3
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	4313      	orrs	r3, r2
 8004562:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	08da      	lsrs	r2, r3, #3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	3208      	adds	r2, #8
 800456c:	6939      	ldr	r1, [r7, #16]
 800456e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	005b      	lsls	r3, r3, #1
 800457c:	2203      	movs	r2, #3
 800457e:	fa02 f303 	lsl.w	r3, r2, r3
 8004582:	43db      	mvns	r3, r3
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	4013      	ands	r3, r2
 8004588:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f003 0203 	and.w	r2, r3, #3
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	005b      	lsls	r3, r3, #1
 8004596:	fa02 f303 	lsl.w	r3, r2, r3
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	4313      	orrs	r3, r2
 800459e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	f000 80a6 	beq.w	8004700 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045b4:	4b5b      	ldr	r3, [pc, #364]	@ (8004724 <HAL_GPIO_Init+0x2e4>)
 80045b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045b8:	4a5a      	ldr	r2, [pc, #360]	@ (8004724 <HAL_GPIO_Init+0x2e4>)
 80045ba:	f043 0301 	orr.w	r3, r3, #1
 80045be:	6613      	str	r3, [r2, #96]	@ 0x60
 80045c0:	4b58      	ldr	r3, [pc, #352]	@ (8004724 <HAL_GPIO_Init+0x2e4>)
 80045c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	60bb      	str	r3, [r7, #8]
 80045ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80045cc:	4a56      	ldr	r2, [pc, #344]	@ (8004728 <HAL_GPIO_Init+0x2e8>)
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	089b      	lsrs	r3, r3, #2
 80045d2:	3302      	adds	r3, #2
 80045d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	f003 0303 	and.w	r3, r3, #3
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	220f      	movs	r2, #15
 80045e4:	fa02 f303 	lsl.w	r3, r2, r3
 80045e8:	43db      	mvns	r3, r3
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	4013      	ands	r3, r2
 80045ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80045f6:	d01f      	beq.n	8004638 <HAL_GPIO_Init+0x1f8>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a4c      	ldr	r2, [pc, #304]	@ (800472c <HAL_GPIO_Init+0x2ec>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d019      	beq.n	8004634 <HAL_GPIO_Init+0x1f4>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a4b      	ldr	r2, [pc, #300]	@ (8004730 <HAL_GPIO_Init+0x2f0>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d013      	beq.n	8004630 <HAL_GPIO_Init+0x1f0>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a4a      	ldr	r2, [pc, #296]	@ (8004734 <HAL_GPIO_Init+0x2f4>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d00d      	beq.n	800462c <HAL_GPIO_Init+0x1ec>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a49      	ldr	r2, [pc, #292]	@ (8004738 <HAL_GPIO_Init+0x2f8>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d007      	beq.n	8004628 <HAL_GPIO_Init+0x1e8>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a48      	ldr	r2, [pc, #288]	@ (800473c <HAL_GPIO_Init+0x2fc>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d101      	bne.n	8004624 <HAL_GPIO_Init+0x1e4>
 8004620:	2305      	movs	r3, #5
 8004622:	e00a      	b.n	800463a <HAL_GPIO_Init+0x1fa>
 8004624:	2306      	movs	r3, #6
 8004626:	e008      	b.n	800463a <HAL_GPIO_Init+0x1fa>
 8004628:	2304      	movs	r3, #4
 800462a:	e006      	b.n	800463a <HAL_GPIO_Init+0x1fa>
 800462c:	2303      	movs	r3, #3
 800462e:	e004      	b.n	800463a <HAL_GPIO_Init+0x1fa>
 8004630:	2302      	movs	r3, #2
 8004632:	e002      	b.n	800463a <HAL_GPIO_Init+0x1fa>
 8004634:	2301      	movs	r3, #1
 8004636:	e000      	b.n	800463a <HAL_GPIO_Init+0x1fa>
 8004638:	2300      	movs	r3, #0
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	f002 0203 	and.w	r2, r2, #3
 8004640:	0092      	lsls	r2, r2, #2
 8004642:	4093      	lsls	r3, r2
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	4313      	orrs	r3, r2
 8004648:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800464a:	4937      	ldr	r1, [pc, #220]	@ (8004728 <HAL_GPIO_Init+0x2e8>)
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	089b      	lsrs	r3, r3, #2
 8004650:	3302      	adds	r3, #2
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004658:	4b39      	ldr	r3, [pc, #228]	@ (8004740 <HAL_GPIO_Init+0x300>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	43db      	mvns	r3, r3
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	4013      	ands	r3, r2
 8004666:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d003      	beq.n	800467c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	4313      	orrs	r3, r2
 800467a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800467c:	4a30      	ldr	r2, [pc, #192]	@ (8004740 <HAL_GPIO_Init+0x300>)
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004682:	4b2f      	ldr	r3, [pc, #188]	@ (8004740 <HAL_GPIO_Init+0x300>)
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	43db      	mvns	r3, r3
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	4013      	ands	r3, r2
 8004690:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d003      	beq.n	80046a6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80046a6:	4a26      	ldr	r2, [pc, #152]	@ (8004740 <HAL_GPIO_Init+0x300>)
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80046ac:	4b24      	ldr	r3, [pc, #144]	@ (8004740 <HAL_GPIO_Init+0x300>)
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	43db      	mvns	r3, r3
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	4013      	ands	r3, r2
 80046ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d003      	beq.n	80046d0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80046d0:	4a1b      	ldr	r2, [pc, #108]	@ (8004740 <HAL_GPIO_Init+0x300>)
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80046d6:	4b1a      	ldr	r3, [pc, #104]	@ (8004740 <HAL_GPIO_Init+0x300>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	43db      	mvns	r3, r3
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	4013      	ands	r3, r2
 80046e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d003      	beq.n	80046fa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80046fa:	4a11      	ldr	r2, [pc, #68]	@ (8004740 <HAL_GPIO_Init+0x300>)
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	3301      	adds	r3, #1
 8004704:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	fa22 f303 	lsr.w	r3, r2, r3
 8004710:	2b00      	cmp	r3, #0
 8004712:	f47f ae9d 	bne.w	8004450 <HAL_GPIO_Init+0x10>
  }
}
 8004716:	bf00      	nop
 8004718:	bf00      	nop
 800471a:	371c      	adds	r7, #28
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr
 8004724:	40021000 	.word	0x40021000
 8004728:	40010000 	.word	0x40010000
 800472c:	48000400 	.word	0x48000400
 8004730:	48000800 	.word	0x48000800
 8004734:	48000c00 	.word	0x48000c00
 8004738:	48001000 	.word	0x48001000
 800473c:	48001400 	.word	0x48001400
 8004740:	40010400 	.word	0x40010400

08004744 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	460b      	mov	r3, r1
 800474e:	807b      	strh	r3, [r7, #2]
 8004750:	4613      	mov	r3, r2
 8004752:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004754:	787b      	ldrb	r3, [r7, #1]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800475a:	887a      	ldrh	r2, [r7, #2]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004760:	e002      	b.n	8004768 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004762:	887a      	ldrh	r2, [r7, #2]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	460b      	mov	r3, r1
 800477e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004786:	887a      	ldrh	r2, [r7, #2]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	4013      	ands	r3, r2
 800478c:	041a      	lsls	r2, r3, #16
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	43d9      	mvns	r1, r3
 8004792:	887b      	ldrh	r3, [r7, #2]
 8004794:	400b      	ands	r3, r1
 8004796:	431a      	orrs	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	619a      	str	r2, [r3, #24]
}
 800479c:	bf00      	nop
 800479e:	3714      	adds	r7, #20
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	4603      	mov	r3, r0
 80047b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80047b2:	4b08      	ldr	r3, [pc, #32]	@ (80047d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047b4:	695a      	ldr	r2, [r3, #20]
 80047b6:	88fb      	ldrh	r3, [r7, #6]
 80047b8:	4013      	ands	r3, r2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d006      	beq.n	80047cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80047be:	4a05      	ldr	r2, [pc, #20]	@ (80047d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047c0:	88fb      	ldrh	r3, [r7, #6]
 80047c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80047c4:	88fb      	ldrh	r3, [r7, #6]
 80047c6:	4618      	mov	r0, r3
 80047c8:	f7fd f9f8 	bl	8001bbc <HAL_GPIO_EXTI_Callback>
  }
}
 80047cc:	bf00      	nop
 80047ce:	3708      	adds	r7, #8
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	40010400 	.word	0x40010400

080047d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d141      	bne.n	800486a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80047e6:	4b4b      	ldr	r3, [pc, #300]	@ (8004914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80047ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047f2:	d131      	bne.n	8004858 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047f4:	4b47      	ldr	r3, [pc, #284]	@ (8004914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047fa:	4a46      	ldr	r2, [pc, #280]	@ (8004914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004800:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004804:	4b43      	ldr	r3, [pc, #268]	@ (8004914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800480c:	4a41      	ldr	r2, [pc, #260]	@ (8004914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800480e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004812:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004814:	4b40      	ldr	r3, [pc, #256]	@ (8004918 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2232      	movs	r2, #50	@ 0x32
 800481a:	fb02 f303 	mul.w	r3, r2, r3
 800481e:	4a3f      	ldr	r2, [pc, #252]	@ (800491c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004820:	fba2 2303 	umull	r2, r3, r2, r3
 8004824:	0c9b      	lsrs	r3, r3, #18
 8004826:	3301      	adds	r3, #1
 8004828:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800482a:	e002      	b.n	8004832 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	3b01      	subs	r3, #1
 8004830:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004832:	4b38      	ldr	r3, [pc, #224]	@ (8004914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800483a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800483e:	d102      	bne.n	8004846 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1f2      	bne.n	800482c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004846:	4b33      	ldr	r3, [pc, #204]	@ (8004914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800484e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004852:	d158      	bne.n	8004906 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e057      	b.n	8004908 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004858:	4b2e      	ldr	r3, [pc, #184]	@ (8004914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800485a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800485e:	4a2d      	ldr	r2, [pc, #180]	@ (8004914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004860:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004864:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004868:	e04d      	b.n	8004906 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004870:	d141      	bne.n	80048f6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004872:	4b28      	ldr	r3, [pc, #160]	@ (8004914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800487a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800487e:	d131      	bne.n	80048e4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004880:	4b24      	ldr	r3, [pc, #144]	@ (8004914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004882:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004886:	4a23      	ldr	r2, [pc, #140]	@ (8004914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004888:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800488c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004890:	4b20      	ldr	r3, [pc, #128]	@ (8004914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004898:	4a1e      	ldr	r2, [pc, #120]	@ (8004914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800489a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800489e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80048a0:	4b1d      	ldr	r3, [pc, #116]	@ (8004918 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2232      	movs	r2, #50	@ 0x32
 80048a6:	fb02 f303 	mul.w	r3, r2, r3
 80048aa:	4a1c      	ldr	r2, [pc, #112]	@ (800491c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80048ac:	fba2 2303 	umull	r2, r3, r2, r3
 80048b0:	0c9b      	lsrs	r3, r3, #18
 80048b2:	3301      	adds	r3, #1
 80048b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048b6:	e002      	b.n	80048be <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	3b01      	subs	r3, #1
 80048bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048be:	4b15      	ldr	r3, [pc, #84]	@ (8004914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048ca:	d102      	bne.n	80048d2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1f2      	bne.n	80048b8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048d2:	4b10      	ldr	r3, [pc, #64]	@ (8004914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048de:	d112      	bne.n	8004906 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e011      	b.n	8004908 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048ea:	4a0a      	ldr	r2, [pc, #40]	@ (8004914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80048f4:	e007      	b.n	8004906 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80048f6:	4b07      	ldr	r3, [pc, #28]	@ (8004914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80048fe:	4a05      	ldr	r2, [pc, #20]	@ (8004914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004900:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004904:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3714      	adds	r7, #20
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr
 8004914:	40007000 	.word	0x40007000
 8004918:	20000070 	.word	0x20000070
 800491c:	431bde83 	.word	0x431bde83

08004920 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004920:	b480      	push	{r7}
 8004922:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004924:	4b05      	ldr	r3, [pc, #20]	@ (800493c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	4a04      	ldr	r2, [pc, #16]	@ (800493c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800492a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800492e:	6093      	str	r3, [r2, #8]
}
 8004930:	bf00      	nop
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	40007000 	.word	0x40007000

08004940 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b088      	sub	sp, #32
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e2fe      	b.n	8004f50 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b00      	cmp	r3, #0
 800495c:	d075      	beq.n	8004a4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800495e:	4b97      	ldr	r3, [pc, #604]	@ (8004bbc <HAL_RCC_OscConfig+0x27c>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f003 030c 	and.w	r3, r3, #12
 8004966:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004968:	4b94      	ldr	r3, [pc, #592]	@ (8004bbc <HAL_RCC_OscConfig+0x27c>)
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	f003 0303 	and.w	r3, r3, #3
 8004970:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	2b0c      	cmp	r3, #12
 8004976:	d102      	bne.n	800497e <HAL_RCC_OscConfig+0x3e>
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	2b03      	cmp	r3, #3
 800497c:	d002      	beq.n	8004984 <HAL_RCC_OscConfig+0x44>
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	2b08      	cmp	r3, #8
 8004982:	d10b      	bne.n	800499c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004984:	4b8d      	ldr	r3, [pc, #564]	@ (8004bbc <HAL_RCC_OscConfig+0x27c>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d05b      	beq.n	8004a48 <HAL_RCC_OscConfig+0x108>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d157      	bne.n	8004a48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e2d9      	b.n	8004f50 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049a4:	d106      	bne.n	80049b4 <HAL_RCC_OscConfig+0x74>
 80049a6:	4b85      	ldr	r3, [pc, #532]	@ (8004bbc <HAL_RCC_OscConfig+0x27c>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a84      	ldr	r2, [pc, #528]	@ (8004bbc <HAL_RCC_OscConfig+0x27c>)
 80049ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049b0:	6013      	str	r3, [r2, #0]
 80049b2:	e01d      	b.n	80049f0 <HAL_RCC_OscConfig+0xb0>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80049bc:	d10c      	bne.n	80049d8 <HAL_RCC_OscConfig+0x98>
 80049be:	4b7f      	ldr	r3, [pc, #508]	@ (8004bbc <HAL_RCC_OscConfig+0x27c>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a7e      	ldr	r2, [pc, #504]	@ (8004bbc <HAL_RCC_OscConfig+0x27c>)
 80049c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049c8:	6013      	str	r3, [r2, #0]
 80049ca:	4b7c      	ldr	r3, [pc, #496]	@ (8004bbc <HAL_RCC_OscConfig+0x27c>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a7b      	ldr	r2, [pc, #492]	@ (8004bbc <HAL_RCC_OscConfig+0x27c>)
 80049d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049d4:	6013      	str	r3, [r2, #0]
 80049d6:	e00b      	b.n	80049f0 <HAL_RCC_OscConfig+0xb0>
 80049d8:	4b78      	ldr	r3, [pc, #480]	@ (8004bbc <HAL_RCC_OscConfig+0x27c>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a77      	ldr	r2, [pc, #476]	@ (8004bbc <HAL_RCC_OscConfig+0x27c>)
 80049de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049e2:	6013      	str	r3, [r2, #0]
 80049e4:	4b75      	ldr	r3, [pc, #468]	@ (8004bbc <HAL_RCC_OscConfig+0x27c>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a74      	ldr	r2, [pc, #464]	@ (8004bbc <HAL_RCC_OscConfig+0x27c>)
 80049ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d013      	beq.n	8004a20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f8:	f7fd fc1a 	bl	8002230 <HAL_GetTick>
 80049fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049fe:	e008      	b.n	8004a12 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a00:	f7fd fc16 	bl	8002230 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b64      	cmp	r3, #100	@ 0x64
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e29e      	b.n	8004f50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a12:	4b6a      	ldr	r3, [pc, #424]	@ (8004bbc <HAL_RCC_OscConfig+0x27c>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d0f0      	beq.n	8004a00 <HAL_RCC_OscConfig+0xc0>
 8004a1e:	e014      	b.n	8004a4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a20:	f7fd fc06 	bl	8002230 <HAL_GetTick>
 8004a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a26:	e008      	b.n	8004a3a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a28:	f7fd fc02 	bl	8002230 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b64      	cmp	r3, #100	@ 0x64
 8004a34:	d901      	bls.n	8004a3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e28a      	b.n	8004f50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a3a:	4b60      	ldr	r3, [pc, #384]	@ (8004bbc <HAL_RCC_OscConfig+0x27c>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1f0      	bne.n	8004a28 <HAL_RCC_OscConfig+0xe8>
 8004a46:	e000      	b.n	8004a4a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d075      	beq.n	8004b42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a56:	4b59      	ldr	r3, [pc, #356]	@ (8004bbc <HAL_RCC_OscConfig+0x27c>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f003 030c 	and.w	r3, r3, #12
 8004a5e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a60:	4b56      	ldr	r3, [pc, #344]	@ (8004bbc <HAL_RCC_OscConfig+0x27c>)
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	f003 0303 	and.w	r3, r3, #3
 8004a68:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	2b0c      	cmp	r3, #12
 8004a6e:	d102      	bne.n	8004a76 <HAL_RCC_OscConfig+0x136>
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d002      	beq.n	8004a7c <HAL_RCC_OscConfig+0x13c>
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	2b04      	cmp	r3, #4
 8004a7a:	d11f      	bne.n	8004abc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a7c:	4b4f      	ldr	r3, [pc, #316]	@ (8004bbc <HAL_RCC_OscConfig+0x27c>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d005      	beq.n	8004a94 <HAL_RCC_OscConfig+0x154>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d101      	bne.n	8004a94 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e25d      	b.n	8004f50 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a94:	4b49      	ldr	r3, [pc, #292]	@ (8004bbc <HAL_RCC_OscConfig+0x27c>)
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	061b      	lsls	r3, r3, #24
 8004aa2:	4946      	ldr	r1, [pc, #280]	@ (8004bbc <HAL_RCC_OscConfig+0x27c>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004aa8:	4b45      	ldr	r3, [pc, #276]	@ (8004bc0 <HAL_RCC_OscConfig+0x280>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7fd fb73 	bl	8002198 <HAL_InitTick>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d043      	beq.n	8004b40 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e249      	b.n	8004f50 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d023      	beq.n	8004b0c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ac4:	4b3d      	ldr	r3, [pc, #244]	@ (8004bbc <HAL_RCC_OscConfig+0x27c>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a3c      	ldr	r2, [pc, #240]	@ (8004bbc <HAL_RCC_OscConfig+0x27c>)
 8004aca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ace:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad0:	f7fd fbae 	bl	8002230 <HAL_GetTick>
 8004ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ad6:	e008      	b.n	8004aea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ad8:	f7fd fbaa 	bl	8002230 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d901      	bls.n	8004aea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e232      	b.n	8004f50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004aea:	4b34      	ldr	r3, [pc, #208]	@ (8004bbc <HAL_RCC_OscConfig+0x27c>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d0f0      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004af6:	4b31      	ldr	r3, [pc, #196]	@ (8004bbc <HAL_RCC_OscConfig+0x27c>)
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	061b      	lsls	r3, r3, #24
 8004b04:	492d      	ldr	r1, [pc, #180]	@ (8004bbc <HAL_RCC_OscConfig+0x27c>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	604b      	str	r3, [r1, #4]
 8004b0a:	e01a      	b.n	8004b42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b0c:	4b2b      	ldr	r3, [pc, #172]	@ (8004bbc <HAL_RCC_OscConfig+0x27c>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a2a      	ldr	r2, [pc, #168]	@ (8004bbc <HAL_RCC_OscConfig+0x27c>)
 8004b12:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b18:	f7fd fb8a 	bl	8002230 <HAL_GetTick>
 8004b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b1e:	e008      	b.n	8004b32 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b20:	f7fd fb86 	bl	8002230 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d901      	bls.n	8004b32 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e20e      	b.n	8004f50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b32:	4b22      	ldr	r3, [pc, #136]	@ (8004bbc <HAL_RCC_OscConfig+0x27c>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1f0      	bne.n	8004b20 <HAL_RCC_OscConfig+0x1e0>
 8004b3e:	e000      	b.n	8004b42 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b40:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0308 	and.w	r3, r3, #8
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d041      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d01c      	beq.n	8004b90 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b56:	4b19      	ldr	r3, [pc, #100]	@ (8004bbc <HAL_RCC_OscConfig+0x27c>)
 8004b58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b5c:	4a17      	ldr	r2, [pc, #92]	@ (8004bbc <HAL_RCC_OscConfig+0x27c>)
 8004b5e:	f043 0301 	orr.w	r3, r3, #1
 8004b62:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b66:	f7fd fb63 	bl	8002230 <HAL_GetTick>
 8004b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b6c:	e008      	b.n	8004b80 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b6e:	f7fd fb5f 	bl	8002230 <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d901      	bls.n	8004b80 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e1e7      	b.n	8004f50 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b80:	4b0e      	ldr	r3, [pc, #56]	@ (8004bbc <HAL_RCC_OscConfig+0x27c>)
 8004b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d0ef      	beq.n	8004b6e <HAL_RCC_OscConfig+0x22e>
 8004b8e:	e020      	b.n	8004bd2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b90:	4b0a      	ldr	r3, [pc, #40]	@ (8004bbc <HAL_RCC_OscConfig+0x27c>)
 8004b92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b96:	4a09      	ldr	r2, [pc, #36]	@ (8004bbc <HAL_RCC_OscConfig+0x27c>)
 8004b98:	f023 0301 	bic.w	r3, r3, #1
 8004b9c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ba0:	f7fd fb46 	bl	8002230 <HAL_GetTick>
 8004ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ba6:	e00d      	b.n	8004bc4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ba8:	f7fd fb42 	bl	8002230 <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d906      	bls.n	8004bc4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e1ca      	b.n	8004f50 <HAL_RCC_OscConfig+0x610>
 8004bba:	bf00      	nop
 8004bbc:	40021000 	.word	0x40021000
 8004bc0:	20000074 	.word	0x20000074
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bc4:	4b8c      	ldr	r3, [pc, #560]	@ (8004df8 <HAL_RCC_OscConfig+0x4b8>)
 8004bc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bca:	f003 0302 	and.w	r3, r3, #2
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d1ea      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0304 	and.w	r3, r3, #4
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	f000 80a6 	beq.w	8004d2c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004be0:	2300      	movs	r3, #0
 8004be2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004be4:	4b84      	ldr	r3, [pc, #528]	@ (8004df8 <HAL_RCC_OscConfig+0x4b8>)
 8004be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004be8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d101      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x2b4>
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e000      	b.n	8004bf6 <HAL_RCC_OscConfig+0x2b6>
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00d      	beq.n	8004c16 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bfa:	4b7f      	ldr	r3, [pc, #508]	@ (8004df8 <HAL_RCC_OscConfig+0x4b8>)
 8004bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bfe:	4a7e      	ldr	r2, [pc, #504]	@ (8004df8 <HAL_RCC_OscConfig+0x4b8>)
 8004c00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c04:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c06:	4b7c      	ldr	r3, [pc, #496]	@ (8004df8 <HAL_RCC_OscConfig+0x4b8>)
 8004c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c0e:	60fb      	str	r3, [r7, #12]
 8004c10:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004c12:	2301      	movs	r3, #1
 8004c14:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c16:	4b79      	ldr	r3, [pc, #484]	@ (8004dfc <HAL_RCC_OscConfig+0x4bc>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d118      	bne.n	8004c54 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c22:	4b76      	ldr	r3, [pc, #472]	@ (8004dfc <HAL_RCC_OscConfig+0x4bc>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a75      	ldr	r2, [pc, #468]	@ (8004dfc <HAL_RCC_OscConfig+0x4bc>)
 8004c28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c2e:	f7fd faff 	bl	8002230 <HAL_GetTick>
 8004c32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c34:	e008      	b.n	8004c48 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c36:	f7fd fafb 	bl	8002230 <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d901      	bls.n	8004c48 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e183      	b.n	8004f50 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c48:	4b6c      	ldr	r3, [pc, #432]	@ (8004dfc <HAL_RCC_OscConfig+0x4bc>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d0f0      	beq.n	8004c36 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d108      	bne.n	8004c6e <HAL_RCC_OscConfig+0x32e>
 8004c5c:	4b66      	ldr	r3, [pc, #408]	@ (8004df8 <HAL_RCC_OscConfig+0x4b8>)
 8004c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c62:	4a65      	ldr	r2, [pc, #404]	@ (8004df8 <HAL_RCC_OscConfig+0x4b8>)
 8004c64:	f043 0301 	orr.w	r3, r3, #1
 8004c68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c6c:	e024      	b.n	8004cb8 <HAL_RCC_OscConfig+0x378>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	2b05      	cmp	r3, #5
 8004c74:	d110      	bne.n	8004c98 <HAL_RCC_OscConfig+0x358>
 8004c76:	4b60      	ldr	r3, [pc, #384]	@ (8004df8 <HAL_RCC_OscConfig+0x4b8>)
 8004c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c7c:	4a5e      	ldr	r2, [pc, #376]	@ (8004df8 <HAL_RCC_OscConfig+0x4b8>)
 8004c7e:	f043 0304 	orr.w	r3, r3, #4
 8004c82:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c86:	4b5c      	ldr	r3, [pc, #368]	@ (8004df8 <HAL_RCC_OscConfig+0x4b8>)
 8004c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c8c:	4a5a      	ldr	r2, [pc, #360]	@ (8004df8 <HAL_RCC_OscConfig+0x4b8>)
 8004c8e:	f043 0301 	orr.w	r3, r3, #1
 8004c92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c96:	e00f      	b.n	8004cb8 <HAL_RCC_OscConfig+0x378>
 8004c98:	4b57      	ldr	r3, [pc, #348]	@ (8004df8 <HAL_RCC_OscConfig+0x4b8>)
 8004c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c9e:	4a56      	ldr	r2, [pc, #344]	@ (8004df8 <HAL_RCC_OscConfig+0x4b8>)
 8004ca0:	f023 0301 	bic.w	r3, r3, #1
 8004ca4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ca8:	4b53      	ldr	r3, [pc, #332]	@ (8004df8 <HAL_RCC_OscConfig+0x4b8>)
 8004caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cae:	4a52      	ldr	r2, [pc, #328]	@ (8004df8 <HAL_RCC_OscConfig+0x4b8>)
 8004cb0:	f023 0304 	bic.w	r3, r3, #4
 8004cb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d016      	beq.n	8004cee <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cc0:	f7fd fab6 	bl	8002230 <HAL_GetTick>
 8004cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cc6:	e00a      	b.n	8004cde <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cc8:	f7fd fab2 	bl	8002230 <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e138      	b.n	8004f50 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cde:	4b46      	ldr	r3, [pc, #280]	@ (8004df8 <HAL_RCC_OscConfig+0x4b8>)
 8004ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ce4:	f003 0302 	and.w	r3, r3, #2
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d0ed      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x388>
 8004cec:	e015      	b.n	8004d1a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cee:	f7fd fa9f 	bl	8002230 <HAL_GetTick>
 8004cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cf4:	e00a      	b.n	8004d0c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cf6:	f7fd fa9b 	bl	8002230 <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d901      	bls.n	8004d0c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e121      	b.n	8004f50 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d0c:	4b3a      	ldr	r3, [pc, #232]	@ (8004df8 <HAL_RCC_OscConfig+0x4b8>)
 8004d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d12:	f003 0302 	and.w	r3, r3, #2
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d1ed      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d1a:	7ffb      	ldrb	r3, [r7, #31]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d105      	bne.n	8004d2c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d20:	4b35      	ldr	r3, [pc, #212]	@ (8004df8 <HAL_RCC_OscConfig+0x4b8>)
 8004d22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d24:	4a34      	ldr	r2, [pc, #208]	@ (8004df8 <HAL_RCC_OscConfig+0x4b8>)
 8004d26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d2a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0320 	and.w	r3, r3, #32
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d03c      	beq.n	8004db2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d01c      	beq.n	8004d7a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d40:	4b2d      	ldr	r3, [pc, #180]	@ (8004df8 <HAL_RCC_OscConfig+0x4b8>)
 8004d42:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d46:	4a2c      	ldr	r2, [pc, #176]	@ (8004df8 <HAL_RCC_OscConfig+0x4b8>)
 8004d48:	f043 0301 	orr.w	r3, r3, #1
 8004d4c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d50:	f7fd fa6e 	bl	8002230 <HAL_GetTick>
 8004d54:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d56:	e008      	b.n	8004d6a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d58:	f7fd fa6a 	bl	8002230 <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d901      	bls.n	8004d6a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e0f2      	b.n	8004f50 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d6a:	4b23      	ldr	r3, [pc, #140]	@ (8004df8 <HAL_RCC_OscConfig+0x4b8>)
 8004d6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d70:	f003 0302 	and.w	r3, r3, #2
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d0ef      	beq.n	8004d58 <HAL_RCC_OscConfig+0x418>
 8004d78:	e01b      	b.n	8004db2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d7a:	4b1f      	ldr	r3, [pc, #124]	@ (8004df8 <HAL_RCC_OscConfig+0x4b8>)
 8004d7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d80:	4a1d      	ldr	r2, [pc, #116]	@ (8004df8 <HAL_RCC_OscConfig+0x4b8>)
 8004d82:	f023 0301 	bic.w	r3, r3, #1
 8004d86:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d8a:	f7fd fa51 	bl	8002230 <HAL_GetTick>
 8004d8e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d90:	e008      	b.n	8004da4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d92:	f7fd fa4d 	bl	8002230 <HAL_GetTick>
 8004d96:	4602      	mov	r2, r0
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d901      	bls.n	8004da4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e0d5      	b.n	8004f50 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004da4:	4b14      	ldr	r3, [pc, #80]	@ (8004df8 <HAL_RCC_OscConfig+0x4b8>)
 8004da6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004daa:	f003 0302 	and.w	r3, r3, #2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1ef      	bne.n	8004d92 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	69db      	ldr	r3, [r3, #28]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f000 80c9 	beq.w	8004f4e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004dbc:	4b0e      	ldr	r3, [pc, #56]	@ (8004df8 <HAL_RCC_OscConfig+0x4b8>)
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f003 030c 	and.w	r3, r3, #12
 8004dc4:	2b0c      	cmp	r3, #12
 8004dc6:	f000 8083 	beq.w	8004ed0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	69db      	ldr	r3, [r3, #28]
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d15e      	bne.n	8004e90 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dd2:	4b09      	ldr	r3, [pc, #36]	@ (8004df8 <HAL_RCC_OscConfig+0x4b8>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a08      	ldr	r2, [pc, #32]	@ (8004df8 <HAL_RCC_OscConfig+0x4b8>)
 8004dd8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ddc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dde:	f7fd fa27 	bl	8002230 <HAL_GetTick>
 8004de2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004de4:	e00c      	b.n	8004e00 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004de6:	f7fd fa23 	bl	8002230 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d905      	bls.n	8004e00 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e0ab      	b.n	8004f50 <HAL_RCC_OscConfig+0x610>
 8004df8:	40021000 	.word	0x40021000
 8004dfc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e00:	4b55      	ldr	r3, [pc, #340]	@ (8004f58 <HAL_RCC_OscConfig+0x618>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1ec      	bne.n	8004de6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e0c:	4b52      	ldr	r3, [pc, #328]	@ (8004f58 <HAL_RCC_OscConfig+0x618>)
 8004e0e:	68da      	ldr	r2, [r3, #12]
 8004e10:	4b52      	ldr	r3, [pc, #328]	@ (8004f5c <HAL_RCC_OscConfig+0x61c>)
 8004e12:	4013      	ands	r3, r2
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	6a11      	ldr	r1, [r2, #32]
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004e1c:	3a01      	subs	r2, #1
 8004e1e:	0112      	lsls	r2, r2, #4
 8004e20:	4311      	orrs	r1, r2
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004e26:	0212      	lsls	r2, r2, #8
 8004e28:	4311      	orrs	r1, r2
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004e2e:	0852      	lsrs	r2, r2, #1
 8004e30:	3a01      	subs	r2, #1
 8004e32:	0552      	lsls	r2, r2, #21
 8004e34:	4311      	orrs	r1, r2
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004e3a:	0852      	lsrs	r2, r2, #1
 8004e3c:	3a01      	subs	r2, #1
 8004e3e:	0652      	lsls	r2, r2, #25
 8004e40:	4311      	orrs	r1, r2
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004e46:	06d2      	lsls	r2, r2, #27
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	4943      	ldr	r1, [pc, #268]	@ (8004f58 <HAL_RCC_OscConfig+0x618>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e50:	4b41      	ldr	r3, [pc, #260]	@ (8004f58 <HAL_RCC_OscConfig+0x618>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a40      	ldr	r2, [pc, #256]	@ (8004f58 <HAL_RCC_OscConfig+0x618>)
 8004e56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e5a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e5c:	4b3e      	ldr	r3, [pc, #248]	@ (8004f58 <HAL_RCC_OscConfig+0x618>)
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	4a3d      	ldr	r2, [pc, #244]	@ (8004f58 <HAL_RCC_OscConfig+0x618>)
 8004e62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e66:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e68:	f7fd f9e2 	bl	8002230 <HAL_GetTick>
 8004e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e6e:	e008      	b.n	8004e82 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e70:	f7fd f9de 	bl	8002230 <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d901      	bls.n	8004e82 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e066      	b.n	8004f50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e82:	4b35      	ldr	r3, [pc, #212]	@ (8004f58 <HAL_RCC_OscConfig+0x618>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d0f0      	beq.n	8004e70 <HAL_RCC_OscConfig+0x530>
 8004e8e:	e05e      	b.n	8004f4e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e90:	4b31      	ldr	r3, [pc, #196]	@ (8004f58 <HAL_RCC_OscConfig+0x618>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a30      	ldr	r2, [pc, #192]	@ (8004f58 <HAL_RCC_OscConfig+0x618>)
 8004e96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e9c:	f7fd f9c8 	bl	8002230 <HAL_GetTick>
 8004ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ea2:	e008      	b.n	8004eb6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ea4:	f7fd f9c4 	bl	8002230 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d901      	bls.n	8004eb6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e04c      	b.n	8004f50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004eb6:	4b28      	ldr	r3, [pc, #160]	@ (8004f58 <HAL_RCC_OscConfig+0x618>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1f0      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004ec2:	4b25      	ldr	r3, [pc, #148]	@ (8004f58 <HAL_RCC_OscConfig+0x618>)
 8004ec4:	68da      	ldr	r2, [r3, #12]
 8004ec6:	4924      	ldr	r1, [pc, #144]	@ (8004f58 <HAL_RCC_OscConfig+0x618>)
 8004ec8:	4b25      	ldr	r3, [pc, #148]	@ (8004f60 <HAL_RCC_OscConfig+0x620>)
 8004eca:	4013      	ands	r3, r2
 8004ecc:	60cb      	str	r3, [r1, #12]
 8004ece:	e03e      	b.n	8004f4e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	69db      	ldr	r3, [r3, #28]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d101      	bne.n	8004edc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e039      	b.n	8004f50 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004edc:	4b1e      	ldr	r3, [pc, #120]	@ (8004f58 <HAL_RCC_OscConfig+0x618>)
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	f003 0203 	and.w	r2, r3, #3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a1b      	ldr	r3, [r3, #32]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d12c      	bne.n	8004f4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004efa:	3b01      	subs	r3, #1
 8004efc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d123      	bne.n	8004f4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f0c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d11b      	bne.n	8004f4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f1c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d113      	bne.n	8004f4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f2c:	085b      	lsrs	r3, r3, #1
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d109      	bne.n	8004f4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f40:	085b      	lsrs	r3, r3, #1
 8004f42:	3b01      	subs	r3, #1
 8004f44:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d001      	beq.n	8004f4e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e000      	b.n	8004f50 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3720      	adds	r7, #32
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	40021000 	.word	0x40021000
 8004f5c:	019f800c 	.word	0x019f800c
 8004f60:	feeefffc 	.word	0xfeeefffc

08004f64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b086      	sub	sp, #24
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d101      	bne.n	8004f7c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e11e      	b.n	80051ba <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f7c:	4b91      	ldr	r3, [pc, #580]	@ (80051c4 <HAL_RCC_ClockConfig+0x260>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 030f 	and.w	r3, r3, #15
 8004f84:	683a      	ldr	r2, [r7, #0]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d910      	bls.n	8004fac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f8a:	4b8e      	ldr	r3, [pc, #568]	@ (80051c4 <HAL_RCC_ClockConfig+0x260>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f023 020f 	bic.w	r2, r3, #15
 8004f92:	498c      	ldr	r1, [pc, #560]	@ (80051c4 <HAL_RCC_ClockConfig+0x260>)
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f9a:	4b8a      	ldr	r3, [pc, #552]	@ (80051c4 <HAL_RCC_ClockConfig+0x260>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 030f 	and.w	r3, r3, #15
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d001      	beq.n	8004fac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e106      	b.n	80051ba <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0301 	and.w	r3, r3, #1
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d073      	beq.n	80050a0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	2b03      	cmp	r3, #3
 8004fbe:	d129      	bne.n	8005014 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fc0:	4b81      	ldr	r3, [pc, #516]	@ (80051c8 <HAL_RCC_ClockConfig+0x264>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d101      	bne.n	8004fd0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e0f4      	b.n	80051ba <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004fd0:	f000 f99e 	bl	8005310 <RCC_GetSysClockFreqFromPLLSource>
 8004fd4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	4a7c      	ldr	r2, [pc, #496]	@ (80051cc <HAL_RCC_ClockConfig+0x268>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d93f      	bls.n	800505e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004fde:	4b7a      	ldr	r3, [pc, #488]	@ (80051c8 <HAL_RCC_ClockConfig+0x264>)
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d009      	beq.n	8004ffe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d033      	beq.n	800505e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d12f      	bne.n	800505e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004ffe:	4b72      	ldr	r3, [pc, #456]	@ (80051c8 <HAL_RCC_ClockConfig+0x264>)
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005006:	4a70      	ldr	r2, [pc, #448]	@ (80051c8 <HAL_RCC_ClockConfig+0x264>)
 8005008:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800500c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800500e:	2380      	movs	r3, #128	@ 0x80
 8005010:	617b      	str	r3, [r7, #20]
 8005012:	e024      	b.n	800505e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	2b02      	cmp	r3, #2
 800501a:	d107      	bne.n	800502c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800501c:	4b6a      	ldr	r3, [pc, #424]	@ (80051c8 <HAL_RCC_ClockConfig+0x264>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d109      	bne.n	800503c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e0c6      	b.n	80051ba <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800502c:	4b66      	ldr	r3, [pc, #408]	@ (80051c8 <HAL_RCC_ClockConfig+0x264>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005034:	2b00      	cmp	r3, #0
 8005036:	d101      	bne.n	800503c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e0be      	b.n	80051ba <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800503c:	f000 f8ce 	bl	80051dc <HAL_RCC_GetSysClockFreq>
 8005040:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	4a61      	ldr	r2, [pc, #388]	@ (80051cc <HAL_RCC_ClockConfig+0x268>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d909      	bls.n	800505e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800504a:	4b5f      	ldr	r3, [pc, #380]	@ (80051c8 <HAL_RCC_ClockConfig+0x264>)
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005052:	4a5d      	ldr	r2, [pc, #372]	@ (80051c8 <HAL_RCC_ClockConfig+0x264>)
 8005054:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005058:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800505a:	2380      	movs	r3, #128	@ 0x80
 800505c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800505e:	4b5a      	ldr	r3, [pc, #360]	@ (80051c8 <HAL_RCC_ClockConfig+0x264>)
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f023 0203 	bic.w	r2, r3, #3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	4957      	ldr	r1, [pc, #348]	@ (80051c8 <HAL_RCC_ClockConfig+0x264>)
 800506c:	4313      	orrs	r3, r2
 800506e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005070:	f7fd f8de 	bl	8002230 <HAL_GetTick>
 8005074:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005076:	e00a      	b.n	800508e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005078:	f7fd f8da 	bl	8002230 <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005086:	4293      	cmp	r3, r2
 8005088:	d901      	bls.n	800508e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e095      	b.n	80051ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800508e:	4b4e      	ldr	r3, [pc, #312]	@ (80051c8 <HAL_RCC_ClockConfig+0x264>)
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f003 020c 	and.w	r2, r3, #12
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	429a      	cmp	r2, r3
 800509e:	d1eb      	bne.n	8005078 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0302 	and.w	r3, r3, #2
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d023      	beq.n	80050f4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0304 	and.w	r3, r3, #4
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d005      	beq.n	80050c4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050b8:	4b43      	ldr	r3, [pc, #268]	@ (80051c8 <HAL_RCC_ClockConfig+0x264>)
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	4a42      	ldr	r2, [pc, #264]	@ (80051c8 <HAL_RCC_ClockConfig+0x264>)
 80050be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80050c2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0308 	and.w	r3, r3, #8
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d007      	beq.n	80050e0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80050d0:	4b3d      	ldr	r3, [pc, #244]	@ (80051c8 <HAL_RCC_ClockConfig+0x264>)
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80050d8:	4a3b      	ldr	r2, [pc, #236]	@ (80051c8 <HAL_RCC_ClockConfig+0x264>)
 80050da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80050de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050e0:	4b39      	ldr	r3, [pc, #228]	@ (80051c8 <HAL_RCC_ClockConfig+0x264>)
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	4936      	ldr	r1, [pc, #216]	@ (80051c8 <HAL_RCC_ClockConfig+0x264>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	608b      	str	r3, [r1, #8]
 80050f2:	e008      	b.n	8005106 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	2b80      	cmp	r3, #128	@ 0x80
 80050f8:	d105      	bne.n	8005106 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80050fa:	4b33      	ldr	r3, [pc, #204]	@ (80051c8 <HAL_RCC_ClockConfig+0x264>)
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	4a32      	ldr	r2, [pc, #200]	@ (80051c8 <HAL_RCC_ClockConfig+0x264>)
 8005100:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005104:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005106:	4b2f      	ldr	r3, [pc, #188]	@ (80051c4 <HAL_RCC_ClockConfig+0x260>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 030f 	and.w	r3, r3, #15
 800510e:	683a      	ldr	r2, [r7, #0]
 8005110:	429a      	cmp	r2, r3
 8005112:	d21d      	bcs.n	8005150 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005114:	4b2b      	ldr	r3, [pc, #172]	@ (80051c4 <HAL_RCC_ClockConfig+0x260>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f023 020f 	bic.w	r2, r3, #15
 800511c:	4929      	ldr	r1, [pc, #164]	@ (80051c4 <HAL_RCC_ClockConfig+0x260>)
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	4313      	orrs	r3, r2
 8005122:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005124:	f7fd f884 	bl	8002230 <HAL_GetTick>
 8005128:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800512a:	e00a      	b.n	8005142 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800512c:	f7fd f880 	bl	8002230 <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	f241 3288 	movw	r2, #5000	@ 0x1388
 800513a:	4293      	cmp	r3, r2
 800513c:	d901      	bls.n	8005142 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e03b      	b.n	80051ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005142:	4b20      	ldr	r3, [pc, #128]	@ (80051c4 <HAL_RCC_ClockConfig+0x260>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 030f 	and.w	r3, r3, #15
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	429a      	cmp	r2, r3
 800514e:	d1ed      	bne.n	800512c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0304 	and.w	r3, r3, #4
 8005158:	2b00      	cmp	r3, #0
 800515a:	d008      	beq.n	800516e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800515c:	4b1a      	ldr	r3, [pc, #104]	@ (80051c8 <HAL_RCC_ClockConfig+0x264>)
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	4917      	ldr	r1, [pc, #92]	@ (80051c8 <HAL_RCC_ClockConfig+0x264>)
 800516a:	4313      	orrs	r3, r2
 800516c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0308 	and.w	r3, r3, #8
 8005176:	2b00      	cmp	r3, #0
 8005178:	d009      	beq.n	800518e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800517a:	4b13      	ldr	r3, [pc, #76]	@ (80051c8 <HAL_RCC_ClockConfig+0x264>)
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	00db      	lsls	r3, r3, #3
 8005188:	490f      	ldr	r1, [pc, #60]	@ (80051c8 <HAL_RCC_ClockConfig+0x264>)
 800518a:	4313      	orrs	r3, r2
 800518c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800518e:	f000 f825 	bl	80051dc <HAL_RCC_GetSysClockFreq>
 8005192:	4602      	mov	r2, r0
 8005194:	4b0c      	ldr	r3, [pc, #48]	@ (80051c8 <HAL_RCC_ClockConfig+0x264>)
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	091b      	lsrs	r3, r3, #4
 800519a:	f003 030f 	and.w	r3, r3, #15
 800519e:	490c      	ldr	r1, [pc, #48]	@ (80051d0 <HAL_RCC_ClockConfig+0x26c>)
 80051a0:	5ccb      	ldrb	r3, [r1, r3]
 80051a2:	f003 031f 	and.w	r3, r3, #31
 80051a6:	fa22 f303 	lsr.w	r3, r2, r3
 80051aa:	4a0a      	ldr	r2, [pc, #40]	@ (80051d4 <HAL_RCC_ClockConfig+0x270>)
 80051ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80051ae:	4b0a      	ldr	r3, [pc, #40]	@ (80051d8 <HAL_RCC_ClockConfig+0x274>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7fc fff0 	bl	8002198 <HAL_InitTick>
 80051b8:	4603      	mov	r3, r0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3718      	adds	r7, #24
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	40022000 	.word	0x40022000
 80051c8:	40021000 	.word	0x40021000
 80051cc:	04c4b400 	.word	0x04c4b400
 80051d0:	08007ca4 	.word	0x08007ca4
 80051d4:	20000070 	.word	0x20000070
 80051d8:	20000074 	.word	0x20000074

080051dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051dc:	b480      	push	{r7}
 80051de:	b087      	sub	sp, #28
 80051e0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80051e2:	4b2c      	ldr	r3, [pc, #176]	@ (8005294 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f003 030c 	and.w	r3, r3, #12
 80051ea:	2b04      	cmp	r3, #4
 80051ec:	d102      	bne.n	80051f4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80051ee:	4b2a      	ldr	r3, [pc, #168]	@ (8005298 <HAL_RCC_GetSysClockFreq+0xbc>)
 80051f0:	613b      	str	r3, [r7, #16]
 80051f2:	e047      	b.n	8005284 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80051f4:	4b27      	ldr	r3, [pc, #156]	@ (8005294 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f003 030c 	and.w	r3, r3, #12
 80051fc:	2b08      	cmp	r3, #8
 80051fe:	d102      	bne.n	8005206 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005200:	4b26      	ldr	r3, [pc, #152]	@ (800529c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005202:	613b      	str	r3, [r7, #16]
 8005204:	e03e      	b.n	8005284 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005206:	4b23      	ldr	r3, [pc, #140]	@ (8005294 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f003 030c 	and.w	r3, r3, #12
 800520e:	2b0c      	cmp	r3, #12
 8005210:	d136      	bne.n	8005280 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005212:	4b20      	ldr	r3, [pc, #128]	@ (8005294 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	f003 0303 	and.w	r3, r3, #3
 800521a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800521c:	4b1d      	ldr	r3, [pc, #116]	@ (8005294 <HAL_RCC_GetSysClockFreq+0xb8>)
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	091b      	lsrs	r3, r3, #4
 8005222:	f003 030f 	and.w	r3, r3, #15
 8005226:	3301      	adds	r3, #1
 8005228:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2b03      	cmp	r3, #3
 800522e:	d10c      	bne.n	800524a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005230:	4a1a      	ldr	r2, [pc, #104]	@ (800529c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	fbb2 f3f3 	udiv	r3, r2, r3
 8005238:	4a16      	ldr	r2, [pc, #88]	@ (8005294 <HAL_RCC_GetSysClockFreq+0xb8>)
 800523a:	68d2      	ldr	r2, [r2, #12]
 800523c:	0a12      	lsrs	r2, r2, #8
 800523e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005242:	fb02 f303 	mul.w	r3, r2, r3
 8005246:	617b      	str	r3, [r7, #20]
      break;
 8005248:	e00c      	b.n	8005264 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800524a:	4a13      	ldr	r2, [pc, #76]	@ (8005298 <HAL_RCC_GetSysClockFreq+0xbc>)
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005252:	4a10      	ldr	r2, [pc, #64]	@ (8005294 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005254:	68d2      	ldr	r2, [r2, #12]
 8005256:	0a12      	lsrs	r2, r2, #8
 8005258:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800525c:	fb02 f303 	mul.w	r3, r2, r3
 8005260:	617b      	str	r3, [r7, #20]
      break;
 8005262:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005264:	4b0b      	ldr	r3, [pc, #44]	@ (8005294 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	0e5b      	lsrs	r3, r3, #25
 800526a:	f003 0303 	and.w	r3, r3, #3
 800526e:	3301      	adds	r3, #1
 8005270:	005b      	lsls	r3, r3, #1
 8005272:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	fbb2 f3f3 	udiv	r3, r2, r3
 800527c:	613b      	str	r3, [r7, #16]
 800527e:	e001      	b.n	8005284 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005280:	2300      	movs	r3, #0
 8005282:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005284:	693b      	ldr	r3, [r7, #16]
}
 8005286:	4618      	mov	r0, r3
 8005288:	371c      	adds	r7, #28
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	40021000 	.word	0x40021000
 8005298:	00f42400 	.word	0x00f42400
 800529c:	016e3600 	.word	0x016e3600

080052a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052a0:	b480      	push	{r7}
 80052a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052a4:	4b03      	ldr	r3, [pc, #12]	@ (80052b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80052a6:	681b      	ldr	r3, [r3, #0]
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	20000070 	.word	0x20000070

080052b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80052bc:	f7ff fff0 	bl	80052a0 <HAL_RCC_GetHCLKFreq>
 80052c0:	4602      	mov	r2, r0
 80052c2:	4b06      	ldr	r3, [pc, #24]	@ (80052dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	0a1b      	lsrs	r3, r3, #8
 80052c8:	f003 0307 	and.w	r3, r3, #7
 80052cc:	4904      	ldr	r1, [pc, #16]	@ (80052e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80052ce:	5ccb      	ldrb	r3, [r1, r3]
 80052d0:	f003 031f 	and.w	r3, r3, #31
 80052d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052d8:	4618      	mov	r0, r3
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	40021000 	.word	0x40021000
 80052e0:	08007cb4 	.word	0x08007cb4

080052e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80052e8:	f7ff ffda 	bl	80052a0 <HAL_RCC_GetHCLKFreq>
 80052ec:	4602      	mov	r2, r0
 80052ee:	4b06      	ldr	r3, [pc, #24]	@ (8005308 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	0adb      	lsrs	r3, r3, #11
 80052f4:	f003 0307 	and.w	r3, r3, #7
 80052f8:	4904      	ldr	r1, [pc, #16]	@ (800530c <HAL_RCC_GetPCLK2Freq+0x28>)
 80052fa:	5ccb      	ldrb	r3, [r1, r3]
 80052fc:	f003 031f 	and.w	r3, r3, #31
 8005300:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005304:	4618      	mov	r0, r3
 8005306:	bd80      	pop	{r7, pc}
 8005308:	40021000 	.word	0x40021000
 800530c:	08007cb4 	.word	0x08007cb4

08005310 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005310:	b480      	push	{r7}
 8005312:	b087      	sub	sp, #28
 8005314:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005316:	4b1e      	ldr	r3, [pc, #120]	@ (8005390 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	f003 0303 	and.w	r3, r3, #3
 800531e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005320:	4b1b      	ldr	r3, [pc, #108]	@ (8005390 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	091b      	lsrs	r3, r3, #4
 8005326:	f003 030f 	and.w	r3, r3, #15
 800532a:	3301      	adds	r3, #1
 800532c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	2b03      	cmp	r3, #3
 8005332:	d10c      	bne.n	800534e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005334:	4a17      	ldr	r2, [pc, #92]	@ (8005394 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	fbb2 f3f3 	udiv	r3, r2, r3
 800533c:	4a14      	ldr	r2, [pc, #80]	@ (8005390 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800533e:	68d2      	ldr	r2, [r2, #12]
 8005340:	0a12      	lsrs	r2, r2, #8
 8005342:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005346:	fb02 f303 	mul.w	r3, r2, r3
 800534a:	617b      	str	r3, [r7, #20]
    break;
 800534c:	e00c      	b.n	8005368 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800534e:	4a12      	ldr	r2, [pc, #72]	@ (8005398 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	fbb2 f3f3 	udiv	r3, r2, r3
 8005356:	4a0e      	ldr	r2, [pc, #56]	@ (8005390 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005358:	68d2      	ldr	r2, [r2, #12]
 800535a:	0a12      	lsrs	r2, r2, #8
 800535c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005360:	fb02 f303 	mul.w	r3, r2, r3
 8005364:	617b      	str	r3, [r7, #20]
    break;
 8005366:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005368:	4b09      	ldr	r3, [pc, #36]	@ (8005390 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	0e5b      	lsrs	r3, r3, #25
 800536e:	f003 0303 	and.w	r3, r3, #3
 8005372:	3301      	adds	r3, #1
 8005374:	005b      	lsls	r3, r3, #1
 8005376:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005380:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005382:	687b      	ldr	r3, [r7, #4]
}
 8005384:	4618      	mov	r0, r3
 8005386:	371c      	adds	r7, #28
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr
 8005390:	40021000 	.word	0x40021000
 8005394:	016e3600 	.word	0x016e3600
 8005398:	00f42400 	.word	0x00f42400

0800539c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b086      	sub	sp, #24
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80053a4:	2300      	movs	r3, #0
 80053a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80053a8:	2300      	movs	r3, #0
 80053aa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f000 8098 	beq.w	80054ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053ba:	2300      	movs	r3, #0
 80053bc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053be:	4b43      	ldr	r3, [pc, #268]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d10d      	bne.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053ca:	4b40      	ldr	r3, [pc, #256]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053ce:	4a3f      	ldr	r2, [pc, #252]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80053d6:	4b3d      	ldr	r3, [pc, #244]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053de:	60bb      	str	r3, [r7, #8]
 80053e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053e2:	2301      	movs	r3, #1
 80053e4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053e6:	4b3a      	ldr	r3, [pc, #232]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a39      	ldr	r2, [pc, #228]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80053ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80053f2:	f7fc ff1d 	bl	8002230 <HAL_GetTick>
 80053f6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053f8:	e009      	b.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053fa:	f7fc ff19 	bl	8002230 <HAL_GetTick>
 80053fe:	4602      	mov	r2, r0
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	2b02      	cmp	r3, #2
 8005406:	d902      	bls.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	74fb      	strb	r3, [r7, #19]
        break;
 800540c:	e005      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800540e:	4b30      	ldr	r3, [pc, #192]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005416:	2b00      	cmp	r3, #0
 8005418:	d0ef      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800541a:	7cfb      	ldrb	r3, [r7, #19]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d159      	bne.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005420:	4b2a      	ldr	r3, [pc, #168]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005422:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005426:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800542a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d01e      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	429a      	cmp	r2, r3
 800543a:	d019      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800543c:	4b23      	ldr	r3, [pc, #140]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800543e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005442:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005446:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005448:	4b20      	ldr	r3, [pc, #128]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800544a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800544e:	4a1f      	ldr	r2, [pc, #124]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005450:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005454:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005458:	4b1c      	ldr	r3, [pc, #112]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800545a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800545e:	4a1b      	ldr	r2, [pc, #108]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005460:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005464:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005468:	4a18      	ldr	r2, [pc, #96]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	f003 0301 	and.w	r3, r3, #1
 8005476:	2b00      	cmp	r3, #0
 8005478:	d016      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800547a:	f7fc fed9 	bl	8002230 <HAL_GetTick>
 800547e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005480:	e00b      	b.n	800549a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005482:	f7fc fed5 	bl	8002230 <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005490:	4293      	cmp	r3, r2
 8005492:	d902      	bls.n	800549a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	74fb      	strb	r3, [r7, #19]
            break;
 8005498:	e006      	b.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800549a:	4b0c      	ldr	r3, [pc, #48]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800549c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054a0:	f003 0302 	and.w	r3, r3, #2
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d0ec      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80054a8:	7cfb      	ldrb	r3, [r7, #19]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d10b      	bne.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054ae:	4b07      	ldr	r3, [pc, #28]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054bc:	4903      	ldr	r1, [pc, #12]	@ (80054cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054be:	4313      	orrs	r3, r2
 80054c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80054c4:	e008      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80054c6:	7cfb      	ldrb	r3, [r7, #19]
 80054c8:	74bb      	strb	r3, [r7, #18]
 80054ca:	e005      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80054cc:	40021000 	.word	0x40021000
 80054d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054d4:	7cfb      	ldrb	r3, [r7, #19]
 80054d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054d8:	7c7b      	ldrb	r3, [r7, #17]
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d105      	bne.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054de:	4ba7      	ldr	r3, [pc, #668]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054e2:	4aa6      	ldr	r2, [pc, #664]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054e8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0301 	and.w	r3, r3, #1
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d00a      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80054f6:	4ba1      	ldr	r3, [pc, #644]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054fc:	f023 0203 	bic.w	r2, r3, #3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	499d      	ldr	r1, [pc, #628]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005506:	4313      	orrs	r3, r2
 8005508:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0302 	and.w	r3, r3, #2
 8005514:	2b00      	cmp	r3, #0
 8005516:	d00a      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005518:	4b98      	ldr	r3, [pc, #608]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800551a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800551e:	f023 020c 	bic.w	r2, r3, #12
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	4995      	ldr	r1, [pc, #596]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005528:	4313      	orrs	r3, r2
 800552a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0304 	and.w	r3, r3, #4
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00a      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800553a:	4b90      	ldr	r3, [pc, #576]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800553c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005540:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	498c      	ldr	r1, [pc, #560]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800554a:	4313      	orrs	r3, r2
 800554c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0308 	and.w	r3, r3, #8
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00a      	beq.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800555c:	4b87      	ldr	r3, [pc, #540]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800555e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005562:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	4984      	ldr	r1, [pc, #528]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800556c:	4313      	orrs	r3, r2
 800556e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0310 	and.w	r3, r3, #16
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00a      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800557e:	4b7f      	ldr	r3, [pc, #508]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005580:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005584:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	695b      	ldr	r3, [r3, #20]
 800558c:	497b      	ldr	r1, [pc, #492]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800558e:	4313      	orrs	r3, r2
 8005590:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0320 	and.w	r3, r3, #32
 800559c:	2b00      	cmp	r3, #0
 800559e:	d00a      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80055a0:	4b76      	ldr	r3, [pc, #472]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055a6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	4973      	ldr	r1, [pc, #460]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055b0:	4313      	orrs	r3, r2
 80055b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00a      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055c2:	4b6e      	ldr	r3, [pc, #440]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055c8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	69db      	ldr	r3, [r3, #28]
 80055d0:	496a      	ldr	r1, [pc, #424]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d00a      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80055e4:	4b65      	ldr	r3, [pc, #404]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ea:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a1b      	ldr	r3, [r3, #32]
 80055f2:	4962      	ldr	r1, [pc, #392]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055f4:	4313      	orrs	r3, r2
 80055f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00a      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005606:	4b5d      	ldr	r3, [pc, #372]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005608:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800560c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005614:	4959      	ldr	r1, [pc, #356]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005616:	4313      	orrs	r3, r2
 8005618:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00a      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005628:	4b54      	ldr	r3, [pc, #336]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800562a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800562e:	f023 0203 	bic.w	r2, r3, #3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005636:	4951      	ldr	r1, [pc, #324]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005638:	4313      	orrs	r3, r2
 800563a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00a      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800564a:	4b4c      	ldr	r3, [pc, #304]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800564c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005650:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005658:	4948      	ldr	r1, [pc, #288]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800565a:	4313      	orrs	r3, r2
 800565c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005668:	2b00      	cmp	r3, #0
 800566a:	d015      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800566c:	4b43      	ldr	r3, [pc, #268]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800566e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005672:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800567a:	4940      	ldr	r1, [pc, #256]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800567c:	4313      	orrs	r3, r2
 800567e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005686:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800568a:	d105      	bne.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800568c:	4b3b      	ldr	r3, [pc, #236]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	4a3a      	ldr	r2, [pc, #232]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005692:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005696:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d015      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80056a4:	4b35      	ldr	r3, [pc, #212]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056aa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056b2:	4932      	ldr	r1, [pc, #200]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056b4:	4313      	orrs	r3, r2
 80056b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80056c2:	d105      	bne.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056c4:	4b2d      	ldr	r3, [pc, #180]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	4a2c      	ldr	r2, [pc, #176]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056ce:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d015      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80056dc:	4b27      	ldr	r3, [pc, #156]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056e2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ea:	4924      	ldr	r1, [pc, #144]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80056fa:	d105      	bne.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056fc:	4b1f      	ldr	r3, [pc, #124]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	4a1e      	ldr	r2, [pc, #120]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005702:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005706:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005710:	2b00      	cmp	r3, #0
 8005712:	d015      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005714:	4b19      	ldr	r3, [pc, #100]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800571a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005722:	4916      	ldr	r1, [pc, #88]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005724:	4313      	orrs	r3, r2
 8005726:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800572e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005732:	d105      	bne.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005734:	4b11      	ldr	r3, [pc, #68]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	4a10      	ldr	r2, [pc, #64]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800573a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800573e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d019      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800574c:	4b0b      	ldr	r3, [pc, #44]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800574e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005752:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800575a:	4908      	ldr	r1, [pc, #32]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800575c:	4313      	orrs	r3, r2
 800575e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005766:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800576a:	d109      	bne.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800576c:	4b03      	ldr	r3, [pc, #12]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	4a02      	ldr	r2, [pc, #8]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005772:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005776:	60d3      	str	r3, [r2, #12]
 8005778:	e002      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800577a:	bf00      	nop
 800577c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d015      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800578c:	4b29      	ldr	r3, [pc, #164]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800578e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005792:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800579a:	4926      	ldr	r1, [pc, #152]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800579c:	4313      	orrs	r3, r2
 800579e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80057aa:	d105      	bne.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80057ac:	4b21      	ldr	r3, [pc, #132]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	4a20      	ldr	r2, [pc, #128]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057b6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d015      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80057c4:	4b1b      	ldr	r3, [pc, #108]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057ca:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057d2:	4918      	ldr	r1, [pc, #96]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057d4:	4313      	orrs	r3, r2
 80057d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057e2:	d105      	bne.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80057e4:	4b13      	ldr	r3, [pc, #76]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	4a12      	ldr	r2, [pc, #72]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057ee:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d015      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80057fc:	4b0d      	ldr	r3, [pc, #52]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005802:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800580a:	490a      	ldr	r1, [pc, #40]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800580c:	4313      	orrs	r3, r2
 800580e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005816:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800581a:	d105      	bne.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800581c:	4b05      	ldr	r3, [pc, #20]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	4a04      	ldr	r2, [pc, #16]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005822:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005826:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005828:	7cbb      	ldrb	r3, [r7, #18]
}
 800582a:	4618      	mov	r0, r3
 800582c:	3718      	adds	r7, #24
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	40021000 	.word	0x40021000

08005838 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d101      	bne.n	800584a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e049      	b.n	80058de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005850:	b2db      	uxtb	r3, r3
 8005852:	2b00      	cmp	r3, #0
 8005854:	d106      	bne.n	8005864 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f7fc faee 	bl	8001e40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2202      	movs	r2, #2
 8005868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	3304      	adds	r3, #4
 8005874:	4619      	mov	r1, r3
 8005876:	4610      	mov	r0, r2
 8005878:	f000 fd6e 	bl	8006358 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3708      	adds	r7, #8
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
	...

080058e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d001      	beq.n	8005900 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e04c      	b.n	800599a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2202      	movs	r2, #2
 8005904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a26      	ldr	r2, [pc, #152]	@ (80059a8 <HAL_TIM_Base_Start+0xc0>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d022      	beq.n	8005958 <HAL_TIM_Base_Start+0x70>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800591a:	d01d      	beq.n	8005958 <HAL_TIM_Base_Start+0x70>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a22      	ldr	r2, [pc, #136]	@ (80059ac <HAL_TIM_Base_Start+0xc4>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d018      	beq.n	8005958 <HAL_TIM_Base_Start+0x70>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a21      	ldr	r2, [pc, #132]	@ (80059b0 <HAL_TIM_Base_Start+0xc8>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d013      	beq.n	8005958 <HAL_TIM_Base_Start+0x70>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a1f      	ldr	r2, [pc, #124]	@ (80059b4 <HAL_TIM_Base_Start+0xcc>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d00e      	beq.n	8005958 <HAL_TIM_Base_Start+0x70>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a1e      	ldr	r2, [pc, #120]	@ (80059b8 <HAL_TIM_Base_Start+0xd0>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d009      	beq.n	8005958 <HAL_TIM_Base_Start+0x70>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a1c      	ldr	r2, [pc, #112]	@ (80059bc <HAL_TIM_Base_Start+0xd4>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d004      	beq.n	8005958 <HAL_TIM_Base_Start+0x70>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a1b      	ldr	r2, [pc, #108]	@ (80059c0 <HAL_TIM_Base_Start+0xd8>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d115      	bne.n	8005984 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	689a      	ldr	r2, [r3, #8]
 800595e:	4b19      	ldr	r3, [pc, #100]	@ (80059c4 <HAL_TIM_Base_Start+0xdc>)
 8005960:	4013      	ands	r3, r2
 8005962:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2b06      	cmp	r3, #6
 8005968:	d015      	beq.n	8005996 <HAL_TIM_Base_Start+0xae>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005970:	d011      	beq.n	8005996 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f042 0201 	orr.w	r2, r2, #1
 8005980:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005982:	e008      	b.n	8005996 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f042 0201 	orr.w	r2, r2, #1
 8005992:	601a      	str	r2, [r3, #0]
 8005994:	e000      	b.n	8005998 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005996:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3714      	adds	r7, #20
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop
 80059a8:	40012c00 	.word	0x40012c00
 80059ac:	40000400 	.word	0x40000400
 80059b0:	40000800 	.word	0x40000800
 80059b4:	40000c00 	.word	0x40000c00
 80059b8:	40013400 	.word	0x40013400
 80059bc:	40014000 	.word	0x40014000
 80059c0:	40015000 	.word	0x40015000
 80059c4:	00010007 	.word	0x00010007

080059c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d101      	bne.n	80059da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e049      	b.n	8005a6e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d106      	bne.n	80059f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f7fc fa5a 	bl	8001ea8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2202      	movs	r2, #2
 80059f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	3304      	adds	r3, #4
 8005a04:	4619      	mov	r1, r3
 8005a06:	4610      	mov	r0, r2
 8005a08:	f000 fca6 	bl	8006358 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3708      	adds	r7, #8
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
	...

08005a78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d109      	bne.n	8005a9c <HAL_TIM_PWM_Start+0x24>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	bf14      	ite	ne
 8005a94:	2301      	movne	r3, #1
 8005a96:	2300      	moveq	r3, #0
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	e03c      	b.n	8005b16 <HAL_TIM_PWM_Start+0x9e>
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	2b04      	cmp	r3, #4
 8005aa0:	d109      	bne.n	8005ab6 <HAL_TIM_PWM_Start+0x3e>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	bf14      	ite	ne
 8005aae:	2301      	movne	r3, #1
 8005ab0:	2300      	moveq	r3, #0
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	e02f      	b.n	8005b16 <HAL_TIM_PWM_Start+0x9e>
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	2b08      	cmp	r3, #8
 8005aba:	d109      	bne.n	8005ad0 <HAL_TIM_PWM_Start+0x58>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	bf14      	ite	ne
 8005ac8:	2301      	movne	r3, #1
 8005aca:	2300      	moveq	r3, #0
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	e022      	b.n	8005b16 <HAL_TIM_PWM_Start+0x9e>
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	2b0c      	cmp	r3, #12
 8005ad4:	d109      	bne.n	8005aea <HAL_TIM_PWM_Start+0x72>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	bf14      	ite	ne
 8005ae2:	2301      	movne	r3, #1
 8005ae4:	2300      	moveq	r3, #0
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	e015      	b.n	8005b16 <HAL_TIM_PWM_Start+0x9e>
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	2b10      	cmp	r3, #16
 8005aee:	d109      	bne.n	8005b04 <HAL_TIM_PWM_Start+0x8c>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	bf14      	ite	ne
 8005afc:	2301      	movne	r3, #1
 8005afe:	2300      	moveq	r3, #0
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	e008      	b.n	8005b16 <HAL_TIM_PWM_Start+0x9e>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	bf14      	ite	ne
 8005b10:	2301      	movne	r3, #1
 8005b12:	2300      	moveq	r3, #0
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d001      	beq.n	8005b1e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e0a6      	b.n	8005c6c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d104      	bne.n	8005b2e <HAL_TIM_PWM_Start+0xb6>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2202      	movs	r2, #2
 8005b28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b2c:	e023      	b.n	8005b76 <HAL_TIM_PWM_Start+0xfe>
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	2b04      	cmp	r3, #4
 8005b32:	d104      	bne.n	8005b3e <HAL_TIM_PWM_Start+0xc6>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2202      	movs	r2, #2
 8005b38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b3c:	e01b      	b.n	8005b76 <HAL_TIM_PWM_Start+0xfe>
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	2b08      	cmp	r3, #8
 8005b42:	d104      	bne.n	8005b4e <HAL_TIM_PWM_Start+0xd6>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2202      	movs	r2, #2
 8005b48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b4c:	e013      	b.n	8005b76 <HAL_TIM_PWM_Start+0xfe>
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	2b0c      	cmp	r3, #12
 8005b52:	d104      	bne.n	8005b5e <HAL_TIM_PWM_Start+0xe6>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2202      	movs	r2, #2
 8005b58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005b5c:	e00b      	b.n	8005b76 <HAL_TIM_PWM_Start+0xfe>
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	2b10      	cmp	r3, #16
 8005b62:	d104      	bne.n	8005b6e <HAL_TIM_PWM_Start+0xf6>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2202      	movs	r2, #2
 8005b68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b6c:	e003      	b.n	8005b76 <HAL_TIM_PWM_Start+0xfe>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2202      	movs	r2, #2
 8005b72:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	6839      	ldr	r1, [r7, #0]
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f001 f864 	bl	8006c4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a3a      	ldr	r2, [pc, #232]	@ (8005c74 <HAL_TIM_PWM_Start+0x1fc>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d018      	beq.n	8005bc0 <HAL_TIM_PWM_Start+0x148>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a39      	ldr	r2, [pc, #228]	@ (8005c78 <HAL_TIM_PWM_Start+0x200>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d013      	beq.n	8005bc0 <HAL_TIM_PWM_Start+0x148>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a37      	ldr	r2, [pc, #220]	@ (8005c7c <HAL_TIM_PWM_Start+0x204>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d00e      	beq.n	8005bc0 <HAL_TIM_PWM_Start+0x148>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a36      	ldr	r2, [pc, #216]	@ (8005c80 <HAL_TIM_PWM_Start+0x208>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d009      	beq.n	8005bc0 <HAL_TIM_PWM_Start+0x148>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a34      	ldr	r2, [pc, #208]	@ (8005c84 <HAL_TIM_PWM_Start+0x20c>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d004      	beq.n	8005bc0 <HAL_TIM_PWM_Start+0x148>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a33      	ldr	r2, [pc, #204]	@ (8005c88 <HAL_TIM_PWM_Start+0x210>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d101      	bne.n	8005bc4 <HAL_TIM_PWM_Start+0x14c>
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e000      	b.n	8005bc6 <HAL_TIM_PWM_Start+0x14e>
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d007      	beq.n	8005bda <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005bd8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a25      	ldr	r2, [pc, #148]	@ (8005c74 <HAL_TIM_PWM_Start+0x1fc>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d022      	beq.n	8005c2a <HAL_TIM_PWM_Start+0x1b2>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bec:	d01d      	beq.n	8005c2a <HAL_TIM_PWM_Start+0x1b2>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a26      	ldr	r2, [pc, #152]	@ (8005c8c <HAL_TIM_PWM_Start+0x214>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d018      	beq.n	8005c2a <HAL_TIM_PWM_Start+0x1b2>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a24      	ldr	r2, [pc, #144]	@ (8005c90 <HAL_TIM_PWM_Start+0x218>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d013      	beq.n	8005c2a <HAL_TIM_PWM_Start+0x1b2>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a23      	ldr	r2, [pc, #140]	@ (8005c94 <HAL_TIM_PWM_Start+0x21c>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d00e      	beq.n	8005c2a <HAL_TIM_PWM_Start+0x1b2>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a19      	ldr	r2, [pc, #100]	@ (8005c78 <HAL_TIM_PWM_Start+0x200>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d009      	beq.n	8005c2a <HAL_TIM_PWM_Start+0x1b2>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a18      	ldr	r2, [pc, #96]	@ (8005c7c <HAL_TIM_PWM_Start+0x204>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d004      	beq.n	8005c2a <HAL_TIM_PWM_Start+0x1b2>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a18      	ldr	r2, [pc, #96]	@ (8005c88 <HAL_TIM_PWM_Start+0x210>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d115      	bne.n	8005c56 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	689a      	ldr	r2, [r3, #8]
 8005c30:	4b19      	ldr	r3, [pc, #100]	@ (8005c98 <HAL_TIM_PWM_Start+0x220>)
 8005c32:	4013      	ands	r3, r2
 8005c34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2b06      	cmp	r3, #6
 8005c3a:	d015      	beq.n	8005c68 <HAL_TIM_PWM_Start+0x1f0>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c42:	d011      	beq.n	8005c68 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f042 0201 	orr.w	r2, r2, #1
 8005c52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c54:	e008      	b.n	8005c68 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f042 0201 	orr.w	r2, r2, #1
 8005c64:	601a      	str	r2, [r3, #0]
 8005c66:	e000      	b.n	8005c6a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c68:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3710      	adds	r7, #16
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	40012c00 	.word	0x40012c00
 8005c78:	40013400 	.word	0x40013400
 8005c7c:	40014000 	.word	0x40014000
 8005c80:	40014400 	.word	0x40014400
 8005c84:	40014800 	.word	0x40014800
 8005c88:	40015000 	.word	0x40015000
 8005c8c:	40000400 	.word	0x40000400
 8005c90:	40000800 	.word	0x40000800
 8005c94:	40000c00 	.word	0x40000c00
 8005c98:	00010007 	.word	0x00010007

08005c9c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b086      	sub	sp, #24
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d101      	bne.n	8005cb0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	e097      	b.n	8005de0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d106      	bne.n	8005cca <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f7fc f90d 	bl	8001ee4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2202      	movs	r2, #2
 8005cce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	6812      	ldr	r2, [r2, #0]
 8005cdc:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005ce0:	f023 0307 	bic.w	r3, r3, #7
 8005ce4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	3304      	adds	r3, #4
 8005cee:	4619      	mov	r1, r3
 8005cf0:	4610      	mov	r0, r2
 8005cf2:	f000 fb31 	bl	8006358 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	699b      	ldr	r3, [r3, #24]
 8005d04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	6a1b      	ldr	r3, [r3, #32]
 8005d0c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	697a      	ldr	r2, [r7, #20]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d1e:	f023 0303 	bic.w	r3, r3, #3
 8005d22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	689a      	ldr	r2, [r3, #8]
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	699b      	ldr	r3, [r3, #24]
 8005d2c:	021b      	lsls	r3, r3, #8
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	693a      	ldr	r2, [r7, #16]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005d3c:	f023 030c 	bic.w	r3, r3, #12
 8005d40:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005d48:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	68da      	ldr	r2, [r3, #12]
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	69db      	ldr	r3, [r3, #28]
 8005d56:	021b      	lsls	r3, r3, #8
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	011a      	lsls	r2, r3, #4
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	031b      	lsls	r3, r3, #12
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	693a      	ldr	r2, [r7, #16]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005d7a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005d82:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	685a      	ldr	r2, [r3, #4]
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	695b      	ldr	r3, [r3, #20]
 8005d8c:	011b      	lsls	r3, r3, #4
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	697a      	ldr	r2, [r7, #20]
 8005d9c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	693a      	ldr	r2, [r7, #16]
 8005da4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3718      	adds	r7, #24
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005df8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005e00:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005e08:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e10:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d110      	bne.n	8005e3a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e18:	7bfb      	ldrb	r3, [r7, #15]
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d102      	bne.n	8005e24 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e1e:	7b7b      	ldrb	r3, [r7, #13]
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d001      	beq.n	8005e28 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	e069      	b.n	8005efc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2202      	movs	r2, #2
 8005e2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2202      	movs	r2, #2
 8005e34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e38:	e031      	b.n	8005e9e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	2b04      	cmp	r3, #4
 8005e3e:	d110      	bne.n	8005e62 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e40:	7bbb      	ldrb	r3, [r7, #14]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d102      	bne.n	8005e4c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e46:	7b3b      	ldrb	r3, [r7, #12]
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d001      	beq.n	8005e50 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e055      	b.n	8005efc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2202      	movs	r2, #2
 8005e54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e60:	e01d      	b.n	8005e9e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e62:	7bfb      	ldrb	r3, [r7, #15]
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d108      	bne.n	8005e7a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e68:	7bbb      	ldrb	r3, [r7, #14]
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d105      	bne.n	8005e7a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e6e:	7b7b      	ldrb	r3, [r7, #13]
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d102      	bne.n	8005e7a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e74:	7b3b      	ldrb	r3, [r7, #12]
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d001      	beq.n	8005e7e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e03e      	b.n	8005efc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2202      	movs	r2, #2
 8005e82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2202      	movs	r2, #2
 8005e8a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2202      	movs	r2, #2
 8005e92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2202      	movs	r2, #2
 8005e9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d003      	beq.n	8005eac <HAL_TIM_Encoder_Start+0xc4>
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	2b04      	cmp	r3, #4
 8005ea8:	d008      	beq.n	8005ebc <HAL_TIM_Encoder_Start+0xd4>
 8005eaa:	e00f      	b.n	8005ecc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	2100      	movs	r1, #0
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f000 fec9 	bl	8006c4c <TIM_CCxChannelCmd>
      break;
 8005eba:	e016      	b.n	8005eea <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	2104      	movs	r1, #4
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f000 fec1 	bl	8006c4c <TIM_CCxChannelCmd>
      break;
 8005eca:	e00e      	b.n	8005eea <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	2100      	movs	r1, #0
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f000 feb9 	bl	8006c4c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	2104      	movs	r1, #4
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f000 feb2 	bl	8006c4c <TIM_CCxChannelCmd>
      break;
 8005ee8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f042 0201 	orr.w	r2, r2, #1
 8005ef8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3710      	adds	r7, #16
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b086      	sub	sp, #24
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f10:	2300      	movs	r3, #0
 8005f12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d101      	bne.n	8005f22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f1e:	2302      	movs	r3, #2
 8005f20:	e0ff      	b.n	8006122 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2b14      	cmp	r3, #20
 8005f2e:	f200 80f0 	bhi.w	8006112 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005f32:	a201      	add	r2, pc, #4	@ (adr r2, 8005f38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f38:	08005f8d 	.word	0x08005f8d
 8005f3c:	08006113 	.word	0x08006113
 8005f40:	08006113 	.word	0x08006113
 8005f44:	08006113 	.word	0x08006113
 8005f48:	08005fcd 	.word	0x08005fcd
 8005f4c:	08006113 	.word	0x08006113
 8005f50:	08006113 	.word	0x08006113
 8005f54:	08006113 	.word	0x08006113
 8005f58:	0800600f 	.word	0x0800600f
 8005f5c:	08006113 	.word	0x08006113
 8005f60:	08006113 	.word	0x08006113
 8005f64:	08006113 	.word	0x08006113
 8005f68:	0800604f 	.word	0x0800604f
 8005f6c:	08006113 	.word	0x08006113
 8005f70:	08006113 	.word	0x08006113
 8005f74:	08006113 	.word	0x08006113
 8005f78:	08006091 	.word	0x08006091
 8005f7c:	08006113 	.word	0x08006113
 8005f80:	08006113 	.word	0x08006113
 8005f84:	08006113 	.word	0x08006113
 8005f88:	080060d1 	.word	0x080060d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68b9      	ldr	r1, [r7, #8]
 8005f92:	4618      	mov	r0, r3
 8005f94:	f000 fa94 	bl	80064c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	699a      	ldr	r2, [r3, #24]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f042 0208 	orr.w	r2, r2, #8
 8005fa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	699a      	ldr	r2, [r3, #24]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f022 0204 	bic.w	r2, r2, #4
 8005fb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	6999      	ldr	r1, [r3, #24]
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	691a      	ldr	r2, [r3, #16]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	430a      	orrs	r2, r1
 8005fc8:	619a      	str	r2, [r3, #24]
      break;
 8005fca:	e0a5      	b.n	8006118 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	68b9      	ldr	r1, [r7, #8]
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f000 fb0e 	bl	80065f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	699a      	ldr	r2, [r3, #24]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005fe6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	699a      	ldr	r2, [r3, #24]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ff6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	6999      	ldr	r1, [r3, #24]
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	021a      	lsls	r2, r3, #8
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	430a      	orrs	r2, r1
 800600a:	619a      	str	r2, [r3, #24]
      break;
 800600c:	e084      	b.n	8006118 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68b9      	ldr	r1, [r7, #8]
 8006014:	4618      	mov	r0, r3
 8006016:	f000 fb81 	bl	800671c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	69da      	ldr	r2, [r3, #28]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f042 0208 	orr.w	r2, r2, #8
 8006028:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	69da      	ldr	r2, [r3, #28]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f022 0204 	bic.w	r2, r2, #4
 8006038:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	69d9      	ldr	r1, [r3, #28]
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	691a      	ldr	r2, [r3, #16]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	430a      	orrs	r2, r1
 800604a:	61da      	str	r2, [r3, #28]
      break;
 800604c:	e064      	b.n	8006118 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68b9      	ldr	r1, [r7, #8]
 8006054:	4618      	mov	r0, r3
 8006056:	f000 fbf3 	bl	8006840 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	69da      	ldr	r2, [r3, #28]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006068:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	69da      	ldr	r2, [r3, #28]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006078:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	69d9      	ldr	r1, [r3, #28]
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	021a      	lsls	r2, r3, #8
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	430a      	orrs	r2, r1
 800608c:	61da      	str	r2, [r3, #28]
      break;
 800608e:	e043      	b.n	8006118 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	68b9      	ldr	r1, [r7, #8]
 8006096:	4618      	mov	r0, r3
 8006098:	f000 fc66 	bl	8006968 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f042 0208 	orr.w	r2, r2, #8
 80060aa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f022 0204 	bic.w	r2, r2, #4
 80060ba:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	691a      	ldr	r2, [r3, #16]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	430a      	orrs	r2, r1
 80060cc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80060ce:	e023      	b.n	8006118 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	68b9      	ldr	r1, [r7, #8]
 80060d6:	4618      	mov	r0, r3
 80060d8:	f000 fcb0 	bl	8006a3c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060ea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060fa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	021a      	lsls	r2, r3, #8
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	430a      	orrs	r2, r1
 800610e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006110:	e002      	b.n	8006118 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	75fb      	strb	r3, [r7, #23]
      break;
 8006116:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006120:	7dfb      	ldrb	r3, [r7, #23]
}
 8006122:	4618      	mov	r0, r3
 8006124:	3718      	adds	r7, #24
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop

0800612c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006136:	2300      	movs	r3, #0
 8006138:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006140:	2b01      	cmp	r3, #1
 8006142:	d101      	bne.n	8006148 <HAL_TIM_ConfigClockSource+0x1c>
 8006144:	2302      	movs	r3, #2
 8006146:	e0f6      	b.n	8006336 <HAL_TIM_ConfigClockSource+0x20a>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2202      	movs	r2, #2
 8006154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006166:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800616a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006172:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68ba      	ldr	r2, [r7, #8]
 800617a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a6f      	ldr	r2, [pc, #444]	@ (8006340 <HAL_TIM_ConfigClockSource+0x214>)
 8006182:	4293      	cmp	r3, r2
 8006184:	f000 80c1 	beq.w	800630a <HAL_TIM_ConfigClockSource+0x1de>
 8006188:	4a6d      	ldr	r2, [pc, #436]	@ (8006340 <HAL_TIM_ConfigClockSource+0x214>)
 800618a:	4293      	cmp	r3, r2
 800618c:	f200 80c6 	bhi.w	800631c <HAL_TIM_ConfigClockSource+0x1f0>
 8006190:	4a6c      	ldr	r2, [pc, #432]	@ (8006344 <HAL_TIM_ConfigClockSource+0x218>)
 8006192:	4293      	cmp	r3, r2
 8006194:	f000 80b9 	beq.w	800630a <HAL_TIM_ConfigClockSource+0x1de>
 8006198:	4a6a      	ldr	r2, [pc, #424]	@ (8006344 <HAL_TIM_ConfigClockSource+0x218>)
 800619a:	4293      	cmp	r3, r2
 800619c:	f200 80be 	bhi.w	800631c <HAL_TIM_ConfigClockSource+0x1f0>
 80061a0:	4a69      	ldr	r2, [pc, #420]	@ (8006348 <HAL_TIM_ConfigClockSource+0x21c>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	f000 80b1 	beq.w	800630a <HAL_TIM_ConfigClockSource+0x1de>
 80061a8:	4a67      	ldr	r2, [pc, #412]	@ (8006348 <HAL_TIM_ConfigClockSource+0x21c>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	f200 80b6 	bhi.w	800631c <HAL_TIM_ConfigClockSource+0x1f0>
 80061b0:	4a66      	ldr	r2, [pc, #408]	@ (800634c <HAL_TIM_ConfigClockSource+0x220>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	f000 80a9 	beq.w	800630a <HAL_TIM_ConfigClockSource+0x1de>
 80061b8:	4a64      	ldr	r2, [pc, #400]	@ (800634c <HAL_TIM_ConfigClockSource+0x220>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	f200 80ae 	bhi.w	800631c <HAL_TIM_ConfigClockSource+0x1f0>
 80061c0:	4a63      	ldr	r2, [pc, #396]	@ (8006350 <HAL_TIM_ConfigClockSource+0x224>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	f000 80a1 	beq.w	800630a <HAL_TIM_ConfigClockSource+0x1de>
 80061c8:	4a61      	ldr	r2, [pc, #388]	@ (8006350 <HAL_TIM_ConfigClockSource+0x224>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	f200 80a6 	bhi.w	800631c <HAL_TIM_ConfigClockSource+0x1f0>
 80061d0:	4a60      	ldr	r2, [pc, #384]	@ (8006354 <HAL_TIM_ConfigClockSource+0x228>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	f000 8099 	beq.w	800630a <HAL_TIM_ConfigClockSource+0x1de>
 80061d8:	4a5e      	ldr	r2, [pc, #376]	@ (8006354 <HAL_TIM_ConfigClockSource+0x228>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	f200 809e 	bhi.w	800631c <HAL_TIM_ConfigClockSource+0x1f0>
 80061e0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80061e4:	f000 8091 	beq.w	800630a <HAL_TIM_ConfigClockSource+0x1de>
 80061e8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80061ec:	f200 8096 	bhi.w	800631c <HAL_TIM_ConfigClockSource+0x1f0>
 80061f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061f4:	f000 8089 	beq.w	800630a <HAL_TIM_ConfigClockSource+0x1de>
 80061f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061fc:	f200 808e 	bhi.w	800631c <HAL_TIM_ConfigClockSource+0x1f0>
 8006200:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006204:	d03e      	beq.n	8006284 <HAL_TIM_ConfigClockSource+0x158>
 8006206:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800620a:	f200 8087 	bhi.w	800631c <HAL_TIM_ConfigClockSource+0x1f0>
 800620e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006212:	f000 8086 	beq.w	8006322 <HAL_TIM_ConfigClockSource+0x1f6>
 8006216:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800621a:	d87f      	bhi.n	800631c <HAL_TIM_ConfigClockSource+0x1f0>
 800621c:	2b70      	cmp	r3, #112	@ 0x70
 800621e:	d01a      	beq.n	8006256 <HAL_TIM_ConfigClockSource+0x12a>
 8006220:	2b70      	cmp	r3, #112	@ 0x70
 8006222:	d87b      	bhi.n	800631c <HAL_TIM_ConfigClockSource+0x1f0>
 8006224:	2b60      	cmp	r3, #96	@ 0x60
 8006226:	d050      	beq.n	80062ca <HAL_TIM_ConfigClockSource+0x19e>
 8006228:	2b60      	cmp	r3, #96	@ 0x60
 800622a:	d877      	bhi.n	800631c <HAL_TIM_ConfigClockSource+0x1f0>
 800622c:	2b50      	cmp	r3, #80	@ 0x50
 800622e:	d03c      	beq.n	80062aa <HAL_TIM_ConfigClockSource+0x17e>
 8006230:	2b50      	cmp	r3, #80	@ 0x50
 8006232:	d873      	bhi.n	800631c <HAL_TIM_ConfigClockSource+0x1f0>
 8006234:	2b40      	cmp	r3, #64	@ 0x40
 8006236:	d058      	beq.n	80062ea <HAL_TIM_ConfigClockSource+0x1be>
 8006238:	2b40      	cmp	r3, #64	@ 0x40
 800623a:	d86f      	bhi.n	800631c <HAL_TIM_ConfigClockSource+0x1f0>
 800623c:	2b30      	cmp	r3, #48	@ 0x30
 800623e:	d064      	beq.n	800630a <HAL_TIM_ConfigClockSource+0x1de>
 8006240:	2b30      	cmp	r3, #48	@ 0x30
 8006242:	d86b      	bhi.n	800631c <HAL_TIM_ConfigClockSource+0x1f0>
 8006244:	2b20      	cmp	r3, #32
 8006246:	d060      	beq.n	800630a <HAL_TIM_ConfigClockSource+0x1de>
 8006248:	2b20      	cmp	r3, #32
 800624a:	d867      	bhi.n	800631c <HAL_TIM_ConfigClockSource+0x1f0>
 800624c:	2b00      	cmp	r3, #0
 800624e:	d05c      	beq.n	800630a <HAL_TIM_ConfigClockSource+0x1de>
 8006250:	2b10      	cmp	r3, #16
 8006252:	d05a      	beq.n	800630a <HAL_TIM_ConfigClockSource+0x1de>
 8006254:	e062      	b.n	800631c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006266:	f000 fcd1 	bl	8006c0c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006278:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68ba      	ldr	r2, [r7, #8]
 8006280:	609a      	str	r2, [r3, #8]
      break;
 8006282:	e04f      	b.n	8006324 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006294:	f000 fcba 	bl	8006c0c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	689a      	ldr	r2, [r3, #8]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80062a6:	609a      	str	r2, [r3, #8]
      break;
 80062a8:	e03c      	b.n	8006324 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062b6:	461a      	mov	r2, r3
 80062b8:	f000 fc2c 	bl	8006b14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	2150      	movs	r1, #80	@ 0x50
 80062c2:	4618      	mov	r0, r3
 80062c4:	f000 fc85 	bl	8006bd2 <TIM_ITRx_SetConfig>
      break;
 80062c8:	e02c      	b.n	8006324 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80062d6:	461a      	mov	r2, r3
 80062d8:	f000 fc4b 	bl	8006b72 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2160      	movs	r1, #96	@ 0x60
 80062e2:	4618      	mov	r0, r3
 80062e4:	f000 fc75 	bl	8006bd2 <TIM_ITRx_SetConfig>
      break;
 80062e8:	e01c      	b.n	8006324 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062f6:	461a      	mov	r2, r3
 80062f8:	f000 fc0c 	bl	8006b14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2140      	movs	r1, #64	@ 0x40
 8006302:	4618      	mov	r0, r3
 8006304:	f000 fc65 	bl	8006bd2 <TIM_ITRx_SetConfig>
      break;
 8006308:	e00c      	b.n	8006324 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4619      	mov	r1, r3
 8006314:	4610      	mov	r0, r2
 8006316:	f000 fc5c 	bl	8006bd2 <TIM_ITRx_SetConfig>
      break;
 800631a:	e003      	b.n	8006324 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	73fb      	strb	r3, [r7, #15]
      break;
 8006320:	e000      	b.n	8006324 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006322:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006334:	7bfb      	ldrb	r3, [r7, #15]
}
 8006336:	4618      	mov	r0, r3
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	00100070 	.word	0x00100070
 8006344:	00100060 	.word	0x00100060
 8006348:	00100050 	.word	0x00100050
 800634c:	00100040 	.word	0x00100040
 8006350:	00100030 	.word	0x00100030
 8006354:	00100020 	.word	0x00100020

08006358 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006358:	b480      	push	{r7}
 800635a:	b085      	sub	sp, #20
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a4c      	ldr	r2, [pc, #304]	@ (800649c <TIM_Base_SetConfig+0x144>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d017      	beq.n	80063a0 <TIM_Base_SetConfig+0x48>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006376:	d013      	beq.n	80063a0 <TIM_Base_SetConfig+0x48>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a49      	ldr	r2, [pc, #292]	@ (80064a0 <TIM_Base_SetConfig+0x148>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d00f      	beq.n	80063a0 <TIM_Base_SetConfig+0x48>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a48      	ldr	r2, [pc, #288]	@ (80064a4 <TIM_Base_SetConfig+0x14c>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d00b      	beq.n	80063a0 <TIM_Base_SetConfig+0x48>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a47      	ldr	r2, [pc, #284]	@ (80064a8 <TIM_Base_SetConfig+0x150>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d007      	beq.n	80063a0 <TIM_Base_SetConfig+0x48>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a46      	ldr	r2, [pc, #280]	@ (80064ac <TIM_Base_SetConfig+0x154>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d003      	beq.n	80063a0 <TIM_Base_SetConfig+0x48>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a45      	ldr	r2, [pc, #276]	@ (80064b0 <TIM_Base_SetConfig+0x158>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d108      	bne.n	80063b2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a39      	ldr	r2, [pc, #228]	@ (800649c <TIM_Base_SetConfig+0x144>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d023      	beq.n	8006402 <TIM_Base_SetConfig+0xaa>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063c0:	d01f      	beq.n	8006402 <TIM_Base_SetConfig+0xaa>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a36      	ldr	r2, [pc, #216]	@ (80064a0 <TIM_Base_SetConfig+0x148>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d01b      	beq.n	8006402 <TIM_Base_SetConfig+0xaa>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a35      	ldr	r2, [pc, #212]	@ (80064a4 <TIM_Base_SetConfig+0x14c>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d017      	beq.n	8006402 <TIM_Base_SetConfig+0xaa>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a34      	ldr	r2, [pc, #208]	@ (80064a8 <TIM_Base_SetConfig+0x150>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d013      	beq.n	8006402 <TIM_Base_SetConfig+0xaa>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a33      	ldr	r2, [pc, #204]	@ (80064ac <TIM_Base_SetConfig+0x154>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d00f      	beq.n	8006402 <TIM_Base_SetConfig+0xaa>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a33      	ldr	r2, [pc, #204]	@ (80064b4 <TIM_Base_SetConfig+0x15c>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d00b      	beq.n	8006402 <TIM_Base_SetConfig+0xaa>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a32      	ldr	r2, [pc, #200]	@ (80064b8 <TIM_Base_SetConfig+0x160>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d007      	beq.n	8006402 <TIM_Base_SetConfig+0xaa>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a31      	ldr	r2, [pc, #196]	@ (80064bc <TIM_Base_SetConfig+0x164>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d003      	beq.n	8006402 <TIM_Base_SetConfig+0xaa>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a2c      	ldr	r2, [pc, #176]	@ (80064b0 <TIM_Base_SetConfig+0x158>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d108      	bne.n	8006414 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006408:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	4313      	orrs	r3, r2
 8006412:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	695b      	ldr	r3, [r3, #20]
 800641e:	4313      	orrs	r3, r2
 8006420:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	689a      	ldr	r2, [r3, #8]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	4a18      	ldr	r2, [pc, #96]	@ (800649c <TIM_Base_SetConfig+0x144>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d013      	beq.n	8006468 <TIM_Base_SetConfig+0x110>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4a1a      	ldr	r2, [pc, #104]	@ (80064ac <TIM_Base_SetConfig+0x154>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d00f      	beq.n	8006468 <TIM_Base_SetConfig+0x110>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4a1a      	ldr	r2, [pc, #104]	@ (80064b4 <TIM_Base_SetConfig+0x15c>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d00b      	beq.n	8006468 <TIM_Base_SetConfig+0x110>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4a19      	ldr	r2, [pc, #100]	@ (80064b8 <TIM_Base_SetConfig+0x160>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d007      	beq.n	8006468 <TIM_Base_SetConfig+0x110>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a18      	ldr	r2, [pc, #96]	@ (80064bc <TIM_Base_SetConfig+0x164>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d003      	beq.n	8006468 <TIM_Base_SetConfig+0x110>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a13      	ldr	r2, [pc, #76]	@ (80064b0 <TIM_Base_SetConfig+0x158>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d103      	bne.n	8006470 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	691a      	ldr	r2, [r3, #16]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	f003 0301 	and.w	r3, r3, #1
 800647e:	2b01      	cmp	r3, #1
 8006480:	d105      	bne.n	800648e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	f023 0201 	bic.w	r2, r3, #1
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	611a      	str	r2, [r3, #16]
  }
}
 800648e:	bf00      	nop
 8006490:	3714      	adds	r7, #20
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr
 800649a:	bf00      	nop
 800649c:	40012c00 	.word	0x40012c00
 80064a0:	40000400 	.word	0x40000400
 80064a4:	40000800 	.word	0x40000800
 80064a8:	40000c00 	.word	0x40000c00
 80064ac:	40013400 	.word	0x40013400
 80064b0:	40015000 	.word	0x40015000
 80064b4:	40014000 	.word	0x40014000
 80064b8:	40014400 	.word	0x40014400
 80064bc:	40014800 	.word	0x40014800

080064c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b087      	sub	sp, #28
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a1b      	ldr	r3, [r3, #32]
 80064ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6a1b      	ldr	r3, [r3, #32]
 80064d4:	f023 0201 	bic.w	r2, r3, #1
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	699b      	ldr	r3, [r3, #24]
 80064e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f023 0303 	bic.w	r3, r3, #3
 80064fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68fa      	ldr	r2, [r7, #12]
 8006502:	4313      	orrs	r3, r2
 8006504:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	f023 0302 	bic.w	r3, r3, #2
 800650c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	4313      	orrs	r3, r2
 8006516:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4a30      	ldr	r2, [pc, #192]	@ (80065dc <TIM_OC1_SetConfig+0x11c>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d013      	beq.n	8006548 <TIM_OC1_SetConfig+0x88>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a2f      	ldr	r2, [pc, #188]	@ (80065e0 <TIM_OC1_SetConfig+0x120>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d00f      	beq.n	8006548 <TIM_OC1_SetConfig+0x88>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a2e      	ldr	r2, [pc, #184]	@ (80065e4 <TIM_OC1_SetConfig+0x124>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d00b      	beq.n	8006548 <TIM_OC1_SetConfig+0x88>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4a2d      	ldr	r2, [pc, #180]	@ (80065e8 <TIM_OC1_SetConfig+0x128>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d007      	beq.n	8006548 <TIM_OC1_SetConfig+0x88>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a2c      	ldr	r2, [pc, #176]	@ (80065ec <TIM_OC1_SetConfig+0x12c>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d003      	beq.n	8006548 <TIM_OC1_SetConfig+0x88>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a2b      	ldr	r2, [pc, #172]	@ (80065f0 <TIM_OC1_SetConfig+0x130>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d10c      	bne.n	8006562 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	f023 0308 	bic.w	r3, r3, #8
 800654e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	697a      	ldr	r2, [r7, #20]
 8006556:	4313      	orrs	r3, r2
 8006558:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	f023 0304 	bic.w	r3, r3, #4
 8006560:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a1d      	ldr	r2, [pc, #116]	@ (80065dc <TIM_OC1_SetConfig+0x11c>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d013      	beq.n	8006592 <TIM_OC1_SetConfig+0xd2>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a1c      	ldr	r2, [pc, #112]	@ (80065e0 <TIM_OC1_SetConfig+0x120>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d00f      	beq.n	8006592 <TIM_OC1_SetConfig+0xd2>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a1b      	ldr	r2, [pc, #108]	@ (80065e4 <TIM_OC1_SetConfig+0x124>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d00b      	beq.n	8006592 <TIM_OC1_SetConfig+0xd2>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a1a      	ldr	r2, [pc, #104]	@ (80065e8 <TIM_OC1_SetConfig+0x128>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d007      	beq.n	8006592 <TIM_OC1_SetConfig+0xd2>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a19      	ldr	r2, [pc, #100]	@ (80065ec <TIM_OC1_SetConfig+0x12c>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d003      	beq.n	8006592 <TIM_OC1_SetConfig+0xd2>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a18      	ldr	r2, [pc, #96]	@ (80065f0 <TIM_OC1_SetConfig+0x130>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d111      	bne.n	80065b6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006598:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80065a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	695b      	ldr	r3, [r3, #20]
 80065a6:	693a      	ldr	r2, [r7, #16]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	699b      	ldr	r3, [r3, #24]
 80065b0:	693a      	ldr	r2, [r7, #16]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	693a      	ldr	r2, [r7, #16]
 80065ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	68fa      	ldr	r2, [r7, #12]
 80065c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	685a      	ldr	r2, [r3, #4]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	697a      	ldr	r2, [r7, #20]
 80065ce:	621a      	str	r2, [r3, #32]
}
 80065d0:	bf00      	nop
 80065d2:	371c      	adds	r7, #28
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr
 80065dc:	40012c00 	.word	0x40012c00
 80065e0:	40013400 	.word	0x40013400
 80065e4:	40014000 	.word	0x40014000
 80065e8:	40014400 	.word	0x40014400
 80065ec:	40014800 	.word	0x40014800
 80065f0:	40015000 	.word	0x40015000

080065f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b087      	sub	sp, #28
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a1b      	ldr	r3, [r3, #32]
 8006602:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6a1b      	ldr	r3, [r3, #32]
 8006608:	f023 0210 	bic.w	r2, r3, #16
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	699b      	ldr	r3, [r3, #24]
 800661a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006622:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800662e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	021b      	lsls	r3, r3, #8
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	4313      	orrs	r3, r2
 800663a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	f023 0320 	bic.w	r3, r3, #32
 8006642:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	011b      	lsls	r3, r3, #4
 800664a:	697a      	ldr	r2, [r7, #20]
 800664c:	4313      	orrs	r3, r2
 800664e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4a2c      	ldr	r2, [pc, #176]	@ (8006704 <TIM_OC2_SetConfig+0x110>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d007      	beq.n	8006668 <TIM_OC2_SetConfig+0x74>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a2b      	ldr	r2, [pc, #172]	@ (8006708 <TIM_OC2_SetConfig+0x114>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d003      	beq.n	8006668 <TIM_OC2_SetConfig+0x74>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a2a      	ldr	r2, [pc, #168]	@ (800670c <TIM_OC2_SetConfig+0x118>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d10d      	bne.n	8006684 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800666e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	011b      	lsls	r3, r3, #4
 8006676:	697a      	ldr	r2, [r7, #20]
 8006678:	4313      	orrs	r3, r2
 800667a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006682:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a1f      	ldr	r2, [pc, #124]	@ (8006704 <TIM_OC2_SetConfig+0x110>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d013      	beq.n	80066b4 <TIM_OC2_SetConfig+0xc0>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a1e      	ldr	r2, [pc, #120]	@ (8006708 <TIM_OC2_SetConfig+0x114>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d00f      	beq.n	80066b4 <TIM_OC2_SetConfig+0xc0>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a1e      	ldr	r2, [pc, #120]	@ (8006710 <TIM_OC2_SetConfig+0x11c>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d00b      	beq.n	80066b4 <TIM_OC2_SetConfig+0xc0>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a1d      	ldr	r2, [pc, #116]	@ (8006714 <TIM_OC2_SetConfig+0x120>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d007      	beq.n	80066b4 <TIM_OC2_SetConfig+0xc0>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a1c      	ldr	r2, [pc, #112]	@ (8006718 <TIM_OC2_SetConfig+0x124>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d003      	beq.n	80066b4 <TIM_OC2_SetConfig+0xc0>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a17      	ldr	r2, [pc, #92]	@ (800670c <TIM_OC2_SetConfig+0x118>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d113      	bne.n	80066dc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80066ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80066c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	695b      	ldr	r3, [r3, #20]
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	693a      	ldr	r2, [r7, #16]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	699b      	ldr	r3, [r3, #24]
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	693a      	ldr	r2, [r7, #16]
 80066d8:	4313      	orrs	r3, r2
 80066da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	693a      	ldr	r2, [r7, #16]
 80066e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	685a      	ldr	r2, [r3, #4]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	697a      	ldr	r2, [r7, #20]
 80066f4:	621a      	str	r2, [r3, #32]
}
 80066f6:	bf00      	nop
 80066f8:	371c      	adds	r7, #28
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr
 8006702:	bf00      	nop
 8006704:	40012c00 	.word	0x40012c00
 8006708:	40013400 	.word	0x40013400
 800670c:	40015000 	.word	0x40015000
 8006710:	40014000 	.word	0x40014000
 8006714:	40014400 	.word	0x40014400
 8006718:	40014800 	.word	0x40014800

0800671c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800671c:	b480      	push	{r7}
 800671e:	b087      	sub	sp, #28
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a1b      	ldr	r3, [r3, #32]
 800672a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6a1b      	ldr	r3, [r3, #32]
 8006730:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	69db      	ldr	r3, [r3, #28]
 8006742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800674a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800674e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f023 0303 	bic.w	r3, r3, #3
 8006756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	4313      	orrs	r3, r2
 8006760:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006768:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	021b      	lsls	r3, r3, #8
 8006770:	697a      	ldr	r2, [r7, #20]
 8006772:	4313      	orrs	r3, r2
 8006774:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a2b      	ldr	r2, [pc, #172]	@ (8006828 <TIM_OC3_SetConfig+0x10c>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d007      	beq.n	800678e <TIM_OC3_SetConfig+0x72>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a2a      	ldr	r2, [pc, #168]	@ (800682c <TIM_OC3_SetConfig+0x110>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d003      	beq.n	800678e <TIM_OC3_SetConfig+0x72>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a29      	ldr	r2, [pc, #164]	@ (8006830 <TIM_OC3_SetConfig+0x114>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d10d      	bne.n	80067aa <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006794:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	68db      	ldr	r3, [r3, #12]
 800679a:	021b      	lsls	r3, r3, #8
 800679c:	697a      	ldr	r2, [r7, #20]
 800679e:	4313      	orrs	r3, r2
 80067a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80067a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a1e      	ldr	r2, [pc, #120]	@ (8006828 <TIM_OC3_SetConfig+0x10c>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d013      	beq.n	80067da <TIM_OC3_SetConfig+0xbe>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a1d      	ldr	r2, [pc, #116]	@ (800682c <TIM_OC3_SetConfig+0x110>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d00f      	beq.n	80067da <TIM_OC3_SetConfig+0xbe>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a1d      	ldr	r2, [pc, #116]	@ (8006834 <TIM_OC3_SetConfig+0x118>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d00b      	beq.n	80067da <TIM_OC3_SetConfig+0xbe>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a1c      	ldr	r2, [pc, #112]	@ (8006838 <TIM_OC3_SetConfig+0x11c>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d007      	beq.n	80067da <TIM_OC3_SetConfig+0xbe>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a1b      	ldr	r2, [pc, #108]	@ (800683c <TIM_OC3_SetConfig+0x120>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d003      	beq.n	80067da <TIM_OC3_SetConfig+0xbe>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a16      	ldr	r2, [pc, #88]	@ (8006830 <TIM_OC3_SetConfig+0x114>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d113      	bne.n	8006802 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80067e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80067e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	695b      	ldr	r3, [r3, #20]
 80067ee:	011b      	lsls	r3, r3, #4
 80067f0:	693a      	ldr	r2, [r7, #16]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	011b      	lsls	r3, r3, #4
 80067fc:	693a      	ldr	r2, [r7, #16]
 80067fe:	4313      	orrs	r3, r2
 8006800:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	693a      	ldr	r2, [r7, #16]
 8006806:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	68fa      	ldr	r2, [r7, #12]
 800680c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	685a      	ldr	r2, [r3, #4]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	697a      	ldr	r2, [r7, #20]
 800681a:	621a      	str	r2, [r3, #32]
}
 800681c:	bf00      	nop
 800681e:	371c      	adds	r7, #28
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr
 8006828:	40012c00 	.word	0x40012c00
 800682c:	40013400 	.word	0x40013400
 8006830:	40015000 	.word	0x40015000
 8006834:	40014000 	.word	0x40014000
 8006838:	40014400 	.word	0x40014400
 800683c:	40014800 	.word	0x40014800

08006840 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006840:	b480      	push	{r7}
 8006842:	b087      	sub	sp, #28
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a1b      	ldr	r3, [r3, #32]
 800684e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a1b      	ldr	r3, [r3, #32]
 8006854:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	69db      	ldr	r3, [r3, #28]
 8006866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800686e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800687a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	021b      	lsls	r3, r3, #8
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	4313      	orrs	r3, r2
 8006886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800688e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	031b      	lsls	r3, r3, #12
 8006896:	697a      	ldr	r2, [r7, #20]
 8006898:	4313      	orrs	r3, r2
 800689a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a2c      	ldr	r2, [pc, #176]	@ (8006950 <TIM_OC4_SetConfig+0x110>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d007      	beq.n	80068b4 <TIM_OC4_SetConfig+0x74>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a2b      	ldr	r2, [pc, #172]	@ (8006954 <TIM_OC4_SetConfig+0x114>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d003      	beq.n	80068b4 <TIM_OC4_SetConfig+0x74>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a2a      	ldr	r2, [pc, #168]	@ (8006958 <TIM_OC4_SetConfig+0x118>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d10d      	bne.n	80068d0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80068ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	031b      	lsls	r3, r3, #12
 80068c2:	697a      	ldr	r2, [r7, #20]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4a1f      	ldr	r2, [pc, #124]	@ (8006950 <TIM_OC4_SetConfig+0x110>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d013      	beq.n	8006900 <TIM_OC4_SetConfig+0xc0>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4a1e      	ldr	r2, [pc, #120]	@ (8006954 <TIM_OC4_SetConfig+0x114>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d00f      	beq.n	8006900 <TIM_OC4_SetConfig+0xc0>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	4a1e      	ldr	r2, [pc, #120]	@ (800695c <TIM_OC4_SetConfig+0x11c>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d00b      	beq.n	8006900 <TIM_OC4_SetConfig+0xc0>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4a1d      	ldr	r2, [pc, #116]	@ (8006960 <TIM_OC4_SetConfig+0x120>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d007      	beq.n	8006900 <TIM_OC4_SetConfig+0xc0>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	4a1c      	ldr	r2, [pc, #112]	@ (8006964 <TIM_OC4_SetConfig+0x124>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d003      	beq.n	8006900 <TIM_OC4_SetConfig+0xc0>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	4a17      	ldr	r2, [pc, #92]	@ (8006958 <TIM_OC4_SetConfig+0x118>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d113      	bne.n	8006928 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006906:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800690e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	695b      	ldr	r3, [r3, #20]
 8006914:	019b      	lsls	r3, r3, #6
 8006916:	693a      	ldr	r2, [r7, #16]
 8006918:	4313      	orrs	r3, r2
 800691a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	699b      	ldr	r3, [r3, #24]
 8006920:	019b      	lsls	r3, r3, #6
 8006922:	693a      	ldr	r2, [r7, #16]
 8006924:	4313      	orrs	r3, r2
 8006926:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	693a      	ldr	r2, [r7, #16]
 800692c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	685a      	ldr	r2, [r3, #4]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	697a      	ldr	r2, [r7, #20]
 8006940:	621a      	str	r2, [r3, #32]
}
 8006942:	bf00      	nop
 8006944:	371c      	adds	r7, #28
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop
 8006950:	40012c00 	.word	0x40012c00
 8006954:	40013400 	.word	0x40013400
 8006958:	40015000 	.word	0x40015000
 800695c:	40014000 	.word	0x40014000
 8006960:	40014400 	.word	0x40014400
 8006964:	40014800 	.word	0x40014800

08006968 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006968:	b480      	push	{r7}
 800696a:	b087      	sub	sp, #28
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6a1b      	ldr	r3, [r3, #32]
 8006976:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6a1b      	ldr	r3, [r3, #32]
 800697c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800698e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006996:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800699a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80069ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	041b      	lsls	r3, r3, #16
 80069b4:	693a      	ldr	r2, [r7, #16]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4a19      	ldr	r2, [pc, #100]	@ (8006a24 <TIM_OC5_SetConfig+0xbc>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d013      	beq.n	80069ea <TIM_OC5_SetConfig+0x82>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a18      	ldr	r2, [pc, #96]	@ (8006a28 <TIM_OC5_SetConfig+0xc0>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d00f      	beq.n	80069ea <TIM_OC5_SetConfig+0x82>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a17      	ldr	r2, [pc, #92]	@ (8006a2c <TIM_OC5_SetConfig+0xc4>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d00b      	beq.n	80069ea <TIM_OC5_SetConfig+0x82>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a16      	ldr	r2, [pc, #88]	@ (8006a30 <TIM_OC5_SetConfig+0xc8>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d007      	beq.n	80069ea <TIM_OC5_SetConfig+0x82>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4a15      	ldr	r2, [pc, #84]	@ (8006a34 <TIM_OC5_SetConfig+0xcc>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d003      	beq.n	80069ea <TIM_OC5_SetConfig+0x82>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	4a14      	ldr	r2, [pc, #80]	@ (8006a38 <TIM_OC5_SetConfig+0xd0>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d109      	bne.n	80069fe <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	695b      	ldr	r3, [r3, #20]
 80069f6:	021b      	lsls	r3, r3, #8
 80069f8:	697a      	ldr	r2, [r7, #20]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	697a      	ldr	r2, [r7, #20]
 8006a02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	685a      	ldr	r2, [r3, #4]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	693a      	ldr	r2, [r7, #16]
 8006a16:	621a      	str	r2, [r3, #32]
}
 8006a18:	bf00      	nop
 8006a1a:	371c      	adds	r7, #28
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr
 8006a24:	40012c00 	.word	0x40012c00
 8006a28:	40013400 	.word	0x40013400
 8006a2c:	40014000 	.word	0x40014000
 8006a30:	40014400 	.word	0x40014400
 8006a34:	40014800 	.word	0x40014800
 8006a38:	40015000 	.word	0x40015000

08006a3c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b087      	sub	sp, #28
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a1b      	ldr	r3, [r3, #32]
 8006a4a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6a1b      	ldr	r3, [r3, #32]
 8006a50:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	021b      	lsls	r3, r3, #8
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006a82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	051b      	lsls	r3, r3, #20
 8006a8a:	693a      	ldr	r2, [r7, #16]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a1a      	ldr	r2, [pc, #104]	@ (8006afc <TIM_OC6_SetConfig+0xc0>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d013      	beq.n	8006ac0 <TIM_OC6_SetConfig+0x84>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4a19      	ldr	r2, [pc, #100]	@ (8006b00 <TIM_OC6_SetConfig+0xc4>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d00f      	beq.n	8006ac0 <TIM_OC6_SetConfig+0x84>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	4a18      	ldr	r2, [pc, #96]	@ (8006b04 <TIM_OC6_SetConfig+0xc8>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d00b      	beq.n	8006ac0 <TIM_OC6_SetConfig+0x84>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	4a17      	ldr	r2, [pc, #92]	@ (8006b08 <TIM_OC6_SetConfig+0xcc>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d007      	beq.n	8006ac0 <TIM_OC6_SetConfig+0x84>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4a16      	ldr	r2, [pc, #88]	@ (8006b0c <TIM_OC6_SetConfig+0xd0>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d003      	beq.n	8006ac0 <TIM_OC6_SetConfig+0x84>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4a15      	ldr	r2, [pc, #84]	@ (8006b10 <TIM_OC6_SetConfig+0xd4>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d109      	bne.n	8006ad4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006ac6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	695b      	ldr	r3, [r3, #20]
 8006acc:	029b      	lsls	r3, r3, #10
 8006ace:	697a      	ldr	r2, [r7, #20]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	697a      	ldr	r2, [r7, #20]
 8006ad8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	685a      	ldr	r2, [r3, #4]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	693a      	ldr	r2, [r7, #16]
 8006aec:	621a      	str	r2, [r3, #32]
}
 8006aee:	bf00      	nop
 8006af0:	371c      	adds	r7, #28
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop
 8006afc:	40012c00 	.word	0x40012c00
 8006b00:	40013400 	.word	0x40013400
 8006b04:	40014000 	.word	0x40014000
 8006b08:	40014400 	.word	0x40014400
 8006b0c:	40014800 	.word	0x40014800
 8006b10:	40015000 	.word	0x40015000

08006b14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b087      	sub	sp, #28
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6a1b      	ldr	r3, [r3, #32]
 8006b24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	6a1b      	ldr	r3, [r3, #32]
 8006b2a:	f023 0201 	bic.w	r2, r3, #1
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	699b      	ldr	r3, [r3, #24]
 8006b36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	011b      	lsls	r3, r3, #4
 8006b44:	693a      	ldr	r2, [r7, #16]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	f023 030a 	bic.w	r3, r3, #10
 8006b50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b52:	697a      	ldr	r2, [r7, #20]
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	693a      	ldr	r2, [r7, #16]
 8006b5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	697a      	ldr	r2, [r7, #20]
 8006b64:	621a      	str	r2, [r3, #32]
}
 8006b66:	bf00      	nop
 8006b68:	371c      	adds	r7, #28
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr

08006b72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b72:	b480      	push	{r7}
 8006b74:	b087      	sub	sp, #28
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	60f8      	str	r0, [r7, #12]
 8006b7a:	60b9      	str	r1, [r7, #8]
 8006b7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6a1b      	ldr	r3, [r3, #32]
 8006b82:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6a1b      	ldr	r3, [r3, #32]
 8006b88:	f023 0210 	bic.w	r2, r3, #16
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	699b      	ldr	r3, [r3, #24]
 8006b94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	031b      	lsls	r3, r3, #12
 8006ba2:	693a      	ldr	r2, [r7, #16]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006bae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	011b      	lsls	r3, r3, #4
 8006bb4:	697a      	ldr	r2, [r7, #20]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	693a      	ldr	r2, [r7, #16]
 8006bbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	697a      	ldr	r2, [r7, #20]
 8006bc4:	621a      	str	r2, [r3, #32]
}
 8006bc6:	bf00      	nop
 8006bc8:	371c      	adds	r7, #28
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr

08006bd2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006bd2:	b480      	push	{r7}
 8006bd4:	b085      	sub	sp, #20
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
 8006bda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006be8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006bee:	683a      	ldr	r2, [r7, #0]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	f043 0307 	orr.w	r3, r3, #7
 8006bf8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	68fa      	ldr	r2, [r7, #12]
 8006bfe:	609a      	str	r2, [r3, #8]
}
 8006c00:	bf00      	nop
 8006c02:	3714      	adds	r7, #20
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b087      	sub	sp, #28
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	607a      	str	r2, [r7, #4]
 8006c18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	021a      	lsls	r2, r3, #8
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	431a      	orrs	r2, r3
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	697a      	ldr	r2, [r7, #20]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	697a      	ldr	r2, [r7, #20]
 8006c3e:	609a      	str	r2, [r3, #8]
}
 8006c40:	bf00      	nop
 8006c42:	371c      	adds	r7, #28
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b087      	sub	sp, #28
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	f003 031f 	and.w	r3, r3, #31
 8006c5e:	2201      	movs	r2, #1
 8006c60:	fa02 f303 	lsl.w	r3, r2, r3
 8006c64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	6a1a      	ldr	r2, [r3, #32]
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	43db      	mvns	r3, r3
 8006c6e:	401a      	ands	r2, r3
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6a1a      	ldr	r2, [r3, #32]
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	f003 031f 	and.w	r3, r3, #31
 8006c7e:	6879      	ldr	r1, [r7, #4]
 8006c80:	fa01 f303 	lsl.w	r3, r1, r3
 8006c84:	431a      	orrs	r2, r3
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	621a      	str	r2, [r3, #32]
}
 8006c8a:	bf00      	nop
 8006c8c:	371c      	adds	r7, #28
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr
	...

08006c98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d101      	bne.n	8006cb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006cac:	2302      	movs	r3, #2
 8006cae:	e074      	b.n	8006d9a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2202      	movs	r2, #2
 8006cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a34      	ldr	r2, [pc, #208]	@ (8006da8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d009      	beq.n	8006cee <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a33      	ldr	r2, [pc, #204]	@ (8006dac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d004      	beq.n	8006cee <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a31      	ldr	r2, [pc, #196]	@ (8006db0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d108      	bne.n	8006d00 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006cf4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	68fa      	ldr	r2, [r7, #12]
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006d06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a21      	ldr	r2, [pc, #132]	@ (8006da8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d022      	beq.n	8006d6e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d30:	d01d      	beq.n	8006d6e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a1f      	ldr	r2, [pc, #124]	@ (8006db4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d018      	beq.n	8006d6e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a1d      	ldr	r2, [pc, #116]	@ (8006db8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d013      	beq.n	8006d6e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a1c      	ldr	r2, [pc, #112]	@ (8006dbc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d00e      	beq.n	8006d6e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a15      	ldr	r2, [pc, #84]	@ (8006dac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d009      	beq.n	8006d6e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a18      	ldr	r2, [pc, #96]	@ (8006dc0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d004      	beq.n	8006d6e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a11      	ldr	r2, [pc, #68]	@ (8006db0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d10c      	bne.n	8006d88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	68ba      	ldr	r2, [r7, #8]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	68ba      	ldr	r2, [r7, #8]
 8006d86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3714      	adds	r7, #20
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr
 8006da6:	bf00      	nop
 8006da8:	40012c00 	.word	0x40012c00
 8006dac:	40013400 	.word	0x40013400
 8006db0:	40015000 	.word	0x40015000
 8006db4:	40000400 	.word	0x40000400
 8006db8:	40000800 	.word	0x40000800
 8006dbc:	40000c00 	.word	0x40000c00
 8006dc0:	40014000 	.word	0x40014000

08006dc4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b085      	sub	sp, #20
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d101      	bne.n	8006de0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006ddc:	2302      	movs	r3, #2
 8006dde:	e078      	b.n	8006ed2 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	695b      	ldr	r3, [r3, #20]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e46:	4313      	orrs	r3, r2
 8006e48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	699b      	ldr	r3, [r3, #24]
 8006e54:	041b      	lsls	r3, r3, #16
 8006e56:	4313      	orrs	r3, r2
 8006e58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	69db      	ldr	r3, [r3, #28]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a1c      	ldr	r2, [pc, #112]	@ (8006ee0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d009      	beq.n	8006e86 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a1b      	ldr	r2, [pc, #108]	@ (8006ee4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d004      	beq.n	8006e86 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a19      	ldr	r2, [pc, #100]	@ (8006ee8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d11c      	bne.n	8006ec0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e90:	051b      	lsls	r3, r3, #20
 8006e92:	4313      	orrs	r3, r2
 8006e94:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	6a1b      	ldr	r3, [r3, #32]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	68fa      	ldr	r2, [r7, #12]
 8006ec6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3714      	adds	r7, #20
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr
 8006ede:	bf00      	nop
 8006ee0:	40012c00 	.word	0x40012c00
 8006ee4:	40013400 	.word	0x40013400
 8006ee8:	40015000 	.word	0x40015000

08006eec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d101      	bne.n	8006efe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	e042      	b.n	8006f84 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d106      	bne.n	8006f16 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f7fa ff3d 	bl	8001d90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2224      	movs	r2, #36	@ 0x24
 8006f1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f022 0201 	bic.w	r2, r2, #1
 8006f2c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d002      	beq.n	8006f3c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 fb24 	bl	8007584 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 f825 	bl	8006f8c <UART_SetConfig>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d101      	bne.n	8006f4c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e01b      	b.n	8006f84 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	685a      	ldr	r2, [r3, #4]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006f5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	689a      	ldr	r2, [r3, #8]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006f6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f042 0201 	orr.w	r2, r2, #1
 8006f7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 fba3 	bl	80076c8 <UART_CheckIdleState>
 8006f82:	4603      	mov	r3, r0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3708      	adds	r7, #8
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f90:	b08c      	sub	sp, #48	@ 0x30
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f96:	2300      	movs	r3, #0
 8006f98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	689a      	ldr	r2, [r3, #8]
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	691b      	ldr	r3, [r3, #16]
 8006fa4:	431a      	orrs	r2, r3
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	695b      	ldr	r3, [r3, #20]
 8006faa:	431a      	orrs	r2, r3
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	69db      	ldr	r3, [r3, #28]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	4baa      	ldr	r3, [pc, #680]	@ (8007264 <UART_SetConfig+0x2d8>)
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	697a      	ldr	r2, [r7, #20]
 8006fc0:	6812      	ldr	r2, [r2, #0]
 8006fc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006fc4:	430b      	orrs	r3, r1
 8006fc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	68da      	ldr	r2, [r3, #12]
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	430a      	orrs	r2, r1
 8006fdc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	699b      	ldr	r3, [r3, #24]
 8006fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a9f      	ldr	r2, [pc, #636]	@ (8007268 <UART_SetConfig+0x2dc>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d004      	beq.n	8006ff8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	6a1b      	ldr	r3, [r3, #32]
 8006ff2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007002:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007006:	697a      	ldr	r2, [r7, #20]
 8007008:	6812      	ldr	r2, [r2, #0]
 800700a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800700c:	430b      	orrs	r3, r1
 800700e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007016:	f023 010f 	bic.w	r1, r3, #15
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	430a      	orrs	r2, r1
 8007024:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a90      	ldr	r2, [pc, #576]	@ (800726c <UART_SetConfig+0x2e0>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d125      	bne.n	800707c <UART_SetConfig+0xf0>
 8007030:	4b8f      	ldr	r3, [pc, #572]	@ (8007270 <UART_SetConfig+0x2e4>)
 8007032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007036:	f003 0303 	and.w	r3, r3, #3
 800703a:	2b03      	cmp	r3, #3
 800703c:	d81a      	bhi.n	8007074 <UART_SetConfig+0xe8>
 800703e:	a201      	add	r2, pc, #4	@ (adr r2, 8007044 <UART_SetConfig+0xb8>)
 8007040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007044:	08007055 	.word	0x08007055
 8007048:	08007065 	.word	0x08007065
 800704c:	0800705d 	.word	0x0800705d
 8007050:	0800706d 	.word	0x0800706d
 8007054:	2301      	movs	r3, #1
 8007056:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800705a:	e116      	b.n	800728a <UART_SetConfig+0x2fe>
 800705c:	2302      	movs	r3, #2
 800705e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007062:	e112      	b.n	800728a <UART_SetConfig+0x2fe>
 8007064:	2304      	movs	r3, #4
 8007066:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800706a:	e10e      	b.n	800728a <UART_SetConfig+0x2fe>
 800706c:	2308      	movs	r3, #8
 800706e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007072:	e10a      	b.n	800728a <UART_SetConfig+0x2fe>
 8007074:	2310      	movs	r3, #16
 8007076:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800707a:	e106      	b.n	800728a <UART_SetConfig+0x2fe>
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a7c      	ldr	r2, [pc, #496]	@ (8007274 <UART_SetConfig+0x2e8>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d138      	bne.n	80070f8 <UART_SetConfig+0x16c>
 8007086:	4b7a      	ldr	r3, [pc, #488]	@ (8007270 <UART_SetConfig+0x2e4>)
 8007088:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800708c:	f003 030c 	and.w	r3, r3, #12
 8007090:	2b0c      	cmp	r3, #12
 8007092:	d82d      	bhi.n	80070f0 <UART_SetConfig+0x164>
 8007094:	a201      	add	r2, pc, #4	@ (adr r2, 800709c <UART_SetConfig+0x110>)
 8007096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800709a:	bf00      	nop
 800709c:	080070d1 	.word	0x080070d1
 80070a0:	080070f1 	.word	0x080070f1
 80070a4:	080070f1 	.word	0x080070f1
 80070a8:	080070f1 	.word	0x080070f1
 80070ac:	080070e1 	.word	0x080070e1
 80070b0:	080070f1 	.word	0x080070f1
 80070b4:	080070f1 	.word	0x080070f1
 80070b8:	080070f1 	.word	0x080070f1
 80070bc:	080070d9 	.word	0x080070d9
 80070c0:	080070f1 	.word	0x080070f1
 80070c4:	080070f1 	.word	0x080070f1
 80070c8:	080070f1 	.word	0x080070f1
 80070cc:	080070e9 	.word	0x080070e9
 80070d0:	2300      	movs	r3, #0
 80070d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070d6:	e0d8      	b.n	800728a <UART_SetConfig+0x2fe>
 80070d8:	2302      	movs	r3, #2
 80070da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070de:	e0d4      	b.n	800728a <UART_SetConfig+0x2fe>
 80070e0:	2304      	movs	r3, #4
 80070e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070e6:	e0d0      	b.n	800728a <UART_SetConfig+0x2fe>
 80070e8:	2308      	movs	r3, #8
 80070ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070ee:	e0cc      	b.n	800728a <UART_SetConfig+0x2fe>
 80070f0:	2310      	movs	r3, #16
 80070f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070f6:	e0c8      	b.n	800728a <UART_SetConfig+0x2fe>
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a5e      	ldr	r2, [pc, #376]	@ (8007278 <UART_SetConfig+0x2ec>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d125      	bne.n	800714e <UART_SetConfig+0x1c2>
 8007102:	4b5b      	ldr	r3, [pc, #364]	@ (8007270 <UART_SetConfig+0x2e4>)
 8007104:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007108:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800710c:	2b30      	cmp	r3, #48	@ 0x30
 800710e:	d016      	beq.n	800713e <UART_SetConfig+0x1b2>
 8007110:	2b30      	cmp	r3, #48	@ 0x30
 8007112:	d818      	bhi.n	8007146 <UART_SetConfig+0x1ba>
 8007114:	2b20      	cmp	r3, #32
 8007116:	d00a      	beq.n	800712e <UART_SetConfig+0x1a2>
 8007118:	2b20      	cmp	r3, #32
 800711a:	d814      	bhi.n	8007146 <UART_SetConfig+0x1ba>
 800711c:	2b00      	cmp	r3, #0
 800711e:	d002      	beq.n	8007126 <UART_SetConfig+0x19a>
 8007120:	2b10      	cmp	r3, #16
 8007122:	d008      	beq.n	8007136 <UART_SetConfig+0x1aa>
 8007124:	e00f      	b.n	8007146 <UART_SetConfig+0x1ba>
 8007126:	2300      	movs	r3, #0
 8007128:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800712c:	e0ad      	b.n	800728a <UART_SetConfig+0x2fe>
 800712e:	2302      	movs	r3, #2
 8007130:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007134:	e0a9      	b.n	800728a <UART_SetConfig+0x2fe>
 8007136:	2304      	movs	r3, #4
 8007138:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800713c:	e0a5      	b.n	800728a <UART_SetConfig+0x2fe>
 800713e:	2308      	movs	r3, #8
 8007140:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007144:	e0a1      	b.n	800728a <UART_SetConfig+0x2fe>
 8007146:	2310      	movs	r3, #16
 8007148:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800714c:	e09d      	b.n	800728a <UART_SetConfig+0x2fe>
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a4a      	ldr	r2, [pc, #296]	@ (800727c <UART_SetConfig+0x2f0>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d125      	bne.n	80071a4 <UART_SetConfig+0x218>
 8007158:	4b45      	ldr	r3, [pc, #276]	@ (8007270 <UART_SetConfig+0x2e4>)
 800715a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800715e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007162:	2bc0      	cmp	r3, #192	@ 0xc0
 8007164:	d016      	beq.n	8007194 <UART_SetConfig+0x208>
 8007166:	2bc0      	cmp	r3, #192	@ 0xc0
 8007168:	d818      	bhi.n	800719c <UART_SetConfig+0x210>
 800716a:	2b80      	cmp	r3, #128	@ 0x80
 800716c:	d00a      	beq.n	8007184 <UART_SetConfig+0x1f8>
 800716e:	2b80      	cmp	r3, #128	@ 0x80
 8007170:	d814      	bhi.n	800719c <UART_SetConfig+0x210>
 8007172:	2b00      	cmp	r3, #0
 8007174:	d002      	beq.n	800717c <UART_SetConfig+0x1f0>
 8007176:	2b40      	cmp	r3, #64	@ 0x40
 8007178:	d008      	beq.n	800718c <UART_SetConfig+0x200>
 800717a:	e00f      	b.n	800719c <UART_SetConfig+0x210>
 800717c:	2300      	movs	r3, #0
 800717e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007182:	e082      	b.n	800728a <UART_SetConfig+0x2fe>
 8007184:	2302      	movs	r3, #2
 8007186:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800718a:	e07e      	b.n	800728a <UART_SetConfig+0x2fe>
 800718c:	2304      	movs	r3, #4
 800718e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007192:	e07a      	b.n	800728a <UART_SetConfig+0x2fe>
 8007194:	2308      	movs	r3, #8
 8007196:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800719a:	e076      	b.n	800728a <UART_SetConfig+0x2fe>
 800719c:	2310      	movs	r3, #16
 800719e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071a2:	e072      	b.n	800728a <UART_SetConfig+0x2fe>
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a35      	ldr	r2, [pc, #212]	@ (8007280 <UART_SetConfig+0x2f4>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d12a      	bne.n	8007204 <UART_SetConfig+0x278>
 80071ae:	4b30      	ldr	r3, [pc, #192]	@ (8007270 <UART_SetConfig+0x2e4>)
 80071b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071bc:	d01a      	beq.n	80071f4 <UART_SetConfig+0x268>
 80071be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071c2:	d81b      	bhi.n	80071fc <UART_SetConfig+0x270>
 80071c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071c8:	d00c      	beq.n	80071e4 <UART_SetConfig+0x258>
 80071ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071ce:	d815      	bhi.n	80071fc <UART_SetConfig+0x270>
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d003      	beq.n	80071dc <UART_SetConfig+0x250>
 80071d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071d8:	d008      	beq.n	80071ec <UART_SetConfig+0x260>
 80071da:	e00f      	b.n	80071fc <UART_SetConfig+0x270>
 80071dc:	2300      	movs	r3, #0
 80071de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071e2:	e052      	b.n	800728a <UART_SetConfig+0x2fe>
 80071e4:	2302      	movs	r3, #2
 80071e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071ea:	e04e      	b.n	800728a <UART_SetConfig+0x2fe>
 80071ec:	2304      	movs	r3, #4
 80071ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071f2:	e04a      	b.n	800728a <UART_SetConfig+0x2fe>
 80071f4:	2308      	movs	r3, #8
 80071f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071fa:	e046      	b.n	800728a <UART_SetConfig+0x2fe>
 80071fc:	2310      	movs	r3, #16
 80071fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007202:	e042      	b.n	800728a <UART_SetConfig+0x2fe>
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a17      	ldr	r2, [pc, #92]	@ (8007268 <UART_SetConfig+0x2dc>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d13a      	bne.n	8007284 <UART_SetConfig+0x2f8>
 800720e:	4b18      	ldr	r3, [pc, #96]	@ (8007270 <UART_SetConfig+0x2e4>)
 8007210:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007214:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007218:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800721c:	d01a      	beq.n	8007254 <UART_SetConfig+0x2c8>
 800721e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007222:	d81b      	bhi.n	800725c <UART_SetConfig+0x2d0>
 8007224:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007228:	d00c      	beq.n	8007244 <UART_SetConfig+0x2b8>
 800722a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800722e:	d815      	bhi.n	800725c <UART_SetConfig+0x2d0>
 8007230:	2b00      	cmp	r3, #0
 8007232:	d003      	beq.n	800723c <UART_SetConfig+0x2b0>
 8007234:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007238:	d008      	beq.n	800724c <UART_SetConfig+0x2c0>
 800723a:	e00f      	b.n	800725c <UART_SetConfig+0x2d0>
 800723c:	2300      	movs	r3, #0
 800723e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007242:	e022      	b.n	800728a <UART_SetConfig+0x2fe>
 8007244:	2302      	movs	r3, #2
 8007246:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800724a:	e01e      	b.n	800728a <UART_SetConfig+0x2fe>
 800724c:	2304      	movs	r3, #4
 800724e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007252:	e01a      	b.n	800728a <UART_SetConfig+0x2fe>
 8007254:	2308      	movs	r3, #8
 8007256:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800725a:	e016      	b.n	800728a <UART_SetConfig+0x2fe>
 800725c:	2310      	movs	r3, #16
 800725e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007262:	e012      	b.n	800728a <UART_SetConfig+0x2fe>
 8007264:	cfff69f3 	.word	0xcfff69f3
 8007268:	40008000 	.word	0x40008000
 800726c:	40013800 	.word	0x40013800
 8007270:	40021000 	.word	0x40021000
 8007274:	40004400 	.word	0x40004400
 8007278:	40004800 	.word	0x40004800
 800727c:	40004c00 	.word	0x40004c00
 8007280:	40005000 	.word	0x40005000
 8007284:	2310      	movs	r3, #16
 8007286:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4aae      	ldr	r2, [pc, #696]	@ (8007548 <UART_SetConfig+0x5bc>)
 8007290:	4293      	cmp	r3, r2
 8007292:	f040 8097 	bne.w	80073c4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007296:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800729a:	2b08      	cmp	r3, #8
 800729c:	d823      	bhi.n	80072e6 <UART_SetConfig+0x35a>
 800729e:	a201      	add	r2, pc, #4	@ (adr r2, 80072a4 <UART_SetConfig+0x318>)
 80072a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a4:	080072c9 	.word	0x080072c9
 80072a8:	080072e7 	.word	0x080072e7
 80072ac:	080072d1 	.word	0x080072d1
 80072b0:	080072e7 	.word	0x080072e7
 80072b4:	080072d7 	.word	0x080072d7
 80072b8:	080072e7 	.word	0x080072e7
 80072bc:	080072e7 	.word	0x080072e7
 80072c0:	080072e7 	.word	0x080072e7
 80072c4:	080072df 	.word	0x080072df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072c8:	f7fd fff6 	bl	80052b8 <HAL_RCC_GetPCLK1Freq>
 80072cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80072ce:	e010      	b.n	80072f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072d0:	4b9e      	ldr	r3, [pc, #632]	@ (800754c <UART_SetConfig+0x5c0>)
 80072d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80072d4:	e00d      	b.n	80072f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072d6:	f7fd ff81 	bl	80051dc <HAL_RCC_GetSysClockFreq>
 80072da:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80072dc:	e009      	b.n	80072f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80072e4:	e005      	b.n	80072f2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80072e6:	2300      	movs	r3, #0
 80072e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80072ea:	2301      	movs	r3, #1
 80072ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80072f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80072f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	f000 8130 	beq.w	800755a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072fe:	4a94      	ldr	r2, [pc, #592]	@ (8007550 <UART_SetConfig+0x5c4>)
 8007300:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007304:	461a      	mov	r2, r3
 8007306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007308:	fbb3 f3f2 	udiv	r3, r3, r2
 800730c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	685a      	ldr	r2, [r3, #4]
 8007312:	4613      	mov	r3, r2
 8007314:	005b      	lsls	r3, r3, #1
 8007316:	4413      	add	r3, r2
 8007318:	69ba      	ldr	r2, [r7, #24]
 800731a:	429a      	cmp	r2, r3
 800731c:	d305      	bcc.n	800732a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007324:	69ba      	ldr	r2, [r7, #24]
 8007326:	429a      	cmp	r2, r3
 8007328:	d903      	bls.n	8007332 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800732a:	2301      	movs	r3, #1
 800732c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007330:	e113      	b.n	800755a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007334:	2200      	movs	r2, #0
 8007336:	60bb      	str	r3, [r7, #8]
 8007338:	60fa      	str	r2, [r7, #12]
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800733e:	4a84      	ldr	r2, [pc, #528]	@ (8007550 <UART_SetConfig+0x5c4>)
 8007340:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007344:	b29b      	uxth	r3, r3
 8007346:	2200      	movs	r2, #0
 8007348:	603b      	str	r3, [r7, #0]
 800734a:	607a      	str	r2, [r7, #4]
 800734c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007350:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007354:	f7f9 fb7e 	bl	8000a54 <__aeabi_uldivmod>
 8007358:	4602      	mov	r2, r0
 800735a:	460b      	mov	r3, r1
 800735c:	4610      	mov	r0, r2
 800735e:	4619      	mov	r1, r3
 8007360:	f04f 0200 	mov.w	r2, #0
 8007364:	f04f 0300 	mov.w	r3, #0
 8007368:	020b      	lsls	r3, r1, #8
 800736a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800736e:	0202      	lsls	r2, r0, #8
 8007370:	6979      	ldr	r1, [r7, #20]
 8007372:	6849      	ldr	r1, [r1, #4]
 8007374:	0849      	lsrs	r1, r1, #1
 8007376:	2000      	movs	r0, #0
 8007378:	460c      	mov	r4, r1
 800737a:	4605      	mov	r5, r0
 800737c:	eb12 0804 	adds.w	r8, r2, r4
 8007380:	eb43 0905 	adc.w	r9, r3, r5
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	469a      	mov	sl, r3
 800738c:	4693      	mov	fp, r2
 800738e:	4652      	mov	r2, sl
 8007390:	465b      	mov	r3, fp
 8007392:	4640      	mov	r0, r8
 8007394:	4649      	mov	r1, r9
 8007396:	f7f9 fb5d 	bl	8000a54 <__aeabi_uldivmod>
 800739a:	4602      	mov	r2, r0
 800739c:	460b      	mov	r3, r1
 800739e:	4613      	mov	r3, r2
 80073a0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80073a2:	6a3b      	ldr	r3, [r7, #32]
 80073a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80073a8:	d308      	bcc.n	80073bc <UART_SetConfig+0x430>
 80073aa:	6a3b      	ldr	r3, [r7, #32]
 80073ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073b0:	d204      	bcs.n	80073bc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	6a3a      	ldr	r2, [r7, #32]
 80073b8:	60da      	str	r2, [r3, #12]
 80073ba:	e0ce      	b.n	800755a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80073c2:	e0ca      	b.n	800755a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	69db      	ldr	r3, [r3, #28]
 80073c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073cc:	d166      	bne.n	800749c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80073ce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80073d2:	2b08      	cmp	r3, #8
 80073d4:	d827      	bhi.n	8007426 <UART_SetConfig+0x49a>
 80073d6:	a201      	add	r2, pc, #4	@ (adr r2, 80073dc <UART_SetConfig+0x450>)
 80073d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073dc:	08007401 	.word	0x08007401
 80073e0:	08007409 	.word	0x08007409
 80073e4:	08007411 	.word	0x08007411
 80073e8:	08007427 	.word	0x08007427
 80073ec:	08007417 	.word	0x08007417
 80073f0:	08007427 	.word	0x08007427
 80073f4:	08007427 	.word	0x08007427
 80073f8:	08007427 	.word	0x08007427
 80073fc:	0800741f 	.word	0x0800741f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007400:	f7fd ff5a 	bl	80052b8 <HAL_RCC_GetPCLK1Freq>
 8007404:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007406:	e014      	b.n	8007432 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007408:	f7fd ff6c 	bl	80052e4 <HAL_RCC_GetPCLK2Freq>
 800740c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800740e:	e010      	b.n	8007432 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007410:	4b4e      	ldr	r3, [pc, #312]	@ (800754c <UART_SetConfig+0x5c0>)
 8007412:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007414:	e00d      	b.n	8007432 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007416:	f7fd fee1 	bl	80051dc <HAL_RCC_GetSysClockFreq>
 800741a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800741c:	e009      	b.n	8007432 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800741e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007422:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007424:	e005      	b.n	8007432 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007426:	2300      	movs	r3, #0
 8007428:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007430:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007434:	2b00      	cmp	r3, #0
 8007436:	f000 8090 	beq.w	800755a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800743e:	4a44      	ldr	r2, [pc, #272]	@ (8007550 <UART_SetConfig+0x5c4>)
 8007440:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007444:	461a      	mov	r2, r3
 8007446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007448:	fbb3 f3f2 	udiv	r3, r3, r2
 800744c:	005a      	lsls	r2, r3, #1
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	085b      	lsrs	r3, r3, #1
 8007454:	441a      	add	r2, r3
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	fbb2 f3f3 	udiv	r3, r2, r3
 800745e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007460:	6a3b      	ldr	r3, [r7, #32]
 8007462:	2b0f      	cmp	r3, #15
 8007464:	d916      	bls.n	8007494 <UART_SetConfig+0x508>
 8007466:	6a3b      	ldr	r3, [r7, #32]
 8007468:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800746c:	d212      	bcs.n	8007494 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800746e:	6a3b      	ldr	r3, [r7, #32]
 8007470:	b29b      	uxth	r3, r3
 8007472:	f023 030f 	bic.w	r3, r3, #15
 8007476:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007478:	6a3b      	ldr	r3, [r7, #32]
 800747a:	085b      	lsrs	r3, r3, #1
 800747c:	b29b      	uxth	r3, r3
 800747e:	f003 0307 	and.w	r3, r3, #7
 8007482:	b29a      	uxth	r2, r3
 8007484:	8bfb      	ldrh	r3, [r7, #30]
 8007486:	4313      	orrs	r3, r2
 8007488:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	8bfa      	ldrh	r2, [r7, #30]
 8007490:	60da      	str	r2, [r3, #12]
 8007492:	e062      	b.n	800755a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800749a:	e05e      	b.n	800755a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800749c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80074a0:	2b08      	cmp	r3, #8
 80074a2:	d828      	bhi.n	80074f6 <UART_SetConfig+0x56a>
 80074a4:	a201      	add	r2, pc, #4	@ (adr r2, 80074ac <UART_SetConfig+0x520>)
 80074a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074aa:	bf00      	nop
 80074ac:	080074d1 	.word	0x080074d1
 80074b0:	080074d9 	.word	0x080074d9
 80074b4:	080074e1 	.word	0x080074e1
 80074b8:	080074f7 	.word	0x080074f7
 80074bc:	080074e7 	.word	0x080074e7
 80074c0:	080074f7 	.word	0x080074f7
 80074c4:	080074f7 	.word	0x080074f7
 80074c8:	080074f7 	.word	0x080074f7
 80074cc:	080074ef 	.word	0x080074ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074d0:	f7fd fef2 	bl	80052b8 <HAL_RCC_GetPCLK1Freq>
 80074d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80074d6:	e014      	b.n	8007502 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074d8:	f7fd ff04 	bl	80052e4 <HAL_RCC_GetPCLK2Freq>
 80074dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80074de:	e010      	b.n	8007502 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074e0:	4b1a      	ldr	r3, [pc, #104]	@ (800754c <UART_SetConfig+0x5c0>)
 80074e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80074e4:	e00d      	b.n	8007502 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074e6:	f7fd fe79 	bl	80051dc <HAL_RCC_GetSysClockFreq>
 80074ea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80074ec:	e009      	b.n	8007502 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80074f4:	e005      	b.n	8007502 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80074f6:	2300      	movs	r3, #0
 80074f8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007500:	bf00      	nop
    }

    if (pclk != 0U)
 8007502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007504:	2b00      	cmp	r3, #0
 8007506:	d028      	beq.n	800755a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800750c:	4a10      	ldr	r2, [pc, #64]	@ (8007550 <UART_SetConfig+0x5c4>)
 800750e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007512:	461a      	mov	r2, r3
 8007514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007516:	fbb3 f2f2 	udiv	r2, r3, r2
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	085b      	lsrs	r3, r3, #1
 8007520:	441a      	add	r2, r3
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	fbb2 f3f3 	udiv	r3, r2, r3
 800752a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800752c:	6a3b      	ldr	r3, [r7, #32]
 800752e:	2b0f      	cmp	r3, #15
 8007530:	d910      	bls.n	8007554 <UART_SetConfig+0x5c8>
 8007532:	6a3b      	ldr	r3, [r7, #32]
 8007534:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007538:	d20c      	bcs.n	8007554 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800753a:	6a3b      	ldr	r3, [r7, #32]
 800753c:	b29a      	uxth	r2, r3
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	60da      	str	r2, [r3, #12]
 8007544:	e009      	b.n	800755a <UART_SetConfig+0x5ce>
 8007546:	bf00      	nop
 8007548:	40008000 	.word	0x40008000
 800754c:	00f42400 	.word	0x00f42400
 8007550:	08007cbc 	.word	0x08007cbc
      }
      else
      {
        ret = HAL_ERROR;
 8007554:	2301      	movs	r3, #1
 8007556:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	2201      	movs	r2, #1
 800755e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	2201      	movs	r2, #1
 8007566:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	2200      	movs	r2, #0
 800756e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	2200      	movs	r2, #0
 8007574:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007576:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800757a:	4618      	mov	r0, r3
 800757c:	3730      	adds	r7, #48	@ 0x30
 800757e:	46bd      	mov	sp, r7
 8007580:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007584 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007590:	f003 0308 	and.w	r3, r3, #8
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00a      	beq.n	80075ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	430a      	orrs	r2, r1
 80075ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075b2:	f003 0301 	and.w	r3, r3, #1
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d00a      	beq.n	80075d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	430a      	orrs	r2, r1
 80075ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075d4:	f003 0302 	and.w	r3, r3, #2
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d00a      	beq.n	80075f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	430a      	orrs	r2, r1
 80075f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075f6:	f003 0304 	and.w	r3, r3, #4
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d00a      	beq.n	8007614 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	430a      	orrs	r2, r1
 8007612:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007618:	f003 0310 	and.w	r3, r3, #16
 800761c:	2b00      	cmp	r3, #0
 800761e:	d00a      	beq.n	8007636 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	430a      	orrs	r2, r1
 8007634:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800763a:	f003 0320 	and.w	r3, r3, #32
 800763e:	2b00      	cmp	r3, #0
 8007640:	d00a      	beq.n	8007658 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	430a      	orrs	r2, r1
 8007656:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800765c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007660:	2b00      	cmp	r3, #0
 8007662:	d01a      	beq.n	800769a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	430a      	orrs	r2, r1
 8007678:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800767e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007682:	d10a      	bne.n	800769a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	430a      	orrs	r2, r1
 8007698:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800769e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d00a      	beq.n	80076bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	430a      	orrs	r2, r1
 80076ba:	605a      	str	r2, [r3, #4]
  }
}
 80076bc:	bf00      	nop
 80076be:	370c      	adds	r7, #12
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b098      	sub	sp, #96	@ 0x60
 80076cc:	af02      	add	r7, sp, #8
 80076ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80076d8:	f7fa fdaa 	bl	8002230 <HAL_GetTick>
 80076dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f003 0308 	and.w	r3, r3, #8
 80076e8:	2b08      	cmp	r3, #8
 80076ea:	d12f      	bne.n	800774c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80076f0:	9300      	str	r3, [sp, #0]
 80076f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076f4:	2200      	movs	r2, #0
 80076f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 f88e 	bl	800781c <UART_WaitOnFlagUntilTimeout>
 8007700:	4603      	mov	r3, r0
 8007702:	2b00      	cmp	r3, #0
 8007704:	d022      	beq.n	800774c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800770c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800770e:	e853 3f00 	ldrex	r3, [r3]
 8007712:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007716:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800771a:	653b      	str	r3, [r7, #80]	@ 0x50
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	461a      	mov	r2, r3
 8007722:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007724:	647b      	str	r3, [r7, #68]	@ 0x44
 8007726:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007728:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800772a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800772c:	e841 2300 	strex	r3, r2, [r1]
 8007730:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007732:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007734:	2b00      	cmp	r3, #0
 8007736:	d1e6      	bne.n	8007706 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2220      	movs	r2, #32
 800773c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007748:	2303      	movs	r3, #3
 800774a:	e063      	b.n	8007814 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f003 0304 	and.w	r3, r3, #4
 8007756:	2b04      	cmp	r3, #4
 8007758:	d149      	bne.n	80077ee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800775a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800775e:	9300      	str	r3, [sp, #0]
 8007760:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007762:	2200      	movs	r2, #0
 8007764:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 f857 	bl	800781c <UART_WaitOnFlagUntilTimeout>
 800776e:	4603      	mov	r3, r0
 8007770:	2b00      	cmp	r3, #0
 8007772:	d03c      	beq.n	80077ee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800777a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800777c:	e853 3f00 	ldrex	r3, [r3]
 8007780:	623b      	str	r3, [r7, #32]
   return(result);
 8007782:	6a3b      	ldr	r3, [r7, #32]
 8007784:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007788:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	461a      	mov	r2, r3
 8007790:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007792:	633b      	str	r3, [r7, #48]	@ 0x30
 8007794:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007796:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007798:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800779a:	e841 2300 	strex	r3, r2, [r1]
 800779e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80077a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d1e6      	bne.n	8007774 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	3308      	adds	r3, #8
 80077ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	e853 3f00 	ldrex	r3, [r3]
 80077b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f023 0301 	bic.w	r3, r3, #1
 80077bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	3308      	adds	r3, #8
 80077c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80077c6:	61fa      	str	r2, [r7, #28]
 80077c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ca:	69b9      	ldr	r1, [r7, #24]
 80077cc:	69fa      	ldr	r2, [r7, #28]
 80077ce:	e841 2300 	strex	r3, r2, [r1]
 80077d2:	617b      	str	r3, [r7, #20]
   return(result);
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d1e5      	bne.n	80077a6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2220      	movs	r2, #32
 80077de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077ea:	2303      	movs	r3, #3
 80077ec:	e012      	b.n	8007814 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2220      	movs	r2, #32
 80077f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2220      	movs	r2, #32
 80077fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007812:	2300      	movs	r3, #0
}
 8007814:	4618      	mov	r0, r3
 8007816:	3758      	adds	r7, #88	@ 0x58
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	603b      	str	r3, [r7, #0]
 8007828:	4613      	mov	r3, r2
 800782a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800782c:	e04f      	b.n	80078ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800782e:	69bb      	ldr	r3, [r7, #24]
 8007830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007834:	d04b      	beq.n	80078ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007836:	f7fa fcfb 	bl	8002230 <HAL_GetTick>
 800783a:	4602      	mov	r2, r0
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	1ad3      	subs	r3, r2, r3
 8007840:	69ba      	ldr	r2, [r7, #24]
 8007842:	429a      	cmp	r2, r3
 8007844:	d302      	bcc.n	800784c <UART_WaitOnFlagUntilTimeout+0x30>
 8007846:	69bb      	ldr	r3, [r7, #24]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d101      	bne.n	8007850 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800784c:	2303      	movs	r3, #3
 800784e:	e04e      	b.n	80078ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f003 0304 	and.w	r3, r3, #4
 800785a:	2b00      	cmp	r3, #0
 800785c:	d037      	beq.n	80078ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	2b80      	cmp	r3, #128	@ 0x80
 8007862:	d034      	beq.n	80078ce <UART_WaitOnFlagUntilTimeout+0xb2>
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	2b40      	cmp	r3, #64	@ 0x40
 8007868:	d031      	beq.n	80078ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	69db      	ldr	r3, [r3, #28]
 8007870:	f003 0308 	and.w	r3, r3, #8
 8007874:	2b08      	cmp	r3, #8
 8007876:	d110      	bne.n	800789a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	2208      	movs	r2, #8
 800787e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007880:	68f8      	ldr	r0, [r7, #12]
 8007882:	f000 f838 	bl	80078f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2208      	movs	r2, #8
 800788a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2200      	movs	r2, #0
 8007892:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007896:	2301      	movs	r3, #1
 8007898:	e029      	b.n	80078ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	69db      	ldr	r3, [r3, #28]
 80078a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80078a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80078a8:	d111      	bne.n	80078ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80078b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80078b4:	68f8      	ldr	r0, [r7, #12]
 80078b6:	f000 f81e 	bl	80078f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2220      	movs	r2, #32
 80078be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2200      	movs	r2, #0
 80078c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80078ca:	2303      	movs	r3, #3
 80078cc:	e00f      	b.n	80078ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	69da      	ldr	r2, [r3, #28]
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	4013      	ands	r3, r2
 80078d8:	68ba      	ldr	r2, [r7, #8]
 80078da:	429a      	cmp	r2, r3
 80078dc:	bf0c      	ite	eq
 80078de:	2301      	moveq	r3, #1
 80078e0:	2300      	movne	r3, #0
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	461a      	mov	r2, r3
 80078e6:	79fb      	ldrb	r3, [r7, #7]
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d0a0      	beq.n	800782e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3710      	adds	r7, #16
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}

080078f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078f6:	b480      	push	{r7}
 80078f8:	b095      	sub	sp, #84	@ 0x54
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007906:	e853 3f00 	ldrex	r3, [r3]
 800790a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800790c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800790e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007912:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	461a      	mov	r2, r3
 800791a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800791c:	643b      	str	r3, [r7, #64]	@ 0x40
 800791e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007920:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007922:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007924:	e841 2300 	strex	r3, r2, [r1]
 8007928:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800792a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800792c:	2b00      	cmp	r3, #0
 800792e:	d1e6      	bne.n	80078fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	3308      	adds	r3, #8
 8007936:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007938:	6a3b      	ldr	r3, [r7, #32]
 800793a:	e853 3f00 	ldrex	r3, [r3]
 800793e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007946:	f023 0301 	bic.w	r3, r3, #1
 800794a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	3308      	adds	r3, #8
 8007952:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007954:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007956:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007958:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800795a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800795c:	e841 2300 	strex	r3, r2, [r1]
 8007960:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007964:	2b00      	cmp	r3, #0
 8007966:	d1e3      	bne.n	8007930 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800796c:	2b01      	cmp	r3, #1
 800796e:	d118      	bne.n	80079a2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	e853 3f00 	ldrex	r3, [r3]
 800797c:	60bb      	str	r3, [r7, #8]
   return(result);
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	f023 0310 	bic.w	r3, r3, #16
 8007984:	647b      	str	r3, [r7, #68]	@ 0x44
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	461a      	mov	r2, r3
 800798c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800798e:	61bb      	str	r3, [r7, #24]
 8007990:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007992:	6979      	ldr	r1, [r7, #20]
 8007994:	69ba      	ldr	r2, [r7, #24]
 8007996:	e841 2300 	strex	r3, r2, [r1]
 800799a:	613b      	str	r3, [r7, #16]
   return(result);
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d1e6      	bne.n	8007970 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2220      	movs	r2, #32
 80079a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2200      	movs	r2, #0
 80079b4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80079b6:	bf00      	nop
 80079b8:	3754      	adds	r7, #84	@ 0x54
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr

080079c2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80079c2:	b480      	push	{r7}
 80079c4:	b085      	sub	sp, #20
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d101      	bne.n	80079d8 <HAL_UARTEx_DisableFifoMode+0x16>
 80079d4:	2302      	movs	r3, #2
 80079d6:	e027      	b.n	8007a28 <HAL_UARTEx_DisableFifoMode+0x66>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2201      	movs	r2, #1
 80079dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2224      	movs	r2, #36	@ 0x24
 80079e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f022 0201 	bic.w	r2, r2, #1
 80079fe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007a06:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	68fa      	ldr	r2, [r7, #12]
 8007a14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2220      	movs	r2, #32
 8007a1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a26:	2300      	movs	r3, #0
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3714      	adds	r7, #20
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr

08007a34 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d101      	bne.n	8007a4c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007a48:	2302      	movs	r3, #2
 8007a4a:	e02d      	b.n	8007aa8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2224      	movs	r2, #36	@ 0x24
 8007a58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f022 0201 	bic.w	r2, r2, #1
 8007a72:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	683a      	ldr	r2, [r7, #0]
 8007a84:	430a      	orrs	r2, r1
 8007a86:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 f84f 	bl	8007b2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	68fa      	ldr	r2, [r7, #12]
 8007a94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2220      	movs	r2, #32
 8007a9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3710      	adds	r7, #16
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d101      	bne.n	8007ac8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007ac4:	2302      	movs	r3, #2
 8007ac6:	e02d      	b.n	8007b24 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2201      	movs	r2, #1
 8007acc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2224      	movs	r2, #36	@ 0x24
 8007ad4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f022 0201 	bic.w	r2, r2, #1
 8007aee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	683a      	ldr	r2, [r7, #0]
 8007b00:	430a      	orrs	r2, r1
 8007b02:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 f811 	bl	8007b2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	68fa      	ldr	r2, [r7, #12]
 8007b10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2220      	movs	r2, #32
 8007b16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007b22:	2300      	movs	r3, #0
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3710      	adds	r7, #16
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b085      	sub	sp, #20
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d108      	bne.n	8007b4e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2201      	movs	r2, #1
 8007b48:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007b4c:	e031      	b.n	8007bb2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007b4e:	2308      	movs	r3, #8
 8007b50:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007b52:	2308      	movs	r3, #8
 8007b54:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	0e5b      	lsrs	r3, r3, #25
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	f003 0307 	and.w	r3, r3, #7
 8007b64:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	0f5b      	lsrs	r3, r3, #29
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	f003 0307 	and.w	r3, r3, #7
 8007b74:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b76:	7bbb      	ldrb	r3, [r7, #14]
 8007b78:	7b3a      	ldrb	r2, [r7, #12]
 8007b7a:	4911      	ldr	r1, [pc, #68]	@ (8007bc0 <UARTEx_SetNbDataToProcess+0x94>)
 8007b7c:	5c8a      	ldrb	r2, [r1, r2]
 8007b7e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007b82:	7b3a      	ldrb	r2, [r7, #12]
 8007b84:	490f      	ldr	r1, [pc, #60]	@ (8007bc4 <UARTEx_SetNbDataToProcess+0x98>)
 8007b86:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b88:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b8c:	b29a      	uxth	r2, r3
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b94:	7bfb      	ldrb	r3, [r7, #15]
 8007b96:	7b7a      	ldrb	r2, [r7, #13]
 8007b98:	4909      	ldr	r1, [pc, #36]	@ (8007bc0 <UARTEx_SetNbDataToProcess+0x94>)
 8007b9a:	5c8a      	ldrb	r2, [r1, r2]
 8007b9c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007ba0:	7b7a      	ldrb	r2, [r7, #13]
 8007ba2:	4908      	ldr	r1, [pc, #32]	@ (8007bc4 <UARTEx_SetNbDataToProcess+0x98>)
 8007ba4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ba6:	fb93 f3f2 	sdiv	r3, r3, r2
 8007baa:	b29a      	uxth	r2, r3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007bb2:	bf00      	nop
 8007bb4:	3714      	adds	r7, #20
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr
 8007bbe:	bf00      	nop
 8007bc0:	08007cd4 	.word	0x08007cd4
 8007bc4:	08007cdc 	.word	0x08007cdc

08007bc8 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	ed93 7a06 	vldr	s14, [r3, #24]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	edd3 7a07 	vldr	s15, [r3, #28]
 8007bde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	edd3 7a08 	vldr	s15, [r3, #32]
 8007be8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	edd3 7a06 	vldr	s15, [r3, #24]
 8007bf8:	eeb1 7a67 	vneg.f32	s14, s15
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	edd3 7a08 	vldr	s15, [r3, #32]
 8007c02:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007c06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6a1a      	ldr	r2, [r3, #32]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d006      	beq.n	8007c2c <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	330c      	adds	r3, #12
 8007c22:	220c      	movs	r2, #12
 8007c24:	2100      	movs	r1, #0
 8007c26:	4618      	mov	r0, r3
 8007c28:	f000 f804 	bl	8007c34 <memset>
  }

}
 8007c2c:	bf00      	nop
 8007c2e:	3708      	adds	r7, #8
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <memset>:
 8007c34:	4402      	add	r2, r0
 8007c36:	4603      	mov	r3, r0
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d100      	bne.n	8007c3e <memset+0xa>
 8007c3c:	4770      	bx	lr
 8007c3e:	f803 1b01 	strb.w	r1, [r3], #1
 8007c42:	e7f9      	b.n	8007c38 <memset+0x4>

08007c44 <__libc_init_array>:
 8007c44:	b570      	push	{r4, r5, r6, lr}
 8007c46:	4d0d      	ldr	r5, [pc, #52]	@ (8007c7c <__libc_init_array+0x38>)
 8007c48:	4c0d      	ldr	r4, [pc, #52]	@ (8007c80 <__libc_init_array+0x3c>)
 8007c4a:	1b64      	subs	r4, r4, r5
 8007c4c:	10a4      	asrs	r4, r4, #2
 8007c4e:	2600      	movs	r6, #0
 8007c50:	42a6      	cmp	r6, r4
 8007c52:	d109      	bne.n	8007c68 <__libc_init_array+0x24>
 8007c54:	4d0b      	ldr	r5, [pc, #44]	@ (8007c84 <__libc_init_array+0x40>)
 8007c56:	4c0c      	ldr	r4, [pc, #48]	@ (8007c88 <__libc_init_array+0x44>)
 8007c58:	f000 f818 	bl	8007c8c <_init>
 8007c5c:	1b64      	subs	r4, r4, r5
 8007c5e:	10a4      	asrs	r4, r4, #2
 8007c60:	2600      	movs	r6, #0
 8007c62:	42a6      	cmp	r6, r4
 8007c64:	d105      	bne.n	8007c72 <__libc_init_array+0x2e>
 8007c66:	bd70      	pop	{r4, r5, r6, pc}
 8007c68:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c6c:	4798      	blx	r3
 8007c6e:	3601      	adds	r6, #1
 8007c70:	e7ee      	b.n	8007c50 <__libc_init_array+0xc>
 8007c72:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c76:	4798      	blx	r3
 8007c78:	3601      	adds	r6, #1
 8007c7a:	e7f2      	b.n	8007c62 <__libc_init_array+0x1e>
 8007c7c:	08007cec 	.word	0x08007cec
 8007c80:	08007cec 	.word	0x08007cec
 8007c84:	08007cec 	.word	0x08007cec
 8007c88:	08007cf0 	.word	0x08007cf0

08007c8c <_init>:
 8007c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c8e:	bf00      	nop
 8007c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c92:	bc08      	pop	{r3}
 8007c94:	469e      	mov	lr, r3
 8007c96:	4770      	bx	lr

08007c98 <_fini>:
 8007c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c9a:	bf00      	nop
 8007c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c9e:	bc08      	pop	{r3}
 8007ca0:	469e      	mov	lr, r3
 8007ca2:	4770      	bx	lr
