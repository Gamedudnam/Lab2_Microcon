
Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007810  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080079e8  080079e8  000089e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a28  08007a28  0000900c  2**0
                  CONTENTS
  4 .ARM          00000008  08007a28  08007a28  00008a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a30  08007a30  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a30  08007a30  00008a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a34  08007a34  00008a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007a38  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  2000000c  08007a44  0000900c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002e4  08007a44  000092e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000178b8  00000000  00000000  0000903c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c81  00000000  00000000  000208f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f8  00000000  00000000  00023578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001063  00000000  00000000  00024a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028dd6  00000000  00000000  00025ad3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000189eb  00000000  00000000  0004e8a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001140fa  00000000  00000000  00067294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017b38e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c18  00000000  00000000  0017b3d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00180fec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080079d0 	.word	0x080079d0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080079d0 	.word	0x080079d0

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b96a 	b.w	8000d40 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	460c      	mov	r4, r1
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d14e      	bne.n	8000b2e <__udivmoddi4+0xaa>
 8000a90:	4694      	mov	ip, r2
 8000a92:	458c      	cmp	ip, r1
 8000a94:	4686      	mov	lr, r0
 8000a96:	fab2 f282 	clz	r2, r2
 8000a9a:	d962      	bls.n	8000b62 <__udivmoddi4+0xde>
 8000a9c:	b14a      	cbz	r2, 8000ab2 <__udivmoddi4+0x2e>
 8000a9e:	f1c2 0320 	rsb	r3, r2, #32
 8000aa2:	4091      	lsls	r1, r2
 8000aa4:	fa20 f303 	lsr.w	r3, r0, r3
 8000aa8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aac:	4319      	orrs	r1, r3
 8000aae:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ab2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ab6:	fa1f f68c 	uxth.w	r6, ip
 8000aba:	fbb1 f4f7 	udiv	r4, r1, r7
 8000abe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ac2:	fb07 1114 	mls	r1, r7, r4, r1
 8000ac6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aca:	fb04 f106 	mul.w	r1, r4, r6
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	d90a      	bls.n	8000ae8 <__udivmoddi4+0x64>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ada:	f080 8112 	bcs.w	8000d02 <__udivmoddi4+0x27e>
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	f240 810f 	bls.w	8000d02 <__udivmoddi4+0x27e>
 8000ae4:	3c02      	subs	r4, #2
 8000ae6:	4463      	add	r3, ip
 8000ae8:	1a59      	subs	r1, r3, r1
 8000aea:	fa1f f38e 	uxth.w	r3, lr
 8000aee:	fbb1 f0f7 	udiv	r0, r1, r7
 8000af2:	fb07 1110 	mls	r1, r7, r0, r1
 8000af6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000afa:	fb00 f606 	mul.w	r6, r0, r6
 8000afe:	429e      	cmp	r6, r3
 8000b00:	d90a      	bls.n	8000b18 <__udivmoddi4+0x94>
 8000b02:	eb1c 0303 	adds.w	r3, ip, r3
 8000b06:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b0a:	f080 80fc 	bcs.w	8000d06 <__udivmoddi4+0x282>
 8000b0e:	429e      	cmp	r6, r3
 8000b10:	f240 80f9 	bls.w	8000d06 <__udivmoddi4+0x282>
 8000b14:	4463      	add	r3, ip
 8000b16:	3802      	subs	r0, #2
 8000b18:	1b9b      	subs	r3, r3, r6
 8000b1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b1e:	2100      	movs	r1, #0
 8000b20:	b11d      	cbz	r5, 8000b2a <__udivmoddi4+0xa6>
 8000b22:	40d3      	lsrs	r3, r2
 8000b24:	2200      	movs	r2, #0
 8000b26:	e9c5 3200 	strd	r3, r2, [r5]
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d905      	bls.n	8000b3e <__udivmoddi4+0xba>
 8000b32:	b10d      	cbz	r5, 8000b38 <__udivmoddi4+0xb4>
 8000b34:	e9c5 0100 	strd	r0, r1, [r5]
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4608      	mov	r0, r1
 8000b3c:	e7f5      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000b3e:	fab3 f183 	clz	r1, r3
 8000b42:	2900      	cmp	r1, #0
 8000b44:	d146      	bne.n	8000bd4 <__udivmoddi4+0x150>
 8000b46:	42a3      	cmp	r3, r4
 8000b48:	d302      	bcc.n	8000b50 <__udivmoddi4+0xcc>
 8000b4a:	4290      	cmp	r0, r2
 8000b4c:	f0c0 80f0 	bcc.w	8000d30 <__udivmoddi4+0x2ac>
 8000b50:	1a86      	subs	r6, r0, r2
 8000b52:	eb64 0303 	sbc.w	r3, r4, r3
 8000b56:	2001      	movs	r0, #1
 8000b58:	2d00      	cmp	r5, #0
 8000b5a:	d0e6      	beq.n	8000b2a <__udivmoddi4+0xa6>
 8000b5c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b60:	e7e3      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000b62:	2a00      	cmp	r2, #0
 8000b64:	f040 8090 	bne.w	8000c88 <__udivmoddi4+0x204>
 8000b68:	eba1 040c 	sub.w	r4, r1, ip
 8000b6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b70:	fa1f f78c 	uxth.w	r7, ip
 8000b74:	2101      	movs	r1, #1
 8000b76:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b7e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b86:	fb07 f006 	mul.w	r0, r7, r6
 8000b8a:	4298      	cmp	r0, r3
 8000b8c:	d908      	bls.n	8000ba0 <__udivmoddi4+0x11c>
 8000b8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b92:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x11a>
 8000b98:	4298      	cmp	r0, r3
 8000b9a:	f200 80cd 	bhi.w	8000d38 <__udivmoddi4+0x2b4>
 8000b9e:	4626      	mov	r6, r4
 8000ba0:	1a1c      	subs	r4, r3, r0
 8000ba2:	fa1f f38e 	uxth.w	r3, lr
 8000ba6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000baa:	fb08 4410 	mls	r4, r8, r0, r4
 8000bae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bb2:	fb00 f707 	mul.w	r7, r0, r7
 8000bb6:	429f      	cmp	r7, r3
 8000bb8:	d908      	bls.n	8000bcc <__udivmoddi4+0x148>
 8000bba:	eb1c 0303 	adds.w	r3, ip, r3
 8000bbe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bc2:	d202      	bcs.n	8000bca <__udivmoddi4+0x146>
 8000bc4:	429f      	cmp	r7, r3
 8000bc6:	f200 80b0 	bhi.w	8000d2a <__udivmoddi4+0x2a6>
 8000bca:	4620      	mov	r0, r4
 8000bcc:	1bdb      	subs	r3, r3, r7
 8000bce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bd2:	e7a5      	b.n	8000b20 <__udivmoddi4+0x9c>
 8000bd4:	f1c1 0620 	rsb	r6, r1, #32
 8000bd8:	408b      	lsls	r3, r1
 8000bda:	fa22 f706 	lsr.w	r7, r2, r6
 8000bde:	431f      	orrs	r7, r3
 8000be0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000be4:	fa04 f301 	lsl.w	r3, r4, r1
 8000be8:	ea43 030c 	orr.w	r3, r3, ip
 8000bec:	40f4      	lsrs	r4, r6
 8000bee:	fa00 f801 	lsl.w	r8, r0, r1
 8000bf2:	0c38      	lsrs	r0, r7, #16
 8000bf4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bf8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bfc:	fa1f fc87 	uxth.w	ip, r7
 8000c00:	fb00 441e 	mls	r4, r0, lr, r4
 8000c04:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c08:	fb0e f90c 	mul.w	r9, lr, ip
 8000c0c:	45a1      	cmp	r9, r4
 8000c0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c12:	d90a      	bls.n	8000c2a <__udivmoddi4+0x1a6>
 8000c14:	193c      	adds	r4, r7, r4
 8000c16:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c1a:	f080 8084 	bcs.w	8000d26 <__udivmoddi4+0x2a2>
 8000c1e:	45a1      	cmp	r9, r4
 8000c20:	f240 8081 	bls.w	8000d26 <__udivmoddi4+0x2a2>
 8000c24:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c28:	443c      	add	r4, r7
 8000c2a:	eba4 0409 	sub.w	r4, r4, r9
 8000c2e:	fa1f f983 	uxth.w	r9, r3
 8000c32:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c36:	fb00 4413 	mls	r4, r0, r3, r4
 8000c3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c3e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c42:	45a4      	cmp	ip, r4
 8000c44:	d907      	bls.n	8000c56 <__udivmoddi4+0x1d2>
 8000c46:	193c      	adds	r4, r7, r4
 8000c48:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c4c:	d267      	bcs.n	8000d1e <__udivmoddi4+0x29a>
 8000c4e:	45a4      	cmp	ip, r4
 8000c50:	d965      	bls.n	8000d1e <__udivmoddi4+0x29a>
 8000c52:	3b02      	subs	r3, #2
 8000c54:	443c      	add	r4, r7
 8000c56:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c5a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c5e:	eba4 040c 	sub.w	r4, r4, ip
 8000c62:	429c      	cmp	r4, r3
 8000c64:	46ce      	mov	lr, r9
 8000c66:	469c      	mov	ip, r3
 8000c68:	d351      	bcc.n	8000d0e <__udivmoddi4+0x28a>
 8000c6a:	d04e      	beq.n	8000d0a <__udivmoddi4+0x286>
 8000c6c:	b155      	cbz	r5, 8000c84 <__udivmoddi4+0x200>
 8000c6e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c72:	eb64 040c 	sbc.w	r4, r4, ip
 8000c76:	fa04 f606 	lsl.w	r6, r4, r6
 8000c7a:	40cb      	lsrs	r3, r1
 8000c7c:	431e      	orrs	r6, r3
 8000c7e:	40cc      	lsrs	r4, r1
 8000c80:	e9c5 6400 	strd	r6, r4, [r5]
 8000c84:	2100      	movs	r1, #0
 8000c86:	e750      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000c88:	f1c2 0320 	rsb	r3, r2, #32
 8000c8c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c94:	fa24 f303 	lsr.w	r3, r4, r3
 8000c98:	4094      	lsls	r4, r2
 8000c9a:	430c      	orrs	r4, r1
 8000c9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca4:	fa1f f78c 	uxth.w	r7, ip
 8000ca8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cac:	fb08 3110 	mls	r1, r8, r0, r3
 8000cb0:	0c23      	lsrs	r3, r4, #16
 8000cb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb6:	fb00 f107 	mul.w	r1, r0, r7
 8000cba:	4299      	cmp	r1, r3
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x24c>
 8000cbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cc6:	d22c      	bcs.n	8000d22 <__udivmoddi4+0x29e>
 8000cc8:	4299      	cmp	r1, r3
 8000cca:	d92a      	bls.n	8000d22 <__udivmoddi4+0x29e>
 8000ccc:	3802      	subs	r0, #2
 8000cce:	4463      	add	r3, ip
 8000cd0:	1a5b      	subs	r3, r3, r1
 8000cd2:	b2a4      	uxth	r4, r4
 8000cd4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cd8:	fb08 3311 	mls	r3, r8, r1, r3
 8000cdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce0:	fb01 f307 	mul.w	r3, r1, r7
 8000ce4:	42a3      	cmp	r3, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x276>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cf0:	d213      	bcs.n	8000d1a <__udivmoddi4+0x296>
 8000cf2:	42a3      	cmp	r3, r4
 8000cf4:	d911      	bls.n	8000d1a <__udivmoddi4+0x296>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	4464      	add	r4, ip
 8000cfa:	1ae4      	subs	r4, r4, r3
 8000cfc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d00:	e739      	b.n	8000b76 <__udivmoddi4+0xf2>
 8000d02:	4604      	mov	r4, r0
 8000d04:	e6f0      	b.n	8000ae8 <__udivmoddi4+0x64>
 8000d06:	4608      	mov	r0, r1
 8000d08:	e706      	b.n	8000b18 <__udivmoddi4+0x94>
 8000d0a:	45c8      	cmp	r8, r9
 8000d0c:	d2ae      	bcs.n	8000c6c <__udivmoddi4+0x1e8>
 8000d0e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d12:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d16:	3801      	subs	r0, #1
 8000d18:	e7a8      	b.n	8000c6c <__udivmoddi4+0x1e8>
 8000d1a:	4631      	mov	r1, r6
 8000d1c:	e7ed      	b.n	8000cfa <__udivmoddi4+0x276>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	e799      	b.n	8000c56 <__udivmoddi4+0x1d2>
 8000d22:	4630      	mov	r0, r6
 8000d24:	e7d4      	b.n	8000cd0 <__udivmoddi4+0x24c>
 8000d26:	46d6      	mov	lr, sl
 8000d28:	e77f      	b.n	8000c2a <__udivmoddi4+0x1a6>
 8000d2a:	4463      	add	r3, ip
 8000d2c:	3802      	subs	r0, #2
 8000d2e:	e74d      	b.n	8000bcc <__udivmoddi4+0x148>
 8000d30:	4606      	mov	r6, r0
 8000d32:	4623      	mov	r3, r4
 8000d34:	4608      	mov	r0, r1
 8000d36:	e70f      	b.n	8000b58 <__udivmoddi4+0xd4>
 8000d38:	3e02      	subs	r6, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	e730      	b.n	8000ba0 <__udivmoddi4+0x11c>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_idiv0>:
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop

08000d44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d4a:	f001 f984 	bl	8002056 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d4e:	f000 fa5f 	bl	8001210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d52:	f000 fd3f 	bl	80017d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d56:	f000 fd13 	bl	8001780 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000d5a:	f000 fb3d 	bl	80013d8 <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 8000d5e:	f000 fc41 	bl	80015e4 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000d62:	f000 faa1 	bl	80012a8 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000d66:	f000 fb81 	bl	800146c <MX_TIM1_Init>
  MX_TIM4_Init();
 8000d6a:	f000 fc91 	bl	8001690 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8000d6e:	213c      	movs	r1, #60	@ 0x3c
 8000d70:	4886      	ldr	r0, [pc, #536]	@ (8000f8c <main+0x248>)
 8000d72:	f004 fedb 	bl	8005b2c <HAL_TIM_Encoder_Start>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000d76:	217f      	movs	r1, #127	@ 0x7f
 8000d78:	4885      	ldr	r0, [pc, #532]	@ (8000f90 <main+0x24c>)
 8000d7a:	f002 fd0d 	bl	8003798 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 3);
 8000d7e:	2203      	movs	r2, #3
 8000d80:	4984      	ldr	r1, [pc, #528]	@ (8000f94 <main+0x250>)
 8000d82:	4883      	ldr	r0, [pc, #524]	@ (8000f90 <main+0x24c>)
 8000d84:	f001 fdfa 	bl	800297c <HAL_ADC_Start_DMA>
  // faulhaber
  PID.Kp =15;
 8000d88:	4b83      	ldr	r3, [pc, #524]	@ (8000f98 <main+0x254>)
 8000d8a:	4a84      	ldr	r2, [pc, #528]	@ (8000f9c <main+0x258>)
 8000d8c:	619a      	str	r2, [r3, #24]
  PID.Ki =0.0002;
 8000d8e:	4b82      	ldr	r3, [pc, #520]	@ (8000f98 <main+0x254>)
 8000d90:	4a83      	ldr	r2, [pc, #524]	@ (8000fa0 <main+0x25c>)
 8000d92:	61da      	str	r2, [r3, #28]
  PID.Kd =2.5;
 8000d94:	4b80      	ldr	r3, [pc, #512]	@ (8000f98 <main+0x254>)
 8000d96:	4a83      	ldr	r2, [pc, #524]	@ (8000fa4 <main+0x260>)
 8000d98:	621a      	str	r2, [r3, #32]

  arm_pid_init_f32(&PID, 0);
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	487e      	ldr	r0, [pc, #504]	@ (8000f98 <main+0x254>)
 8000d9e:	f006 fdb5 	bl	800790c <arm_pid_init_f32>
  HAL_TIM_Base_Start(&htim1);
 8000da2:	4881      	ldr	r0, [pc, #516]	@ (8000fa8 <main+0x264>)
 8000da4:	f004 fc38 	bl	8005618 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000da8:	2100      	movs	r1, #0
 8000daa:	487f      	ldr	r0, [pc, #508]	@ (8000fa8 <main+0x264>)
 8000dac:	f004 fd06 	bl	80057bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000db0:	2104      	movs	r1, #4
 8000db2:	487d      	ldr	r0, [pc, #500]	@ (8000fa8 <main+0x264>)
 8000db4:	f004 fd02 	bl	80057bc <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim4);
 8000db8:	487c      	ldr	r0, [pc, #496]	@ (8000fac <main+0x268>)
 8000dba:	f004 fc2d 	bl	8005618 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	487a      	ldr	r0, [pc, #488]	@ (8000fac <main+0x268>)
 8000dc2:	f004 fcfb 	bl	80057bc <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (check == 1)
 8000dc6:	4b7a      	ldr	r3, [pc, #488]	@ (8000fb0 <main+0x26c>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	f040 8108 	bne.w	8000fe0 <main+0x29c>
	  {
		  NO1();
 8000dd0:	f000 fd8a 	bl	80018e8 <NO1>
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000dd4:	4b74      	ldr	r3, [pc, #464]	@ (8000fa8 <main+0x264>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2200      	movs	r2, #0
 8000dda:	635a      	str	r2, [r3, #52]	@ 0x34
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8000ddc:	4b72      	ldr	r3, [pc, #456]	@ (8000fa8 <main+0x264>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2200      	movs	r2, #0
 8000de2:	639a      	str	r2, [r3, #56]	@ 0x38
		  setposition2 = ADC_RawRead[1];
 8000de4:	4b6b      	ldr	r3, [pc, #428]	@ (8000f94 <main+0x250>)
 8000de6:	885b      	ldrh	r3, [r3, #2]
 8000de8:	ee07 3a90 	vmov	s15, r3
 8000dec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000df0:	4b70      	ldr	r3, [pc, #448]	@ (8000fb4 <main+0x270>)
 8000df2:	edc3 7a00 	vstr	s15, [r3]
		  position2 = ADC_RawRead[2];
 8000df6:	4b67      	ldr	r3, [pc, #412]	@ (8000f94 <main+0x250>)
 8000df8:	889b      	ldrh	r3, [r3, #4]
 8000dfa:	ee07 3a90 	vmov	s15, r3
 8000dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e02:	4b6d      	ldr	r3, [pc, #436]	@ (8000fb8 <main+0x274>)
 8000e04:	edc3 7a00 	vstr	s15, [r3]
		  Diff2 = ADC_RawRead[1] - ADC_RawRead[2];
 8000e08:	4b62      	ldr	r3, [pc, #392]	@ (8000f94 <main+0x250>)
 8000e0a:	885b      	ldrh	r3, [r3, #2]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4b61      	ldr	r3, [pc, #388]	@ (8000f94 <main+0x250>)
 8000e10:	889b      	ldrh	r3, [r3, #4]
 8000e12:	1ad3      	subs	r3, r2, r3
 8000e14:	4a69      	ldr	r2, [pc, #420]	@ (8000fbc <main+0x278>)
 8000e16:	6013      	str	r3, [r2, #0]
		  static uint32_t timestamp =0;
		  if(timestamp < HAL_GetTick())
 8000e18:	f001 f982 	bl	8002120 <HAL_GetTick>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	4b68      	ldr	r3, [pc, #416]	@ (8000fc0 <main+0x27c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d9cf      	bls.n	8000dc6 <main+0x82>
		  {
			  timestamp = HAL_GetTick()+1;
 8000e26:	f001 f97b 	bl	8002120 <HAL_GetTick>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	4a64      	ldr	r2, [pc, #400]	@ (8000fc0 <main+0x27c>)
 8000e30:	6013      	str	r3, [r2, #0]
			  Vfeedback2 = arm_pid_f32(&PID, setposition2 - position2);
 8000e32:	4b60      	ldr	r3, [pc, #384]	@ (8000fb4 <main+0x270>)
 8000e34:	ed93 7a00 	vldr	s14, [r3]
 8000e38:	4b5f      	ldr	r3, [pc, #380]	@ (8000fb8 <main+0x274>)
 8000e3a:	edd3 7a00 	vldr	s15, [r3]
 8000e3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e42:	4b55      	ldr	r3, [pc, #340]	@ (8000f98 <main+0x254>)
 8000e44:	617b      	str	r3, [r7, #20]
 8000e46:	edc7 7a04 	vstr	s15, [r7, #16]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	ed93 7a00 	vldr	s14, [r3]
 8000e50:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e54:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	edd3 6a01 	vldr	s13, [r3, #4]
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	edd3 7a03 	vldr	s15, [r3, #12]
 8000e64:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8000e68:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	edd3 6a02 	vldr	s13, [r3, #8]
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	edd3 7a04 	vldr	s15, [r3, #16]
 8000e78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8000e86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e8a:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	68da      	ldr	r2, [r3, #12]
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	68fa      	ldr	r2, [r7, #12]
 8000ea0:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	4a47      	ldr	r2, [pc, #284]	@ (8000fc4 <main+0x280>)
 8000ea6:	6013      	str	r3, [r2, #0]
			  position2 = PlantSimulation(Vfeedback2);
 8000ea8:	4b46      	ldr	r3, [pc, #280]	@ (8000fc4 <main+0x280>)
 8000eaa:	edd3 7a00 	vldr	s15, [r3]
 8000eae:	eeb0 0a67 	vmov.f32	s0, s15
 8000eb2:	f000 fdb9 	bl	8001a28 <PlantSimulation>
 8000eb6:	eef0 7a40 	vmov.f32	s15, s0
 8000eba:	4b3f      	ldr	r3, [pc, #252]	@ (8000fb8 <main+0x274>)
 8000ebc:	edc3 7a00 	vstr	s15, [r3]
			  if (Vfeedback2 > 9999)
 8000ec0:	4b40      	ldr	r3, [pc, #256]	@ (8000fc4 <main+0x280>)
 8000ec2:	edd3 7a00 	vldr	s15, [r3]
 8000ec6:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8000fc8 <main+0x284>
 8000eca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ed2:	dd02      	ble.n	8000eda <main+0x196>
			  {
				  Vfeedback2 = 9999;
 8000ed4:	4b3b      	ldr	r3, [pc, #236]	@ (8000fc4 <main+0x280>)
 8000ed6:	4a3d      	ldr	r2, [pc, #244]	@ (8000fcc <main+0x288>)
 8000ed8:	601a      	str	r2, [r3, #0]
			  }
			  if (Vfeedback2 < -9999)
 8000eda:	4b3a      	ldr	r3, [pc, #232]	@ (8000fc4 <main+0x280>)
 8000edc:	edd3 7a00 	vldr	s15, [r3]
 8000ee0:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8000fd0 <main+0x28c>
 8000ee4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eec:	d502      	bpl.n	8000ef4 <main+0x1b0>
			  {
				  Vfeedback2 = -9999;
 8000eee:	4b35      	ldr	r3, [pc, #212]	@ (8000fc4 <main+0x280>)
 8000ef0:	4a38      	ldr	r2, [pc, #224]	@ (8000fd4 <main+0x290>)
 8000ef2:	601a      	str	r2, [r3, #0]
//			  }
//			  if (Vfeedback2 < 0 && Vfeedback2 > -1000)
//			  {
//				  Vfeedback2 = -1000;
//			  }
			  if (Diff2 < 0)
 8000ef4:	4b31      	ldr	r3, [pc, #196]	@ (8000fbc <main+0x278>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	da1c      	bge.n	8000f36 <main+0x1f2>
			  {
				  G = 1;
 8000efc:	4b36      	ldr	r3, [pc, #216]	@ (8000fd8 <main+0x294>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	601a      	str	r2, [r3, #0]
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,GPIO_PIN_SET);
 8000f02:	2201      	movs	r2, #1
 8000f04:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f0c:	f003 fab2 	bl	8004474 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,GPIO_PIN_RESET);
 8000f10:	2200      	movs	r2, #0
 8000f12:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f16:	4831      	ldr	r0, [pc, #196]	@ (8000fdc <main+0x298>)
 8000f18:	f003 faac 	bl	8004474 <HAL_GPIO_WritePin>
				  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, -Vfeedback2);
 8000f1c:	4b29      	ldr	r3, [pc, #164]	@ (8000fc4 <main+0x280>)
 8000f1e:	edd3 7a00 	vldr	s15, [r3]
 8000f22:	eef1 7a67 	vneg.f32	s15, s15
 8000f26:	4b21      	ldr	r3, [pc, #132]	@ (8000fac <main+0x268>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f2e:	ee17 2a90 	vmov	r2, s15
 8000f32:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f34:	e01d      	b.n	8000f72 <main+0x22e>
			  }
			  else if (Diff2 > 0)
 8000f36:	4b21      	ldr	r3, [pc, #132]	@ (8000fbc <main+0x278>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	dd19      	ble.n	8000f72 <main+0x22e>
			  {
				  G = 2;
 8000f3e:	4b26      	ldr	r3, [pc, #152]	@ (8000fd8 <main+0x294>)
 8000f40:	2202      	movs	r2, #2
 8000f42:	601a      	str	r2, [r3, #0]
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,GPIO_PIN_RESET);
 8000f44:	2200      	movs	r2, #0
 8000f46:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f4e:	f003 fa91 	bl	8004474 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,GPIO_PIN_SET);
 8000f52:	2201      	movs	r2, #1
 8000f54:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f58:	4820      	ldr	r0, [pc, #128]	@ (8000fdc <main+0x298>)
 8000f5a:	f003 fa8b 	bl	8004474 <HAL_GPIO_WritePin>
				  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, Vfeedback2);
 8000f5e:	4b19      	ldr	r3, [pc, #100]	@ (8000fc4 <main+0x280>)
 8000f60:	edd3 7a00 	vldr	s15, [r3]
 8000f64:	4b11      	ldr	r3, [pc, #68]	@ (8000fac <main+0x268>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f6c:	ee17 2a90 	vmov	r2, s15
 8000f70:	635a      	str	r2, [r3, #52]	@ 0x34
			  }
			  if (Diff2 == 0)
 8000f72:	4b12      	ldr	r3, [pc, #72]	@ (8000fbc <main+0x278>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	f47f af25 	bne.w	8000dc6 <main+0x82>
			  {
				  G = 3;
 8000f7c:	4b16      	ldr	r3, [pc, #88]	@ (8000fd8 <main+0x294>)
 8000f7e:	2203      	movs	r2, #3
 8000f80:	601a      	str	r2, [r3, #0]
				  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8000f82:	4b0a      	ldr	r3, [pc, #40]	@ (8000fac <main+0x268>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2200      	movs	r2, #0
 8000f88:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f8a:	e71c      	b.n	8000dc6 <main+0x82>
 8000f8c:	200001d4 	.word	0x200001d4
 8000f90:	20000028 	.word	0x20000028
 8000f94:	2000027c 	.word	0x2000027c
 8000f98:	20000284 	.word	0x20000284
 8000f9c:	41700000 	.word	0x41700000
 8000fa0:	3951b717 	.word	0x3951b717
 8000fa4:	40200000 	.word	0x40200000
 8000fa8:	20000188 	.word	0x20000188
 8000fac:	20000220 	.word	0x20000220
 8000fb0:	2000026c 	.word	0x2000026c
 8000fb4:	200002b8 	.word	0x200002b8
 8000fb8:	200002b4 	.word	0x200002b4
 8000fbc:	200002cc 	.word	0x200002cc
 8000fc0:	200002d0 	.word	0x200002d0
 8000fc4:	200002bc 	.word	0x200002bc
 8000fc8:	461c3c00 	.word	0x461c3c00
 8000fcc:	461c3c00 	.word	0x461c3c00
 8000fd0:	c61c3c00 	.word	0xc61c3c00
 8000fd4:	c61c3c00 	.word	0xc61c3c00
 8000fd8:	200002c4 	.word	0x200002c4
 8000fdc:	48000400 	.word	0x48000400
			  }
		  }
	  }
	  else if (check == 2)
 8000fe0:	4b7a      	ldr	r3, [pc, #488]	@ (80011cc <main+0x488>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	f040 80e5 	bne.w	80011b4 <main+0x470>
	  {
		  NO2();
 8000fea:	f000 fcb5 	bl	8001958 <NO2>
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8000fee:	4b78      	ldr	r3, [pc, #480]	@ (80011d0 <main+0x48c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	635a      	str	r2, [r3, #52]	@ 0x34
		  setposition = Gain;
 8000ff6:	4b77      	ldr	r3, [pc, #476]	@ (80011d4 <main+0x490>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a77      	ldr	r2, [pc, #476]	@ (80011d8 <main+0x494>)
 8000ffc:	6013      	str	r3, [r2, #0]
		  position = QEIReadRaw;
 8000ffe:	4b77      	ldr	r3, [pc, #476]	@ (80011dc <main+0x498>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	ee07 3a90 	vmov	s15, r3
 8001006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800100a:	4b75      	ldr	r3, [pc, #468]	@ (80011e0 <main+0x49c>)
 800100c:	edc3 7a00 	vstr	s15, [r3]
		  Diff = Gain - QEIReadRaw;
 8001010:	4b70      	ldr	r3, [pc, #448]	@ (80011d4 <main+0x490>)
 8001012:	ed93 7a00 	vldr	s14, [r3]
 8001016:	4b71      	ldr	r3, [pc, #452]	@ (80011dc <main+0x498>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	ee07 3a90 	vmov	s15, r3
 800101e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001022:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001026:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800102a:	ee17 2a90 	vmov	r2, s15
 800102e:	4b6d      	ldr	r3, [pc, #436]	@ (80011e4 <main+0x4a0>)
 8001030:	601a      	str	r2, [r3, #0]
		  static uint32_t timestamp =0;
		  if(timestamp < HAL_GetTick())
 8001032:	f001 f875 	bl	8002120 <HAL_GetTick>
 8001036:	4602      	mov	r2, r0
 8001038:	4b6b      	ldr	r3, [pc, #428]	@ (80011e8 <main+0x4a4>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	429a      	cmp	r2, r3
 800103e:	f67f aec2 	bls.w	8000dc6 <main+0x82>
		  {
			  timestamp = HAL_GetTick()+1;
 8001042:	f001 f86d 	bl	8002120 <HAL_GetTick>
 8001046:	4603      	mov	r3, r0
 8001048:	3301      	adds	r3, #1
 800104a:	4a67      	ldr	r2, [pc, #412]	@ (80011e8 <main+0x4a4>)
 800104c:	6013      	str	r3, [r2, #0]
			  Vfeedback = arm_pid_f32(&PID, setposition - position);
 800104e:	4b62      	ldr	r3, [pc, #392]	@ (80011d8 <main+0x494>)
 8001050:	ed93 7a00 	vldr	s14, [r3]
 8001054:	4b62      	ldr	r3, [pc, #392]	@ (80011e0 <main+0x49c>)
 8001056:	edd3 7a00 	vldr	s15, [r3]
 800105a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800105e:	4b63      	ldr	r3, [pc, #396]	@ (80011ec <main+0x4a8>)
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	edc7 7a01 	vstr	s15, [r7, #4]
    out = (S->A0 * in) +
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	ed93 7a00 	vldr	s14, [r3]
 800106c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001070:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	edd3 6a01 	vldr	s13, [r3, #4]
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001080:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001084:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	edd3 6a02 	vldr	s13, [r3, #8]
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	edd3 7a04 	vldr	s15, [r3, #16]
 8001094:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001098:	ee37 7a27 	vadd.f32	s14, s14, s15
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80010a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010a6:	edc7 7a00 	vstr	s15, [r7]
    S->state[1] = S->state[0];
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	68da      	ldr	r2, [r3, #12]
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	683a      	ldr	r2, [r7, #0]
 80010bc:	615a      	str	r2, [r3, #20]
    return (out);
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	4a4b      	ldr	r2, [pc, #300]	@ (80011f0 <main+0x4ac>)
 80010c2:	6013      	str	r3, [r2, #0]
			  position = PlantSimulation(Vfeedback);
 80010c4:	4b4a      	ldr	r3, [pc, #296]	@ (80011f0 <main+0x4ac>)
 80010c6:	edd3 7a00 	vldr	s15, [r3]
 80010ca:	eeb0 0a67 	vmov.f32	s0, s15
 80010ce:	f000 fcab 	bl	8001a28 <PlantSimulation>
 80010d2:	eef0 7a40 	vmov.f32	s15, s0
 80010d6:	4b42      	ldr	r3, [pc, #264]	@ (80011e0 <main+0x49c>)
 80010d8:	edc3 7a00 	vstr	s15, [r3]
			  if (Vfeedback > 19999)
 80010dc:	4b44      	ldr	r3, [pc, #272]	@ (80011f0 <main+0x4ac>)
 80010de:	edd3 7a00 	vldr	s15, [r3]
 80010e2:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 80011f4 <main+0x4b0>
 80010e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ee:	dd02      	ble.n	80010f6 <main+0x3b2>
			  {
				  Vfeedback = 19999;
 80010f0:	4b3f      	ldr	r3, [pc, #252]	@ (80011f0 <main+0x4ac>)
 80010f2:	4a41      	ldr	r2, [pc, #260]	@ (80011f8 <main+0x4b4>)
 80010f4:	601a      	str	r2, [r3, #0]
			  }
			  if (Vfeedback > 0 && Vfeedback < 2000)
 80010f6:	4b3e      	ldr	r3, [pc, #248]	@ (80011f0 <main+0x4ac>)
 80010f8:	edd3 7a00 	vldr	s15, [r3]
 80010fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001104:	dd0c      	ble.n	8001120 <main+0x3dc>
 8001106:	4b3a      	ldr	r3, [pc, #232]	@ (80011f0 <main+0x4ac>)
 8001108:	edd3 7a00 	vldr	s15, [r3]
 800110c:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80011fc <main+0x4b8>
 8001110:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001118:	d502      	bpl.n	8001120 <main+0x3dc>
			  {
				  Vfeedback = 2000;
 800111a:	4b35      	ldr	r3, [pc, #212]	@ (80011f0 <main+0x4ac>)
 800111c:	4a38      	ldr	r2, [pc, #224]	@ (8001200 <main+0x4bc>)
 800111e:	601a      	str	r2, [r3, #0]
			  }
			  if (Vfeedback < 0 && Vfeedback > -2000)
 8001120:	4b33      	ldr	r3, [pc, #204]	@ (80011f0 <main+0x4ac>)
 8001122:	edd3 7a00 	vldr	s15, [r3]
 8001126:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800112a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112e:	d50c      	bpl.n	800114a <main+0x406>
 8001130:	4b2f      	ldr	r3, [pc, #188]	@ (80011f0 <main+0x4ac>)
 8001132:	edd3 7a00 	vldr	s15, [r3]
 8001136:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8001204 <main+0x4c0>
 800113a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800113e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001142:	dd02      	ble.n	800114a <main+0x406>
			  {
				  Vfeedback = -2000;
 8001144:	4b2a      	ldr	r3, [pc, #168]	@ (80011f0 <main+0x4ac>)
 8001146:	4a30      	ldr	r2, [pc, #192]	@ (8001208 <main+0x4c4>)
 8001148:	601a      	str	r2, [r3, #0]
			  }
			  if (Diff < 0)
 800114a:	4b26      	ldr	r3, [pc, #152]	@ (80011e4 <main+0x4a0>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	da10      	bge.n	8001174 <main+0x430>
			  {
				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001152:	4b2e      	ldr	r3, [pc, #184]	@ (800120c <main+0x4c8>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2200      	movs	r2, #0
 8001158:	635a      	str	r2, [r3, #52]	@ 0x34
				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, -Vfeedback);
 800115a:	4b25      	ldr	r3, [pc, #148]	@ (80011f0 <main+0x4ac>)
 800115c:	edd3 7a00 	vldr	s15, [r3]
 8001160:	eef1 7a67 	vneg.f32	s15, s15
 8001164:	4b29      	ldr	r3, [pc, #164]	@ (800120c <main+0x4c8>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800116c:	ee17 2a90 	vmov	r2, s15
 8001170:	639a      	str	r2, [r3, #56]	@ 0x38
 8001172:	e011      	b.n	8001198 <main+0x454>
			  }

			  else if (Diff > 0)
 8001174:	4b1b      	ldr	r3, [pc, #108]	@ (80011e4 <main+0x4a0>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	dd0d      	ble.n	8001198 <main+0x454>
			  {
				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, Vfeedback);
 800117c:	4b1c      	ldr	r3, [pc, #112]	@ (80011f0 <main+0x4ac>)
 800117e:	edd3 7a00 	vldr	s15, [r3]
 8001182:	4b22      	ldr	r3, [pc, #136]	@ (800120c <main+0x4c8>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800118a:	ee17 2a90 	vmov	r2, s15
 800118e:	635a      	str	r2, [r3, #52]	@ 0x34
				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001190:	4b1e      	ldr	r3, [pc, #120]	@ (800120c <main+0x4c8>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2200      	movs	r2, #0
 8001196:	639a      	str	r2, [r3, #56]	@ 0x38
			  }
			  if (Diff == 0)
 8001198:	4b12      	ldr	r3, [pc, #72]	@ (80011e4 <main+0x4a0>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	f47f ae12 	bne.w	8000dc6 <main+0x82>
			  {
				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80011a2:	4b1a      	ldr	r3, [pc, #104]	@ (800120c <main+0x4c8>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2200      	movs	r2, #0
 80011a8:	635a      	str	r2, [r3, #52]	@ 0x34
				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80011aa:	4b18      	ldr	r3, [pc, #96]	@ (800120c <main+0x4c8>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2200      	movs	r2, #0
 80011b0:	639a      	str	r2, [r3, #56]	@ 0x38
 80011b2:	e608      	b.n	8000dc6 <main+0x82>
			  }
		  }
	  }
	  else
	  {
		  NO3();
 80011b4:	f000 fca8 	bl	8001b08 <NO3>
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80011b8:	4b14      	ldr	r3, [pc, #80]	@ (800120c <main+0x4c8>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2200      	movs	r2, #0
 80011be:	635a      	str	r2, [r3, #52]	@ 0x34
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80011c0:	4b12      	ldr	r3, [pc, #72]	@ (800120c <main+0x4c8>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2200      	movs	r2, #0
 80011c6:	639a      	str	r2, [r3, #56]	@ 0x38
	  if (check == 1)
 80011c8:	e5fd      	b.n	8000dc6 <main+0x82>
 80011ca:	bf00      	nop
 80011cc:	2000026c 	.word	0x2000026c
 80011d0:	20000220 	.word	0x20000220
 80011d4:	200002c0 	.word	0x200002c0
 80011d8:	200002ac 	.word	0x200002ac
 80011dc:	20000270 	.word	0x20000270
 80011e0:	200002a8 	.word	0x200002a8
 80011e4:	200002c8 	.word	0x200002c8
 80011e8:	200002d4 	.word	0x200002d4
 80011ec:	20000284 	.word	0x20000284
 80011f0:	200002b0 	.word	0x200002b0
 80011f4:	469c3e00 	.word	0x469c3e00
 80011f8:	469c3e00 	.word	0x469c3e00
 80011fc:	44fa0000 	.word	0x44fa0000
 8001200:	44fa0000 	.word	0x44fa0000
 8001204:	c4fa0000 	.word	0xc4fa0000
 8001208:	c4fa0000 	.word	0xc4fa0000
 800120c:	20000188 	.word	0x20000188

08001210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b094      	sub	sp, #80	@ 0x50
 8001214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001216:	f107 0318 	add.w	r3, r7, #24
 800121a:	2238      	movs	r2, #56	@ 0x38
 800121c:	2100      	movs	r1, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f006 fbaa 	bl	8007978 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
 8001230:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001232:	2000      	movs	r0, #0
 8001234:	f003 f968 	bl	8004508 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001238:	2302      	movs	r3, #2
 800123a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800123c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001240:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001242:	2340      	movs	r3, #64	@ 0x40
 8001244:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001246:	2302      	movs	r3, #2
 8001248:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800124a:	2302      	movs	r3, #2
 800124c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800124e:	2304      	movs	r3, #4
 8001250:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001252:	2355      	movs	r3, #85	@ 0x55
 8001254:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001256:	2302      	movs	r3, #2
 8001258:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800125a:	2302      	movs	r3, #2
 800125c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800125e:	2302      	movs	r3, #2
 8001260:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001262:	f107 0318 	add.w	r3, r7, #24
 8001266:	4618      	mov	r0, r3
 8001268:	f003 fa02 	bl	8004670 <HAL_RCC_OscConfig>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001272:	f000 fc81 	bl	8001b78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001276:	230f      	movs	r3, #15
 8001278:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800127a:	2303      	movs	r3, #3
 800127c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001282:	2300      	movs	r3, #0
 8001284:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	2104      	movs	r1, #4
 800128e:	4618      	mov	r0, r3
 8001290:	f003 fd00 	bl	8004c94 <HAL_RCC_ClockConfig>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800129a:	f000 fc6d 	bl	8001b78 <Error_Handler>
  }
}
 800129e:	bf00      	nop
 80012a0:	3750      	adds	r7, #80	@ 0x50
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
	...

080012a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08c      	sub	sp, #48	@ 0x30
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80012ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	2220      	movs	r2, #32
 80012be:	2100      	movs	r1, #0
 80012c0:	4618      	mov	r0, r3
 80012c2:	f006 fb59 	bl	8007978 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012c6:	4b40      	ldr	r3, [pc, #256]	@ (80013c8 <MX_ADC1_Init+0x120>)
 80012c8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80012cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012ce:	4b3e      	ldr	r3, [pc, #248]	@ (80013c8 <MX_ADC1_Init+0x120>)
 80012d0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80012d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012d6:	4b3c      	ldr	r3, [pc, #240]	@ (80013c8 <MX_ADC1_Init+0x120>)
 80012d8:	2200      	movs	r2, #0
 80012da:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012dc:	4b3a      	ldr	r3, [pc, #232]	@ (80013c8 <MX_ADC1_Init+0x120>)
 80012de:	2200      	movs	r2, #0
 80012e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80012e2:	4b39      	ldr	r3, [pc, #228]	@ (80013c8 <MX_ADC1_Init+0x120>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80012e8:	4b37      	ldr	r3, [pc, #220]	@ (80013c8 <MX_ADC1_Init+0x120>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012ee:	4b36      	ldr	r3, [pc, #216]	@ (80013c8 <MX_ADC1_Init+0x120>)
 80012f0:	2204      	movs	r2, #4
 80012f2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012f4:	4b34      	ldr	r3, [pc, #208]	@ (80013c8 <MX_ADC1_Init+0x120>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012fa:	4b33      	ldr	r3, [pc, #204]	@ (80013c8 <MX_ADC1_Init+0x120>)
 80012fc:	2201      	movs	r2, #1
 80012fe:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8001300:	4b31      	ldr	r3, [pc, #196]	@ (80013c8 <MX_ADC1_Init+0x120>)
 8001302:	2203      	movs	r2, #3
 8001304:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001306:	4b30      	ldr	r3, [pc, #192]	@ (80013c8 <MX_ADC1_Init+0x120>)
 8001308:	2200      	movs	r2, #0
 800130a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800130e:	4b2e      	ldr	r3, [pc, #184]	@ (80013c8 <MX_ADC1_Init+0x120>)
 8001310:	2200      	movs	r2, #0
 8001312:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001314:	4b2c      	ldr	r3, [pc, #176]	@ (80013c8 <MX_ADC1_Init+0x120>)
 8001316:	2200      	movs	r2, #0
 8001318:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800131a:	4b2b      	ldr	r3, [pc, #172]	@ (80013c8 <MX_ADC1_Init+0x120>)
 800131c:	2201      	movs	r2, #1
 800131e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001322:	4b29      	ldr	r3, [pc, #164]	@ (80013c8 <MX_ADC1_Init+0x120>)
 8001324:	2200      	movs	r2, #0
 8001326:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001328:	4b27      	ldr	r3, [pc, #156]	@ (80013c8 <MX_ADC1_Init+0x120>)
 800132a:	2200      	movs	r2, #0
 800132c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001330:	4825      	ldr	r0, [pc, #148]	@ (80013c8 <MX_ADC1_Init+0x120>)
 8001332:	f001 f967 	bl	8002604 <HAL_ADC_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800133c:	f000 fc1c 	bl	8001b78 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001340:	2300      	movs	r3, #0
 8001342:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001344:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001348:	4619      	mov	r1, r3
 800134a:	481f      	ldr	r0, [pc, #124]	@ (80013c8 <MX_ADC1_Init+0x120>)
 800134c:	f002 fa86 	bl	800385c <HAL_ADCEx_MultiModeConfigChannel>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001356:	f000 fc0f 	bl	8001b78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800135a:	4b1c      	ldr	r3, [pc, #112]	@ (80013cc <MX_ADC1_Init+0x124>)
 800135c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800135e:	2306      	movs	r3, #6
 8001360:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001362:	2307      	movs	r3, #7
 8001364:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001366:	237f      	movs	r3, #127	@ 0x7f
 8001368:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800136a:	2304      	movs	r3, #4
 800136c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001372:	1d3b      	adds	r3, r7, #4
 8001374:	4619      	mov	r1, r3
 8001376:	4814      	ldr	r0, [pc, #80]	@ (80013c8 <MX_ADC1_Init+0x120>)
 8001378:	f001 fbf2 	bl	8002b60 <HAL_ADC_ConfigChannel>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001382:	f000 fbf9 	bl	8001b78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001386:	4b12      	ldr	r3, [pc, #72]	@ (80013d0 <MX_ADC1_Init+0x128>)
 8001388:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800138a:	230c      	movs	r3, #12
 800138c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800138e:	1d3b      	adds	r3, r7, #4
 8001390:	4619      	mov	r1, r3
 8001392:	480d      	ldr	r0, [pc, #52]	@ (80013c8 <MX_ADC1_Init+0x120>)
 8001394:	f001 fbe4 	bl	8002b60 <HAL_ADC_ConfigChannel>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800139e:	f000 fbeb 	bl	8001b78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80013a2:	4b0c      	ldr	r3, [pc, #48]	@ (80013d4 <MX_ADC1_Init+0x12c>)
 80013a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80013a6:	2312      	movs	r3, #18
 80013a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013aa:	1d3b      	adds	r3, r7, #4
 80013ac:	4619      	mov	r1, r3
 80013ae:	4806      	ldr	r0, [pc, #24]	@ (80013c8 <MX_ADC1_Init+0x120>)
 80013b0:	f001 fbd6 	bl	8002b60 <HAL_ADC_ConfigChannel>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80013ba:	f000 fbdd 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013be:	bf00      	nop
 80013c0:	3730      	adds	r7, #48	@ 0x30
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000028 	.word	0x20000028
 80013cc:	04300002 	.word	0x04300002
 80013d0:	08600004 	.word	0x08600004
 80013d4:	3ef08000 	.word	0x3ef08000

080013d8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80013dc:	4b21      	ldr	r3, [pc, #132]	@ (8001464 <MX_LPUART1_UART_Init+0x8c>)
 80013de:	4a22      	ldr	r2, [pc, #136]	@ (8001468 <MX_LPUART1_UART_Init+0x90>)
 80013e0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80013e2:	4b20      	ldr	r3, [pc, #128]	@ (8001464 <MX_LPUART1_UART_Init+0x8c>)
 80013e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013e8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001464 <MX_LPUART1_UART_Init+0x8c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80013f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001464 <MX_LPUART1_UART_Init+0x8c>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80013f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001464 <MX_LPUART1_UART_Init+0x8c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80013fc:	4b19      	ldr	r3, [pc, #100]	@ (8001464 <MX_LPUART1_UART_Init+0x8c>)
 80013fe:	220c      	movs	r2, #12
 8001400:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001402:	4b18      	ldr	r3, [pc, #96]	@ (8001464 <MX_LPUART1_UART_Init+0x8c>)
 8001404:	2200      	movs	r2, #0
 8001406:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001408:	4b16      	ldr	r3, [pc, #88]	@ (8001464 <MX_LPUART1_UART_Init+0x8c>)
 800140a:	2200      	movs	r2, #0
 800140c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800140e:	4b15      	ldr	r3, [pc, #84]	@ (8001464 <MX_LPUART1_UART_Init+0x8c>)
 8001410:	2200      	movs	r2, #0
 8001412:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001414:	4b13      	ldr	r3, [pc, #76]	@ (8001464 <MX_LPUART1_UART_Init+0x8c>)
 8001416:	2200      	movs	r2, #0
 8001418:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800141a:	4812      	ldr	r0, [pc, #72]	@ (8001464 <MX_LPUART1_UART_Init+0x8c>)
 800141c:	f005 fc08 	bl	8006c30 <HAL_UART_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001426:	f000 fba7 	bl	8001b78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800142a:	2100      	movs	r1, #0
 800142c:	480d      	ldr	r0, [pc, #52]	@ (8001464 <MX_LPUART1_UART_Init+0x8c>)
 800142e:	f006 f9a3 	bl	8007778 <HAL_UARTEx_SetTxFifoThreshold>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001438:	f000 fb9e 	bl	8001b78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800143c:	2100      	movs	r1, #0
 800143e:	4809      	ldr	r0, [pc, #36]	@ (8001464 <MX_LPUART1_UART_Init+0x8c>)
 8001440:	f006 f9d8 	bl	80077f4 <HAL_UARTEx_SetRxFifoThreshold>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800144a:	f000 fb95 	bl	8001b78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800144e:	4805      	ldr	r0, [pc, #20]	@ (8001464 <MX_LPUART1_UART_Init+0x8c>)
 8001450:	f006 f959 	bl	8007706 <HAL_UARTEx_DisableFifoMode>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800145a:	f000 fb8d 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	200000f4 	.word	0x200000f4
 8001468:	40008000 	.word	0x40008000

0800146c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b09c      	sub	sp, #112	@ 0x70
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001472:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]
 800147e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001480:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800148c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
 800149c:	615a      	str	r2, [r3, #20]
 800149e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	2234      	movs	r2, #52	@ 0x34
 80014a4:	2100      	movs	r1, #0
 80014a6:	4618      	mov	r0, r3
 80014a8:	f006 fa66 	bl	8007978 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014ac:	4b4b      	ldr	r3, [pc, #300]	@ (80015dc <MX_TIM1_Init+0x170>)
 80014ae:	4a4c      	ldr	r2, [pc, #304]	@ (80015e0 <MX_TIM1_Init+0x174>)
 80014b0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 80014b2:	4b4a      	ldr	r3, [pc, #296]	@ (80015dc <MX_TIM1_Init+0x170>)
 80014b4:	22a9      	movs	r2, #169	@ 0xa9
 80014b6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b8:	4b48      	ldr	r3, [pc, #288]	@ (80015dc <MX_TIM1_Init+0x170>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 80014be:	4b47      	ldr	r3, [pc, #284]	@ (80015dc <MX_TIM1_Init+0x170>)
 80014c0:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80014c4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c6:	4b45      	ldr	r3, [pc, #276]	@ (80015dc <MX_TIM1_Init+0x170>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014cc:	4b43      	ldr	r3, [pc, #268]	@ (80015dc <MX_TIM1_Init+0x170>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014d2:	4b42      	ldr	r3, [pc, #264]	@ (80015dc <MX_TIM1_Init+0x170>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014d8:	4840      	ldr	r0, [pc, #256]	@ (80015dc <MX_TIM1_Init+0x170>)
 80014da:	f004 f845 	bl	8005568 <HAL_TIM_Base_Init>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80014e4:	f000 fb48 	bl	8001b78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014ec:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014ee:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80014f2:	4619      	mov	r1, r3
 80014f4:	4839      	ldr	r0, [pc, #228]	@ (80015dc <MX_TIM1_Init+0x170>)
 80014f6:	f004 fcbb 	bl	8005e70 <HAL_TIM_ConfigClockSource>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001500:	f000 fb3a 	bl	8001b78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001504:	4835      	ldr	r0, [pc, #212]	@ (80015dc <MX_TIM1_Init+0x170>)
 8001506:	f004 f8f7 	bl	80056f8 <HAL_TIM_PWM_Init>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001510:	f000 fb32 	bl	8001b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001514:	2300      	movs	r3, #0
 8001516:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001518:	2300      	movs	r3, #0
 800151a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800151c:	2300      	movs	r3, #0
 800151e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001520:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001524:	4619      	mov	r1, r3
 8001526:	482d      	ldr	r0, [pc, #180]	@ (80015dc <MX_TIM1_Init+0x170>)
 8001528:	f005 fa58 	bl	80069dc <HAL_TIMEx_MasterConfigSynchronization>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001532:	f000 fb21 	bl	8001b78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001536:	2360      	movs	r3, #96	@ 0x60
 8001538:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800153a:	2300      	movs	r3, #0
 800153c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800153e:	2300      	movs	r3, #0
 8001540:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001542:	2300      	movs	r3, #0
 8001544:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001546:	2300      	movs	r3, #0
 8001548:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800154a:	2300      	movs	r3, #0
 800154c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800154e:	2300      	movs	r3, #0
 8001550:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001552:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001556:	2200      	movs	r2, #0
 8001558:	4619      	mov	r1, r3
 800155a:	4820      	ldr	r0, [pc, #128]	@ (80015dc <MX_TIM1_Init+0x170>)
 800155c:	f004 fb74 	bl	8005c48 <HAL_TIM_PWM_ConfigChannel>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001566:	f000 fb07 	bl	8001b78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800156a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800156e:	2204      	movs	r2, #4
 8001570:	4619      	mov	r1, r3
 8001572:	481a      	ldr	r0, [pc, #104]	@ (80015dc <MX_TIM1_Init+0x170>)
 8001574:	f004 fb68 	bl	8005c48 <HAL_TIM_PWM_ConfigChannel>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800157e:	f000 fafb 	bl	8001b78 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001582:	2300      	movs	r3, #0
 8001584:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001586:	2300      	movs	r3, #0
 8001588:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800158e:	2300      	movs	r3, #0
 8001590:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001592:	2300      	movs	r3, #0
 8001594:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001596:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800159a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80015a0:	2300      	movs	r3, #0
 80015a2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015a4:	2300      	movs	r3, #0
 80015a6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80015ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80015b2:	2300      	movs	r3, #0
 80015b4:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015b6:	2300      	movs	r3, #0
 80015b8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	4619      	mov	r1, r3
 80015be:	4807      	ldr	r0, [pc, #28]	@ (80015dc <MX_TIM1_Init+0x170>)
 80015c0:	f005 faa2 	bl	8006b08 <HAL_TIMEx_ConfigBreakDeadTime>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 80015ca:	f000 fad5 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015ce:	4803      	ldr	r0, [pc, #12]	@ (80015dc <MX_TIM1_Init+0x170>)
 80015d0:	f000 fc66 	bl	8001ea0 <HAL_TIM_MspPostInit>

}
 80015d4:	bf00      	nop
 80015d6:	3770      	adds	r7, #112	@ 0x70
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000188 	.word	0x20000188
 80015e0:	40012c00 	.word	0x40012c00

080015e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08c      	sub	sp, #48	@ 0x30
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015ea:	f107 030c 	add.w	r3, r7, #12
 80015ee:	2224      	movs	r2, #36	@ 0x24
 80015f0:	2100      	movs	r1, #0
 80015f2:	4618      	mov	r0, r3
 80015f4:	f006 f9c0 	bl	8007978 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f8:	463b      	mov	r3, r7
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001602:	4b21      	ldr	r3, [pc, #132]	@ (8001688 <MX_TIM3_Init+0xa4>)
 8001604:	4a21      	ldr	r2, [pc, #132]	@ (800168c <MX_TIM3_Init+0xa8>)
 8001606:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001608:	4b1f      	ldr	r3, [pc, #124]	@ (8001688 <MX_TIM3_Init+0xa4>)
 800160a:	2200      	movs	r2, #0
 800160c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800160e:	4b1e      	ldr	r3, [pc, #120]	@ (8001688 <MX_TIM3_Init+0xa4>)
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3071;
 8001614:	4b1c      	ldr	r3, [pc, #112]	@ (8001688 <MX_TIM3_Init+0xa4>)
 8001616:	f640 32ff 	movw	r2, #3071	@ 0xbff
 800161a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800161c:	4b1a      	ldr	r3, [pc, #104]	@ (8001688 <MX_TIM3_Init+0xa4>)
 800161e:	2200      	movs	r2, #0
 8001620:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001622:	4b19      	ldr	r3, [pc, #100]	@ (8001688 <MX_TIM3_Init+0xa4>)
 8001624:	2200      	movs	r2, #0
 8001626:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001628:	2303      	movs	r3, #3
 800162a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800162c:	2300      	movs	r3, #0
 800162e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001630:	2301      	movs	r3, #1
 8001632:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001634:	2300      	movs	r3, #0
 8001636:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001638:	2300      	movs	r3, #0
 800163a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800163c:	2300      	movs	r3, #0
 800163e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001640:	2301      	movs	r3, #1
 8001642:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001644:	2300      	movs	r3, #0
 8001646:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001648:	2300      	movs	r3, #0
 800164a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800164c:	f107 030c 	add.w	r3, r7, #12
 8001650:	4619      	mov	r1, r3
 8001652:	480d      	ldr	r0, [pc, #52]	@ (8001688 <MX_TIM3_Init+0xa4>)
 8001654:	f004 f9c4 	bl	80059e0 <HAL_TIM_Encoder_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800165e:	f000 fa8b 	bl	8001b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001662:	2300      	movs	r3, #0
 8001664:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001666:	2300      	movs	r3, #0
 8001668:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800166a:	463b      	mov	r3, r7
 800166c:	4619      	mov	r1, r3
 800166e:	4806      	ldr	r0, [pc, #24]	@ (8001688 <MX_TIM3_Init+0xa4>)
 8001670:	f005 f9b4 	bl	80069dc <HAL_TIMEx_MasterConfigSynchronization>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800167a:	f000 fa7d 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800167e:	bf00      	nop
 8001680:	3730      	adds	r7, #48	@ 0x30
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	200001d4 	.word	0x200001d4
 800168c:	40000400 	.word	0x40000400

08001690 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b08e      	sub	sp, #56	@ 0x38
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001696:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	605a      	str	r2, [r3, #4]
 80016a0:	609a      	str	r2, [r3, #8]
 80016a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016a4:	f107 031c 	add.w	r3, r7, #28
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016b0:	463b      	mov	r3, r7
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	609a      	str	r2, [r3, #8]
 80016ba:	60da      	str	r2, [r3, #12]
 80016bc:	611a      	str	r2, [r3, #16]
 80016be:	615a      	str	r2, [r3, #20]
 80016c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016c2:	4b2d      	ldr	r3, [pc, #180]	@ (8001778 <MX_TIM4_Init+0xe8>)
 80016c4:	4a2d      	ldr	r2, [pc, #180]	@ (800177c <MX_TIM4_Init+0xec>)
 80016c6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 80016c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001778 <MX_TIM4_Init+0xe8>)
 80016ca:	22a9      	movs	r2, #169	@ 0xa9
 80016cc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001778 <MX_TIM4_Init+0xe8>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 80016d4:	4b28      	ldr	r3, [pc, #160]	@ (8001778 <MX_TIM4_Init+0xe8>)
 80016d6:	f242 720f 	movw	r2, #9999	@ 0x270f
 80016da:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016dc:	4b26      	ldr	r3, [pc, #152]	@ (8001778 <MX_TIM4_Init+0xe8>)
 80016de:	2200      	movs	r2, #0
 80016e0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e2:	4b25      	ldr	r3, [pc, #148]	@ (8001778 <MX_TIM4_Init+0xe8>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80016e8:	4823      	ldr	r0, [pc, #140]	@ (8001778 <MX_TIM4_Init+0xe8>)
 80016ea:	f003 ff3d 	bl	8005568 <HAL_TIM_Base_Init>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80016f4:	f000 fa40 	bl	8001b78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80016fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001702:	4619      	mov	r1, r3
 8001704:	481c      	ldr	r0, [pc, #112]	@ (8001778 <MX_TIM4_Init+0xe8>)
 8001706:	f004 fbb3 	bl	8005e70 <HAL_TIM_ConfigClockSource>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001710:	f000 fa32 	bl	8001b78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001714:	4818      	ldr	r0, [pc, #96]	@ (8001778 <MX_TIM4_Init+0xe8>)
 8001716:	f003 ffef 	bl	80056f8 <HAL_TIM_PWM_Init>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001720:	f000 fa2a 	bl	8001b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001724:	2300      	movs	r3, #0
 8001726:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001728:	2300      	movs	r3, #0
 800172a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800172c:	f107 031c 	add.w	r3, r7, #28
 8001730:	4619      	mov	r1, r3
 8001732:	4811      	ldr	r0, [pc, #68]	@ (8001778 <MX_TIM4_Init+0xe8>)
 8001734:	f005 f952 	bl	80069dc <HAL_TIMEx_MasterConfigSynchronization>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800173e:	f000 fa1b 	bl	8001b78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001742:	2360      	movs	r3, #96	@ 0x60
 8001744:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001746:	2300      	movs	r3, #0
 8001748:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800174a:	2300      	movs	r3, #0
 800174c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800174e:	2300      	movs	r3, #0
 8001750:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001752:	463b      	mov	r3, r7
 8001754:	2200      	movs	r2, #0
 8001756:	4619      	mov	r1, r3
 8001758:	4807      	ldr	r0, [pc, #28]	@ (8001778 <MX_TIM4_Init+0xe8>)
 800175a:	f004 fa75 	bl	8005c48 <HAL_TIM_PWM_ConfigChannel>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001764:	f000 fa08 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001768:	4803      	ldr	r0, [pc, #12]	@ (8001778 <MX_TIM4_Init+0xe8>)
 800176a:	f000 fb99 	bl	8001ea0 <HAL_TIM_MspPostInit>

}
 800176e:	bf00      	nop
 8001770:	3738      	adds	r7, #56	@ 0x38
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000220 	.word	0x20000220
 800177c:	40000800 	.word	0x40000800

08001780 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001786:	4b12      	ldr	r3, [pc, #72]	@ (80017d0 <MX_DMA_Init+0x50>)
 8001788:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800178a:	4a11      	ldr	r2, [pc, #68]	@ (80017d0 <MX_DMA_Init+0x50>)
 800178c:	f043 0304 	orr.w	r3, r3, #4
 8001790:	6493      	str	r3, [r2, #72]	@ 0x48
 8001792:	4b0f      	ldr	r3, [pc, #60]	@ (80017d0 <MX_DMA_Init+0x50>)
 8001794:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001796:	f003 0304 	and.w	r3, r3, #4
 800179a:	607b      	str	r3, [r7, #4]
 800179c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800179e:	4b0c      	ldr	r3, [pc, #48]	@ (80017d0 <MX_DMA_Init+0x50>)
 80017a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017a2:	4a0b      	ldr	r2, [pc, #44]	@ (80017d0 <MX_DMA_Init+0x50>)
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	6493      	str	r3, [r2, #72]	@ 0x48
 80017aa:	4b09      	ldr	r3, [pc, #36]	@ (80017d0 <MX_DMA_Init+0x50>)
 80017ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	603b      	str	r3, [r7, #0]
 80017b4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2100      	movs	r1, #0
 80017ba:	200b      	movs	r0, #11
 80017bc:	f002 fa31 	bl	8003c22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80017c0:	200b      	movs	r0, #11
 80017c2:	f002 fa48 	bl	8003c56 <HAL_NVIC_EnableIRQ>

}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40021000 	.word	0x40021000

080017d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08a      	sub	sp, #40	@ 0x28
 80017d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017da:	f107 0314 	add.w	r3, r7, #20
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	605a      	str	r2, [r3, #4]
 80017e4:	609a      	str	r2, [r3, #8]
 80017e6:	60da      	str	r2, [r3, #12]
 80017e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ea:	4b3b      	ldr	r3, [pc, #236]	@ (80018d8 <MX_GPIO_Init+0x104>)
 80017ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ee:	4a3a      	ldr	r2, [pc, #232]	@ (80018d8 <MX_GPIO_Init+0x104>)
 80017f0:	f043 0304 	orr.w	r3, r3, #4
 80017f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017f6:	4b38      	ldr	r3, [pc, #224]	@ (80018d8 <MX_GPIO_Init+0x104>)
 80017f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017fa:	f003 0304 	and.w	r3, r3, #4
 80017fe:	613b      	str	r3, [r7, #16]
 8001800:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001802:	4b35      	ldr	r3, [pc, #212]	@ (80018d8 <MX_GPIO_Init+0x104>)
 8001804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001806:	4a34      	ldr	r2, [pc, #208]	@ (80018d8 <MX_GPIO_Init+0x104>)
 8001808:	f043 0320 	orr.w	r3, r3, #32
 800180c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800180e:	4b32      	ldr	r3, [pc, #200]	@ (80018d8 <MX_GPIO_Init+0x104>)
 8001810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001812:	f003 0320 	and.w	r3, r3, #32
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800181a:	4b2f      	ldr	r3, [pc, #188]	@ (80018d8 <MX_GPIO_Init+0x104>)
 800181c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800181e:	4a2e      	ldr	r2, [pc, #184]	@ (80018d8 <MX_GPIO_Init+0x104>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001826:	4b2c      	ldr	r3, [pc, #176]	@ (80018d8 <MX_GPIO_Init+0x104>)
 8001828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001832:	4b29      	ldr	r3, [pc, #164]	@ (80018d8 <MX_GPIO_Init+0x104>)
 8001834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001836:	4a28      	ldr	r2, [pc, #160]	@ (80018d8 <MX_GPIO_Init+0x104>)
 8001838:	f043 0302 	orr.w	r3, r3, #2
 800183c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800183e:	4b26      	ldr	r3, [pc, #152]	@ (80018d8 <MX_GPIO_Init+0x104>)
 8001840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	607b      	str	r3, [r7, #4]
 8001848:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 800184a:	2200      	movs	r2, #0
 800184c:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8001850:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001854:	f002 fe0e 	bl	8004474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001858:	2200      	movs	r2, #0
 800185a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800185e:	481f      	ldr	r0, [pc, #124]	@ (80018dc <MX_GPIO_Init+0x108>)
 8001860:	f002 fe08 	bl	8004474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001864:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001868:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800186a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800186e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001874:	f107 0314 	add.w	r3, r7, #20
 8001878:	4619      	mov	r1, r3
 800187a:	4819      	ldr	r0, [pc, #100]	@ (80018e0 <MX_GPIO_Init+0x10c>)
 800187c:	f002 fc78 	bl	8004170 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 8001880:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8001884:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001886:	2301      	movs	r3, #1
 8001888:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188e:	2300      	movs	r3, #0
 8001890:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001892:	f107 0314 	add.w	r3, r7, #20
 8001896:	4619      	mov	r1, r3
 8001898:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800189c:	f002 fc68 	bl	8004170 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a6:	2301      	movs	r3, #1
 80018a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ae:	2300      	movs	r3, #0
 80018b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b2:	f107 0314 	add.w	r3, r7, #20
 80018b6:	4619      	mov	r1, r3
 80018b8:	4808      	ldr	r0, [pc, #32]	@ (80018dc <MX_GPIO_Init+0x108>)
 80018ba:	f002 fc59 	bl	8004170 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80018be:	2200      	movs	r2, #0
 80018c0:	2100      	movs	r1, #0
 80018c2:	2028      	movs	r0, #40	@ 0x28
 80018c4:	f002 f9ad 	bl	8003c22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80018c8:	2028      	movs	r0, #40	@ 0x28
 80018ca:	f002 f9c4 	bl	8003c56 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018ce:	bf00      	nop
 80018d0:	3728      	adds	r7, #40	@ 0x28
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40021000 	.word	0x40021000
 80018dc:	48000400 	.word	0x48000400
 80018e0:	48000800 	.word	0x48000800
 80018e4:	00000000 	.word	0x00000000

080018e8 <NO1>:

/* USER CODE BEGIN 4 */
void NO1()
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
	//LD2
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,GPIO_PIN_SET);
 80018ec:	2201      	movs	r2, #1
 80018ee:	2120      	movs	r1, #32
 80018f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018f4:	f002 fdbe 	bl	8004474 <HAL_GPIO_WritePin>
	ADC_RawRead[0] = 0;
 80018f8:	4b15      	ldr	r3, [pc, #84]	@ (8001950 <NO1+0x68>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	801a      	strh	r2, [r3, #0]
	Radiant2 = (ADC_RawRead[2]*6.28)/4095.0;
 80018fe:	4b14      	ldr	r3, [pc, #80]	@ (8001950 <NO1+0x68>)
 8001900:	889b      	ldrh	r3, [r3, #4]
 8001902:	4618      	mov	r0, r3
 8001904:	f7fe fdda 	bl	80004bc <__aeabi_i2d>
 8001908:	a30d      	add	r3, pc, #52	@ (adr r3, 8001940 <NO1+0x58>)
 800190a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800190e:	f7fe fe3f 	bl	8000590 <__aeabi_dmul>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	4610      	mov	r0, r2
 8001918:	4619      	mov	r1, r3
 800191a:	a30b      	add	r3, pc, #44	@ (adr r3, 8001948 <NO1+0x60>)
 800191c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001920:	f7fe ff60 	bl	80007e4 <__aeabi_ddiv>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	4610      	mov	r0, r2
 800192a:	4619      	mov	r1, r3
 800192c:	f7ff f842 	bl	80009b4 <__aeabi_d2f>
 8001930:	4603      	mov	r3, r0
 8001932:	4a08      	ldr	r2, [pc, #32]	@ (8001954 <NO1+0x6c>)
 8001934:	6013      	str	r3, [r2, #0]

}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	f3af 8000 	nop.w
 8001940:	51eb851f 	.word	0x51eb851f
 8001944:	40191eb8 	.word	0x40191eb8
 8001948:	00000000 	.word	0x00000000
 800194c:	40affe00 	.word	0x40affe00
 8001950:	2000027c 	.word	0x2000027c
 8001954:	20000278 	.word	0x20000278

08001958 <NO2>:

void NO2()
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
	// LD2
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,GPIO_PIN_RESET);
 800195c:	2200      	movs	r2, #0
 800195e:	2120      	movs	r1, #32
 8001960:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001964:	f002 fd86 	bl	8004474 <HAL_GPIO_WritePin>
	ADC_RawRead[1] = 0;
 8001968:	4b29      	ldr	r3, [pc, #164]	@ (8001a10 <NO2+0xb8>)
 800196a:	2200      	movs	r2, #0
 800196c:	805a      	strh	r2, [r3, #2]
	ADC_RawRead[2] = 0;
 800196e:	4b28      	ldr	r3, [pc, #160]	@ (8001a10 <NO2+0xb8>)
 8001970:	2200      	movs	r2, #0
 8001972:	809a      	strh	r2, [r3, #4]

	// QEI
	QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim3);
 8001974:	4b27      	ldr	r3, [pc, #156]	@ (8001a14 <NO2+0xbc>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800197a:	4a27      	ldr	r2, [pc, #156]	@ (8001a18 <NO2+0xc0>)
 800197c:	6013      	str	r3, [r2, #0]
	Radiant = (QEIReadRaw*6.28)/3071.0;
 800197e:	4b26      	ldr	r3, [pc, #152]	@ (8001a18 <NO2+0xc0>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f7fe fd8a 	bl	800049c <__aeabi_ui2d>
 8001988:	a31b      	add	r3, pc, #108	@ (adr r3, 80019f8 <NO2+0xa0>)
 800198a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198e:	f7fe fdff 	bl	8000590 <__aeabi_dmul>
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	4610      	mov	r0, r2
 8001998:	4619      	mov	r1, r3
 800199a:	a319      	add	r3, pc, #100	@ (adr r3, 8001a00 <NO2+0xa8>)
 800199c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a0:	f7fe ff20 	bl	80007e4 <__aeabi_ddiv>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	4610      	mov	r0, r2
 80019aa:	4619      	mov	r1, r3
 80019ac:	f7ff f802 	bl	80009b4 <__aeabi_d2f>
 80019b0:	4603      	mov	r3, r0
 80019b2:	4a1a      	ldr	r2, [pc, #104]	@ (8001a1c <NO2+0xc4>)
 80019b4:	6013      	str	r3, [r2, #0]

	// Scale 4095 to 3071
	Gain = (ADC_RawRead[0]*3071.0)/4095.0;
 80019b6:	4b16      	ldr	r3, [pc, #88]	@ (8001a10 <NO2+0xb8>)
 80019b8:	881b      	ldrh	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7fe fd7e 	bl	80004bc <__aeabi_i2d>
 80019c0:	a30f      	add	r3, pc, #60	@ (adr r3, 8001a00 <NO2+0xa8>)
 80019c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c6:	f7fe fde3 	bl	8000590 <__aeabi_dmul>
 80019ca:	4602      	mov	r2, r0
 80019cc:	460b      	mov	r3, r1
 80019ce:	4610      	mov	r0, r2
 80019d0:	4619      	mov	r1, r3
 80019d2:	a30d      	add	r3, pc, #52	@ (adr r3, 8001a08 <NO2+0xb0>)
 80019d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d8:	f7fe ff04 	bl	80007e4 <__aeabi_ddiv>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4610      	mov	r0, r2
 80019e2:	4619      	mov	r1, r3
 80019e4:	f7fe ffe6 	bl	80009b4 <__aeabi_d2f>
 80019e8:	4603      	mov	r3, r0
 80019ea:	4a0d      	ldr	r2, [pc, #52]	@ (8001a20 <NO2+0xc8>)
 80019ec:	6013      	str	r3, [r2, #0]
}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	f3af 8000 	nop.w
 80019f8:	51eb851f 	.word	0x51eb851f
 80019fc:	40191eb8 	.word	0x40191eb8
 8001a00:	00000000 	.word	0x00000000
 8001a04:	40a7fe00 	.word	0x40a7fe00
 8001a08:	00000000 	.word	0x00000000
 8001a0c:	40affe00 	.word	0x40affe00
 8001a10:	2000027c 	.word	0x2000027c
 8001a14:	200001d4 	.word	0x200001d4
 8001a18:	20000270 	.word	0x20000270
 8001a1c:	20000274 	.word	0x20000274
 8001a20:	200002c0 	.word	0x200002c0
 8001a24:	00000000 	.word	0x00000000

08001a28 <PlantSimulation>:
float PlantSimulation(float VIn) // run with fix frequency
{
 8001a28:	b5b0      	push	{r4, r5, r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	ed87 0a01 	vstr	s0, [r7, #4]
	static float speed =0;
	static float position =0;
	float current= VIn - speed * 0.0123;
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7fe fd54 	bl	80004e0 <__aeabi_f2d>
 8001a38:	4604      	mov	r4, r0
 8001a3a:	460d      	mov	r5, r1
 8001a3c:	4b30      	ldr	r3, [pc, #192]	@ (8001b00 <PlantSimulation+0xd8>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7fe fd4d 	bl	80004e0 <__aeabi_f2d>
 8001a46:	a328      	add	r3, pc, #160	@ (adr r3, 8001ae8 <PlantSimulation+0xc0>)
 8001a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4c:	f7fe fda0 	bl	8000590 <__aeabi_dmul>
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	4620      	mov	r0, r4
 8001a56:	4629      	mov	r1, r5
 8001a58:	f7fe fbe2 	bl	8000220 <__aeabi_dsub>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4610      	mov	r0, r2
 8001a62:	4619      	mov	r1, r3
 8001a64:	f7fe ffa6 	bl	80009b4 <__aeabi_d2f>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	617b      	str	r3, [r7, #20]
	float torque = current * 0.456;
 8001a6c:	6978      	ldr	r0, [r7, #20]
 8001a6e:	f7fe fd37 	bl	80004e0 <__aeabi_f2d>
 8001a72:	a31f      	add	r3, pc, #124	@ (adr r3, 8001af0 <PlantSimulation+0xc8>)
 8001a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a78:	f7fe fd8a 	bl	8000590 <__aeabi_dmul>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	4610      	mov	r0, r2
 8001a82:	4619      	mov	r1, r3
 8001a84:	f7fe ff96 	bl	80009b4 <__aeabi_d2f>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	613b      	str	r3, [r7, #16]
	float acc = torque * 0.789;
 8001a8c:	6938      	ldr	r0, [r7, #16]
 8001a8e:	f7fe fd27 	bl	80004e0 <__aeabi_f2d>
 8001a92:	a319      	add	r3, pc, #100	@ (adr r3, 8001af8 <PlantSimulation+0xd0>)
 8001a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a98:	f7fe fd7a 	bl	8000590 <__aeabi_dmul>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4610      	mov	r0, r2
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	f7fe ff86 	bl	80009b4 <__aeabi_d2f>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	60fb      	str	r3, [r7, #12]
	speed += acc;
 8001aac:	4b14      	ldr	r3, [pc, #80]	@ (8001b00 <PlantSimulation+0xd8>)
 8001aae:	ed93 7a00 	vldr	s14, [r3]
 8001ab2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ab6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aba:	4b11      	ldr	r3, [pc, #68]	@ (8001b00 <PlantSimulation+0xd8>)
 8001abc:	edc3 7a00 	vstr	s15, [r3]
	position += speed;
 8001ac0:	4b10      	ldr	r3, [pc, #64]	@ (8001b04 <PlantSimulation+0xdc>)
 8001ac2:	ed93 7a00 	vldr	s14, [r3]
 8001ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8001b00 <PlantSimulation+0xd8>)
 8001ac8:	edd3 7a00 	vldr	s15, [r3]
 8001acc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8001b04 <PlantSimulation+0xdc>)
 8001ad2:	edc3 7a00 	vstr	s15, [r3]
	return position;
 8001ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8001b04 <PlantSimulation+0xdc>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	ee07 3a90 	vmov	s15, r3
}
 8001ade:	eeb0 0a67 	vmov.f32	s0, s15
 8001ae2:	3718      	adds	r7, #24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ae8:	0ded288d 	.word	0x0ded288d
 8001aec:	3f8930be 	.word	0x3f8930be
 8001af0:	9fbe76c9 	.word	0x9fbe76c9
 8001af4:	3fdd2f1a 	.word	0x3fdd2f1a
 8001af8:	ed916873 	.word	0xed916873
 8001afc:	3fe93f7c 	.word	0x3fe93f7c
 8001b00:	200002d8 	.word	0x200002d8
 8001b04:	200002dc 	.word	0x200002dc

08001b08 <NO3>:

void NO3()
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
	//LD2
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001b0c:	2120      	movs	r1, #32
 8001b0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b12:	f002 fcc7 	bl	80044a4 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8001b16:	2064      	movs	r0, #100	@ 0x64
 8001b18:	f000 fb0e 	bl	8002138 <HAL_Delay>
//	ADC1_Channel[0].data = 0;
//	ADC1_Channel[1].data = 0;
//	ADC1_Channel[2].data = 0;
}
 8001b1c:	bf00      	nop
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13)
 8001b2a:	88fb      	ldrh	r3, [r7, #6]
 8001b2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b30:	d11a      	bne.n	8001b68 <HAL_GPIO_EXTI_Callback+0x48>
	{
		if (check == 0)
 8001b32:	4b10      	ldr	r3, [pc, #64]	@ (8001b74 <HAL_GPIO_EXTI_Callback+0x54>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d103      	bne.n	8001b42 <HAL_GPIO_EXTI_Callback+0x22>
		{
			check = 1;
 8001b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b74 <HAL_GPIO_EXTI_Callback+0x54>)
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	601a      	str	r2, [r3, #0]
		else
		{
			check = 1;
		}
	}
}
 8001b40:	e012      	b.n	8001b68 <HAL_GPIO_EXTI_Callback+0x48>
		else if (check == 1)
 8001b42:	4b0c      	ldr	r3, [pc, #48]	@ (8001b74 <HAL_GPIO_EXTI_Callback+0x54>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d103      	bne.n	8001b52 <HAL_GPIO_EXTI_Callback+0x32>
			check = 2;
 8001b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b74 <HAL_GPIO_EXTI_Callback+0x54>)
 8001b4c:	2202      	movs	r2, #2
 8001b4e:	601a      	str	r2, [r3, #0]
}
 8001b50:	e00a      	b.n	8001b68 <HAL_GPIO_EXTI_Callback+0x48>
		else if (check == 2)
 8001b52:	4b08      	ldr	r3, [pc, #32]	@ (8001b74 <HAL_GPIO_EXTI_Callback+0x54>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d103      	bne.n	8001b62 <HAL_GPIO_EXTI_Callback+0x42>
			check= 3;
 8001b5a:	4b06      	ldr	r3, [pc, #24]	@ (8001b74 <HAL_GPIO_EXTI_Callback+0x54>)
 8001b5c:	2203      	movs	r2, #3
 8001b5e:	601a      	str	r2, [r3, #0]
}
 8001b60:	e002      	b.n	8001b68 <HAL_GPIO_EXTI_Callback+0x48>
			check = 1;
 8001b62:	4b04      	ldr	r3, [pc, #16]	@ (8001b74 <HAL_GPIO_EXTI_Callback+0x54>)
 8001b64:	2201      	movs	r2, #1
 8001b66:	601a      	str	r2, [r3, #0]
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	2000026c 	.word	0x2000026c

08001b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b7c:	b672      	cpsid	i
}
 8001b7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b80:	bf00      	nop
 8001b82:	e7fd      	b.n	8001b80 <Error_Handler+0x8>

08001b84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b8a:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc8 <HAL_MspInit+0x44>)
 8001b8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b8e:	4a0e      	ldr	r2, [pc, #56]	@ (8001bc8 <HAL_MspInit+0x44>)
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b96:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc8 <HAL_MspInit+0x44>)
 8001b98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	607b      	str	r3, [r7, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba2:	4b09      	ldr	r3, [pc, #36]	@ (8001bc8 <HAL_MspInit+0x44>)
 8001ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ba6:	4a08      	ldr	r2, [pc, #32]	@ (8001bc8 <HAL_MspInit+0x44>)
 8001ba8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bac:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bae:	4b06      	ldr	r3, [pc, #24]	@ (8001bc8 <HAL_MspInit+0x44>)
 8001bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bb6:	603b      	str	r3, [r7, #0]
 8001bb8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001bba:	f002 fd49 	bl	8004650 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40021000 	.word	0x40021000

08001bcc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b0a0      	sub	sp, #128	@ 0x80
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001be4:	f107 0318 	add.w	r3, r7, #24
 8001be8:	2254      	movs	r2, #84	@ 0x54
 8001bea:	2100      	movs	r1, #0
 8001bec:	4618      	mov	r0, r3
 8001bee:	f005 fec3 	bl	8007978 <memset>
  if(hadc->Instance==ADC1)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001bfa:	d177      	bne.n	8001cec <HAL_ADC_MspInit+0x120>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001bfc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c00:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001c02:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001c06:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c08:	f107 0318 	add.w	r3, r7, #24
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f003 fa5d 	bl	80050cc <HAL_RCCEx_PeriphCLKConfig>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001c18:	f7ff ffae 	bl	8001b78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001c1c:	4b35      	ldr	r3, [pc, #212]	@ (8001cf4 <HAL_ADC_MspInit+0x128>)
 8001c1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c20:	4a34      	ldr	r2, [pc, #208]	@ (8001cf4 <HAL_ADC_MspInit+0x128>)
 8001c22:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001c26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c28:	4b32      	ldr	r3, [pc, #200]	@ (8001cf4 <HAL_ADC_MspInit+0x128>)
 8001c2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c30:	617b      	str	r3, [r7, #20]
 8001c32:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c34:	4b2f      	ldr	r3, [pc, #188]	@ (8001cf4 <HAL_ADC_MspInit+0x128>)
 8001c36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c38:	4a2e      	ldr	r2, [pc, #184]	@ (8001cf4 <HAL_ADC_MspInit+0x128>)
 8001c3a:	f043 0301 	orr.w	r3, r3, #1
 8001c3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c40:	4b2c      	ldr	r3, [pc, #176]	@ (8001cf4 <HAL_ADC_MspInit+0x128>)
 8001c42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	613b      	str	r3, [r7, #16]
 8001c4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c4c:	4b29      	ldr	r3, [pc, #164]	@ (8001cf4 <HAL_ADC_MspInit+0x128>)
 8001c4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c50:	4a28      	ldr	r2, [pc, #160]	@ (8001cf4 <HAL_ADC_MspInit+0x128>)
 8001c52:	f043 0302 	orr.w	r3, r3, #2
 8001c56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c58:	4b26      	ldr	r3, [pc, #152]	@ (8001cf4 <HAL_ADC_MspInit+0x128>)
 8001c5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c64:	2303      	movs	r3, #3
 8001c66:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c70:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001c74:	4619      	mov	r1, r3
 8001c76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c7a:	f002 fa79 	bl	8004170 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c82:	2303      	movs	r3, #3
 8001c84:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c8a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4819      	ldr	r0, [pc, #100]	@ (8001cf8 <HAL_ADC_MspInit+0x12c>)
 8001c92:	f002 fa6d 	bl	8004170 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001c96:	4b19      	ldr	r3, [pc, #100]	@ (8001cfc <HAL_ADC_MspInit+0x130>)
 8001c98:	4a19      	ldr	r2, [pc, #100]	@ (8001d00 <HAL_ADC_MspInit+0x134>)
 8001c9a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001c9c:	4b17      	ldr	r3, [pc, #92]	@ (8001cfc <HAL_ADC_MspInit+0x130>)
 8001c9e:	2205      	movs	r2, #5
 8001ca0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ca2:	4b16      	ldr	r3, [pc, #88]	@ (8001cfc <HAL_ADC_MspInit+0x130>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ca8:	4b14      	ldr	r3, [pc, #80]	@ (8001cfc <HAL_ADC_MspInit+0x130>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001cae:	4b13      	ldr	r3, [pc, #76]	@ (8001cfc <HAL_ADC_MspInit+0x130>)
 8001cb0:	2280      	movs	r2, #128	@ 0x80
 8001cb2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001cb4:	4b11      	ldr	r3, [pc, #68]	@ (8001cfc <HAL_ADC_MspInit+0x130>)
 8001cb6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cba:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8001cfc <HAL_ADC_MspInit+0x130>)
 8001cbe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cc2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001cc4:	4b0d      	ldr	r3, [pc, #52]	@ (8001cfc <HAL_ADC_MspInit+0x130>)
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001cca:	4b0c      	ldr	r3, [pc, #48]	@ (8001cfc <HAL_ADC_MspInit+0x130>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001cd0:	480a      	ldr	r0, [pc, #40]	@ (8001cfc <HAL_ADC_MspInit+0x130>)
 8001cd2:	f001 ffdb 	bl	8003c8c <HAL_DMA_Init>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 8001cdc:	f7ff ff4c 	bl	8001b78 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4a06      	ldr	r2, [pc, #24]	@ (8001cfc <HAL_ADC_MspInit+0x130>)
 8001ce4:	655a      	str	r2, [r3, #84]	@ 0x54
 8001ce6:	4a05      	ldr	r2, [pc, #20]	@ (8001cfc <HAL_ADC_MspInit+0x130>)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001cec:	bf00      	nop
 8001cee:	3780      	adds	r7, #128	@ 0x80
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	48000400 	.word	0x48000400
 8001cfc:	20000094 	.word	0x20000094
 8001d00:	40020008 	.word	0x40020008

08001d04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b09e      	sub	sp, #120	@ 0x78
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d1c:	f107 0310 	add.w	r3, r7, #16
 8001d20:	2254      	movs	r2, #84	@ 0x54
 8001d22:	2100      	movs	r1, #0
 8001d24:	4618      	mov	r0, r3
 8001d26:	f005 fe27 	bl	8007978 <memset>
  if(huart->Instance==LPUART1)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a1f      	ldr	r2, [pc, #124]	@ (8001dac <HAL_UART_MspInit+0xa8>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d136      	bne.n	8001da2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001d34:	2320      	movs	r3, #32
 8001d36:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d3c:	f107 0310 	add.w	r3, r7, #16
 8001d40:	4618      	mov	r0, r3
 8001d42:	f003 f9c3 	bl	80050cc <HAL_RCCEx_PeriphCLKConfig>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d4c:	f7ff ff14 	bl	8001b78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001d50:	4b17      	ldr	r3, [pc, #92]	@ (8001db0 <HAL_UART_MspInit+0xac>)
 8001d52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d54:	4a16      	ldr	r2, [pc, #88]	@ (8001db0 <HAL_UART_MspInit+0xac>)
 8001d56:	f043 0301 	orr.w	r3, r3, #1
 8001d5a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001d5c:	4b14      	ldr	r3, [pc, #80]	@ (8001db0 <HAL_UART_MspInit+0xac>)
 8001d5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d68:	4b11      	ldr	r3, [pc, #68]	@ (8001db0 <HAL_UART_MspInit+0xac>)
 8001d6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d6c:	4a10      	ldr	r2, [pc, #64]	@ (8001db0 <HAL_UART_MspInit+0xac>)
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d74:	4b0e      	ldr	r3, [pc, #56]	@ (8001db0 <HAL_UART_MspInit+0xac>)
 8001d76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d78:	f003 0301 	and.w	r3, r3, #1
 8001d7c:	60bb      	str	r3, [r7, #8]
 8001d7e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001d80:	230c      	movs	r3, #12
 8001d82:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d84:	2302      	movs	r3, #2
 8001d86:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001d90:	230c      	movs	r3, #12
 8001d92:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d94:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001d98:	4619      	mov	r1, r3
 8001d9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d9e:	f002 f9e7 	bl	8004170 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001da2:	bf00      	nop
 8001da4:	3778      	adds	r7, #120	@ 0x78
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40008000 	.word	0x40008000
 8001db0:	40021000 	.word	0x40021000

08001db4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a13      	ldr	r2, [pc, #76]	@ (8001e10 <HAL_TIM_Base_MspInit+0x5c>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d10c      	bne.n	8001de0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dc6:	4b13      	ldr	r3, [pc, #76]	@ (8001e14 <HAL_TIM_Base_MspInit+0x60>)
 8001dc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dca:	4a12      	ldr	r2, [pc, #72]	@ (8001e14 <HAL_TIM_Base_MspInit+0x60>)
 8001dcc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001dd0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001dd2:	4b10      	ldr	r3, [pc, #64]	@ (8001e14 <HAL_TIM_Base_MspInit+0x60>)
 8001dd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dd6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001dde:	e010      	b.n	8001e02 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a0c      	ldr	r2, [pc, #48]	@ (8001e18 <HAL_TIM_Base_MspInit+0x64>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d10b      	bne.n	8001e02 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001dea:	4b0a      	ldr	r3, [pc, #40]	@ (8001e14 <HAL_TIM_Base_MspInit+0x60>)
 8001dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dee:	4a09      	ldr	r2, [pc, #36]	@ (8001e14 <HAL_TIM_Base_MspInit+0x60>)
 8001df0:	f043 0304 	orr.w	r3, r3, #4
 8001df4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001df6:	4b07      	ldr	r3, [pc, #28]	@ (8001e14 <HAL_TIM_Base_MspInit+0x60>)
 8001df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dfa:	f003 0304 	and.w	r3, r3, #4
 8001dfe:	60bb      	str	r3, [r7, #8]
 8001e00:	68bb      	ldr	r3, [r7, #8]
}
 8001e02:	bf00      	nop
 8001e04:	3714      	adds	r7, #20
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	40012c00 	.word	0x40012c00
 8001e14:	40021000 	.word	0x40021000
 8001e18:	40000800 	.word	0x40000800

08001e1c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b08a      	sub	sp, #40	@ 0x28
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e24:	f107 0314 	add.w	r3, r7, #20
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]
 8001e32:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a17      	ldr	r2, [pc, #92]	@ (8001e98 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d128      	bne.n	8001e90 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e3e:	4b17      	ldr	r3, [pc, #92]	@ (8001e9c <HAL_TIM_Encoder_MspInit+0x80>)
 8001e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e42:	4a16      	ldr	r2, [pc, #88]	@ (8001e9c <HAL_TIM_Encoder_MspInit+0x80>)
 8001e44:	f043 0302 	orr.w	r3, r3, #2
 8001e48:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e4a:	4b14      	ldr	r3, [pc, #80]	@ (8001e9c <HAL_TIM_Encoder_MspInit+0x80>)
 8001e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	613b      	str	r3, [r7, #16]
 8001e54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e56:	4b11      	ldr	r3, [pc, #68]	@ (8001e9c <HAL_TIM_Encoder_MspInit+0x80>)
 8001e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e5a:	4a10      	ldr	r2, [pc, #64]	@ (8001e9c <HAL_TIM_Encoder_MspInit+0x80>)
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e62:	4b0e      	ldr	r3, [pc, #56]	@ (8001e9c <HAL_TIM_Encoder_MspInit+0x80>)
 8001e64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e6e:	23c0      	movs	r3, #192	@ 0xc0
 8001e70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e72:	2302      	movs	r3, #2
 8001e74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e76:	2300      	movs	r3, #0
 8001e78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e82:	f107 0314 	add.w	r3, r7, #20
 8001e86:	4619      	mov	r1, r3
 8001e88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e8c:	f002 f970 	bl	8004170 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e90:	bf00      	nop
 8001e92:	3728      	adds	r7, #40	@ 0x28
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40000400 	.word	0x40000400
 8001e9c:	40021000 	.word	0x40021000

08001ea0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08a      	sub	sp, #40	@ 0x28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea8:	f107 0314 	add.w	r3, r7, #20
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	60da      	str	r2, [r3, #12]
 8001eb6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a23      	ldr	r2, [pc, #140]	@ (8001f4c <HAL_TIM_MspPostInit+0xac>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d11c      	bne.n	8001efc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ec2:	4b23      	ldr	r3, [pc, #140]	@ (8001f50 <HAL_TIM_MspPostInit+0xb0>)
 8001ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ec6:	4a22      	ldr	r2, [pc, #136]	@ (8001f50 <HAL_TIM_MspPostInit+0xb0>)
 8001ec8:	f043 0304 	orr.w	r3, r3, #4
 8001ecc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ece:	4b20      	ldr	r3, [pc, #128]	@ (8001f50 <HAL_TIM_MspPostInit+0xb0>)
 8001ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ed2:	f003 0304 	and.w	r3, r3, #4
 8001ed6:	613b      	str	r3, [r7, #16]
 8001ed8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001eda:	2303      	movs	r3, #3
 8001edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001eea:	2302      	movs	r3, #2
 8001eec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eee:	f107 0314 	add.w	r3, r7, #20
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4817      	ldr	r0, [pc, #92]	@ (8001f54 <HAL_TIM_MspPostInit+0xb4>)
 8001ef6:	f002 f93b 	bl	8004170 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001efa:	e022      	b.n	8001f42 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM4)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a15      	ldr	r2, [pc, #84]	@ (8001f58 <HAL_TIM_MspPostInit+0xb8>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d11d      	bne.n	8001f42 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f06:	4b12      	ldr	r3, [pc, #72]	@ (8001f50 <HAL_TIM_MspPostInit+0xb0>)
 8001f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f0a:	4a11      	ldr	r2, [pc, #68]	@ (8001f50 <HAL_TIM_MspPostInit+0xb0>)
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f12:	4b0f      	ldr	r3, [pc, #60]	@ (8001f50 <HAL_TIM_MspPostInit+0xb0>)
 8001f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001f1e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001f22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f24:	2302      	movs	r3, #2
 8001f26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001f30:	230a      	movs	r3, #10
 8001f32:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f34:	f107 0314 	add.w	r3, r7, #20
 8001f38:	4619      	mov	r1, r3
 8001f3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f3e:	f002 f917 	bl	8004170 <HAL_GPIO_Init>
}
 8001f42:	bf00      	nop
 8001f44:	3728      	adds	r7, #40	@ 0x28
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40012c00 	.word	0x40012c00
 8001f50:	40021000 	.word	0x40021000
 8001f54:	48000800 	.word	0x48000800
 8001f58:	40000800 	.word	0x40000800

08001f5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f60:	bf00      	nop
 8001f62:	e7fd      	b.n	8001f60 <NMI_Handler+0x4>

08001f64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f68:	bf00      	nop
 8001f6a:	e7fd      	b.n	8001f68 <HardFault_Handler+0x4>

08001f6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f70:	bf00      	nop
 8001f72:	e7fd      	b.n	8001f70 <MemManage_Handler+0x4>

08001f74 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f78:	bf00      	nop
 8001f7a:	e7fd      	b.n	8001f78 <BusFault_Handler+0x4>

08001f7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f80:	bf00      	nop
 8001f82:	e7fd      	b.n	8001f80 <UsageFault_Handler+0x4>

08001f84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f88:	bf00      	nop
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fa4:	bf00      	nop
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fb2:	f000 f8a3 	bl	80020fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
	...

08001fbc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001fc0:	4802      	ldr	r0, [pc, #8]	@ (8001fcc <DMA1_Channel1_IRQHandler+0x10>)
 8001fc2:	f001 ff86 	bl	8003ed2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000094 	.word	0x20000094

08001fd0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001fd4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001fd8:	f002 fa7e 	bl	80044d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001fdc:	bf00      	nop
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001fe4:	4b06      	ldr	r3, [pc, #24]	@ (8002000 <SystemInit+0x20>)
 8001fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fea:	4a05      	ldr	r2, [pc, #20]	@ (8002000 <SystemInit+0x20>)
 8001fec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ff0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	e000ed00 	.word	0xe000ed00

08002004 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002004:	480d      	ldr	r0, [pc, #52]	@ (800203c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002006:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002008:	f7ff ffea 	bl	8001fe0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800200c:	480c      	ldr	r0, [pc, #48]	@ (8002040 <LoopForever+0x6>)
  ldr r1, =_edata
 800200e:	490d      	ldr	r1, [pc, #52]	@ (8002044 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002010:	4a0d      	ldr	r2, [pc, #52]	@ (8002048 <LoopForever+0xe>)
  movs r3, #0
 8002012:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002014:	e002      	b.n	800201c <LoopCopyDataInit>

08002016 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002016:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002018:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800201a:	3304      	adds	r3, #4

0800201c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800201c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800201e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002020:	d3f9      	bcc.n	8002016 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002022:	4a0a      	ldr	r2, [pc, #40]	@ (800204c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002024:	4c0a      	ldr	r4, [pc, #40]	@ (8002050 <LoopForever+0x16>)
  movs r3, #0
 8002026:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002028:	e001      	b.n	800202e <LoopFillZerobss>

0800202a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800202a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800202c:	3204      	adds	r2, #4

0800202e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800202e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002030:	d3fb      	bcc.n	800202a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002032:	f005 fca9 	bl	8007988 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002036:	f7fe fe85 	bl	8000d44 <main>

0800203a <LoopForever>:

LoopForever:
    b LoopForever
 800203a:	e7fe      	b.n	800203a <LoopForever>
  ldr   r0, =_estack
 800203c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002040:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002044:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002048:	08007a38 	.word	0x08007a38
  ldr r2, =_sbss
 800204c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002050:	200002e4 	.word	0x200002e4

08002054 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002054:	e7fe      	b.n	8002054 <ADC1_2_IRQHandler>

08002056 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b082      	sub	sp, #8
 800205a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800205c:	2300      	movs	r3, #0
 800205e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002060:	2003      	movs	r0, #3
 8002062:	f001 fdd3 	bl	8003c0c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002066:	2000      	movs	r0, #0
 8002068:	f000 f80e 	bl	8002088 <HAL_InitTick>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d002      	beq.n	8002078 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	71fb      	strb	r3, [r7, #7]
 8002076:	e001      	b.n	800207c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002078:	f7ff fd84 	bl	8001b84 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800207c:	79fb      	ldrb	r3, [r7, #7]

}
 800207e:	4618      	mov	r0, r3
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
	...

08002088 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002090:	2300      	movs	r3, #0
 8002092:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002094:	4b16      	ldr	r3, [pc, #88]	@ (80020f0 <HAL_InitTick+0x68>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d022      	beq.n	80020e2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800209c:	4b15      	ldr	r3, [pc, #84]	@ (80020f4 <HAL_InitTick+0x6c>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	4b13      	ldr	r3, [pc, #76]	@ (80020f0 <HAL_InitTick+0x68>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80020a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80020ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b0:	4618      	mov	r0, r3
 80020b2:	f001 fdde 	bl	8003c72 <HAL_SYSTICK_Config>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d10f      	bne.n	80020dc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b0f      	cmp	r3, #15
 80020c0:	d809      	bhi.n	80020d6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020c2:	2200      	movs	r2, #0
 80020c4:	6879      	ldr	r1, [r7, #4]
 80020c6:	f04f 30ff 	mov.w	r0, #4294967295
 80020ca:	f001 fdaa 	bl	8003c22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020ce:	4a0a      	ldr	r2, [pc, #40]	@ (80020f8 <HAL_InitTick+0x70>)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6013      	str	r3, [r2, #0]
 80020d4:	e007      	b.n	80020e6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	73fb      	strb	r3, [r7, #15]
 80020da:	e004      	b.n	80020e6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	73fb      	strb	r3, [r7, #15]
 80020e0:	e001      	b.n	80020e6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80020e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	20000008 	.word	0x20000008
 80020f4:	20000000 	.word	0x20000000
 80020f8:	20000004 	.word	0x20000004

080020fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002100:	4b05      	ldr	r3, [pc, #20]	@ (8002118 <HAL_IncTick+0x1c>)
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	4b05      	ldr	r3, [pc, #20]	@ (800211c <HAL_IncTick+0x20>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4413      	add	r3, r2
 800210a:	4a03      	ldr	r2, [pc, #12]	@ (8002118 <HAL_IncTick+0x1c>)
 800210c:	6013      	str	r3, [r2, #0]
}
 800210e:	bf00      	nop
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	200002e0 	.word	0x200002e0
 800211c:	20000008 	.word	0x20000008

08002120 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  return uwTick;
 8002124:	4b03      	ldr	r3, [pc, #12]	@ (8002134 <HAL_GetTick+0x14>)
 8002126:	681b      	ldr	r3, [r3, #0]
}
 8002128:	4618      	mov	r0, r3
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	200002e0 	.word	0x200002e0

08002138 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002140:	f7ff ffee 	bl	8002120 <HAL_GetTick>
 8002144:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002150:	d004      	beq.n	800215c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002152:	4b09      	ldr	r3, [pc, #36]	@ (8002178 <HAL_Delay+0x40>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	4413      	add	r3, r2
 800215a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800215c:	bf00      	nop
 800215e:	f7ff ffdf 	bl	8002120 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	429a      	cmp	r2, r3
 800216c:	d8f7      	bhi.n	800215e <HAL_Delay+0x26>
  {
  }
}
 800216e:	bf00      	nop
 8002170:	bf00      	nop
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	20000008 	.word	0x20000008

0800217c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	431a      	orrs	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	609a      	str	r2, [r3, #8]
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
 80021aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	431a      	orrs	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	609a      	str	r2, [r3, #8]
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80021d8:	4618      	mov	r0, r3
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b087      	sub	sp, #28
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
 80021f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	3360      	adds	r3, #96	@ 0x60
 80021f6:	461a      	mov	r2, r3
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4413      	add	r3, r2
 80021fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	4b08      	ldr	r3, [pc, #32]	@ (8002228 <LL_ADC_SetOffset+0x44>)
 8002206:	4013      	ands	r3, r2
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	430a      	orrs	r2, r1
 8002212:	4313      	orrs	r3, r2
 8002214:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800221c:	bf00      	nop
 800221e:	371c      	adds	r7, #28
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	03fff000 	.word	0x03fff000

0800222c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	3360      	adds	r3, #96	@ 0x60
 800223a:	461a      	mov	r2, r3
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800224c:	4618      	mov	r0, r3
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002258:	b480      	push	{r7}
 800225a:	b087      	sub	sp, #28
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	3360      	adds	r3, #96	@ 0x60
 8002268:	461a      	mov	r2, r3
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	4413      	add	r3, r2
 8002270:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	431a      	orrs	r2, r3
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002282:	bf00      	nop
 8002284:	371c      	adds	r7, #28
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800228e:	b480      	push	{r7}
 8002290:	b087      	sub	sp, #28
 8002292:	af00      	add	r7, sp, #0
 8002294:	60f8      	str	r0, [r7, #12]
 8002296:	60b9      	str	r1, [r7, #8]
 8002298:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	3360      	adds	r3, #96	@ 0x60
 800229e:	461a      	mov	r2, r3
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4413      	add	r3, r2
 80022a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	431a      	orrs	r2, r3
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80022b8:	bf00      	nop
 80022ba:	371c      	adds	r7, #28
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b087      	sub	sp, #28
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	3360      	adds	r3, #96	@ 0x60
 80022d4:	461a      	mov	r2, r3
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	4413      	add	r3, r2
 80022dc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	431a      	orrs	r2, r3
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80022ee:	bf00      	nop
 80022f0:	371c      	adds	r7, #28
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr

080022fa <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80022fa:	b480      	push	{r7}
 80022fc:	b083      	sub	sp, #12
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
 8002302:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	695b      	ldr	r3, [r3, #20]
 8002308:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	431a      	orrs	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	615a      	str	r2, [r3, #20]
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002334:	2301      	movs	r3, #1
 8002336:	e000      	b.n	800233a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002346:	b480      	push	{r7}
 8002348:	b087      	sub	sp, #28
 800234a:	af00      	add	r7, sp, #0
 800234c:	60f8      	str	r0, [r7, #12]
 800234e:	60b9      	str	r1, [r7, #8]
 8002350:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	3330      	adds	r3, #48	@ 0x30
 8002356:	461a      	mov	r2, r3
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	0a1b      	lsrs	r3, r3, #8
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	f003 030c 	and.w	r3, r3, #12
 8002362:	4413      	add	r3, r2
 8002364:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	f003 031f 	and.w	r3, r3, #31
 8002370:	211f      	movs	r1, #31
 8002372:	fa01 f303 	lsl.w	r3, r1, r3
 8002376:	43db      	mvns	r3, r3
 8002378:	401a      	ands	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	0e9b      	lsrs	r3, r3, #26
 800237e:	f003 011f 	and.w	r1, r3, #31
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	f003 031f 	and.w	r3, r3, #31
 8002388:	fa01 f303 	lsl.w	r3, r1, r3
 800238c:	431a      	orrs	r2, r3
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002392:	bf00      	nop
 8002394:	371c      	adds	r7, #28
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800239e:	b480      	push	{r7}
 80023a0:	b087      	sub	sp, #28
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	60f8      	str	r0, [r7, #12]
 80023a6:	60b9      	str	r1, [r7, #8]
 80023a8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	3314      	adds	r3, #20
 80023ae:	461a      	mov	r2, r3
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	0e5b      	lsrs	r3, r3, #25
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	f003 0304 	and.w	r3, r3, #4
 80023ba:	4413      	add	r3, r2
 80023bc:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	0d1b      	lsrs	r3, r3, #20
 80023c6:	f003 031f 	and.w	r3, r3, #31
 80023ca:	2107      	movs	r1, #7
 80023cc:	fa01 f303 	lsl.w	r3, r1, r3
 80023d0:	43db      	mvns	r3, r3
 80023d2:	401a      	ands	r2, r3
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	0d1b      	lsrs	r3, r3, #20
 80023d8:	f003 031f 	and.w	r3, r3, #31
 80023dc:	6879      	ldr	r1, [r7, #4]
 80023de:	fa01 f303 	lsl.w	r3, r1, r3
 80023e2:	431a      	orrs	r2, r3
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80023e8:	bf00      	nop
 80023ea:	371c      	adds	r7, #28
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800240c:	43db      	mvns	r3, r3
 800240e:	401a      	ands	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f003 0318 	and.w	r3, r3, #24
 8002416:	4908      	ldr	r1, [pc, #32]	@ (8002438 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002418:	40d9      	lsrs	r1, r3
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	400b      	ands	r3, r1
 800241e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002422:	431a      	orrs	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800242a:	bf00      	nop
 800242c:	3714      	adds	r7, #20
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	0007ffff 	.word	0x0007ffff

0800243c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f003 031f 	and.w	r3, r3, #31
}
 800244c:	4618      	mov	r0, r3
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002468:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	6093      	str	r3, [r2, #8]
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800248c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002490:	d101      	bne.n	8002496 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002492:	2301      	movs	r3, #1
 8002494:	e000      	b.n	8002498 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80024b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024b8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80024e0:	d101      	bne.n	80024e6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80024e2:	2301      	movs	r3, #1
 80024e4:	e000      	b.n	80024e8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002504:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002508:	f043 0201 	orr.w	r2, r3, #1
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800252c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002530:	f043 0202 	orr.w	r2, r3, #2
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f003 0301 	and.w	r3, r3, #1
 8002554:	2b01      	cmp	r3, #1
 8002556:	d101      	bne.n	800255c <LL_ADC_IsEnabled+0x18>
 8002558:	2301      	movs	r3, #1
 800255a:	e000      	b.n	800255e <LL_ADC_IsEnabled+0x1a>
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800256a:	b480      	push	{r7}
 800256c:	b083      	sub	sp, #12
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b02      	cmp	r3, #2
 800257c:	d101      	bne.n	8002582 <LL_ADC_IsDisableOngoing+0x18>
 800257e:	2301      	movs	r3, #1
 8002580:	e000      	b.n	8002584 <LL_ADC_IsDisableOngoing+0x1a>
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80025a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025a4:	f043 0204 	orr.w	r2, r3, #4
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	2b04      	cmp	r3, #4
 80025ca:	d101      	bne.n	80025d0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80025cc:	2301      	movs	r3, #1
 80025ce:	e000      	b.n	80025d2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr

080025de <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80025de:	b480      	push	{r7}
 80025e0:	b083      	sub	sp, #12
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f003 0308 	and.w	r3, r3, #8
 80025ee:	2b08      	cmp	r3, #8
 80025f0:	d101      	bne.n	80025f6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80025f2:	2301      	movs	r3, #1
 80025f4:	e000      	b.n	80025f8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002604:	b590      	push	{r4, r7, lr}
 8002606:	b089      	sub	sp, #36	@ 0x24
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800260c:	2300      	movs	r3, #0
 800260e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002610:	2300      	movs	r3, #0
 8002612:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e1a9      	b.n	8002972 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002628:	2b00      	cmp	r3, #0
 800262a:	d109      	bne.n	8002640 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f7ff facd 	bl	8001bcc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff ff19 	bl	800247c <LL_ADC_IsDeepPowerDownEnabled>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d004      	beq.n	800265a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff feff 	bl	8002458 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff ff34 	bl	80024cc <LL_ADC_IsInternalRegulatorEnabled>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d115      	bne.n	8002696 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff ff18 	bl	80024a4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002674:	4b9c      	ldr	r3, [pc, #624]	@ (80028e8 <HAL_ADC_Init+0x2e4>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	099b      	lsrs	r3, r3, #6
 800267a:	4a9c      	ldr	r2, [pc, #624]	@ (80028ec <HAL_ADC_Init+0x2e8>)
 800267c:	fba2 2303 	umull	r2, r3, r2, r3
 8002680:	099b      	lsrs	r3, r3, #6
 8002682:	3301      	adds	r3, #1
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002688:	e002      	b.n	8002690 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	3b01      	subs	r3, #1
 800268e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1f9      	bne.n	800268a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff ff16 	bl	80024cc <LL_ADC_IsInternalRegulatorEnabled>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10d      	bne.n	80026c2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026aa:	f043 0210 	orr.w	r2, r3, #16
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026b6:	f043 0201 	orr.w	r2, r3, #1
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff ff76 	bl	80025b8 <LL_ADC_REG_IsConversionOngoing>
 80026cc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026d2:	f003 0310 	and.w	r3, r3, #16
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f040 8142 	bne.w	8002960 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f040 813e 	bne.w	8002960 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026e8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80026ec:	f043 0202 	orr.w	r2, r3, #2
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff ff23 	bl	8002544 <LL_ADC_IsEnabled>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d141      	bne.n	8002788 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800270c:	d004      	beq.n	8002718 <HAL_ADC_Init+0x114>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a77      	ldr	r2, [pc, #476]	@ (80028f0 <HAL_ADC_Init+0x2ec>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d10f      	bne.n	8002738 <HAL_ADC_Init+0x134>
 8002718:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800271c:	f7ff ff12 	bl	8002544 <LL_ADC_IsEnabled>
 8002720:	4604      	mov	r4, r0
 8002722:	4873      	ldr	r0, [pc, #460]	@ (80028f0 <HAL_ADC_Init+0x2ec>)
 8002724:	f7ff ff0e 	bl	8002544 <LL_ADC_IsEnabled>
 8002728:	4603      	mov	r3, r0
 800272a:	4323      	orrs	r3, r4
 800272c:	2b00      	cmp	r3, #0
 800272e:	bf0c      	ite	eq
 8002730:	2301      	moveq	r3, #1
 8002732:	2300      	movne	r3, #0
 8002734:	b2db      	uxtb	r3, r3
 8002736:	e012      	b.n	800275e <HAL_ADC_Init+0x15a>
 8002738:	486e      	ldr	r0, [pc, #440]	@ (80028f4 <HAL_ADC_Init+0x2f0>)
 800273a:	f7ff ff03 	bl	8002544 <LL_ADC_IsEnabled>
 800273e:	4604      	mov	r4, r0
 8002740:	486d      	ldr	r0, [pc, #436]	@ (80028f8 <HAL_ADC_Init+0x2f4>)
 8002742:	f7ff feff 	bl	8002544 <LL_ADC_IsEnabled>
 8002746:	4603      	mov	r3, r0
 8002748:	431c      	orrs	r4, r3
 800274a:	486c      	ldr	r0, [pc, #432]	@ (80028fc <HAL_ADC_Init+0x2f8>)
 800274c:	f7ff fefa 	bl	8002544 <LL_ADC_IsEnabled>
 8002750:	4603      	mov	r3, r0
 8002752:	4323      	orrs	r3, r4
 8002754:	2b00      	cmp	r3, #0
 8002756:	bf0c      	ite	eq
 8002758:	2301      	moveq	r3, #1
 800275a:	2300      	movne	r3, #0
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d012      	beq.n	8002788 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800276a:	d004      	beq.n	8002776 <HAL_ADC_Init+0x172>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a5f      	ldr	r2, [pc, #380]	@ (80028f0 <HAL_ADC_Init+0x2ec>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d101      	bne.n	800277a <HAL_ADC_Init+0x176>
 8002776:	4a62      	ldr	r2, [pc, #392]	@ (8002900 <HAL_ADC_Init+0x2fc>)
 8002778:	e000      	b.n	800277c <HAL_ADC_Init+0x178>
 800277a:	4a62      	ldr	r2, [pc, #392]	@ (8002904 <HAL_ADC_Init+0x300>)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	4619      	mov	r1, r3
 8002782:	4610      	mov	r0, r2
 8002784:	f7ff fcfa 	bl	800217c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	7f5b      	ldrb	r3, [r3, #29]
 800278c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002792:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002798:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800279e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80027a6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027a8:	4313      	orrs	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d106      	bne.n	80027c4 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ba:	3b01      	subs	r3, #1
 80027bc:	045b      	lsls	r3, r3, #17
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d009      	beq.n	80027e0 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	4313      	orrs	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68da      	ldr	r2, [r3, #12]
 80027e6:	4b48      	ldr	r3, [pc, #288]	@ (8002908 <HAL_ADC_Init+0x304>)
 80027e8:	4013      	ands	r3, r2
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	6812      	ldr	r2, [r2, #0]
 80027ee:	69b9      	ldr	r1, [r7, #24]
 80027f0:	430b      	orrs	r3, r1
 80027f2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	430a      	orrs	r2, r1
 8002808:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff fee5 	bl	80025de <LL_ADC_INJ_IsConversionOngoing>
 8002814:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d17f      	bne.n	800291c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d17c      	bne.n	800291c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002826:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800282e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002830:	4313      	orrs	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800283e:	f023 0302 	bic.w	r3, r3, #2
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	6812      	ldr	r2, [r2, #0]
 8002846:	69b9      	ldr	r1, [r7, #24]
 8002848:	430b      	orrs	r3, r1
 800284a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d017      	beq.n	8002884 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	691a      	ldr	r2, [r3, #16]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002862:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800286c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002870:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	6911      	ldr	r1, [r2, #16]
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	6812      	ldr	r2, [r2, #0]
 800287c:	430b      	orrs	r3, r1
 800287e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002882:	e013      	b.n	80028ac <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	691a      	ldr	r2, [r3, #16]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002892:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	6812      	ldr	r2, [r2, #0]
 80028a0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80028a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80028a8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d12a      	bne.n	800290c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80028c0:	f023 0304 	bic.w	r3, r3, #4
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80028cc:	4311      	orrs	r1, r2
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80028d2:	4311      	orrs	r1, r2
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80028d8:	430a      	orrs	r2, r1
 80028da:	431a      	orrs	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f042 0201 	orr.w	r2, r2, #1
 80028e4:	611a      	str	r2, [r3, #16]
 80028e6:	e019      	b.n	800291c <HAL_ADC_Init+0x318>
 80028e8:	20000000 	.word	0x20000000
 80028ec:	053e2d63 	.word	0x053e2d63
 80028f0:	50000100 	.word	0x50000100
 80028f4:	50000400 	.word	0x50000400
 80028f8:	50000500 	.word	0x50000500
 80028fc:	50000600 	.word	0x50000600
 8002900:	50000300 	.word	0x50000300
 8002904:	50000700 	.word	0x50000700
 8002908:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	691a      	ldr	r2, [r3, #16]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f022 0201 	bic.w	r2, r2, #1
 800291a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	695b      	ldr	r3, [r3, #20]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d10c      	bne.n	800293e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292a:	f023 010f 	bic.w	r1, r3, #15
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	1e5a      	subs	r2, r3, #1
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	430a      	orrs	r2, r1
 800293a:	631a      	str	r2, [r3, #48]	@ 0x30
 800293c:	e007      	b.n	800294e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 020f 	bic.w	r2, r2, #15
 800294c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002952:	f023 0303 	bic.w	r3, r3, #3
 8002956:	f043 0201 	orr.w	r2, r3, #1
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800295e:	e007      	b.n	8002970 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002964:	f043 0210 	orr.w	r2, r3, #16
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002970:	7ffb      	ldrb	r3, [r7, #31]
}
 8002972:	4618      	mov	r0, r3
 8002974:	3724      	adds	r7, #36	@ 0x24
 8002976:	46bd      	mov	sp, r7
 8002978:	bd90      	pop	{r4, r7, pc}
 800297a:	bf00      	nop

0800297c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002990:	d004      	beq.n	800299c <HAL_ADC_Start_DMA+0x20>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a5a      	ldr	r2, [pc, #360]	@ (8002b00 <HAL_ADC_Start_DMA+0x184>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d101      	bne.n	80029a0 <HAL_ADC_Start_DMA+0x24>
 800299c:	4b59      	ldr	r3, [pc, #356]	@ (8002b04 <HAL_ADC_Start_DMA+0x188>)
 800299e:	e000      	b.n	80029a2 <HAL_ADC_Start_DMA+0x26>
 80029a0:	4b59      	ldr	r3, [pc, #356]	@ (8002b08 <HAL_ADC_Start_DMA+0x18c>)
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff fd4a 	bl	800243c <LL_ADC_GetMultimode>
 80029a8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff fe02 	bl	80025b8 <LL_ADC_REG_IsConversionOngoing>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f040 809b 	bne.w	8002af2 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d101      	bne.n	80029ca <HAL_ADC_Start_DMA+0x4e>
 80029c6:	2302      	movs	r3, #2
 80029c8:	e096      	b.n	8002af8 <HAL_ADC_Start_DMA+0x17c>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a4d      	ldr	r2, [pc, #308]	@ (8002b0c <HAL_ADC_Start_DMA+0x190>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d008      	beq.n	80029ee <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d005      	beq.n	80029ee <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	2b05      	cmp	r3, #5
 80029e6:	d002      	beq.n	80029ee <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	2b09      	cmp	r3, #9
 80029ec:	d17a      	bne.n	8002ae4 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f000 fcf6 	bl	80033e0 <ADC_Enable>
 80029f4:	4603      	mov	r3, r0
 80029f6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80029f8:	7dfb      	ldrb	r3, [r7, #23]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d16d      	bne.n	8002ada <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a02:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002a06:	f023 0301 	bic.w	r3, r3, #1
 8002a0a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a3a      	ldr	r2, [pc, #232]	@ (8002b00 <HAL_ADC_Start_DMA+0x184>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d009      	beq.n	8002a30 <HAL_ADC_Start_DMA+0xb4>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a3b      	ldr	r2, [pc, #236]	@ (8002b10 <HAL_ADC_Start_DMA+0x194>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d002      	beq.n	8002a2c <HAL_ADC_Start_DMA+0xb0>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	e003      	b.n	8002a34 <HAL_ADC_Start_DMA+0xb8>
 8002a2c:	4b39      	ldr	r3, [pc, #228]	@ (8002b14 <HAL_ADC_Start_DMA+0x198>)
 8002a2e:	e001      	b.n	8002a34 <HAL_ADC_Start_DMA+0xb8>
 8002a30:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	6812      	ldr	r2, [r2, #0]
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d002      	beq.n	8002a42 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d105      	bne.n	8002a4e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a46:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a52:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d006      	beq.n	8002a68 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a5e:	f023 0206 	bic.w	r2, r3, #6
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	661a      	str	r2, [r3, #96]	@ 0x60
 8002a66:	e002      	b.n	8002a6e <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a72:	4a29      	ldr	r2, [pc, #164]	@ (8002b18 <HAL_ADC_Start_DMA+0x19c>)
 8002a74:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a7a:	4a28      	ldr	r2, [pc, #160]	@ (8002b1c <HAL_ADC_Start_DMA+0x1a0>)
 8002a7c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a82:	4a27      	ldr	r2, [pc, #156]	@ (8002b20 <HAL_ADC_Start_DMA+0x1a4>)
 8002a84:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	221c      	movs	r2, #28
 8002a8c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f042 0210 	orr.w	r2, r2, #16
 8002aa4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68da      	ldr	r2, [r3, #12]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f042 0201 	orr.w	r2, r2, #1
 8002ab4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	3340      	adds	r3, #64	@ 0x40
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	68ba      	ldr	r2, [r7, #8]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f001 f989 	bl	8003ddc <HAL_DMA_Start_IT>
 8002aca:	4603      	mov	r3, r0
 8002acc:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7ff fd5c 	bl	8002590 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002ad8:	e00d      	b.n	8002af6 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8002ae2:	e008      	b.n	8002af6 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002af0:	e001      	b.n	8002af6 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002af2:	2302      	movs	r3, #2
 8002af4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002af6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3718      	adds	r7, #24
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	50000100 	.word	0x50000100
 8002b04:	50000300 	.word	0x50000300
 8002b08:	50000700 	.word	0x50000700
 8002b0c:	50000600 	.word	0x50000600
 8002b10:	50000500 	.word	0x50000500
 8002b14:	50000400 	.word	0x50000400
 8002b18:	080035cb 	.word	0x080035cb
 8002b1c:	080036a3 	.word	0x080036a3
 8002b20:	080036bf 	.word	0x080036bf

08002b24 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b0b6      	sub	sp, #216	@ 0xd8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002b70:	2300      	movs	r3, #0
 8002b72:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d102      	bne.n	8002b84 <HAL_ADC_ConfigChannel+0x24>
 8002b7e:	2302      	movs	r3, #2
 8002b80:	f000 bc13 	b.w	80033aa <HAL_ADC_ConfigChannel+0x84a>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7ff fd11 	bl	80025b8 <LL_ADC_REG_IsConversionOngoing>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f040 83f3 	bne.w	8003384 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6818      	ldr	r0, [r3, #0]
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	6859      	ldr	r1, [r3, #4]
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	461a      	mov	r2, r3
 8002bac:	f7ff fbcb 	bl	8002346 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7ff fcff 	bl	80025b8 <LL_ADC_REG_IsConversionOngoing>
 8002bba:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff fd0b 	bl	80025de <LL_ADC_INJ_IsConversionOngoing>
 8002bc8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002bcc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f040 81d9 	bne.w	8002f88 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002bd6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f040 81d4 	bne.w	8002f88 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002be8:	d10f      	bne.n	8002c0a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6818      	ldr	r0, [r3, #0]
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	f7ff fbd2 	bl	800239e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff fb79 	bl	80022fa <LL_ADC_SetSamplingTimeCommonConfig>
 8002c08:	e00e      	b.n	8002c28 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6818      	ldr	r0, [r3, #0]
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	6819      	ldr	r1, [r3, #0]
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	461a      	mov	r2, r3
 8002c18:	f7ff fbc1 	bl	800239e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2100      	movs	r1, #0
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff fb69 	bl	80022fa <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	695a      	ldr	r2, [r3, #20]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	08db      	lsrs	r3, r3, #3
 8002c34:	f003 0303 	and.w	r3, r3, #3
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d022      	beq.n	8002c90 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6818      	ldr	r0, [r3, #0]
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	6919      	ldr	r1, [r3, #16]
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002c5a:	f7ff fac3 	bl	80021e4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6818      	ldr	r0, [r3, #0]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	6919      	ldr	r1, [r3, #16]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	f7ff fb0f 	bl	800228e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6818      	ldr	r0, [r3, #0]
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d102      	bne.n	8002c86 <HAL_ADC_ConfigChannel+0x126>
 8002c80:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c84:	e000      	b.n	8002c88 <HAL_ADC_ConfigChannel+0x128>
 8002c86:	2300      	movs	r3, #0
 8002c88:	461a      	mov	r2, r3
 8002c8a:	f7ff fb1b 	bl	80022c4 <LL_ADC_SetOffsetSaturation>
 8002c8e:	e17b      	b.n	8002f88 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2100      	movs	r1, #0
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7ff fac8 	bl	800222c <LL_ADC_GetOffsetChannel>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d10a      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x15c>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2100      	movs	r1, #0
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff fabd 	bl	800222c <LL_ADC_GetOffsetChannel>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	0e9b      	lsrs	r3, r3, #26
 8002cb6:	f003 021f 	and.w	r2, r3, #31
 8002cba:	e01e      	b.n	8002cfa <HAL_ADC_ConfigChannel+0x19a>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7ff fab2 	bl	800222c <LL_ADC_GetOffsetChannel>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002cd2:	fa93 f3a3 	rbit	r3, r3
 8002cd6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002cda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002cde:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ce2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002cea:	2320      	movs	r3, #32
 8002cec:	e004      	b.n	8002cf8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002cee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002cf2:	fab3 f383 	clz	r3, r3
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d105      	bne.n	8002d12 <HAL_ADC_ConfigChannel+0x1b2>
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	0e9b      	lsrs	r3, r3, #26
 8002d0c:	f003 031f 	and.w	r3, r3, #31
 8002d10:	e018      	b.n	8002d44 <HAL_ADC_ConfigChannel+0x1e4>
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002d1e:	fa93 f3a3 	rbit	r3, r3
 8002d22:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002d26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d2a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002d2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002d36:	2320      	movs	r3, #32
 8002d38:	e004      	b.n	8002d44 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002d3a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002d3e:	fab3 f383 	clz	r3, r3
 8002d42:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d106      	bne.n	8002d56 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	2100      	movs	r1, #0
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7ff fa81 	bl	8002258 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff fa65 	bl	800222c <LL_ADC_GetOffsetChannel>
 8002d62:	4603      	mov	r3, r0
 8002d64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10a      	bne.n	8002d82 <HAL_ADC_ConfigChannel+0x222>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2101      	movs	r1, #1
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7ff fa5a 	bl	800222c <LL_ADC_GetOffsetChannel>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	0e9b      	lsrs	r3, r3, #26
 8002d7c:	f003 021f 	and.w	r2, r3, #31
 8002d80:	e01e      	b.n	8002dc0 <HAL_ADC_ConfigChannel+0x260>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2101      	movs	r1, #1
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff fa4f 	bl	800222c <LL_ADC_GetOffsetChannel>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d94:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002d98:	fa93 f3a3 	rbit	r3, r3
 8002d9c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002da0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002da4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002da8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d101      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002db0:	2320      	movs	r3, #32
 8002db2:	e004      	b.n	8002dbe <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002db4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002db8:	fab3 f383 	clz	r3, r3
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d105      	bne.n	8002dd8 <HAL_ADC_ConfigChannel+0x278>
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	0e9b      	lsrs	r3, r3, #26
 8002dd2:	f003 031f 	and.w	r3, r3, #31
 8002dd6:	e018      	b.n	8002e0a <HAL_ADC_ConfigChannel+0x2aa>
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002de4:	fa93 f3a3 	rbit	r3, r3
 8002de8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002dec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002df0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002df4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d101      	bne.n	8002e00 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002dfc:	2320      	movs	r3, #32
 8002dfe:	e004      	b.n	8002e0a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002e00:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002e04:	fab3 f383 	clz	r3, r3
 8002e08:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d106      	bne.n	8002e1c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2200      	movs	r2, #0
 8002e14:	2101      	movs	r1, #1
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff fa1e 	bl	8002258 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2102      	movs	r1, #2
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7ff fa02 	bl	800222c <LL_ADC_GetOffsetChannel>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10a      	bne.n	8002e48 <HAL_ADC_ConfigChannel+0x2e8>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2102      	movs	r1, #2
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff f9f7 	bl	800222c <LL_ADC_GetOffsetChannel>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	0e9b      	lsrs	r3, r3, #26
 8002e42:	f003 021f 	and.w	r2, r3, #31
 8002e46:	e01e      	b.n	8002e86 <HAL_ADC_ConfigChannel+0x326>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2102      	movs	r1, #2
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff f9ec 	bl	800222c <LL_ADC_GetOffsetChannel>
 8002e54:	4603      	mov	r3, r0
 8002e56:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e5e:	fa93 f3a3 	rbit	r3, r3
 8002e62:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002e66:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002e6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002e6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002e76:	2320      	movs	r3, #32
 8002e78:	e004      	b.n	8002e84 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002e7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002e7e:	fab3 f383 	clz	r3, r3
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d105      	bne.n	8002e9e <HAL_ADC_ConfigChannel+0x33e>
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	0e9b      	lsrs	r3, r3, #26
 8002e98:	f003 031f 	and.w	r3, r3, #31
 8002e9c:	e016      	b.n	8002ecc <HAL_ADC_ConfigChannel+0x36c>
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002eaa:	fa93 f3a3 	rbit	r3, r3
 8002eae:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002eb0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002eb2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002eb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002ebe:	2320      	movs	r3, #32
 8002ec0:	e004      	b.n	8002ecc <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002ec2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ec6:	fab3 f383 	clz	r3, r3
 8002eca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d106      	bne.n	8002ede <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	2102      	movs	r1, #2
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff f9bd 	bl	8002258 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2103      	movs	r1, #3
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff f9a1 	bl	800222c <LL_ADC_GetOffsetChannel>
 8002eea:	4603      	mov	r3, r0
 8002eec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d10a      	bne.n	8002f0a <HAL_ADC_ConfigChannel+0x3aa>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2103      	movs	r1, #3
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7ff f996 	bl	800222c <LL_ADC_GetOffsetChannel>
 8002f00:	4603      	mov	r3, r0
 8002f02:	0e9b      	lsrs	r3, r3, #26
 8002f04:	f003 021f 	and.w	r2, r3, #31
 8002f08:	e017      	b.n	8002f3a <HAL_ADC_ConfigChannel+0x3da>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2103      	movs	r1, #3
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7ff f98b 	bl	800222c <LL_ADC_GetOffsetChannel>
 8002f16:	4603      	mov	r3, r0
 8002f18:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f1c:	fa93 f3a3 	rbit	r3, r3
 8002f20:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002f22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f24:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002f26:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d101      	bne.n	8002f30 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002f2c:	2320      	movs	r3, #32
 8002f2e:	e003      	b.n	8002f38 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002f30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f32:	fab3 f383 	clz	r3, r3
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d105      	bne.n	8002f52 <HAL_ADC_ConfigChannel+0x3f2>
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	0e9b      	lsrs	r3, r3, #26
 8002f4c:	f003 031f 	and.w	r3, r3, #31
 8002f50:	e011      	b.n	8002f76 <HAL_ADC_ConfigChannel+0x416>
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f5a:	fa93 f3a3 	rbit	r3, r3
 8002f5e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002f60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f62:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002f64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002f6a:	2320      	movs	r3, #32
 8002f6c:	e003      	b.n	8002f76 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002f6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f70:	fab3 f383 	clz	r3, r3
 8002f74:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d106      	bne.n	8002f88 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	2103      	movs	r1, #3
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7ff f968 	bl	8002258 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff fad9 	bl	8002544 <LL_ADC_IsEnabled>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f040 813d 	bne.w	8003214 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6818      	ldr	r0, [r3, #0]
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	6819      	ldr	r1, [r3, #0]
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	f7ff fa24 	bl	80023f4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	4aa2      	ldr	r2, [pc, #648]	@ (800323c <HAL_ADC_ConfigChannel+0x6dc>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	f040 812e 	bne.w	8003214 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10b      	bne.n	8002fe0 <HAL_ADC_ConfigChannel+0x480>
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	0e9b      	lsrs	r3, r3, #26
 8002fce:	3301      	adds	r3, #1
 8002fd0:	f003 031f 	and.w	r3, r3, #31
 8002fd4:	2b09      	cmp	r3, #9
 8002fd6:	bf94      	ite	ls
 8002fd8:	2301      	movls	r3, #1
 8002fda:	2300      	movhi	r3, #0
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	e019      	b.n	8003014 <HAL_ADC_ConfigChannel+0x4b4>
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fe8:	fa93 f3a3 	rbit	r3, r3
 8002fec:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002fee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ff0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002ff2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002ff8:	2320      	movs	r3, #32
 8002ffa:	e003      	b.n	8003004 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002ffc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ffe:	fab3 f383 	clz	r3, r3
 8003002:	b2db      	uxtb	r3, r3
 8003004:	3301      	adds	r3, #1
 8003006:	f003 031f 	and.w	r3, r3, #31
 800300a:	2b09      	cmp	r3, #9
 800300c:	bf94      	ite	ls
 800300e:	2301      	movls	r3, #1
 8003010:	2300      	movhi	r3, #0
 8003012:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003014:	2b00      	cmp	r3, #0
 8003016:	d079      	beq.n	800310c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003020:	2b00      	cmp	r3, #0
 8003022:	d107      	bne.n	8003034 <HAL_ADC_ConfigChannel+0x4d4>
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	0e9b      	lsrs	r3, r3, #26
 800302a:	3301      	adds	r3, #1
 800302c:	069b      	lsls	r3, r3, #26
 800302e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003032:	e015      	b.n	8003060 <HAL_ADC_ConfigChannel+0x500>
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800303c:	fa93 f3a3 	rbit	r3, r3
 8003040:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003042:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003044:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003046:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003048:	2b00      	cmp	r3, #0
 800304a:	d101      	bne.n	8003050 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800304c:	2320      	movs	r3, #32
 800304e:	e003      	b.n	8003058 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003050:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003052:	fab3 f383 	clz	r3, r3
 8003056:	b2db      	uxtb	r3, r3
 8003058:	3301      	adds	r3, #1
 800305a:	069b      	lsls	r3, r3, #26
 800305c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003068:	2b00      	cmp	r3, #0
 800306a:	d109      	bne.n	8003080 <HAL_ADC_ConfigChannel+0x520>
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	0e9b      	lsrs	r3, r3, #26
 8003072:	3301      	adds	r3, #1
 8003074:	f003 031f 	and.w	r3, r3, #31
 8003078:	2101      	movs	r1, #1
 800307a:	fa01 f303 	lsl.w	r3, r1, r3
 800307e:	e017      	b.n	80030b0 <HAL_ADC_ConfigChannel+0x550>
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003086:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003088:	fa93 f3a3 	rbit	r3, r3
 800308c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800308e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003090:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003092:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003098:	2320      	movs	r3, #32
 800309a:	e003      	b.n	80030a4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800309c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800309e:	fab3 f383 	clz	r3, r3
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	3301      	adds	r3, #1
 80030a6:	f003 031f 	and.w	r3, r3, #31
 80030aa:	2101      	movs	r1, #1
 80030ac:	fa01 f303 	lsl.w	r3, r1, r3
 80030b0:	ea42 0103 	orr.w	r1, r2, r3
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d10a      	bne.n	80030d6 <HAL_ADC_ConfigChannel+0x576>
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	0e9b      	lsrs	r3, r3, #26
 80030c6:	3301      	adds	r3, #1
 80030c8:	f003 021f 	and.w	r2, r3, #31
 80030cc:	4613      	mov	r3, r2
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	4413      	add	r3, r2
 80030d2:	051b      	lsls	r3, r3, #20
 80030d4:	e018      	b.n	8003108 <HAL_ADC_ConfigChannel+0x5a8>
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030de:	fa93 f3a3 	rbit	r3, r3
 80030e2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80030e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80030e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80030ee:	2320      	movs	r3, #32
 80030f0:	e003      	b.n	80030fa <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80030f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030f4:	fab3 f383 	clz	r3, r3
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	3301      	adds	r3, #1
 80030fc:	f003 021f 	and.w	r2, r3, #31
 8003100:	4613      	mov	r3, r2
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	4413      	add	r3, r2
 8003106:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003108:	430b      	orrs	r3, r1
 800310a:	e07e      	b.n	800320a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003114:	2b00      	cmp	r3, #0
 8003116:	d107      	bne.n	8003128 <HAL_ADC_ConfigChannel+0x5c8>
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	0e9b      	lsrs	r3, r3, #26
 800311e:	3301      	adds	r3, #1
 8003120:	069b      	lsls	r3, r3, #26
 8003122:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003126:	e015      	b.n	8003154 <HAL_ADC_ConfigChannel+0x5f4>
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003130:	fa93 f3a3 	rbit	r3, r3
 8003134:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003138:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800313a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800313c:	2b00      	cmp	r3, #0
 800313e:	d101      	bne.n	8003144 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003140:	2320      	movs	r3, #32
 8003142:	e003      	b.n	800314c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003146:	fab3 f383 	clz	r3, r3
 800314a:	b2db      	uxtb	r3, r3
 800314c:	3301      	adds	r3, #1
 800314e:	069b      	lsls	r3, r3, #26
 8003150:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800315c:	2b00      	cmp	r3, #0
 800315e:	d109      	bne.n	8003174 <HAL_ADC_ConfigChannel+0x614>
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	0e9b      	lsrs	r3, r3, #26
 8003166:	3301      	adds	r3, #1
 8003168:	f003 031f 	and.w	r3, r3, #31
 800316c:	2101      	movs	r1, #1
 800316e:	fa01 f303 	lsl.w	r3, r1, r3
 8003172:	e017      	b.n	80031a4 <HAL_ADC_ConfigChannel+0x644>
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317a:	6a3b      	ldr	r3, [r7, #32]
 800317c:	fa93 f3a3 	rbit	r3, r3
 8003180:	61fb      	str	r3, [r7, #28]
  return result;
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003188:	2b00      	cmp	r3, #0
 800318a:	d101      	bne.n	8003190 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800318c:	2320      	movs	r3, #32
 800318e:	e003      	b.n	8003198 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003192:	fab3 f383 	clz	r3, r3
 8003196:	b2db      	uxtb	r3, r3
 8003198:	3301      	adds	r3, #1
 800319a:	f003 031f 	and.w	r3, r3, #31
 800319e:	2101      	movs	r1, #1
 80031a0:	fa01 f303 	lsl.w	r3, r1, r3
 80031a4:	ea42 0103 	orr.w	r1, r2, r3
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d10d      	bne.n	80031d0 <HAL_ADC_ConfigChannel+0x670>
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	0e9b      	lsrs	r3, r3, #26
 80031ba:	3301      	adds	r3, #1
 80031bc:	f003 021f 	and.w	r2, r3, #31
 80031c0:	4613      	mov	r3, r2
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	4413      	add	r3, r2
 80031c6:	3b1e      	subs	r3, #30
 80031c8:	051b      	lsls	r3, r3, #20
 80031ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80031ce:	e01b      	b.n	8003208 <HAL_ADC_ConfigChannel+0x6a8>
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	fa93 f3a3 	rbit	r3, r3
 80031dc:	613b      	str	r3, [r7, #16]
  return result;
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d101      	bne.n	80031ec <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80031e8:	2320      	movs	r3, #32
 80031ea:	e003      	b.n	80031f4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	fab3 f383 	clz	r3, r3
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	3301      	adds	r3, #1
 80031f6:	f003 021f 	and.w	r2, r3, #31
 80031fa:	4613      	mov	r3, r2
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	4413      	add	r3, r2
 8003200:	3b1e      	subs	r3, #30
 8003202:	051b      	lsls	r3, r3, #20
 8003204:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003208:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800320a:	683a      	ldr	r2, [r7, #0]
 800320c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800320e:	4619      	mov	r1, r3
 8003210:	f7ff f8c5 	bl	800239e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	4b09      	ldr	r3, [pc, #36]	@ (8003240 <HAL_ADC_ConfigChannel+0x6e0>)
 800321a:	4013      	ands	r3, r2
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 80be 	beq.w	800339e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800322a:	d004      	beq.n	8003236 <HAL_ADC_ConfigChannel+0x6d6>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a04      	ldr	r2, [pc, #16]	@ (8003244 <HAL_ADC_ConfigChannel+0x6e4>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d10a      	bne.n	800324c <HAL_ADC_ConfigChannel+0x6ec>
 8003236:	4b04      	ldr	r3, [pc, #16]	@ (8003248 <HAL_ADC_ConfigChannel+0x6e8>)
 8003238:	e009      	b.n	800324e <HAL_ADC_ConfigChannel+0x6ee>
 800323a:	bf00      	nop
 800323c:	407f0000 	.word	0x407f0000
 8003240:	80080000 	.word	0x80080000
 8003244:	50000100 	.word	0x50000100
 8003248:	50000300 	.word	0x50000300
 800324c:	4b59      	ldr	r3, [pc, #356]	@ (80033b4 <HAL_ADC_ConfigChannel+0x854>)
 800324e:	4618      	mov	r0, r3
 8003250:	f7fe ffba 	bl	80021c8 <LL_ADC_GetCommonPathInternalCh>
 8003254:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a56      	ldr	r2, [pc, #344]	@ (80033b8 <HAL_ADC_ConfigChannel+0x858>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d004      	beq.n	800326c <HAL_ADC_ConfigChannel+0x70c>
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a55      	ldr	r2, [pc, #340]	@ (80033bc <HAL_ADC_ConfigChannel+0x85c>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d13a      	bne.n	80032e2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800326c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003270:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d134      	bne.n	80032e2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003280:	d005      	beq.n	800328e <HAL_ADC_ConfigChannel+0x72e>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a4e      	ldr	r2, [pc, #312]	@ (80033c0 <HAL_ADC_ConfigChannel+0x860>)
 8003288:	4293      	cmp	r3, r2
 800328a:	f040 8085 	bne.w	8003398 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003296:	d004      	beq.n	80032a2 <HAL_ADC_ConfigChannel+0x742>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a49      	ldr	r2, [pc, #292]	@ (80033c4 <HAL_ADC_ConfigChannel+0x864>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d101      	bne.n	80032a6 <HAL_ADC_ConfigChannel+0x746>
 80032a2:	4a49      	ldr	r2, [pc, #292]	@ (80033c8 <HAL_ADC_ConfigChannel+0x868>)
 80032a4:	e000      	b.n	80032a8 <HAL_ADC_ConfigChannel+0x748>
 80032a6:	4a43      	ldr	r2, [pc, #268]	@ (80033b4 <HAL_ADC_ConfigChannel+0x854>)
 80032a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80032ac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80032b0:	4619      	mov	r1, r3
 80032b2:	4610      	mov	r0, r2
 80032b4:	f7fe ff75 	bl	80021a2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032b8:	4b44      	ldr	r3, [pc, #272]	@ (80033cc <HAL_ADC_ConfigChannel+0x86c>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	099b      	lsrs	r3, r3, #6
 80032be:	4a44      	ldr	r2, [pc, #272]	@ (80033d0 <HAL_ADC_ConfigChannel+0x870>)
 80032c0:	fba2 2303 	umull	r2, r3, r2, r3
 80032c4:	099b      	lsrs	r3, r3, #6
 80032c6:	1c5a      	adds	r2, r3, #1
 80032c8:	4613      	mov	r3, r2
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	4413      	add	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80032d2:	e002      	b.n	80032da <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	3b01      	subs	r3, #1
 80032d8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1f9      	bne.n	80032d4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032e0:	e05a      	b.n	8003398 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a3b      	ldr	r2, [pc, #236]	@ (80033d4 <HAL_ADC_ConfigChannel+0x874>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d125      	bne.n	8003338 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80032ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80032f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d11f      	bne.n	8003338 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a31      	ldr	r2, [pc, #196]	@ (80033c4 <HAL_ADC_ConfigChannel+0x864>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d104      	bne.n	800330c <HAL_ADC_ConfigChannel+0x7ac>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a34      	ldr	r2, [pc, #208]	@ (80033d8 <HAL_ADC_ConfigChannel+0x878>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d047      	beq.n	800339c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003314:	d004      	beq.n	8003320 <HAL_ADC_ConfigChannel+0x7c0>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a2a      	ldr	r2, [pc, #168]	@ (80033c4 <HAL_ADC_ConfigChannel+0x864>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d101      	bne.n	8003324 <HAL_ADC_ConfigChannel+0x7c4>
 8003320:	4a29      	ldr	r2, [pc, #164]	@ (80033c8 <HAL_ADC_ConfigChannel+0x868>)
 8003322:	e000      	b.n	8003326 <HAL_ADC_ConfigChannel+0x7c6>
 8003324:	4a23      	ldr	r2, [pc, #140]	@ (80033b4 <HAL_ADC_ConfigChannel+0x854>)
 8003326:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800332a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800332e:	4619      	mov	r1, r3
 8003330:	4610      	mov	r0, r2
 8003332:	f7fe ff36 	bl	80021a2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003336:	e031      	b.n	800339c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a27      	ldr	r2, [pc, #156]	@ (80033dc <HAL_ADC_ConfigChannel+0x87c>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d12d      	bne.n	800339e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003342:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003346:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d127      	bne.n	800339e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a1c      	ldr	r2, [pc, #112]	@ (80033c4 <HAL_ADC_ConfigChannel+0x864>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d022      	beq.n	800339e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003360:	d004      	beq.n	800336c <HAL_ADC_ConfigChannel+0x80c>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a17      	ldr	r2, [pc, #92]	@ (80033c4 <HAL_ADC_ConfigChannel+0x864>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d101      	bne.n	8003370 <HAL_ADC_ConfigChannel+0x810>
 800336c:	4a16      	ldr	r2, [pc, #88]	@ (80033c8 <HAL_ADC_ConfigChannel+0x868>)
 800336e:	e000      	b.n	8003372 <HAL_ADC_ConfigChannel+0x812>
 8003370:	4a10      	ldr	r2, [pc, #64]	@ (80033b4 <HAL_ADC_ConfigChannel+0x854>)
 8003372:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003376:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800337a:	4619      	mov	r1, r3
 800337c:	4610      	mov	r0, r2
 800337e:	f7fe ff10 	bl	80021a2 <LL_ADC_SetCommonPathInternalCh>
 8003382:	e00c      	b.n	800339e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003388:	f043 0220 	orr.w	r2, r3, #32
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003396:	e002      	b.n	800339e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003398:	bf00      	nop
 800339a:	e000      	b.n	800339e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800339c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80033a6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	37d8      	adds	r7, #216	@ 0xd8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	50000700 	.word	0x50000700
 80033b8:	c3210000 	.word	0xc3210000
 80033bc:	90c00010 	.word	0x90c00010
 80033c0:	50000600 	.word	0x50000600
 80033c4:	50000100 	.word	0x50000100
 80033c8:	50000300 	.word	0x50000300
 80033cc:	20000000 	.word	0x20000000
 80033d0:	053e2d63 	.word	0x053e2d63
 80033d4:	c7520000 	.word	0xc7520000
 80033d8:	50000500 	.word	0x50000500
 80033dc:	cb840000 	.word	0xcb840000

080033e0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80033e8:	2300      	movs	r3, #0
 80033ea:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7ff f8a7 	bl	8002544 <LL_ADC_IsEnabled>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d176      	bne.n	80034ea <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689a      	ldr	r2, [r3, #8]
 8003402:	4b3c      	ldr	r3, [pc, #240]	@ (80034f4 <ADC_Enable+0x114>)
 8003404:	4013      	ands	r3, r2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00d      	beq.n	8003426 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800340e:	f043 0210 	orr.w	r2, r3, #16
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800341a:	f043 0201 	orr.w	r2, r3, #1
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e062      	b.n	80034ec <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4618      	mov	r0, r3
 800342c:	f7ff f862 	bl	80024f4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003438:	d004      	beq.n	8003444 <ADC_Enable+0x64>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a2e      	ldr	r2, [pc, #184]	@ (80034f8 <ADC_Enable+0x118>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d101      	bne.n	8003448 <ADC_Enable+0x68>
 8003444:	4b2d      	ldr	r3, [pc, #180]	@ (80034fc <ADC_Enable+0x11c>)
 8003446:	e000      	b.n	800344a <ADC_Enable+0x6a>
 8003448:	4b2d      	ldr	r3, [pc, #180]	@ (8003500 <ADC_Enable+0x120>)
 800344a:	4618      	mov	r0, r3
 800344c:	f7fe febc 	bl	80021c8 <LL_ADC_GetCommonPathInternalCh>
 8003450:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003452:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003456:	2b00      	cmp	r3, #0
 8003458:	d013      	beq.n	8003482 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800345a:	4b2a      	ldr	r3, [pc, #168]	@ (8003504 <ADC_Enable+0x124>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	099b      	lsrs	r3, r3, #6
 8003460:	4a29      	ldr	r2, [pc, #164]	@ (8003508 <ADC_Enable+0x128>)
 8003462:	fba2 2303 	umull	r2, r3, r2, r3
 8003466:	099b      	lsrs	r3, r3, #6
 8003468:	1c5a      	adds	r2, r3, #1
 800346a:	4613      	mov	r3, r2
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	4413      	add	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003474:	e002      	b.n	800347c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	3b01      	subs	r3, #1
 800347a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1f9      	bne.n	8003476 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003482:	f7fe fe4d 	bl	8002120 <HAL_GetTick>
 8003486:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003488:	e028      	b.n	80034dc <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f7ff f858 	bl	8002544 <LL_ADC_IsEnabled>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d104      	bne.n	80034a4 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f7ff f828 	bl	80024f4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80034a4:	f7fe fe3c 	bl	8002120 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d914      	bls.n	80034dc <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d00d      	beq.n	80034dc <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034c4:	f043 0210 	orr.w	r2, r3, #16
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034d0:	f043 0201 	orr.w	r2, r3, #1
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e007      	b.n	80034ec <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d1cf      	bne.n	800348a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	8000003f 	.word	0x8000003f
 80034f8:	50000100 	.word	0x50000100
 80034fc:	50000300 	.word	0x50000300
 8003500:	50000700 	.word	0x50000700
 8003504:	20000000 	.word	0x20000000
 8003508:	053e2d63 	.word	0x053e2d63

0800350c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4618      	mov	r0, r3
 800351a:	f7ff f826 	bl	800256a <LL_ADC_IsDisableOngoing>
 800351e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4618      	mov	r0, r3
 8003526:	f7ff f80d 	bl	8002544 <LL_ADC_IsEnabled>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d047      	beq.n	80035c0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d144      	bne.n	80035c0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f003 030d 	and.w	r3, r3, #13
 8003540:	2b01      	cmp	r3, #1
 8003542:	d10c      	bne.n	800355e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4618      	mov	r0, r3
 800354a:	f7fe ffe7 	bl	800251c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2203      	movs	r2, #3
 8003554:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003556:	f7fe fde3 	bl	8002120 <HAL_GetTick>
 800355a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800355c:	e029      	b.n	80035b2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003562:	f043 0210 	orr.w	r2, r3, #16
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800356e:	f043 0201 	orr.w	r2, r3, #1
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e023      	b.n	80035c2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800357a:	f7fe fdd1 	bl	8002120 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d914      	bls.n	80035b2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00d      	beq.n	80035b2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800359a:	f043 0210 	orr.w	r2, r3, #16
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035a6:	f043 0201 	orr.w	r2, r3, #1
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e007      	b.n	80035c2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f003 0301 	and.w	r3, r3, #1
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1dc      	bne.n	800357a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b084      	sub	sp, #16
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035d6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035dc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d14b      	bne.n	800367c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035e8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0308 	and.w	r3, r3, #8
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d021      	beq.n	8003642 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f7fe fe8c 	bl	8002320 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d032      	beq.n	8003674 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d12b      	bne.n	8003674 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003620:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800362c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d11f      	bne.n	8003674 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003638:	f043 0201 	orr.w	r2, r3, #1
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003640:	e018      	b.n	8003674 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d111      	bne.n	8003674 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003654:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003660:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d105      	bne.n	8003674 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800366c:	f043 0201 	orr.w	r2, r3, #1
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f7ff fa55 	bl	8002b24 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800367a:	e00e      	b.n	800369a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003680:	f003 0310 	and.w	r3, r3, #16
 8003684:	2b00      	cmp	r3, #0
 8003686:	d003      	beq.n	8003690 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f7ff fa5f 	bl	8002b4c <HAL_ADC_ErrorCallback>
}
 800368e:	e004      	b.n	800369a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003694:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	4798      	blx	r3
}
 800369a:	bf00      	nop
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b084      	sub	sp, #16
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ae:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	f7ff fa41 	bl	8002b38 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80036b6:	bf00      	nop
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b084      	sub	sp, #16
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ca:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036dc:	f043 0204 	orr.w	r2, r3, #4
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f7ff fa31 	bl	8002b4c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80036ea:	bf00      	nop
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <LL_ADC_IsEnabled>:
{
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b01      	cmp	r3, #1
 8003704:	d101      	bne.n	800370a <LL_ADC_IsEnabled+0x18>
 8003706:	2301      	movs	r3, #1
 8003708:	e000      	b.n	800370c <LL_ADC_IsEnabled+0x1a>
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <LL_ADC_StartCalibration>:
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800372a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003734:	4313      	orrs	r3, r2
 8003736:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	609a      	str	r2, [r3, #8]
}
 800373e:	bf00      	nop
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr

0800374a <LL_ADC_IsCalibrationOnGoing>:
{
 800374a:	b480      	push	{r7}
 800374c:	b083      	sub	sp, #12
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800375a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800375e:	d101      	bne.n	8003764 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003760:	2301      	movs	r3, #1
 8003762:	e000      	b.n	8003766 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr

08003772 <LL_ADC_REG_IsConversionOngoing>:
{
 8003772:	b480      	push	{r7}
 8003774:	b083      	sub	sp, #12
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f003 0304 	and.w	r3, r3, #4
 8003782:	2b04      	cmp	r3, #4
 8003784:	d101      	bne.n	800378a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003786:	2301      	movs	r3, #1
 8003788:	e000      	b.n	800378c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80037a2:	2300      	movs	r3, #0
 80037a4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d101      	bne.n	80037b4 <HAL_ADCEx_Calibration_Start+0x1c>
 80037b0:	2302      	movs	r3, #2
 80037b2:	e04d      	b.n	8003850 <HAL_ADCEx_Calibration_Start+0xb8>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f7ff fea5 	bl	800350c <ADC_Disable>
 80037c2:	4603      	mov	r3, r0
 80037c4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80037c6:	7bfb      	ldrb	r3, [r7, #15]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d136      	bne.n	800383a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037d0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80037d4:	f023 0302 	bic.w	r3, r3, #2
 80037d8:	f043 0202 	orr.w	r2, r3, #2
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6839      	ldr	r1, [r7, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7ff ff96 	bl	8003718 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80037ec:	e014      	b.n	8003818 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	3301      	adds	r3, #1
 80037f2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	4a18      	ldr	r2, [pc, #96]	@ (8003858 <HAL_ADCEx_Calibration_Start+0xc0>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d90d      	bls.n	8003818 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003800:	f023 0312 	bic.w	r3, r3, #18
 8003804:	f043 0210 	orr.w	r2, r3, #16
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e01b      	b.n	8003850 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4618      	mov	r0, r3
 800381e:	f7ff ff94 	bl	800374a <LL_ADC_IsCalibrationOnGoing>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1e2      	bne.n	80037ee <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800382c:	f023 0303 	bic.w	r3, r3, #3
 8003830:	f043 0201 	orr.w	r2, r3, #1
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003838:	e005      	b.n	8003846 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800383e:	f043 0210 	orr.w	r2, r3, #16
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800384e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003850:	4618      	mov	r0, r3
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	0004de01 	.word	0x0004de01

0800385c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800385c:	b590      	push	{r4, r7, lr}
 800385e:	b0a1      	sub	sp, #132	@ 0x84
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003866:	2300      	movs	r3, #0
 8003868:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003872:	2b01      	cmp	r3, #1
 8003874:	d101      	bne.n	800387a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003876:	2302      	movs	r3, #2
 8003878:	e0e7      	b.n	8003a4a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003882:	2300      	movs	r3, #0
 8003884:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003886:	2300      	movs	r3, #0
 8003888:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003892:	d102      	bne.n	800389a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003894:	4b6f      	ldr	r3, [pc, #444]	@ (8003a54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003896:	60bb      	str	r3, [r7, #8]
 8003898:	e009      	b.n	80038ae <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a6e      	ldr	r2, [pc, #440]	@ (8003a58 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d102      	bne.n	80038aa <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80038a4:	4b6d      	ldr	r3, [pc, #436]	@ (8003a5c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80038a6:	60bb      	str	r3, [r7, #8]
 80038a8:	e001      	b.n	80038ae <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80038aa:	2300      	movs	r3, #0
 80038ac:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d10b      	bne.n	80038cc <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038b8:	f043 0220 	orr.w	r2, r3, #32
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e0be      	b.n	8003a4a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7ff ff4f 	bl	8003772 <LL_ADC_REG_IsConversionOngoing>
 80038d4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4618      	mov	r0, r3
 80038dc:	f7ff ff49 	bl	8003772 <LL_ADC_REG_IsConversionOngoing>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f040 80a0 	bne.w	8003a28 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80038e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f040 809c 	bne.w	8003a28 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038f8:	d004      	beq.n	8003904 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a55      	ldr	r2, [pc, #340]	@ (8003a54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d101      	bne.n	8003908 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003904:	4b56      	ldr	r3, [pc, #344]	@ (8003a60 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003906:	e000      	b.n	800390a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003908:	4b56      	ldr	r3, [pc, #344]	@ (8003a64 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800390a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d04b      	beq.n	80039ac <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003914:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	6859      	ldr	r1, [r3, #4]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003926:	035b      	lsls	r3, r3, #13
 8003928:	430b      	orrs	r3, r1
 800392a:	431a      	orrs	r2, r3
 800392c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800392e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003938:	d004      	beq.n	8003944 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a45      	ldr	r2, [pc, #276]	@ (8003a54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d10f      	bne.n	8003964 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003944:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003948:	f7ff fed3 	bl	80036f2 <LL_ADC_IsEnabled>
 800394c:	4604      	mov	r4, r0
 800394e:	4841      	ldr	r0, [pc, #260]	@ (8003a54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003950:	f7ff fecf 	bl	80036f2 <LL_ADC_IsEnabled>
 8003954:	4603      	mov	r3, r0
 8003956:	4323      	orrs	r3, r4
 8003958:	2b00      	cmp	r3, #0
 800395a:	bf0c      	ite	eq
 800395c:	2301      	moveq	r3, #1
 800395e:	2300      	movne	r3, #0
 8003960:	b2db      	uxtb	r3, r3
 8003962:	e012      	b.n	800398a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003964:	483c      	ldr	r0, [pc, #240]	@ (8003a58 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003966:	f7ff fec4 	bl	80036f2 <LL_ADC_IsEnabled>
 800396a:	4604      	mov	r4, r0
 800396c:	483b      	ldr	r0, [pc, #236]	@ (8003a5c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800396e:	f7ff fec0 	bl	80036f2 <LL_ADC_IsEnabled>
 8003972:	4603      	mov	r3, r0
 8003974:	431c      	orrs	r4, r3
 8003976:	483c      	ldr	r0, [pc, #240]	@ (8003a68 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003978:	f7ff febb 	bl	80036f2 <LL_ADC_IsEnabled>
 800397c:	4603      	mov	r3, r0
 800397e:	4323      	orrs	r3, r4
 8003980:	2b00      	cmp	r3, #0
 8003982:	bf0c      	ite	eq
 8003984:	2301      	moveq	r3, #1
 8003986:	2300      	movne	r3, #0
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d056      	beq.n	8003a3c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800398e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003996:	f023 030f 	bic.w	r3, r3, #15
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	6811      	ldr	r1, [r2, #0]
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	6892      	ldr	r2, [r2, #8]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	431a      	orrs	r2, r3
 80039a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039a8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80039aa:	e047      	b.n	8003a3c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80039ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80039b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039b6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039c0:	d004      	beq.n	80039cc <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a23      	ldr	r2, [pc, #140]	@ (8003a54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d10f      	bne.n	80039ec <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80039cc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80039d0:	f7ff fe8f 	bl	80036f2 <LL_ADC_IsEnabled>
 80039d4:	4604      	mov	r4, r0
 80039d6:	481f      	ldr	r0, [pc, #124]	@ (8003a54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80039d8:	f7ff fe8b 	bl	80036f2 <LL_ADC_IsEnabled>
 80039dc:	4603      	mov	r3, r0
 80039de:	4323      	orrs	r3, r4
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	bf0c      	ite	eq
 80039e4:	2301      	moveq	r3, #1
 80039e6:	2300      	movne	r3, #0
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	e012      	b.n	8003a12 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80039ec:	481a      	ldr	r0, [pc, #104]	@ (8003a58 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80039ee:	f7ff fe80 	bl	80036f2 <LL_ADC_IsEnabled>
 80039f2:	4604      	mov	r4, r0
 80039f4:	4819      	ldr	r0, [pc, #100]	@ (8003a5c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80039f6:	f7ff fe7c 	bl	80036f2 <LL_ADC_IsEnabled>
 80039fa:	4603      	mov	r3, r0
 80039fc:	431c      	orrs	r4, r3
 80039fe:	481a      	ldr	r0, [pc, #104]	@ (8003a68 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003a00:	f7ff fe77 	bl	80036f2 <LL_ADC_IsEnabled>
 8003a04:	4603      	mov	r3, r0
 8003a06:	4323      	orrs	r3, r4
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	bf0c      	ite	eq
 8003a0c:	2301      	moveq	r3, #1
 8003a0e:	2300      	movne	r3, #0
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d012      	beq.n	8003a3c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003a16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003a1e:	f023 030f 	bic.w	r3, r3, #15
 8003a22:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003a24:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a26:	e009      	b.n	8003a3c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a2c:	f043 0220 	orr.w	r2, r3, #32
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003a3a:	e000      	b.n	8003a3e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a3c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003a46:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3784      	adds	r7, #132	@ 0x84
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd90      	pop	{r4, r7, pc}
 8003a52:	bf00      	nop
 8003a54:	50000100 	.word	0x50000100
 8003a58:	50000400 	.word	0x50000400
 8003a5c:	50000500 	.word	0x50000500
 8003a60:	50000300 	.word	0x50000300
 8003a64:	50000700 	.word	0x50000700
 8003a68:	50000600 	.word	0x50000600

08003a6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f003 0307 	and.w	r3, r3, #7
 8003a7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003a88:	4013      	ands	r3, r2
 8003a8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003a98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a9e:	4a04      	ldr	r2, [pc, #16]	@ (8003ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	60d3      	str	r3, [r2, #12]
}
 8003aa4:	bf00      	nop
 8003aa6:	3714      	adds	r7, #20
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr
 8003ab0:	e000ed00 	.word	0xe000ed00

08003ab4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ab8:	4b04      	ldr	r3, [pc, #16]	@ (8003acc <__NVIC_GetPriorityGrouping+0x18>)
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	0a1b      	lsrs	r3, r3, #8
 8003abe:	f003 0307 	and.w	r3, r3, #7
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr
 8003acc:	e000ed00 	.word	0xe000ed00

08003ad0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	db0b      	blt.n	8003afa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ae2:	79fb      	ldrb	r3, [r7, #7]
 8003ae4:	f003 021f 	and.w	r2, r3, #31
 8003ae8:	4907      	ldr	r1, [pc, #28]	@ (8003b08 <__NVIC_EnableIRQ+0x38>)
 8003aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aee:	095b      	lsrs	r3, r3, #5
 8003af0:	2001      	movs	r0, #1
 8003af2:	fa00 f202 	lsl.w	r2, r0, r2
 8003af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003afa:	bf00      	nop
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	e000e100 	.word	0xe000e100

08003b0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	4603      	mov	r3, r0
 8003b14:	6039      	str	r1, [r7, #0]
 8003b16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	db0a      	blt.n	8003b36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	b2da      	uxtb	r2, r3
 8003b24:	490c      	ldr	r1, [pc, #48]	@ (8003b58 <__NVIC_SetPriority+0x4c>)
 8003b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b2a:	0112      	lsls	r2, r2, #4
 8003b2c:	b2d2      	uxtb	r2, r2
 8003b2e:	440b      	add	r3, r1
 8003b30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b34:	e00a      	b.n	8003b4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	b2da      	uxtb	r2, r3
 8003b3a:	4908      	ldr	r1, [pc, #32]	@ (8003b5c <__NVIC_SetPriority+0x50>)
 8003b3c:	79fb      	ldrb	r3, [r7, #7]
 8003b3e:	f003 030f 	and.w	r3, r3, #15
 8003b42:	3b04      	subs	r3, #4
 8003b44:	0112      	lsls	r2, r2, #4
 8003b46:	b2d2      	uxtb	r2, r2
 8003b48:	440b      	add	r3, r1
 8003b4a:	761a      	strb	r2, [r3, #24]
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr
 8003b58:	e000e100 	.word	0xe000e100
 8003b5c:	e000ed00 	.word	0xe000ed00

08003b60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b089      	sub	sp, #36	@ 0x24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f003 0307 	and.w	r3, r3, #7
 8003b72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	f1c3 0307 	rsb	r3, r3, #7
 8003b7a:	2b04      	cmp	r3, #4
 8003b7c:	bf28      	it	cs
 8003b7e:	2304      	movcs	r3, #4
 8003b80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	3304      	adds	r3, #4
 8003b86:	2b06      	cmp	r3, #6
 8003b88:	d902      	bls.n	8003b90 <NVIC_EncodePriority+0x30>
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	3b03      	subs	r3, #3
 8003b8e:	e000      	b.n	8003b92 <NVIC_EncodePriority+0x32>
 8003b90:	2300      	movs	r3, #0
 8003b92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b94:	f04f 32ff 	mov.w	r2, #4294967295
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9e:	43da      	mvns	r2, r3
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	401a      	ands	r2, r3
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb2:	43d9      	mvns	r1, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bb8:	4313      	orrs	r3, r2
         );
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3724      	adds	r7, #36	@ 0x24
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
	...

08003bc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003bd8:	d301      	bcc.n	8003bde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e00f      	b.n	8003bfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bde:	4a0a      	ldr	r2, [pc, #40]	@ (8003c08 <SysTick_Config+0x40>)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	3b01      	subs	r3, #1
 8003be4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003be6:	210f      	movs	r1, #15
 8003be8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bec:	f7ff ff8e 	bl	8003b0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bf0:	4b05      	ldr	r3, [pc, #20]	@ (8003c08 <SysTick_Config+0x40>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bf6:	4b04      	ldr	r3, [pc, #16]	@ (8003c08 <SysTick_Config+0x40>)
 8003bf8:	2207      	movs	r2, #7
 8003bfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	e000e010 	.word	0xe000e010

08003c0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f7ff ff29 	bl	8003a6c <__NVIC_SetPriorityGrouping>
}
 8003c1a:	bf00      	nop
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b086      	sub	sp, #24
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	4603      	mov	r3, r0
 8003c2a:	60b9      	str	r1, [r7, #8]
 8003c2c:	607a      	str	r2, [r7, #4]
 8003c2e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c30:	f7ff ff40 	bl	8003ab4 <__NVIC_GetPriorityGrouping>
 8003c34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	68b9      	ldr	r1, [r7, #8]
 8003c3a:	6978      	ldr	r0, [r7, #20]
 8003c3c:	f7ff ff90 	bl	8003b60 <NVIC_EncodePriority>
 8003c40:	4602      	mov	r2, r0
 8003c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c46:	4611      	mov	r1, r2
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7ff ff5f 	bl	8003b0c <__NVIC_SetPriority>
}
 8003c4e:	bf00      	nop
 8003c50:	3718      	adds	r7, #24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b082      	sub	sp, #8
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7ff ff33 	bl	8003ad0 <__NVIC_EnableIRQ>
}
 8003c6a:	bf00      	nop
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b082      	sub	sp, #8
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7ff ffa4 	bl	8003bc8 <SysTick_Config>
 8003c80:	4603      	mov	r3, r0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3708      	adds	r7, #8
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
	...

08003c8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e08d      	b.n	8003dba <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	4b47      	ldr	r3, [pc, #284]	@ (8003dc4 <HAL_DMA_Init+0x138>)
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d80f      	bhi.n	8003cca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	461a      	mov	r2, r3
 8003cb0:	4b45      	ldr	r3, [pc, #276]	@ (8003dc8 <HAL_DMA_Init+0x13c>)
 8003cb2:	4413      	add	r3, r2
 8003cb4:	4a45      	ldr	r2, [pc, #276]	@ (8003dcc <HAL_DMA_Init+0x140>)
 8003cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cba:	091b      	lsrs	r3, r3, #4
 8003cbc:	009a      	lsls	r2, r3, #2
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a42      	ldr	r2, [pc, #264]	@ (8003dd0 <HAL_DMA_Init+0x144>)
 8003cc6:	641a      	str	r2, [r3, #64]	@ 0x40
 8003cc8:	e00e      	b.n	8003ce8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	4b40      	ldr	r3, [pc, #256]	@ (8003dd4 <HAL_DMA_Init+0x148>)
 8003cd2:	4413      	add	r3, r2
 8003cd4:	4a3d      	ldr	r2, [pc, #244]	@ (8003dcc <HAL_DMA_Init+0x140>)
 8003cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cda:	091b      	lsrs	r3, r3, #4
 8003cdc:	009a      	lsls	r2, r3, #2
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a3c      	ldr	r2, [pc, #240]	@ (8003dd8 <HAL_DMA_Init+0x14c>)
 8003ce6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2202      	movs	r2, #2
 8003cec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003cfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d02:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003d0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 f9b6 	bl	80040ac <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d48:	d102      	bne.n	8003d50 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685a      	ldr	r2, [r3, #4]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d58:	b2d2      	uxtb	r2, r2
 8003d5a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003d64:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d010      	beq.n	8003d90 <HAL_DMA_Init+0x104>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	2b04      	cmp	r3, #4
 8003d74:	d80c      	bhi.n	8003d90 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f9d6 	bl	8004128 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d80:	2200      	movs	r2, #0
 8003d82:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003d8c:	605a      	str	r2, [r3, #4]
 8003d8e:	e008      	b.n	8003da2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	40020407 	.word	0x40020407
 8003dc8:	bffdfff8 	.word	0xbffdfff8
 8003dcc:	cccccccd 	.word	0xcccccccd
 8003dd0:	40020000 	.word	0x40020000
 8003dd4:	bffdfbf8 	.word	0xbffdfbf8
 8003dd8:	40020400 	.word	0x40020400

08003ddc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
 8003de8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dea:	2300      	movs	r3, #0
 8003dec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d101      	bne.n	8003dfc <HAL_DMA_Start_IT+0x20>
 8003df8:	2302      	movs	r3, #2
 8003dfa:	e066      	b.n	8003eca <HAL_DMA_Start_IT+0xee>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d155      	bne.n	8003ebc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2202      	movs	r2, #2
 8003e14:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 0201 	bic.w	r2, r2, #1
 8003e2c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	68b9      	ldr	r1, [r7, #8]
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f000 f8fb 	bl	8004030 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d008      	beq.n	8003e54 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f042 020e 	orr.w	r2, r2, #14
 8003e50:	601a      	str	r2, [r3, #0]
 8003e52:	e00f      	b.n	8003e74 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f022 0204 	bic.w	r2, r2, #4
 8003e62:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f042 020a 	orr.w	r2, r2, #10
 8003e72:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d007      	beq.n	8003e92 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e8c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e90:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d007      	beq.n	8003eaa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ea4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ea8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f042 0201 	orr.w	r2, r2, #1
 8003eb8:	601a      	str	r2, [r3, #0]
 8003eba:	e005      	b.n	8003ec8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003ec8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3718      	adds	r7, #24
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b084      	sub	sp, #16
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eee:	f003 031f 	and.w	r3, r3, #31
 8003ef2:	2204      	movs	r2, #4
 8003ef4:	409a      	lsls	r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	4013      	ands	r3, r2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d026      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x7a>
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	f003 0304 	and.w	r3, r3, #4
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d021      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0320 	and.w	r3, r3, #32
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d107      	bne.n	8003f26 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 0204 	bic.w	r2, r2, #4
 8003f24:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f2a:	f003 021f 	and.w	r2, r3, #31
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f32:	2104      	movs	r1, #4
 8003f34:	fa01 f202 	lsl.w	r2, r1, r2
 8003f38:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d071      	beq.n	8004026 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003f4a:	e06c      	b.n	8004026 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f50:	f003 031f 	and.w	r3, r3, #31
 8003f54:	2202      	movs	r2, #2
 8003f56:	409a      	lsls	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d02e      	beq.n	8003fbe <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d029      	beq.n	8003fbe <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0320 	and.w	r3, r3, #32
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10b      	bne.n	8003f90 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 020a 	bic.w	r2, r2, #10
 8003f86:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f94:	f003 021f 	and.w	r2, r3, #31
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f9c:	2102      	movs	r1, #2
 8003f9e:	fa01 f202 	lsl.w	r2, r1, r2
 8003fa2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d038      	beq.n	8004026 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003fbc:	e033      	b.n	8004026 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fc2:	f003 031f 	and.w	r3, r3, #31
 8003fc6:	2208      	movs	r2, #8
 8003fc8:	409a      	lsls	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	4013      	ands	r3, r2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d02a      	beq.n	8004028 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	f003 0308 	and.w	r3, r3, #8
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d025      	beq.n	8004028 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f022 020e 	bic.w	r2, r2, #14
 8003fea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ff0:	f003 021f 	and.w	r2, r3, #31
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff8:	2101      	movs	r1, #1
 8003ffa:	fa01 f202 	lsl.w	r2, r1, r2
 8003ffe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800401a:	2b00      	cmp	r3, #0
 800401c:	d004      	beq.n	8004028 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004026:	bf00      	nop
 8004028:	bf00      	nop
}
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
 800403c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004046:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800404c:	2b00      	cmp	r3, #0
 800404e:	d004      	beq.n	800405a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004058:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800405e:	f003 021f 	and.w	r2, r3, #31
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004066:	2101      	movs	r1, #1
 8004068:	fa01 f202 	lsl.w	r2, r1, r2
 800406c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	683a      	ldr	r2, [r7, #0]
 8004074:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	2b10      	cmp	r3, #16
 800407c:	d108      	bne.n	8004090 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800408e:	e007      	b.n	80040a0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68ba      	ldr	r2, [r7, #8]
 8004096:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	60da      	str	r2, [r3, #12]
}
 80040a0:	bf00      	nop
 80040a2:	3714      	adds	r7, #20
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b087      	sub	sp, #28
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	461a      	mov	r2, r3
 80040ba:	4b16      	ldr	r3, [pc, #88]	@ (8004114 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80040bc:	429a      	cmp	r2, r3
 80040be:	d802      	bhi.n	80040c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80040c0:	4b15      	ldr	r3, [pc, #84]	@ (8004118 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80040c2:	617b      	str	r3, [r7, #20]
 80040c4:	e001      	b.n	80040ca <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80040c6:	4b15      	ldr	r3, [pc, #84]	@ (800411c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80040c8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	3b08      	subs	r3, #8
 80040d6:	4a12      	ldr	r2, [pc, #72]	@ (8004120 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80040d8:	fba2 2303 	umull	r2, r3, r2, r3
 80040dc:	091b      	lsrs	r3, r3, #4
 80040de:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040e4:	089b      	lsrs	r3, r3, #2
 80040e6:	009a      	lsls	r2, r3, #2
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	4413      	add	r3, r2
 80040ec:	461a      	mov	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a0b      	ldr	r2, [pc, #44]	@ (8004124 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80040f6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f003 031f 	and.w	r3, r3, #31
 80040fe:	2201      	movs	r2, #1
 8004100:	409a      	lsls	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004106:	bf00      	nop
 8004108:	371c      	adds	r7, #28
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	40020407 	.word	0x40020407
 8004118:	40020800 	.word	0x40020800
 800411c:	40020820 	.word	0x40020820
 8004120:	cccccccd 	.word	0xcccccccd
 8004124:	40020880 	.word	0x40020880

08004128 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	b2db      	uxtb	r3, r3
 8004136:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	4b0b      	ldr	r3, [pc, #44]	@ (8004168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800413c:	4413      	add	r3, r2
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	461a      	mov	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a08      	ldr	r2, [pc, #32]	@ (800416c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800414a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	3b01      	subs	r3, #1
 8004150:	f003 031f 	and.w	r3, r3, #31
 8004154:	2201      	movs	r2, #1
 8004156:	409a      	lsls	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800415c:	bf00      	nop
 800415e:	3714      	adds	r7, #20
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr
 8004168:	1000823f 	.word	0x1000823f
 800416c:	40020940 	.word	0x40020940

08004170 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004170:	b480      	push	{r7}
 8004172:	b087      	sub	sp, #28
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800417a:	2300      	movs	r3, #0
 800417c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800417e:	e15a      	b.n	8004436 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	2101      	movs	r1, #1
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	fa01 f303 	lsl.w	r3, r1, r3
 800418c:	4013      	ands	r3, r2
 800418e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2b00      	cmp	r3, #0
 8004194:	f000 814c 	beq.w	8004430 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f003 0303 	and.w	r3, r3, #3
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d005      	beq.n	80041b0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d130      	bne.n	8004212 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	005b      	lsls	r3, r3, #1
 80041ba:	2203      	movs	r2, #3
 80041bc:	fa02 f303 	lsl.w	r3, r2, r3
 80041c0:	43db      	mvns	r3, r3
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	4013      	ands	r3, r2
 80041c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	68da      	ldr	r2, [r3, #12]
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	005b      	lsls	r3, r3, #1
 80041d0:	fa02 f303 	lsl.w	r3, r2, r3
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80041e6:	2201      	movs	r2, #1
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	fa02 f303 	lsl.w	r3, r2, r3
 80041ee:	43db      	mvns	r3, r3
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	4013      	ands	r3, r2
 80041f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	091b      	lsrs	r3, r3, #4
 80041fc:	f003 0201 	and.w	r2, r3, #1
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	fa02 f303 	lsl.w	r3, r2, r3
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	4313      	orrs	r3, r2
 800420a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f003 0303 	and.w	r3, r3, #3
 800421a:	2b03      	cmp	r3, #3
 800421c:	d017      	beq.n	800424e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	005b      	lsls	r3, r3, #1
 8004228:	2203      	movs	r2, #3
 800422a:	fa02 f303 	lsl.w	r3, r2, r3
 800422e:	43db      	mvns	r3, r3
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	4013      	ands	r3, r2
 8004234:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	689a      	ldr	r2, [r3, #8]
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	005b      	lsls	r3, r3, #1
 800423e:	fa02 f303 	lsl.w	r3, r2, r3
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	4313      	orrs	r3, r2
 8004246:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f003 0303 	and.w	r3, r3, #3
 8004256:	2b02      	cmp	r3, #2
 8004258:	d123      	bne.n	80042a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	08da      	lsrs	r2, r3, #3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	3208      	adds	r2, #8
 8004262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004266:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	f003 0307 	and.w	r3, r3, #7
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	220f      	movs	r2, #15
 8004272:	fa02 f303 	lsl.w	r3, r2, r3
 8004276:	43db      	mvns	r3, r3
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	4013      	ands	r3, r2
 800427c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	691a      	ldr	r2, [r3, #16]
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f003 0307 	and.w	r3, r3, #7
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	fa02 f303 	lsl.w	r3, r2, r3
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	4313      	orrs	r3, r2
 8004292:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	08da      	lsrs	r2, r3, #3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	3208      	adds	r2, #8
 800429c:	6939      	ldr	r1, [r7, #16]
 800429e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	005b      	lsls	r3, r3, #1
 80042ac:	2203      	movs	r2, #3
 80042ae:	fa02 f303 	lsl.w	r3, r2, r3
 80042b2:	43db      	mvns	r3, r3
 80042b4:	693a      	ldr	r2, [r7, #16]
 80042b6:	4013      	ands	r3, r2
 80042b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f003 0203 	and.w	r2, r3, #3
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f000 80a6 	beq.w	8004430 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042e4:	4b5b      	ldr	r3, [pc, #364]	@ (8004454 <HAL_GPIO_Init+0x2e4>)
 80042e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042e8:	4a5a      	ldr	r2, [pc, #360]	@ (8004454 <HAL_GPIO_Init+0x2e4>)
 80042ea:	f043 0301 	orr.w	r3, r3, #1
 80042ee:	6613      	str	r3, [r2, #96]	@ 0x60
 80042f0:	4b58      	ldr	r3, [pc, #352]	@ (8004454 <HAL_GPIO_Init+0x2e4>)
 80042f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	60bb      	str	r3, [r7, #8]
 80042fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042fc:	4a56      	ldr	r2, [pc, #344]	@ (8004458 <HAL_GPIO_Init+0x2e8>)
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	089b      	lsrs	r3, r3, #2
 8004302:	3302      	adds	r3, #2
 8004304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004308:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	f003 0303 	and.w	r3, r3, #3
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	220f      	movs	r2, #15
 8004314:	fa02 f303 	lsl.w	r3, r2, r3
 8004318:	43db      	mvns	r3, r3
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	4013      	ands	r3, r2
 800431e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004326:	d01f      	beq.n	8004368 <HAL_GPIO_Init+0x1f8>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a4c      	ldr	r2, [pc, #304]	@ (800445c <HAL_GPIO_Init+0x2ec>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d019      	beq.n	8004364 <HAL_GPIO_Init+0x1f4>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a4b      	ldr	r2, [pc, #300]	@ (8004460 <HAL_GPIO_Init+0x2f0>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d013      	beq.n	8004360 <HAL_GPIO_Init+0x1f0>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a4a      	ldr	r2, [pc, #296]	@ (8004464 <HAL_GPIO_Init+0x2f4>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d00d      	beq.n	800435c <HAL_GPIO_Init+0x1ec>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a49      	ldr	r2, [pc, #292]	@ (8004468 <HAL_GPIO_Init+0x2f8>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d007      	beq.n	8004358 <HAL_GPIO_Init+0x1e8>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a48      	ldr	r2, [pc, #288]	@ (800446c <HAL_GPIO_Init+0x2fc>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d101      	bne.n	8004354 <HAL_GPIO_Init+0x1e4>
 8004350:	2305      	movs	r3, #5
 8004352:	e00a      	b.n	800436a <HAL_GPIO_Init+0x1fa>
 8004354:	2306      	movs	r3, #6
 8004356:	e008      	b.n	800436a <HAL_GPIO_Init+0x1fa>
 8004358:	2304      	movs	r3, #4
 800435a:	e006      	b.n	800436a <HAL_GPIO_Init+0x1fa>
 800435c:	2303      	movs	r3, #3
 800435e:	e004      	b.n	800436a <HAL_GPIO_Init+0x1fa>
 8004360:	2302      	movs	r3, #2
 8004362:	e002      	b.n	800436a <HAL_GPIO_Init+0x1fa>
 8004364:	2301      	movs	r3, #1
 8004366:	e000      	b.n	800436a <HAL_GPIO_Init+0x1fa>
 8004368:	2300      	movs	r3, #0
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	f002 0203 	and.w	r2, r2, #3
 8004370:	0092      	lsls	r2, r2, #2
 8004372:	4093      	lsls	r3, r2
 8004374:	693a      	ldr	r2, [r7, #16]
 8004376:	4313      	orrs	r3, r2
 8004378:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800437a:	4937      	ldr	r1, [pc, #220]	@ (8004458 <HAL_GPIO_Init+0x2e8>)
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	089b      	lsrs	r3, r3, #2
 8004380:	3302      	adds	r3, #2
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004388:	4b39      	ldr	r3, [pc, #228]	@ (8004470 <HAL_GPIO_Init+0x300>)
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	43db      	mvns	r3, r3
 8004392:	693a      	ldr	r2, [r7, #16]
 8004394:	4013      	ands	r3, r2
 8004396:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d003      	beq.n	80043ac <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80043ac:	4a30      	ldr	r2, [pc, #192]	@ (8004470 <HAL_GPIO_Init+0x300>)
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80043b2:	4b2f      	ldr	r3, [pc, #188]	@ (8004470 <HAL_GPIO_Init+0x300>)
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	43db      	mvns	r3, r3
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	4013      	ands	r3, r2
 80043c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d003      	beq.n	80043d6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80043d6:	4a26      	ldr	r2, [pc, #152]	@ (8004470 <HAL_GPIO_Init+0x300>)
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80043dc:	4b24      	ldr	r3, [pc, #144]	@ (8004470 <HAL_GPIO_Init+0x300>)
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	43db      	mvns	r3, r3
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	4013      	ands	r3, r2
 80043ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d003      	beq.n	8004400 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004400:	4a1b      	ldr	r2, [pc, #108]	@ (8004470 <HAL_GPIO_Init+0x300>)
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004406:	4b1a      	ldr	r3, [pc, #104]	@ (8004470 <HAL_GPIO_Init+0x300>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	43db      	mvns	r3, r3
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	4013      	ands	r3, r2
 8004414:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	4313      	orrs	r3, r2
 8004428:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800442a:	4a11      	ldr	r2, [pc, #68]	@ (8004470 <HAL_GPIO_Init+0x300>)
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	3301      	adds	r3, #1
 8004434:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	fa22 f303 	lsr.w	r3, r2, r3
 8004440:	2b00      	cmp	r3, #0
 8004442:	f47f ae9d 	bne.w	8004180 <HAL_GPIO_Init+0x10>
  }
}
 8004446:	bf00      	nop
 8004448:	bf00      	nop
 800444a:	371c      	adds	r7, #28
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr
 8004454:	40021000 	.word	0x40021000
 8004458:	40010000 	.word	0x40010000
 800445c:	48000400 	.word	0x48000400
 8004460:	48000800 	.word	0x48000800
 8004464:	48000c00 	.word	0x48000c00
 8004468:	48001000 	.word	0x48001000
 800446c:	48001400 	.word	0x48001400
 8004470:	40010400 	.word	0x40010400

08004474 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	460b      	mov	r3, r1
 800447e:	807b      	strh	r3, [r7, #2]
 8004480:	4613      	mov	r3, r2
 8004482:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004484:	787b      	ldrb	r3, [r7, #1]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d003      	beq.n	8004492 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800448a:	887a      	ldrh	r2, [r7, #2]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004490:	e002      	b.n	8004498 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004492:	887a      	ldrh	r2, [r7, #2]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	460b      	mov	r3, r1
 80044ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	695b      	ldr	r3, [r3, #20]
 80044b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80044b6:	887a      	ldrh	r2, [r7, #2]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	4013      	ands	r3, r2
 80044bc:	041a      	lsls	r2, r3, #16
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	43d9      	mvns	r1, r3
 80044c2:	887b      	ldrh	r3, [r7, #2]
 80044c4:	400b      	ands	r3, r1
 80044c6:	431a      	orrs	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	619a      	str	r2, [r3, #24]
}
 80044cc:	bf00      	nop
 80044ce:	3714      	adds	r7, #20
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	4603      	mov	r3, r0
 80044e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80044e2:	4b08      	ldr	r3, [pc, #32]	@ (8004504 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044e4:	695a      	ldr	r2, [r3, #20]
 80044e6:	88fb      	ldrh	r3, [r7, #6]
 80044e8:	4013      	ands	r3, r2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d006      	beq.n	80044fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80044ee:	4a05      	ldr	r2, [pc, #20]	@ (8004504 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044f0:	88fb      	ldrh	r3, [r7, #6]
 80044f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80044f4:	88fb      	ldrh	r3, [r7, #6]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7fd fb12 	bl	8001b20 <HAL_GPIO_EXTI_Callback>
  }
}
 80044fc:	bf00      	nop
 80044fe:	3708      	adds	r7, #8
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	40010400 	.word	0x40010400

08004508 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004508:	b480      	push	{r7}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d141      	bne.n	800459a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004516:	4b4b      	ldr	r3, [pc, #300]	@ (8004644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800451e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004522:	d131      	bne.n	8004588 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004524:	4b47      	ldr	r3, [pc, #284]	@ (8004644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004526:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800452a:	4a46      	ldr	r2, [pc, #280]	@ (8004644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800452c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004530:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004534:	4b43      	ldr	r3, [pc, #268]	@ (8004644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800453c:	4a41      	ldr	r2, [pc, #260]	@ (8004644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800453e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004542:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004544:	4b40      	ldr	r3, [pc, #256]	@ (8004648 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2232      	movs	r2, #50	@ 0x32
 800454a:	fb02 f303 	mul.w	r3, r2, r3
 800454e:	4a3f      	ldr	r2, [pc, #252]	@ (800464c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004550:	fba2 2303 	umull	r2, r3, r2, r3
 8004554:	0c9b      	lsrs	r3, r3, #18
 8004556:	3301      	adds	r3, #1
 8004558:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800455a:	e002      	b.n	8004562 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	3b01      	subs	r3, #1
 8004560:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004562:	4b38      	ldr	r3, [pc, #224]	@ (8004644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800456a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800456e:	d102      	bne.n	8004576 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1f2      	bne.n	800455c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004576:	4b33      	ldr	r3, [pc, #204]	@ (8004644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800457e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004582:	d158      	bne.n	8004636 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e057      	b.n	8004638 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004588:	4b2e      	ldr	r3, [pc, #184]	@ (8004644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800458a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800458e:	4a2d      	ldr	r2, [pc, #180]	@ (8004644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004590:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004594:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004598:	e04d      	b.n	8004636 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045a0:	d141      	bne.n	8004626 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80045a2:	4b28      	ldr	r3, [pc, #160]	@ (8004644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80045aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045ae:	d131      	bne.n	8004614 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80045b0:	4b24      	ldr	r3, [pc, #144]	@ (8004644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045b6:	4a23      	ldr	r2, [pc, #140]	@ (8004644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80045c0:	4b20      	ldr	r3, [pc, #128]	@ (8004644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80045c8:	4a1e      	ldr	r2, [pc, #120]	@ (8004644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80045ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80045d0:	4b1d      	ldr	r3, [pc, #116]	@ (8004648 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2232      	movs	r2, #50	@ 0x32
 80045d6:	fb02 f303 	mul.w	r3, r2, r3
 80045da:	4a1c      	ldr	r2, [pc, #112]	@ (800464c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80045dc:	fba2 2303 	umull	r2, r3, r2, r3
 80045e0:	0c9b      	lsrs	r3, r3, #18
 80045e2:	3301      	adds	r3, #1
 80045e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80045e6:	e002      	b.n	80045ee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	3b01      	subs	r3, #1
 80045ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80045ee:	4b15      	ldr	r3, [pc, #84]	@ (8004644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045fa:	d102      	bne.n	8004602 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1f2      	bne.n	80045e8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004602:	4b10      	ldr	r3, [pc, #64]	@ (8004644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800460a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800460e:	d112      	bne.n	8004636 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e011      	b.n	8004638 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004614:	4b0b      	ldr	r3, [pc, #44]	@ (8004644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004616:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800461a:	4a0a      	ldr	r2, [pc, #40]	@ (8004644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800461c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004620:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004624:	e007      	b.n	8004636 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004626:	4b07      	ldr	r3, [pc, #28]	@ (8004644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800462e:	4a05      	ldr	r2, [pc, #20]	@ (8004644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004630:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004634:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3714      	adds	r7, #20
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr
 8004644:	40007000 	.word	0x40007000
 8004648:	20000000 	.word	0x20000000
 800464c:	431bde83 	.word	0x431bde83

08004650 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004650:	b480      	push	{r7}
 8004652:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004654:	4b05      	ldr	r3, [pc, #20]	@ (800466c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	4a04      	ldr	r2, [pc, #16]	@ (800466c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800465a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800465e:	6093      	str	r3, [r2, #8]
}
 8004660:	bf00      	nop
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	40007000 	.word	0x40007000

08004670 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b088      	sub	sp, #32
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e2fe      	b.n	8004c80 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b00      	cmp	r3, #0
 800468c:	d075      	beq.n	800477a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800468e:	4b97      	ldr	r3, [pc, #604]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f003 030c 	and.w	r3, r3, #12
 8004696:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004698:	4b94      	ldr	r3, [pc, #592]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	f003 0303 	and.w	r3, r3, #3
 80046a0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	2b0c      	cmp	r3, #12
 80046a6:	d102      	bne.n	80046ae <HAL_RCC_OscConfig+0x3e>
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	2b03      	cmp	r3, #3
 80046ac:	d002      	beq.n	80046b4 <HAL_RCC_OscConfig+0x44>
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	2b08      	cmp	r3, #8
 80046b2:	d10b      	bne.n	80046cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046b4:	4b8d      	ldr	r3, [pc, #564]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d05b      	beq.n	8004778 <HAL_RCC_OscConfig+0x108>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d157      	bne.n	8004778 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e2d9      	b.n	8004c80 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046d4:	d106      	bne.n	80046e4 <HAL_RCC_OscConfig+0x74>
 80046d6:	4b85      	ldr	r3, [pc, #532]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a84      	ldr	r2, [pc, #528]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 80046dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046e0:	6013      	str	r3, [r2, #0]
 80046e2:	e01d      	b.n	8004720 <HAL_RCC_OscConfig+0xb0>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046ec:	d10c      	bne.n	8004708 <HAL_RCC_OscConfig+0x98>
 80046ee:	4b7f      	ldr	r3, [pc, #508]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a7e      	ldr	r2, [pc, #504]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 80046f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046f8:	6013      	str	r3, [r2, #0]
 80046fa:	4b7c      	ldr	r3, [pc, #496]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a7b      	ldr	r2, [pc, #492]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 8004700:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004704:	6013      	str	r3, [r2, #0]
 8004706:	e00b      	b.n	8004720 <HAL_RCC_OscConfig+0xb0>
 8004708:	4b78      	ldr	r3, [pc, #480]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a77      	ldr	r2, [pc, #476]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 800470e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004712:	6013      	str	r3, [r2, #0]
 8004714:	4b75      	ldr	r3, [pc, #468]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a74      	ldr	r2, [pc, #464]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 800471a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800471e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d013      	beq.n	8004750 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004728:	f7fd fcfa 	bl	8002120 <HAL_GetTick>
 800472c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800472e:	e008      	b.n	8004742 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004730:	f7fd fcf6 	bl	8002120 <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b64      	cmp	r3, #100	@ 0x64
 800473c:	d901      	bls.n	8004742 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e29e      	b.n	8004c80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004742:	4b6a      	ldr	r3, [pc, #424]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d0f0      	beq.n	8004730 <HAL_RCC_OscConfig+0xc0>
 800474e:	e014      	b.n	800477a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004750:	f7fd fce6 	bl	8002120 <HAL_GetTick>
 8004754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004758:	f7fd fce2 	bl	8002120 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b64      	cmp	r3, #100	@ 0x64
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e28a      	b.n	8004c80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800476a:	4b60      	ldr	r3, [pc, #384]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1f0      	bne.n	8004758 <HAL_RCC_OscConfig+0xe8>
 8004776:	e000      	b.n	800477a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004778:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	2b00      	cmp	r3, #0
 8004784:	d075      	beq.n	8004872 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004786:	4b59      	ldr	r3, [pc, #356]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f003 030c 	and.w	r3, r3, #12
 800478e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004790:	4b56      	ldr	r3, [pc, #344]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	f003 0303 	and.w	r3, r3, #3
 8004798:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	2b0c      	cmp	r3, #12
 800479e:	d102      	bne.n	80047a6 <HAL_RCC_OscConfig+0x136>
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d002      	beq.n	80047ac <HAL_RCC_OscConfig+0x13c>
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	2b04      	cmp	r3, #4
 80047aa:	d11f      	bne.n	80047ec <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047ac:	4b4f      	ldr	r3, [pc, #316]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d005      	beq.n	80047c4 <HAL_RCC_OscConfig+0x154>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d101      	bne.n	80047c4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e25d      	b.n	8004c80 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047c4:	4b49      	ldr	r3, [pc, #292]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	061b      	lsls	r3, r3, #24
 80047d2:	4946      	ldr	r1, [pc, #280]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80047d8:	4b45      	ldr	r3, [pc, #276]	@ (80048f0 <HAL_RCC_OscConfig+0x280>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4618      	mov	r0, r3
 80047de:	f7fd fc53 	bl	8002088 <HAL_InitTick>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d043      	beq.n	8004870 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e249      	b.n	8004c80 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d023      	beq.n	800483c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047f4:	4b3d      	ldr	r3, [pc, #244]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a3c      	ldr	r2, [pc, #240]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 80047fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004800:	f7fd fc8e 	bl	8002120 <HAL_GetTick>
 8004804:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004806:	e008      	b.n	800481a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004808:	f7fd fc8a 	bl	8002120 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	2b02      	cmp	r3, #2
 8004814:	d901      	bls.n	800481a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e232      	b.n	8004c80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800481a:	4b34      	ldr	r3, [pc, #208]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004822:	2b00      	cmp	r3, #0
 8004824:	d0f0      	beq.n	8004808 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004826:	4b31      	ldr	r3, [pc, #196]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	061b      	lsls	r3, r3, #24
 8004834:	492d      	ldr	r1, [pc, #180]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 8004836:	4313      	orrs	r3, r2
 8004838:	604b      	str	r3, [r1, #4]
 800483a:	e01a      	b.n	8004872 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800483c:	4b2b      	ldr	r3, [pc, #172]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a2a      	ldr	r2, [pc, #168]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 8004842:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004846:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004848:	f7fd fc6a 	bl	8002120 <HAL_GetTick>
 800484c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800484e:	e008      	b.n	8004862 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004850:	f7fd fc66 	bl	8002120 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b02      	cmp	r3, #2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e20e      	b.n	8004c80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004862:	4b22      	ldr	r3, [pc, #136]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1f0      	bne.n	8004850 <HAL_RCC_OscConfig+0x1e0>
 800486e:	e000      	b.n	8004872 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004870:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0308 	and.w	r3, r3, #8
 800487a:	2b00      	cmp	r3, #0
 800487c:	d041      	beq.n	8004902 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d01c      	beq.n	80048c0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004886:	4b19      	ldr	r3, [pc, #100]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 8004888:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800488c:	4a17      	ldr	r2, [pc, #92]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 800488e:	f043 0301 	orr.w	r3, r3, #1
 8004892:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004896:	f7fd fc43 	bl	8002120 <HAL_GetTick>
 800489a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800489c:	e008      	b.n	80048b0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800489e:	f7fd fc3f 	bl	8002120 <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d901      	bls.n	80048b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e1e7      	b.n	8004c80 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048b0:	4b0e      	ldr	r3, [pc, #56]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 80048b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d0ef      	beq.n	800489e <HAL_RCC_OscConfig+0x22e>
 80048be:	e020      	b.n	8004902 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048c0:	4b0a      	ldr	r3, [pc, #40]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 80048c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048c6:	4a09      	ldr	r2, [pc, #36]	@ (80048ec <HAL_RCC_OscConfig+0x27c>)
 80048c8:	f023 0301 	bic.w	r3, r3, #1
 80048cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048d0:	f7fd fc26 	bl	8002120 <HAL_GetTick>
 80048d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048d6:	e00d      	b.n	80048f4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048d8:	f7fd fc22 	bl	8002120 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d906      	bls.n	80048f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e1ca      	b.n	8004c80 <HAL_RCC_OscConfig+0x610>
 80048ea:	bf00      	nop
 80048ec:	40021000 	.word	0x40021000
 80048f0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048f4:	4b8c      	ldr	r3, [pc, #560]	@ (8004b28 <HAL_RCC_OscConfig+0x4b8>)
 80048f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1ea      	bne.n	80048d8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0304 	and.w	r3, r3, #4
 800490a:	2b00      	cmp	r3, #0
 800490c:	f000 80a6 	beq.w	8004a5c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004910:	2300      	movs	r3, #0
 8004912:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004914:	4b84      	ldr	r3, [pc, #528]	@ (8004b28 <HAL_RCC_OscConfig+0x4b8>)
 8004916:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004918:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d101      	bne.n	8004924 <HAL_RCC_OscConfig+0x2b4>
 8004920:	2301      	movs	r3, #1
 8004922:	e000      	b.n	8004926 <HAL_RCC_OscConfig+0x2b6>
 8004924:	2300      	movs	r3, #0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00d      	beq.n	8004946 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800492a:	4b7f      	ldr	r3, [pc, #508]	@ (8004b28 <HAL_RCC_OscConfig+0x4b8>)
 800492c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800492e:	4a7e      	ldr	r2, [pc, #504]	@ (8004b28 <HAL_RCC_OscConfig+0x4b8>)
 8004930:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004934:	6593      	str	r3, [r2, #88]	@ 0x58
 8004936:	4b7c      	ldr	r3, [pc, #496]	@ (8004b28 <HAL_RCC_OscConfig+0x4b8>)
 8004938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800493a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800493e:	60fb      	str	r3, [r7, #12]
 8004940:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004942:	2301      	movs	r3, #1
 8004944:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004946:	4b79      	ldr	r3, [pc, #484]	@ (8004b2c <HAL_RCC_OscConfig+0x4bc>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800494e:	2b00      	cmp	r3, #0
 8004950:	d118      	bne.n	8004984 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004952:	4b76      	ldr	r3, [pc, #472]	@ (8004b2c <HAL_RCC_OscConfig+0x4bc>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a75      	ldr	r2, [pc, #468]	@ (8004b2c <HAL_RCC_OscConfig+0x4bc>)
 8004958:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800495c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800495e:	f7fd fbdf 	bl	8002120 <HAL_GetTick>
 8004962:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004964:	e008      	b.n	8004978 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004966:	f7fd fbdb 	bl	8002120 <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	2b02      	cmp	r3, #2
 8004972:	d901      	bls.n	8004978 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e183      	b.n	8004c80 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004978:	4b6c      	ldr	r3, [pc, #432]	@ (8004b2c <HAL_RCC_OscConfig+0x4bc>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004980:	2b00      	cmp	r3, #0
 8004982:	d0f0      	beq.n	8004966 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d108      	bne.n	800499e <HAL_RCC_OscConfig+0x32e>
 800498c:	4b66      	ldr	r3, [pc, #408]	@ (8004b28 <HAL_RCC_OscConfig+0x4b8>)
 800498e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004992:	4a65      	ldr	r2, [pc, #404]	@ (8004b28 <HAL_RCC_OscConfig+0x4b8>)
 8004994:	f043 0301 	orr.w	r3, r3, #1
 8004998:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800499c:	e024      	b.n	80049e8 <HAL_RCC_OscConfig+0x378>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	2b05      	cmp	r3, #5
 80049a4:	d110      	bne.n	80049c8 <HAL_RCC_OscConfig+0x358>
 80049a6:	4b60      	ldr	r3, [pc, #384]	@ (8004b28 <HAL_RCC_OscConfig+0x4b8>)
 80049a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ac:	4a5e      	ldr	r2, [pc, #376]	@ (8004b28 <HAL_RCC_OscConfig+0x4b8>)
 80049ae:	f043 0304 	orr.w	r3, r3, #4
 80049b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049b6:	4b5c      	ldr	r3, [pc, #368]	@ (8004b28 <HAL_RCC_OscConfig+0x4b8>)
 80049b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049bc:	4a5a      	ldr	r2, [pc, #360]	@ (8004b28 <HAL_RCC_OscConfig+0x4b8>)
 80049be:	f043 0301 	orr.w	r3, r3, #1
 80049c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049c6:	e00f      	b.n	80049e8 <HAL_RCC_OscConfig+0x378>
 80049c8:	4b57      	ldr	r3, [pc, #348]	@ (8004b28 <HAL_RCC_OscConfig+0x4b8>)
 80049ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ce:	4a56      	ldr	r2, [pc, #344]	@ (8004b28 <HAL_RCC_OscConfig+0x4b8>)
 80049d0:	f023 0301 	bic.w	r3, r3, #1
 80049d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049d8:	4b53      	ldr	r3, [pc, #332]	@ (8004b28 <HAL_RCC_OscConfig+0x4b8>)
 80049da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049de:	4a52      	ldr	r2, [pc, #328]	@ (8004b28 <HAL_RCC_OscConfig+0x4b8>)
 80049e0:	f023 0304 	bic.w	r3, r3, #4
 80049e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d016      	beq.n	8004a1e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049f0:	f7fd fb96 	bl	8002120 <HAL_GetTick>
 80049f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049f6:	e00a      	b.n	8004a0e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049f8:	f7fd fb92 	bl	8002120 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e138      	b.n	8004c80 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a0e:	4b46      	ldr	r3, [pc, #280]	@ (8004b28 <HAL_RCC_OscConfig+0x4b8>)
 8004a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a14:	f003 0302 	and.w	r3, r3, #2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d0ed      	beq.n	80049f8 <HAL_RCC_OscConfig+0x388>
 8004a1c:	e015      	b.n	8004a4a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a1e:	f7fd fb7f 	bl	8002120 <HAL_GetTick>
 8004a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a24:	e00a      	b.n	8004a3c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a26:	f7fd fb7b 	bl	8002120 <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d901      	bls.n	8004a3c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e121      	b.n	8004c80 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a3c:	4b3a      	ldr	r3, [pc, #232]	@ (8004b28 <HAL_RCC_OscConfig+0x4b8>)
 8004a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a42:	f003 0302 	and.w	r3, r3, #2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1ed      	bne.n	8004a26 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a4a:	7ffb      	ldrb	r3, [r7, #31]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d105      	bne.n	8004a5c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a50:	4b35      	ldr	r3, [pc, #212]	@ (8004b28 <HAL_RCC_OscConfig+0x4b8>)
 8004a52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a54:	4a34      	ldr	r2, [pc, #208]	@ (8004b28 <HAL_RCC_OscConfig+0x4b8>)
 8004a56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a5a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0320 	and.w	r3, r3, #32
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d03c      	beq.n	8004ae2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d01c      	beq.n	8004aaa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a70:	4b2d      	ldr	r3, [pc, #180]	@ (8004b28 <HAL_RCC_OscConfig+0x4b8>)
 8004a72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a76:	4a2c      	ldr	r2, [pc, #176]	@ (8004b28 <HAL_RCC_OscConfig+0x4b8>)
 8004a78:	f043 0301 	orr.w	r3, r3, #1
 8004a7c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a80:	f7fd fb4e 	bl	8002120 <HAL_GetTick>
 8004a84:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a86:	e008      	b.n	8004a9a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a88:	f7fd fb4a 	bl	8002120 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d901      	bls.n	8004a9a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e0f2      	b.n	8004c80 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a9a:	4b23      	ldr	r3, [pc, #140]	@ (8004b28 <HAL_RCC_OscConfig+0x4b8>)
 8004a9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004aa0:	f003 0302 	and.w	r3, r3, #2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d0ef      	beq.n	8004a88 <HAL_RCC_OscConfig+0x418>
 8004aa8:	e01b      	b.n	8004ae2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004aaa:	4b1f      	ldr	r3, [pc, #124]	@ (8004b28 <HAL_RCC_OscConfig+0x4b8>)
 8004aac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ab0:	4a1d      	ldr	r2, [pc, #116]	@ (8004b28 <HAL_RCC_OscConfig+0x4b8>)
 8004ab2:	f023 0301 	bic.w	r3, r3, #1
 8004ab6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aba:	f7fd fb31 	bl	8002120 <HAL_GetTick>
 8004abe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ac0:	e008      	b.n	8004ad4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ac2:	f7fd fb2d 	bl	8002120 <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d901      	bls.n	8004ad4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e0d5      	b.n	8004c80 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ad4:	4b14      	ldr	r3, [pc, #80]	@ (8004b28 <HAL_RCC_OscConfig+0x4b8>)
 8004ad6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1ef      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	69db      	ldr	r3, [r3, #28]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f000 80c9 	beq.w	8004c7e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004aec:	4b0e      	ldr	r3, [pc, #56]	@ (8004b28 <HAL_RCC_OscConfig+0x4b8>)
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f003 030c 	and.w	r3, r3, #12
 8004af4:	2b0c      	cmp	r3, #12
 8004af6:	f000 8083 	beq.w	8004c00 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	69db      	ldr	r3, [r3, #28]
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d15e      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b02:	4b09      	ldr	r3, [pc, #36]	@ (8004b28 <HAL_RCC_OscConfig+0x4b8>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a08      	ldr	r2, [pc, #32]	@ (8004b28 <HAL_RCC_OscConfig+0x4b8>)
 8004b08:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b0e:	f7fd fb07 	bl	8002120 <HAL_GetTick>
 8004b12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b14:	e00c      	b.n	8004b30 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b16:	f7fd fb03 	bl	8002120 <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d905      	bls.n	8004b30 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e0ab      	b.n	8004c80 <HAL_RCC_OscConfig+0x610>
 8004b28:	40021000 	.word	0x40021000
 8004b2c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b30:	4b55      	ldr	r3, [pc, #340]	@ (8004c88 <HAL_RCC_OscConfig+0x618>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1ec      	bne.n	8004b16 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b3c:	4b52      	ldr	r3, [pc, #328]	@ (8004c88 <HAL_RCC_OscConfig+0x618>)
 8004b3e:	68da      	ldr	r2, [r3, #12]
 8004b40:	4b52      	ldr	r3, [pc, #328]	@ (8004c8c <HAL_RCC_OscConfig+0x61c>)
 8004b42:	4013      	ands	r3, r2
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	6a11      	ldr	r1, [r2, #32]
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004b4c:	3a01      	subs	r2, #1
 8004b4e:	0112      	lsls	r2, r2, #4
 8004b50:	4311      	orrs	r1, r2
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004b56:	0212      	lsls	r2, r2, #8
 8004b58:	4311      	orrs	r1, r2
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004b5e:	0852      	lsrs	r2, r2, #1
 8004b60:	3a01      	subs	r2, #1
 8004b62:	0552      	lsls	r2, r2, #21
 8004b64:	4311      	orrs	r1, r2
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004b6a:	0852      	lsrs	r2, r2, #1
 8004b6c:	3a01      	subs	r2, #1
 8004b6e:	0652      	lsls	r2, r2, #25
 8004b70:	4311      	orrs	r1, r2
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004b76:	06d2      	lsls	r2, r2, #27
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	4943      	ldr	r1, [pc, #268]	@ (8004c88 <HAL_RCC_OscConfig+0x618>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b80:	4b41      	ldr	r3, [pc, #260]	@ (8004c88 <HAL_RCC_OscConfig+0x618>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a40      	ldr	r2, [pc, #256]	@ (8004c88 <HAL_RCC_OscConfig+0x618>)
 8004b86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b8a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b8c:	4b3e      	ldr	r3, [pc, #248]	@ (8004c88 <HAL_RCC_OscConfig+0x618>)
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	4a3d      	ldr	r2, [pc, #244]	@ (8004c88 <HAL_RCC_OscConfig+0x618>)
 8004b92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b96:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b98:	f7fd fac2 	bl	8002120 <HAL_GetTick>
 8004b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b9e:	e008      	b.n	8004bb2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ba0:	f7fd fabe 	bl	8002120 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e066      	b.n	8004c80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bb2:	4b35      	ldr	r3, [pc, #212]	@ (8004c88 <HAL_RCC_OscConfig+0x618>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d0f0      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x530>
 8004bbe:	e05e      	b.n	8004c7e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bc0:	4b31      	ldr	r3, [pc, #196]	@ (8004c88 <HAL_RCC_OscConfig+0x618>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a30      	ldr	r2, [pc, #192]	@ (8004c88 <HAL_RCC_OscConfig+0x618>)
 8004bc6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bcc:	f7fd faa8 	bl	8002120 <HAL_GetTick>
 8004bd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bd2:	e008      	b.n	8004be6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bd4:	f7fd faa4 	bl	8002120 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e04c      	b.n	8004c80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004be6:	4b28      	ldr	r3, [pc, #160]	@ (8004c88 <HAL_RCC_OscConfig+0x618>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1f0      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004bf2:	4b25      	ldr	r3, [pc, #148]	@ (8004c88 <HAL_RCC_OscConfig+0x618>)
 8004bf4:	68da      	ldr	r2, [r3, #12]
 8004bf6:	4924      	ldr	r1, [pc, #144]	@ (8004c88 <HAL_RCC_OscConfig+0x618>)
 8004bf8:	4b25      	ldr	r3, [pc, #148]	@ (8004c90 <HAL_RCC_OscConfig+0x620>)
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	60cb      	str	r3, [r1, #12]
 8004bfe:	e03e      	b.n	8004c7e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	69db      	ldr	r3, [r3, #28]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d101      	bne.n	8004c0c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e039      	b.n	8004c80 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004c0c:	4b1e      	ldr	r3, [pc, #120]	@ (8004c88 <HAL_RCC_OscConfig+0x618>)
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	f003 0203 	and.w	r2, r3, #3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a1b      	ldr	r3, [r3, #32]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d12c      	bne.n	8004c7a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d123      	bne.n	8004c7a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c3c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d11b      	bne.n	8004c7a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c4c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d113      	bne.n	8004c7a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c5c:	085b      	lsrs	r3, r3, #1
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d109      	bne.n	8004c7a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c70:	085b      	lsrs	r3, r3, #1
 8004c72:	3b01      	subs	r3, #1
 8004c74:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d001      	beq.n	8004c7e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e000      	b.n	8004c80 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3720      	adds	r7, #32
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	40021000 	.word	0x40021000
 8004c8c:	019f800c 	.word	0x019f800c
 8004c90:	feeefffc 	.word	0xfeeefffc

08004c94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b086      	sub	sp, #24
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d101      	bne.n	8004cac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e11e      	b.n	8004eea <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cac:	4b91      	ldr	r3, [pc, #580]	@ (8004ef4 <HAL_RCC_ClockConfig+0x260>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 030f 	and.w	r3, r3, #15
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d910      	bls.n	8004cdc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cba:	4b8e      	ldr	r3, [pc, #568]	@ (8004ef4 <HAL_RCC_ClockConfig+0x260>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f023 020f 	bic.w	r2, r3, #15
 8004cc2:	498c      	ldr	r1, [pc, #560]	@ (8004ef4 <HAL_RCC_ClockConfig+0x260>)
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cca:	4b8a      	ldr	r3, [pc, #552]	@ (8004ef4 <HAL_RCC_ClockConfig+0x260>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 030f 	and.w	r3, r3, #15
 8004cd2:	683a      	ldr	r2, [r7, #0]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d001      	beq.n	8004cdc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e106      	b.n	8004eea <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0301 	and.w	r3, r3, #1
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d073      	beq.n	8004dd0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	2b03      	cmp	r3, #3
 8004cee:	d129      	bne.n	8004d44 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cf0:	4b81      	ldr	r3, [pc, #516]	@ (8004ef8 <HAL_RCC_ClockConfig+0x264>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d101      	bne.n	8004d00 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e0f4      	b.n	8004eea <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004d00:	f000 f99e 	bl	8005040 <RCC_GetSysClockFreqFromPLLSource>
 8004d04:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	4a7c      	ldr	r2, [pc, #496]	@ (8004efc <HAL_RCC_ClockConfig+0x268>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d93f      	bls.n	8004d8e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004d0e:	4b7a      	ldr	r3, [pc, #488]	@ (8004ef8 <HAL_RCC_ClockConfig+0x264>)
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d009      	beq.n	8004d2e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d033      	beq.n	8004d8e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d12f      	bne.n	8004d8e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004d2e:	4b72      	ldr	r3, [pc, #456]	@ (8004ef8 <HAL_RCC_ClockConfig+0x264>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d36:	4a70      	ldr	r2, [pc, #448]	@ (8004ef8 <HAL_RCC_ClockConfig+0x264>)
 8004d38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d3c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004d3e:	2380      	movs	r3, #128	@ 0x80
 8004d40:	617b      	str	r3, [r7, #20]
 8004d42:	e024      	b.n	8004d8e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d107      	bne.n	8004d5c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d4c:	4b6a      	ldr	r3, [pc, #424]	@ (8004ef8 <HAL_RCC_ClockConfig+0x264>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d109      	bne.n	8004d6c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e0c6      	b.n	8004eea <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d5c:	4b66      	ldr	r3, [pc, #408]	@ (8004ef8 <HAL_RCC_ClockConfig+0x264>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d101      	bne.n	8004d6c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e0be      	b.n	8004eea <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004d6c:	f000 f8ce 	bl	8004f0c <HAL_RCC_GetSysClockFreq>
 8004d70:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	4a61      	ldr	r2, [pc, #388]	@ (8004efc <HAL_RCC_ClockConfig+0x268>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d909      	bls.n	8004d8e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004d7a:	4b5f      	ldr	r3, [pc, #380]	@ (8004ef8 <HAL_RCC_ClockConfig+0x264>)
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d82:	4a5d      	ldr	r2, [pc, #372]	@ (8004ef8 <HAL_RCC_ClockConfig+0x264>)
 8004d84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d88:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004d8a:	2380      	movs	r3, #128	@ 0x80
 8004d8c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d8e:	4b5a      	ldr	r3, [pc, #360]	@ (8004ef8 <HAL_RCC_ClockConfig+0x264>)
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f023 0203 	bic.w	r2, r3, #3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	4957      	ldr	r1, [pc, #348]	@ (8004ef8 <HAL_RCC_ClockConfig+0x264>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004da0:	f7fd f9be 	bl	8002120 <HAL_GetTick>
 8004da4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004da6:	e00a      	b.n	8004dbe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004da8:	f7fd f9ba 	bl	8002120 <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d901      	bls.n	8004dbe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e095      	b.n	8004eea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dbe:	4b4e      	ldr	r3, [pc, #312]	@ (8004ef8 <HAL_RCC_ClockConfig+0x264>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f003 020c 	and.w	r2, r3, #12
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d1eb      	bne.n	8004da8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0302 	and.w	r3, r3, #2
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d023      	beq.n	8004e24 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0304 	and.w	r3, r3, #4
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d005      	beq.n	8004df4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004de8:	4b43      	ldr	r3, [pc, #268]	@ (8004ef8 <HAL_RCC_ClockConfig+0x264>)
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	4a42      	ldr	r2, [pc, #264]	@ (8004ef8 <HAL_RCC_ClockConfig+0x264>)
 8004dee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004df2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0308 	and.w	r3, r3, #8
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d007      	beq.n	8004e10 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004e00:	4b3d      	ldr	r3, [pc, #244]	@ (8004ef8 <HAL_RCC_ClockConfig+0x264>)
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004e08:	4a3b      	ldr	r2, [pc, #236]	@ (8004ef8 <HAL_RCC_ClockConfig+0x264>)
 8004e0a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004e0e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e10:	4b39      	ldr	r3, [pc, #228]	@ (8004ef8 <HAL_RCC_ClockConfig+0x264>)
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	4936      	ldr	r1, [pc, #216]	@ (8004ef8 <HAL_RCC_ClockConfig+0x264>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	608b      	str	r3, [r1, #8]
 8004e22:	e008      	b.n	8004e36 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	2b80      	cmp	r3, #128	@ 0x80
 8004e28:	d105      	bne.n	8004e36 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004e2a:	4b33      	ldr	r3, [pc, #204]	@ (8004ef8 <HAL_RCC_ClockConfig+0x264>)
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	4a32      	ldr	r2, [pc, #200]	@ (8004ef8 <HAL_RCC_ClockConfig+0x264>)
 8004e30:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e34:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e36:	4b2f      	ldr	r3, [pc, #188]	@ (8004ef4 <HAL_RCC_ClockConfig+0x260>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 030f 	and.w	r3, r3, #15
 8004e3e:	683a      	ldr	r2, [r7, #0]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d21d      	bcs.n	8004e80 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e44:	4b2b      	ldr	r3, [pc, #172]	@ (8004ef4 <HAL_RCC_ClockConfig+0x260>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f023 020f 	bic.w	r2, r3, #15
 8004e4c:	4929      	ldr	r1, [pc, #164]	@ (8004ef4 <HAL_RCC_ClockConfig+0x260>)
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004e54:	f7fd f964 	bl	8002120 <HAL_GetTick>
 8004e58:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e5a:	e00a      	b.n	8004e72 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e5c:	f7fd f960 	bl	8002120 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d901      	bls.n	8004e72 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e03b      	b.n	8004eea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e72:	4b20      	ldr	r3, [pc, #128]	@ (8004ef4 <HAL_RCC_ClockConfig+0x260>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 030f 	and.w	r3, r3, #15
 8004e7a:	683a      	ldr	r2, [r7, #0]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d1ed      	bne.n	8004e5c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0304 	and.w	r3, r3, #4
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d008      	beq.n	8004e9e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e8c:	4b1a      	ldr	r3, [pc, #104]	@ (8004ef8 <HAL_RCC_ClockConfig+0x264>)
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	4917      	ldr	r1, [pc, #92]	@ (8004ef8 <HAL_RCC_ClockConfig+0x264>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0308 	and.w	r3, r3, #8
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d009      	beq.n	8004ebe <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004eaa:	4b13      	ldr	r3, [pc, #76]	@ (8004ef8 <HAL_RCC_ClockConfig+0x264>)
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	00db      	lsls	r3, r3, #3
 8004eb8:	490f      	ldr	r1, [pc, #60]	@ (8004ef8 <HAL_RCC_ClockConfig+0x264>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ebe:	f000 f825 	bl	8004f0c <HAL_RCC_GetSysClockFreq>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8004ef8 <HAL_RCC_ClockConfig+0x264>)
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	091b      	lsrs	r3, r3, #4
 8004eca:	f003 030f 	and.w	r3, r3, #15
 8004ece:	490c      	ldr	r1, [pc, #48]	@ (8004f00 <HAL_RCC_ClockConfig+0x26c>)
 8004ed0:	5ccb      	ldrb	r3, [r1, r3]
 8004ed2:	f003 031f 	and.w	r3, r3, #31
 8004ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8004eda:	4a0a      	ldr	r2, [pc, #40]	@ (8004f04 <HAL_RCC_ClockConfig+0x270>)
 8004edc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004ede:	4b0a      	ldr	r3, [pc, #40]	@ (8004f08 <HAL_RCC_ClockConfig+0x274>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7fd f8d0 	bl	8002088 <HAL_InitTick>
 8004ee8:	4603      	mov	r3, r0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3718      	adds	r7, #24
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	40022000 	.word	0x40022000
 8004ef8:	40021000 	.word	0x40021000
 8004efc:	04c4b400 	.word	0x04c4b400
 8004f00:	080079e8 	.word	0x080079e8
 8004f04:	20000000 	.word	0x20000000
 8004f08:	20000004 	.word	0x20000004

08004f0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b087      	sub	sp, #28
 8004f10:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004f12:	4b2c      	ldr	r3, [pc, #176]	@ (8004fc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f003 030c 	and.w	r3, r3, #12
 8004f1a:	2b04      	cmp	r3, #4
 8004f1c:	d102      	bne.n	8004f24 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f1e:	4b2a      	ldr	r3, [pc, #168]	@ (8004fc8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004f20:	613b      	str	r3, [r7, #16]
 8004f22:	e047      	b.n	8004fb4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004f24:	4b27      	ldr	r3, [pc, #156]	@ (8004fc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f003 030c 	and.w	r3, r3, #12
 8004f2c:	2b08      	cmp	r3, #8
 8004f2e:	d102      	bne.n	8004f36 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f30:	4b26      	ldr	r3, [pc, #152]	@ (8004fcc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004f32:	613b      	str	r3, [r7, #16]
 8004f34:	e03e      	b.n	8004fb4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004f36:	4b23      	ldr	r3, [pc, #140]	@ (8004fc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f003 030c 	and.w	r3, r3, #12
 8004f3e:	2b0c      	cmp	r3, #12
 8004f40:	d136      	bne.n	8004fb0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f42:	4b20      	ldr	r3, [pc, #128]	@ (8004fc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	f003 0303 	and.w	r3, r3, #3
 8004f4a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f4c:	4b1d      	ldr	r3, [pc, #116]	@ (8004fc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	091b      	lsrs	r3, r3, #4
 8004f52:	f003 030f 	and.w	r3, r3, #15
 8004f56:	3301      	adds	r3, #1
 8004f58:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2b03      	cmp	r3, #3
 8004f5e:	d10c      	bne.n	8004f7a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f60:	4a1a      	ldr	r2, [pc, #104]	@ (8004fcc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f68:	4a16      	ldr	r2, [pc, #88]	@ (8004fc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f6a:	68d2      	ldr	r2, [r2, #12]
 8004f6c:	0a12      	lsrs	r2, r2, #8
 8004f6e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004f72:	fb02 f303 	mul.w	r3, r2, r3
 8004f76:	617b      	str	r3, [r7, #20]
      break;
 8004f78:	e00c      	b.n	8004f94 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f7a:	4a13      	ldr	r2, [pc, #76]	@ (8004fc8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f82:	4a10      	ldr	r2, [pc, #64]	@ (8004fc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f84:	68d2      	ldr	r2, [r2, #12]
 8004f86:	0a12      	lsrs	r2, r2, #8
 8004f88:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004f8c:	fb02 f303 	mul.w	r3, r2, r3
 8004f90:	617b      	str	r3, [r7, #20]
      break;
 8004f92:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f94:	4b0b      	ldr	r3, [pc, #44]	@ (8004fc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	0e5b      	lsrs	r3, r3, #25
 8004f9a:	f003 0303 	and.w	r3, r3, #3
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	005b      	lsls	r3, r3, #1
 8004fa2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004fa4:	697a      	ldr	r2, [r7, #20]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fac:	613b      	str	r3, [r7, #16]
 8004fae:	e001      	b.n	8004fb4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004fb4:	693b      	ldr	r3, [r7, #16]
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	371c      	adds	r7, #28
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	40021000 	.word	0x40021000
 8004fc8:	00f42400 	.word	0x00f42400
 8004fcc:	016e3600 	.word	0x016e3600

08004fd0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fd4:	4b03      	ldr	r3, [pc, #12]	@ (8004fe4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	20000000 	.word	0x20000000

08004fe8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004fec:	f7ff fff0 	bl	8004fd0 <HAL_RCC_GetHCLKFreq>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	4b06      	ldr	r3, [pc, #24]	@ (800500c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	0a1b      	lsrs	r3, r3, #8
 8004ff8:	f003 0307 	and.w	r3, r3, #7
 8004ffc:	4904      	ldr	r1, [pc, #16]	@ (8005010 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ffe:	5ccb      	ldrb	r3, [r1, r3]
 8005000:	f003 031f 	and.w	r3, r3, #31
 8005004:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005008:	4618      	mov	r0, r3
 800500a:	bd80      	pop	{r7, pc}
 800500c:	40021000 	.word	0x40021000
 8005010:	080079f8 	.word	0x080079f8

08005014 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005018:	f7ff ffda 	bl	8004fd0 <HAL_RCC_GetHCLKFreq>
 800501c:	4602      	mov	r2, r0
 800501e:	4b06      	ldr	r3, [pc, #24]	@ (8005038 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	0adb      	lsrs	r3, r3, #11
 8005024:	f003 0307 	and.w	r3, r3, #7
 8005028:	4904      	ldr	r1, [pc, #16]	@ (800503c <HAL_RCC_GetPCLK2Freq+0x28>)
 800502a:	5ccb      	ldrb	r3, [r1, r3]
 800502c:	f003 031f 	and.w	r3, r3, #31
 8005030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005034:	4618      	mov	r0, r3
 8005036:	bd80      	pop	{r7, pc}
 8005038:	40021000 	.word	0x40021000
 800503c:	080079f8 	.word	0x080079f8

08005040 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005040:	b480      	push	{r7}
 8005042:	b087      	sub	sp, #28
 8005044:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005046:	4b1e      	ldr	r3, [pc, #120]	@ (80050c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	f003 0303 	and.w	r3, r3, #3
 800504e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005050:	4b1b      	ldr	r3, [pc, #108]	@ (80050c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	091b      	lsrs	r3, r3, #4
 8005056:	f003 030f 	and.w	r3, r3, #15
 800505a:	3301      	adds	r3, #1
 800505c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	2b03      	cmp	r3, #3
 8005062:	d10c      	bne.n	800507e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005064:	4a17      	ldr	r2, [pc, #92]	@ (80050c4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	fbb2 f3f3 	udiv	r3, r2, r3
 800506c:	4a14      	ldr	r2, [pc, #80]	@ (80050c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800506e:	68d2      	ldr	r2, [r2, #12]
 8005070:	0a12      	lsrs	r2, r2, #8
 8005072:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005076:	fb02 f303 	mul.w	r3, r2, r3
 800507a:	617b      	str	r3, [r7, #20]
    break;
 800507c:	e00c      	b.n	8005098 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800507e:	4a12      	ldr	r2, [pc, #72]	@ (80050c8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	fbb2 f3f3 	udiv	r3, r2, r3
 8005086:	4a0e      	ldr	r2, [pc, #56]	@ (80050c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005088:	68d2      	ldr	r2, [r2, #12]
 800508a:	0a12      	lsrs	r2, r2, #8
 800508c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005090:	fb02 f303 	mul.w	r3, r2, r3
 8005094:	617b      	str	r3, [r7, #20]
    break;
 8005096:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005098:	4b09      	ldr	r3, [pc, #36]	@ (80050c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	0e5b      	lsrs	r3, r3, #25
 800509e:	f003 0303 	and.w	r3, r3, #3
 80050a2:	3301      	adds	r3, #1
 80050a4:	005b      	lsls	r3, r3, #1
 80050a6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80050a8:	697a      	ldr	r2, [r7, #20]
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80050b2:	687b      	ldr	r3, [r7, #4]
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	371c      	adds	r7, #28
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr
 80050c0:	40021000 	.word	0x40021000
 80050c4:	016e3600 	.word	0x016e3600
 80050c8:	00f42400 	.word	0x00f42400

080050cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b086      	sub	sp, #24
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80050d4:	2300      	movs	r3, #0
 80050d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80050d8:	2300      	movs	r3, #0
 80050da:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	f000 8098 	beq.w	800521a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050ea:	2300      	movs	r3, #0
 80050ec:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050ee:	4b43      	ldr	r3, [pc, #268]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10d      	bne.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050fa:	4b40      	ldr	r3, [pc, #256]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050fe:	4a3f      	ldr	r2, [pc, #252]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005100:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005104:	6593      	str	r3, [r2, #88]	@ 0x58
 8005106:	4b3d      	ldr	r3, [pc, #244]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800510a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800510e:	60bb      	str	r3, [r7, #8]
 8005110:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005112:	2301      	movs	r3, #1
 8005114:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005116:	4b3a      	ldr	r3, [pc, #232]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a39      	ldr	r2, [pc, #228]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800511c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005120:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005122:	f7fc fffd 	bl	8002120 <HAL_GetTick>
 8005126:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005128:	e009      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800512a:	f7fc fff9 	bl	8002120 <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	2b02      	cmp	r3, #2
 8005136:	d902      	bls.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	74fb      	strb	r3, [r7, #19]
        break;
 800513c:	e005      	b.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800513e:	4b30      	ldr	r3, [pc, #192]	@ (8005200 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005146:	2b00      	cmp	r3, #0
 8005148:	d0ef      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800514a:	7cfb      	ldrb	r3, [r7, #19]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d159      	bne.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005150:	4b2a      	ldr	r3, [pc, #168]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005156:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800515a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d01e      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	429a      	cmp	r2, r3
 800516a:	d019      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800516c:	4b23      	ldr	r3, [pc, #140]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800516e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005172:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005176:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005178:	4b20      	ldr	r3, [pc, #128]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800517a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800517e:	4a1f      	ldr	r2, [pc, #124]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005180:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005184:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005188:	4b1c      	ldr	r3, [pc, #112]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800518a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800518e:	4a1b      	ldr	r2, [pc, #108]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005190:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005194:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005198:	4a18      	ldr	r2, [pc, #96]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d016      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051aa:	f7fc ffb9 	bl	8002120 <HAL_GetTick>
 80051ae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051b0:	e00b      	b.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051b2:	f7fc ffb5 	bl	8002120 <HAL_GetTick>
 80051b6:	4602      	mov	r2, r0
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d902      	bls.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	74fb      	strb	r3, [r7, #19]
            break;
 80051c8:	e006      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051ca:	4b0c      	ldr	r3, [pc, #48]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051d0:	f003 0302 	and.w	r3, r3, #2
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d0ec      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80051d8:	7cfb      	ldrb	r3, [r7, #19]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d10b      	bne.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051de:	4b07      	ldr	r3, [pc, #28]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051ec:	4903      	ldr	r1, [pc, #12]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80051f4:	e008      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80051f6:	7cfb      	ldrb	r3, [r7, #19]
 80051f8:	74bb      	strb	r3, [r7, #18]
 80051fa:	e005      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80051fc:	40021000 	.word	0x40021000
 8005200:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005204:	7cfb      	ldrb	r3, [r7, #19]
 8005206:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005208:	7c7b      	ldrb	r3, [r7, #17]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d105      	bne.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800520e:	4ba7      	ldr	r3, [pc, #668]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005212:	4aa6      	ldr	r2, [pc, #664]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005214:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005218:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0301 	and.w	r3, r3, #1
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00a      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005226:	4ba1      	ldr	r3, [pc, #644]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005228:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800522c:	f023 0203 	bic.w	r2, r3, #3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	499d      	ldr	r1, [pc, #628]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005236:	4313      	orrs	r3, r2
 8005238:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0302 	and.w	r3, r3, #2
 8005244:	2b00      	cmp	r3, #0
 8005246:	d00a      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005248:	4b98      	ldr	r3, [pc, #608]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800524a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800524e:	f023 020c 	bic.w	r2, r3, #12
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	4995      	ldr	r1, [pc, #596]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005258:	4313      	orrs	r3, r2
 800525a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0304 	and.w	r3, r3, #4
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00a      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800526a:	4b90      	ldr	r3, [pc, #576]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800526c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005270:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	498c      	ldr	r1, [pc, #560]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800527a:	4313      	orrs	r3, r2
 800527c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0308 	and.w	r3, r3, #8
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00a      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800528c:	4b87      	ldr	r3, [pc, #540]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800528e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005292:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	4984      	ldr	r1, [pc, #528]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800529c:	4313      	orrs	r3, r2
 800529e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0310 	and.w	r3, r3, #16
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00a      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80052ae:	4b7f      	ldr	r3, [pc, #508]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	695b      	ldr	r3, [r3, #20]
 80052bc:	497b      	ldr	r1, [pc, #492]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052be:	4313      	orrs	r3, r2
 80052c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0320 	and.w	r3, r3, #32
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00a      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80052d0:	4b76      	ldr	r3, [pc, #472]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052d6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	4973      	ldr	r1, [pc, #460]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00a      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052f2:	4b6e      	ldr	r3, [pc, #440]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052f8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	69db      	ldr	r3, [r3, #28]
 8005300:	496a      	ldr	r1, [pc, #424]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005302:	4313      	orrs	r3, r2
 8005304:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005310:	2b00      	cmp	r3, #0
 8005312:	d00a      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005314:	4b65      	ldr	r3, [pc, #404]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800531a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	4962      	ldr	r1, [pc, #392]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005324:	4313      	orrs	r3, r2
 8005326:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00a      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005336:	4b5d      	ldr	r3, [pc, #372]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005338:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800533c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005344:	4959      	ldr	r1, [pc, #356]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005346:	4313      	orrs	r3, r2
 8005348:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005354:	2b00      	cmp	r3, #0
 8005356:	d00a      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005358:	4b54      	ldr	r3, [pc, #336]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800535a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800535e:	f023 0203 	bic.w	r2, r3, #3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005366:	4951      	ldr	r1, [pc, #324]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005368:	4313      	orrs	r3, r2
 800536a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00a      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800537a:	4b4c      	ldr	r3, [pc, #304]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800537c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005380:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005388:	4948      	ldr	r1, [pc, #288]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800538a:	4313      	orrs	r3, r2
 800538c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005398:	2b00      	cmp	r3, #0
 800539a:	d015      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800539c:	4b43      	ldr	r3, [pc, #268]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800539e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053aa:	4940      	ldr	r1, [pc, #256]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053ac:	4313      	orrs	r3, r2
 80053ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053ba:	d105      	bne.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053bc:	4b3b      	ldr	r3, [pc, #236]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	4a3a      	ldr	r2, [pc, #232]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053c6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d015      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80053d4:	4b35      	ldr	r3, [pc, #212]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053da:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053e2:	4932      	ldr	r1, [pc, #200]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053f2:	d105      	bne.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053f4:	4b2d      	ldr	r3, [pc, #180]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	4a2c      	ldr	r2, [pc, #176]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053fe:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d015      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800540c:	4b27      	ldr	r3, [pc, #156]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800540e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005412:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800541a:	4924      	ldr	r1, [pc, #144]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800541c:	4313      	orrs	r3, r2
 800541e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005426:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800542a:	d105      	bne.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800542c:	4b1f      	ldr	r3, [pc, #124]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	4a1e      	ldr	r2, [pc, #120]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005432:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005436:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005440:	2b00      	cmp	r3, #0
 8005442:	d015      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005444:	4b19      	ldr	r3, [pc, #100]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005446:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800544a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005452:	4916      	ldr	r1, [pc, #88]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005454:	4313      	orrs	r3, r2
 8005456:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800545e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005462:	d105      	bne.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005464:	4b11      	ldr	r3, [pc, #68]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	4a10      	ldr	r2, [pc, #64]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800546a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800546e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005478:	2b00      	cmp	r3, #0
 800547a:	d019      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800547c:	4b0b      	ldr	r3, [pc, #44]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800547e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005482:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800548a:	4908      	ldr	r1, [pc, #32]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800548c:	4313      	orrs	r3, r2
 800548e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005496:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800549a:	d109      	bne.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800549c:	4b03      	ldr	r3, [pc, #12]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	4a02      	ldr	r2, [pc, #8]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054a6:	60d3      	str	r3, [r2, #12]
 80054a8:	e002      	b.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80054aa:	bf00      	nop
 80054ac:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d015      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80054bc:	4b29      	ldr	r3, [pc, #164]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80054be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054c2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ca:	4926      	ldr	r1, [pc, #152]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80054da:	d105      	bne.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80054dc:	4b21      	ldr	r3, [pc, #132]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	4a20      	ldr	r2, [pc, #128]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80054e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054e6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d015      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80054f4:	4b1b      	ldr	r3, [pc, #108]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80054f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054fa:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005502:	4918      	ldr	r1, [pc, #96]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005504:	4313      	orrs	r3, r2
 8005506:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800550e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005512:	d105      	bne.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005514:	4b13      	ldr	r3, [pc, #76]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	4a12      	ldr	r2, [pc, #72]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800551a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800551e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005528:	2b00      	cmp	r3, #0
 800552a:	d015      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800552c:	4b0d      	ldr	r3, [pc, #52]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800552e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005532:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800553a:	490a      	ldr	r1, [pc, #40]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800553c:	4313      	orrs	r3, r2
 800553e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005546:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800554a:	d105      	bne.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800554c:	4b05      	ldr	r3, [pc, #20]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	4a04      	ldr	r2, [pc, #16]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005552:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005556:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005558:	7cbb      	ldrb	r3, [r7, #18]
}
 800555a:	4618      	mov	r0, r3
 800555c:	3718      	adds	r7, #24
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	40021000 	.word	0x40021000

08005568 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d101      	bne.n	800557a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e049      	b.n	800560e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005580:	b2db      	uxtb	r3, r3
 8005582:	2b00      	cmp	r3, #0
 8005584:	d106      	bne.n	8005594 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f7fc fc10 	bl	8001db4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2202      	movs	r2, #2
 8005598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	3304      	adds	r3, #4
 80055a4:	4619      	mov	r1, r3
 80055a6:	4610      	mov	r0, r2
 80055a8:	f000 fd78 	bl	800609c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3708      	adds	r7, #8
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
	...

08005618 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005618:	b480      	push	{r7}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005626:	b2db      	uxtb	r3, r3
 8005628:	2b01      	cmp	r3, #1
 800562a:	d001      	beq.n	8005630 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e04c      	b.n	80056ca <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2202      	movs	r2, #2
 8005634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a26      	ldr	r2, [pc, #152]	@ (80056d8 <HAL_TIM_Base_Start+0xc0>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d022      	beq.n	8005688 <HAL_TIM_Base_Start+0x70>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800564a:	d01d      	beq.n	8005688 <HAL_TIM_Base_Start+0x70>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a22      	ldr	r2, [pc, #136]	@ (80056dc <HAL_TIM_Base_Start+0xc4>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d018      	beq.n	8005688 <HAL_TIM_Base_Start+0x70>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a21      	ldr	r2, [pc, #132]	@ (80056e0 <HAL_TIM_Base_Start+0xc8>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d013      	beq.n	8005688 <HAL_TIM_Base_Start+0x70>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a1f      	ldr	r2, [pc, #124]	@ (80056e4 <HAL_TIM_Base_Start+0xcc>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d00e      	beq.n	8005688 <HAL_TIM_Base_Start+0x70>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a1e      	ldr	r2, [pc, #120]	@ (80056e8 <HAL_TIM_Base_Start+0xd0>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d009      	beq.n	8005688 <HAL_TIM_Base_Start+0x70>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a1c      	ldr	r2, [pc, #112]	@ (80056ec <HAL_TIM_Base_Start+0xd4>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d004      	beq.n	8005688 <HAL_TIM_Base_Start+0x70>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a1b      	ldr	r2, [pc, #108]	@ (80056f0 <HAL_TIM_Base_Start+0xd8>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d115      	bne.n	80056b4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	689a      	ldr	r2, [r3, #8]
 800568e:	4b19      	ldr	r3, [pc, #100]	@ (80056f4 <HAL_TIM_Base_Start+0xdc>)
 8005690:	4013      	ands	r3, r2
 8005692:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2b06      	cmp	r3, #6
 8005698:	d015      	beq.n	80056c6 <HAL_TIM_Base_Start+0xae>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056a0:	d011      	beq.n	80056c6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f042 0201 	orr.w	r2, r2, #1
 80056b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056b2:	e008      	b.n	80056c6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f042 0201 	orr.w	r2, r2, #1
 80056c2:	601a      	str	r2, [r3, #0]
 80056c4:	e000      	b.n	80056c8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3714      	adds	r7, #20
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop
 80056d8:	40012c00 	.word	0x40012c00
 80056dc:	40000400 	.word	0x40000400
 80056e0:	40000800 	.word	0x40000800
 80056e4:	40000c00 	.word	0x40000c00
 80056e8:	40013400 	.word	0x40013400
 80056ec:	40014000 	.word	0x40014000
 80056f0:	40015000 	.word	0x40015000
 80056f4:	00010007 	.word	0x00010007

080056f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d101      	bne.n	800570a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e049      	b.n	800579e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b00      	cmp	r3, #0
 8005714:	d106      	bne.n	8005724 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 f841 	bl	80057a6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2202      	movs	r2, #2
 8005728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	3304      	adds	r3, #4
 8005734:	4619      	mov	r1, r3
 8005736:	4610      	mov	r0, r2
 8005738:	f000 fcb0 	bl	800609c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3708      	adds	r7, #8
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80057a6:	b480      	push	{r7}
 80057a8:	b083      	sub	sp, #12
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80057ae:	bf00      	nop
 80057b0:	370c      	adds	r7, #12
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
	...

080057bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d109      	bne.n	80057e0 <HAL_TIM_PWM_Start+0x24>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	bf14      	ite	ne
 80057d8:	2301      	movne	r3, #1
 80057da:	2300      	moveq	r3, #0
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	e03c      	b.n	800585a <HAL_TIM_PWM_Start+0x9e>
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	2b04      	cmp	r3, #4
 80057e4:	d109      	bne.n	80057fa <HAL_TIM_PWM_Start+0x3e>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	bf14      	ite	ne
 80057f2:	2301      	movne	r3, #1
 80057f4:	2300      	moveq	r3, #0
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	e02f      	b.n	800585a <HAL_TIM_PWM_Start+0x9e>
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	2b08      	cmp	r3, #8
 80057fe:	d109      	bne.n	8005814 <HAL_TIM_PWM_Start+0x58>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005806:	b2db      	uxtb	r3, r3
 8005808:	2b01      	cmp	r3, #1
 800580a:	bf14      	ite	ne
 800580c:	2301      	movne	r3, #1
 800580e:	2300      	moveq	r3, #0
 8005810:	b2db      	uxtb	r3, r3
 8005812:	e022      	b.n	800585a <HAL_TIM_PWM_Start+0x9e>
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	2b0c      	cmp	r3, #12
 8005818:	d109      	bne.n	800582e <HAL_TIM_PWM_Start+0x72>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005820:	b2db      	uxtb	r3, r3
 8005822:	2b01      	cmp	r3, #1
 8005824:	bf14      	ite	ne
 8005826:	2301      	movne	r3, #1
 8005828:	2300      	moveq	r3, #0
 800582a:	b2db      	uxtb	r3, r3
 800582c:	e015      	b.n	800585a <HAL_TIM_PWM_Start+0x9e>
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	2b10      	cmp	r3, #16
 8005832:	d109      	bne.n	8005848 <HAL_TIM_PWM_Start+0x8c>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800583a:	b2db      	uxtb	r3, r3
 800583c:	2b01      	cmp	r3, #1
 800583e:	bf14      	ite	ne
 8005840:	2301      	movne	r3, #1
 8005842:	2300      	moveq	r3, #0
 8005844:	b2db      	uxtb	r3, r3
 8005846:	e008      	b.n	800585a <HAL_TIM_PWM_Start+0x9e>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800584e:	b2db      	uxtb	r3, r3
 8005850:	2b01      	cmp	r3, #1
 8005852:	bf14      	ite	ne
 8005854:	2301      	movne	r3, #1
 8005856:	2300      	moveq	r3, #0
 8005858:	b2db      	uxtb	r3, r3
 800585a:	2b00      	cmp	r3, #0
 800585c:	d001      	beq.n	8005862 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e0a6      	b.n	80059b0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d104      	bne.n	8005872 <HAL_TIM_PWM_Start+0xb6>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2202      	movs	r2, #2
 800586c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005870:	e023      	b.n	80058ba <HAL_TIM_PWM_Start+0xfe>
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	2b04      	cmp	r3, #4
 8005876:	d104      	bne.n	8005882 <HAL_TIM_PWM_Start+0xc6>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2202      	movs	r2, #2
 800587c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005880:	e01b      	b.n	80058ba <HAL_TIM_PWM_Start+0xfe>
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	2b08      	cmp	r3, #8
 8005886:	d104      	bne.n	8005892 <HAL_TIM_PWM_Start+0xd6>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2202      	movs	r2, #2
 800588c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005890:	e013      	b.n	80058ba <HAL_TIM_PWM_Start+0xfe>
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	2b0c      	cmp	r3, #12
 8005896:	d104      	bne.n	80058a2 <HAL_TIM_PWM_Start+0xe6>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2202      	movs	r2, #2
 800589c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80058a0:	e00b      	b.n	80058ba <HAL_TIM_PWM_Start+0xfe>
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	2b10      	cmp	r3, #16
 80058a6:	d104      	bne.n	80058b2 <HAL_TIM_PWM_Start+0xf6>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2202      	movs	r2, #2
 80058ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058b0:	e003      	b.n	80058ba <HAL_TIM_PWM_Start+0xfe>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2202      	movs	r2, #2
 80058b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2201      	movs	r2, #1
 80058c0:	6839      	ldr	r1, [r7, #0]
 80058c2:	4618      	mov	r0, r3
 80058c4:	f001 f864 	bl	8006990 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a3a      	ldr	r2, [pc, #232]	@ (80059b8 <HAL_TIM_PWM_Start+0x1fc>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d018      	beq.n	8005904 <HAL_TIM_PWM_Start+0x148>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a39      	ldr	r2, [pc, #228]	@ (80059bc <HAL_TIM_PWM_Start+0x200>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d013      	beq.n	8005904 <HAL_TIM_PWM_Start+0x148>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a37      	ldr	r2, [pc, #220]	@ (80059c0 <HAL_TIM_PWM_Start+0x204>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d00e      	beq.n	8005904 <HAL_TIM_PWM_Start+0x148>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a36      	ldr	r2, [pc, #216]	@ (80059c4 <HAL_TIM_PWM_Start+0x208>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d009      	beq.n	8005904 <HAL_TIM_PWM_Start+0x148>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a34      	ldr	r2, [pc, #208]	@ (80059c8 <HAL_TIM_PWM_Start+0x20c>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d004      	beq.n	8005904 <HAL_TIM_PWM_Start+0x148>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a33      	ldr	r2, [pc, #204]	@ (80059cc <HAL_TIM_PWM_Start+0x210>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d101      	bne.n	8005908 <HAL_TIM_PWM_Start+0x14c>
 8005904:	2301      	movs	r3, #1
 8005906:	e000      	b.n	800590a <HAL_TIM_PWM_Start+0x14e>
 8005908:	2300      	movs	r3, #0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d007      	beq.n	800591e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800591c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a25      	ldr	r2, [pc, #148]	@ (80059b8 <HAL_TIM_PWM_Start+0x1fc>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d022      	beq.n	800596e <HAL_TIM_PWM_Start+0x1b2>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005930:	d01d      	beq.n	800596e <HAL_TIM_PWM_Start+0x1b2>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a26      	ldr	r2, [pc, #152]	@ (80059d0 <HAL_TIM_PWM_Start+0x214>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d018      	beq.n	800596e <HAL_TIM_PWM_Start+0x1b2>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a24      	ldr	r2, [pc, #144]	@ (80059d4 <HAL_TIM_PWM_Start+0x218>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d013      	beq.n	800596e <HAL_TIM_PWM_Start+0x1b2>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a23      	ldr	r2, [pc, #140]	@ (80059d8 <HAL_TIM_PWM_Start+0x21c>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d00e      	beq.n	800596e <HAL_TIM_PWM_Start+0x1b2>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a19      	ldr	r2, [pc, #100]	@ (80059bc <HAL_TIM_PWM_Start+0x200>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d009      	beq.n	800596e <HAL_TIM_PWM_Start+0x1b2>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a18      	ldr	r2, [pc, #96]	@ (80059c0 <HAL_TIM_PWM_Start+0x204>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d004      	beq.n	800596e <HAL_TIM_PWM_Start+0x1b2>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a18      	ldr	r2, [pc, #96]	@ (80059cc <HAL_TIM_PWM_Start+0x210>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d115      	bne.n	800599a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	689a      	ldr	r2, [r3, #8]
 8005974:	4b19      	ldr	r3, [pc, #100]	@ (80059dc <HAL_TIM_PWM_Start+0x220>)
 8005976:	4013      	ands	r3, r2
 8005978:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2b06      	cmp	r3, #6
 800597e:	d015      	beq.n	80059ac <HAL_TIM_PWM_Start+0x1f0>
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005986:	d011      	beq.n	80059ac <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f042 0201 	orr.w	r2, r2, #1
 8005996:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005998:	e008      	b.n	80059ac <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f042 0201 	orr.w	r2, r2, #1
 80059a8:	601a      	str	r2, [r3, #0]
 80059aa:	e000      	b.n	80059ae <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3710      	adds	r7, #16
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	40012c00 	.word	0x40012c00
 80059bc:	40013400 	.word	0x40013400
 80059c0:	40014000 	.word	0x40014000
 80059c4:	40014400 	.word	0x40014400
 80059c8:	40014800 	.word	0x40014800
 80059cc:	40015000 	.word	0x40015000
 80059d0:	40000400 	.word	0x40000400
 80059d4:	40000800 	.word	0x40000800
 80059d8:	40000c00 	.word	0x40000c00
 80059dc:	00010007 	.word	0x00010007

080059e0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b086      	sub	sp, #24
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d101      	bne.n	80059f4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e097      	b.n	8005b24 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d106      	bne.n	8005a0e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f7fc fa07 	bl	8001e1c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2202      	movs	r2, #2
 8005a12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	6812      	ldr	r2, [r2, #0]
 8005a20:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005a24:	f023 0307 	bic.w	r3, r3, #7
 8005a28:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	3304      	adds	r3, #4
 8005a32:	4619      	mov	r1, r3
 8005a34:	4610      	mov	r0, r2
 8005a36:	f000 fb31 	bl	800609c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	6a1b      	ldr	r3, [r3, #32]
 8005a50:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	697a      	ldr	r2, [r7, #20]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a62:	f023 0303 	bic.w	r3, r3, #3
 8005a66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	689a      	ldr	r2, [r3, #8]
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	699b      	ldr	r3, [r3, #24]
 8005a70:	021b      	lsls	r3, r3, #8
 8005a72:	4313      	orrs	r3, r2
 8005a74:	693a      	ldr	r2, [r7, #16]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005a80:	f023 030c 	bic.w	r3, r3, #12
 8005a84:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005a8c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	68da      	ldr	r2, [r3, #12]
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	69db      	ldr	r3, [r3, #28]
 8005a9a:	021b      	lsls	r3, r3, #8
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	693a      	ldr	r2, [r7, #16]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	011a      	lsls	r2, r3, #4
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	031b      	lsls	r3, r3, #12
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	693a      	ldr	r2, [r7, #16]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005abe:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005ac6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	685a      	ldr	r2, [r3, #4]
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	695b      	ldr	r3, [r3, #20]
 8005ad0:	011b      	lsls	r3, r3, #4
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	697a      	ldr	r2, [r7, #20]
 8005ae0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	693a      	ldr	r2, [r7, #16]
 8005ae8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2201      	movs	r2, #1
 8005af6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2201      	movs	r2, #1
 8005b06:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2201      	movs	r2, #1
 8005b16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b22:	2300      	movs	r3, #0
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3718      	adds	r7, #24
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b3c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005b44:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b4c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b54:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d110      	bne.n	8005b7e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b5c:	7bfb      	ldrb	r3, [r7, #15]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d102      	bne.n	8005b68 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b62:	7b7b      	ldrb	r3, [r7, #13]
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d001      	beq.n	8005b6c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e069      	b.n	8005c40 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2202      	movs	r2, #2
 8005b70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2202      	movs	r2, #2
 8005b78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b7c:	e031      	b.n	8005be2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	2b04      	cmp	r3, #4
 8005b82:	d110      	bne.n	8005ba6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b84:	7bbb      	ldrb	r3, [r7, #14]
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d102      	bne.n	8005b90 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b8a:	7b3b      	ldrb	r3, [r7, #12]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d001      	beq.n	8005b94 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e055      	b.n	8005c40 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2202      	movs	r2, #2
 8005b98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2202      	movs	r2, #2
 8005ba0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ba4:	e01d      	b.n	8005be2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ba6:	7bfb      	ldrb	r3, [r7, #15]
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d108      	bne.n	8005bbe <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bac:	7bbb      	ldrb	r3, [r7, #14]
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d105      	bne.n	8005bbe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bb2:	7b7b      	ldrb	r3, [r7, #13]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d102      	bne.n	8005bbe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005bb8:	7b3b      	ldrb	r3, [r7, #12]
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d001      	beq.n	8005bc2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e03e      	b.n	8005c40 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2202      	movs	r2, #2
 8005bc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2202      	movs	r2, #2
 8005bce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2202      	movs	r2, #2
 8005bd6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2202      	movs	r2, #2
 8005bde:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d003      	beq.n	8005bf0 <HAL_TIM_Encoder_Start+0xc4>
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	2b04      	cmp	r3, #4
 8005bec:	d008      	beq.n	8005c00 <HAL_TIM_Encoder_Start+0xd4>
 8005bee:	e00f      	b.n	8005c10 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	2100      	movs	r1, #0
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f000 fec9 	bl	8006990 <TIM_CCxChannelCmd>
      break;
 8005bfe:	e016      	b.n	8005c2e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2201      	movs	r2, #1
 8005c06:	2104      	movs	r1, #4
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f000 fec1 	bl	8006990 <TIM_CCxChannelCmd>
      break;
 8005c0e:	e00e      	b.n	8005c2e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2201      	movs	r2, #1
 8005c16:	2100      	movs	r1, #0
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f000 feb9 	bl	8006990 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2201      	movs	r2, #1
 8005c24:	2104      	movs	r1, #4
 8005c26:	4618      	mov	r0, r3
 8005c28:	f000 feb2 	bl	8006990 <TIM_CCxChannelCmd>
      break;
 8005c2c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f042 0201 	orr.w	r2, r2, #1
 8005c3c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3710      	adds	r7, #16
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b086      	sub	sp, #24
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c54:	2300      	movs	r3, #0
 8005c56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d101      	bne.n	8005c66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c62:	2302      	movs	r3, #2
 8005c64:	e0ff      	b.n	8005e66 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2b14      	cmp	r3, #20
 8005c72:	f200 80f0 	bhi.w	8005e56 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005c76:	a201      	add	r2, pc, #4	@ (adr r2, 8005c7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c7c:	08005cd1 	.word	0x08005cd1
 8005c80:	08005e57 	.word	0x08005e57
 8005c84:	08005e57 	.word	0x08005e57
 8005c88:	08005e57 	.word	0x08005e57
 8005c8c:	08005d11 	.word	0x08005d11
 8005c90:	08005e57 	.word	0x08005e57
 8005c94:	08005e57 	.word	0x08005e57
 8005c98:	08005e57 	.word	0x08005e57
 8005c9c:	08005d53 	.word	0x08005d53
 8005ca0:	08005e57 	.word	0x08005e57
 8005ca4:	08005e57 	.word	0x08005e57
 8005ca8:	08005e57 	.word	0x08005e57
 8005cac:	08005d93 	.word	0x08005d93
 8005cb0:	08005e57 	.word	0x08005e57
 8005cb4:	08005e57 	.word	0x08005e57
 8005cb8:	08005e57 	.word	0x08005e57
 8005cbc:	08005dd5 	.word	0x08005dd5
 8005cc0:	08005e57 	.word	0x08005e57
 8005cc4:	08005e57 	.word	0x08005e57
 8005cc8:	08005e57 	.word	0x08005e57
 8005ccc:	08005e15 	.word	0x08005e15
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68b9      	ldr	r1, [r7, #8]
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f000 fa94 	bl	8006204 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	699a      	ldr	r2, [r3, #24]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f042 0208 	orr.w	r2, r2, #8
 8005cea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	699a      	ldr	r2, [r3, #24]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f022 0204 	bic.w	r2, r2, #4
 8005cfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	6999      	ldr	r1, [r3, #24]
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	691a      	ldr	r2, [r3, #16]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	430a      	orrs	r2, r1
 8005d0c:	619a      	str	r2, [r3, #24]
      break;
 8005d0e:	e0a5      	b.n	8005e5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68b9      	ldr	r1, [r7, #8]
 8005d16:	4618      	mov	r0, r3
 8005d18:	f000 fb0e 	bl	8006338 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	699a      	ldr	r2, [r3, #24]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	699a      	ldr	r2, [r3, #24]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	6999      	ldr	r1, [r3, #24]
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	021a      	lsls	r2, r3, #8
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	430a      	orrs	r2, r1
 8005d4e:	619a      	str	r2, [r3, #24]
      break;
 8005d50:	e084      	b.n	8005e5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68b9      	ldr	r1, [r7, #8]
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f000 fb81 	bl	8006460 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	69da      	ldr	r2, [r3, #28]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f042 0208 	orr.w	r2, r2, #8
 8005d6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	69da      	ldr	r2, [r3, #28]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f022 0204 	bic.w	r2, r2, #4
 8005d7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	69d9      	ldr	r1, [r3, #28]
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	691a      	ldr	r2, [r3, #16]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	430a      	orrs	r2, r1
 8005d8e:	61da      	str	r2, [r3, #28]
      break;
 8005d90:	e064      	b.n	8005e5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	68b9      	ldr	r1, [r7, #8]
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f000 fbf3 	bl	8006584 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	69da      	ldr	r2, [r3, #28]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005dac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	69da      	ldr	r2, [r3, #28]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005dbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	69d9      	ldr	r1, [r3, #28]
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	021a      	lsls	r2, r3, #8
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	430a      	orrs	r2, r1
 8005dd0:	61da      	str	r2, [r3, #28]
      break;
 8005dd2:	e043      	b.n	8005e5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68b9      	ldr	r1, [r7, #8]
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f000 fc66 	bl	80066ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f042 0208 	orr.w	r2, r2, #8
 8005dee:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f022 0204 	bic.w	r2, r2, #4
 8005dfe:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	691a      	ldr	r2, [r3, #16]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005e12:	e023      	b.n	8005e5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68b9      	ldr	r1, [r7, #8]
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f000 fcb0 	bl	8006780 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e2e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e3e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	021a      	lsls	r2, r3, #8
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	430a      	orrs	r2, r1
 8005e52:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005e54:	e002      	b.n	8005e5c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	75fb      	strb	r3, [r7, #23]
      break;
 8005e5a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e64:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3718      	adds	r7, #24
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop

08005e70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d101      	bne.n	8005e8c <HAL_TIM_ConfigClockSource+0x1c>
 8005e88:	2302      	movs	r3, #2
 8005e8a:	e0f6      	b.n	800607a <HAL_TIM_ConfigClockSource+0x20a>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2202      	movs	r2, #2
 8005e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005eaa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005eae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005eb6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68ba      	ldr	r2, [r7, #8]
 8005ebe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a6f      	ldr	r2, [pc, #444]	@ (8006084 <HAL_TIM_ConfigClockSource+0x214>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	f000 80c1 	beq.w	800604e <HAL_TIM_ConfigClockSource+0x1de>
 8005ecc:	4a6d      	ldr	r2, [pc, #436]	@ (8006084 <HAL_TIM_ConfigClockSource+0x214>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	f200 80c6 	bhi.w	8006060 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ed4:	4a6c      	ldr	r2, [pc, #432]	@ (8006088 <HAL_TIM_ConfigClockSource+0x218>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	f000 80b9 	beq.w	800604e <HAL_TIM_ConfigClockSource+0x1de>
 8005edc:	4a6a      	ldr	r2, [pc, #424]	@ (8006088 <HAL_TIM_ConfigClockSource+0x218>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	f200 80be 	bhi.w	8006060 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ee4:	4a69      	ldr	r2, [pc, #420]	@ (800608c <HAL_TIM_ConfigClockSource+0x21c>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	f000 80b1 	beq.w	800604e <HAL_TIM_ConfigClockSource+0x1de>
 8005eec:	4a67      	ldr	r2, [pc, #412]	@ (800608c <HAL_TIM_ConfigClockSource+0x21c>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	f200 80b6 	bhi.w	8006060 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ef4:	4a66      	ldr	r2, [pc, #408]	@ (8006090 <HAL_TIM_ConfigClockSource+0x220>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	f000 80a9 	beq.w	800604e <HAL_TIM_ConfigClockSource+0x1de>
 8005efc:	4a64      	ldr	r2, [pc, #400]	@ (8006090 <HAL_TIM_ConfigClockSource+0x220>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	f200 80ae 	bhi.w	8006060 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f04:	4a63      	ldr	r2, [pc, #396]	@ (8006094 <HAL_TIM_ConfigClockSource+0x224>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	f000 80a1 	beq.w	800604e <HAL_TIM_ConfigClockSource+0x1de>
 8005f0c:	4a61      	ldr	r2, [pc, #388]	@ (8006094 <HAL_TIM_ConfigClockSource+0x224>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	f200 80a6 	bhi.w	8006060 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f14:	4a60      	ldr	r2, [pc, #384]	@ (8006098 <HAL_TIM_ConfigClockSource+0x228>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	f000 8099 	beq.w	800604e <HAL_TIM_ConfigClockSource+0x1de>
 8005f1c:	4a5e      	ldr	r2, [pc, #376]	@ (8006098 <HAL_TIM_ConfigClockSource+0x228>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	f200 809e 	bhi.w	8006060 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f24:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005f28:	f000 8091 	beq.w	800604e <HAL_TIM_ConfigClockSource+0x1de>
 8005f2c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005f30:	f200 8096 	bhi.w	8006060 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f34:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f38:	f000 8089 	beq.w	800604e <HAL_TIM_ConfigClockSource+0x1de>
 8005f3c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f40:	f200 808e 	bhi.w	8006060 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f48:	d03e      	beq.n	8005fc8 <HAL_TIM_ConfigClockSource+0x158>
 8005f4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f4e:	f200 8087 	bhi.w	8006060 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f56:	f000 8086 	beq.w	8006066 <HAL_TIM_ConfigClockSource+0x1f6>
 8005f5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f5e:	d87f      	bhi.n	8006060 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f60:	2b70      	cmp	r3, #112	@ 0x70
 8005f62:	d01a      	beq.n	8005f9a <HAL_TIM_ConfigClockSource+0x12a>
 8005f64:	2b70      	cmp	r3, #112	@ 0x70
 8005f66:	d87b      	bhi.n	8006060 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f68:	2b60      	cmp	r3, #96	@ 0x60
 8005f6a:	d050      	beq.n	800600e <HAL_TIM_ConfigClockSource+0x19e>
 8005f6c:	2b60      	cmp	r3, #96	@ 0x60
 8005f6e:	d877      	bhi.n	8006060 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f70:	2b50      	cmp	r3, #80	@ 0x50
 8005f72:	d03c      	beq.n	8005fee <HAL_TIM_ConfigClockSource+0x17e>
 8005f74:	2b50      	cmp	r3, #80	@ 0x50
 8005f76:	d873      	bhi.n	8006060 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f78:	2b40      	cmp	r3, #64	@ 0x40
 8005f7a:	d058      	beq.n	800602e <HAL_TIM_ConfigClockSource+0x1be>
 8005f7c:	2b40      	cmp	r3, #64	@ 0x40
 8005f7e:	d86f      	bhi.n	8006060 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f80:	2b30      	cmp	r3, #48	@ 0x30
 8005f82:	d064      	beq.n	800604e <HAL_TIM_ConfigClockSource+0x1de>
 8005f84:	2b30      	cmp	r3, #48	@ 0x30
 8005f86:	d86b      	bhi.n	8006060 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f88:	2b20      	cmp	r3, #32
 8005f8a:	d060      	beq.n	800604e <HAL_TIM_ConfigClockSource+0x1de>
 8005f8c:	2b20      	cmp	r3, #32
 8005f8e:	d867      	bhi.n	8006060 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d05c      	beq.n	800604e <HAL_TIM_ConfigClockSource+0x1de>
 8005f94:	2b10      	cmp	r3, #16
 8005f96:	d05a      	beq.n	800604e <HAL_TIM_ConfigClockSource+0x1de>
 8005f98:	e062      	b.n	8006060 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005faa:	f000 fcd1 	bl	8006950 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005fbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68ba      	ldr	r2, [r7, #8]
 8005fc4:	609a      	str	r2, [r3, #8]
      break;
 8005fc6:	e04f      	b.n	8006068 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fd8:	f000 fcba 	bl	8006950 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	689a      	ldr	r2, [r3, #8]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005fea:	609a      	str	r2, [r3, #8]
      break;
 8005fec:	e03c      	b.n	8006068 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	f000 fc2c 	bl	8006858 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2150      	movs	r1, #80	@ 0x50
 8006006:	4618      	mov	r0, r3
 8006008:	f000 fc85 	bl	8006916 <TIM_ITRx_SetConfig>
      break;
 800600c:	e02c      	b.n	8006068 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800601a:	461a      	mov	r2, r3
 800601c:	f000 fc4b 	bl	80068b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2160      	movs	r1, #96	@ 0x60
 8006026:	4618      	mov	r0, r3
 8006028:	f000 fc75 	bl	8006916 <TIM_ITRx_SetConfig>
      break;
 800602c:	e01c      	b.n	8006068 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800603a:	461a      	mov	r2, r3
 800603c:	f000 fc0c 	bl	8006858 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2140      	movs	r1, #64	@ 0x40
 8006046:	4618      	mov	r0, r3
 8006048:	f000 fc65 	bl	8006916 <TIM_ITRx_SetConfig>
      break;
 800604c:	e00c      	b.n	8006068 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4619      	mov	r1, r3
 8006058:	4610      	mov	r0, r2
 800605a:	f000 fc5c 	bl	8006916 <TIM_ITRx_SetConfig>
      break;
 800605e:	e003      	b.n	8006068 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	73fb      	strb	r3, [r7, #15]
      break;
 8006064:	e000      	b.n	8006068 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006066:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006078:	7bfb      	ldrb	r3, [r7, #15]
}
 800607a:	4618      	mov	r0, r3
 800607c:	3710      	adds	r7, #16
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	00100070 	.word	0x00100070
 8006088:	00100060 	.word	0x00100060
 800608c:	00100050 	.word	0x00100050
 8006090:	00100040 	.word	0x00100040
 8006094:	00100030 	.word	0x00100030
 8006098:	00100020 	.word	0x00100020

0800609c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800609c:	b480      	push	{r7}
 800609e:	b085      	sub	sp, #20
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a4c      	ldr	r2, [pc, #304]	@ (80061e0 <TIM_Base_SetConfig+0x144>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d017      	beq.n	80060e4 <TIM_Base_SetConfig+0x48>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060ba:	d013      	beq.n	80060e4 <TIM_Base_SetConfig+0x48>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a49      	ldr	r2, [pc, #292]	@ (80061e4 <TIM_Base_SetConfig+0x148>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d00f      	beq.n	80060e4 <TIM_Base_SetConfig+0x48>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a48      	ldr	r2, [pc, #288]	@ (80061e8 <TIM_Base_SetConfig+0x14c>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d00b      	beq.n	80060e4 <TIM_Base_SetConfig+0x48>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a47      	ldr	r2, [pc, #284]	@ (80061ec <TIM_Base_SetConfig+0x150>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d007      	beq.n	80060e4 <TIM_Base_SetConfig+0x48>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a46      	ldr	r2, [pc, #280]	@ (80061f0 <TIM_Base_SetConfig+0x154>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d003      	beq.n	80060e4 <TIM_Base_SetConfig+0x48>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a45      	ldr	r2, [pc, #276]	@ (80061f4 <TIM_Base_SetConfig+0x158>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d108      	bne.n	80060f6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	68fa      	ldr	r2, [r7, #12]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4a39      	ldr	r2, [pc, #228]	@ (80061e0 <TIM_Base_SetConfig+0x144>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d023      	beq.n	8006146 <TIM_Base_SetConfig+0xaa>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006104:	d01f      	beq.n	8006146 <TIM_Base_SetConfig+0xaa>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a36      	ldr	r2, [pc, #216]	@ (80061e4 <TIM_Base_SetConfig+0x148>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d01b      	beq.n	8006146 <TIM_Base_SetConfig+0xaa>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a35      	ldr	r2, [pc, #212]	@ (80061e8 <TIM_Base_SetConfig+0x14c>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d017      	beq.n	8006146 <TIM_Base_SetConfig+0xaa>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a34      	ldr	r2, [pc, #208]	@ (80061ec <TIM_Base_SetConfig+0x150>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d013      	beq.n	8006146 <TIM_Base_SetConfig+0xaa>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a33      	ldr	r2, [pc, #204]	@ (80061f0 <TIM_Base_SetConfig+0x154>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d00f      	beq.n	8006146 <TIM_Base_SetConfig+0xaa>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a33      	ldr	r2, [pc, #204]	@ (80061f8 <TIM_Base_SetConfig+0x15c>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d00b      	beq.n	8006146 <TIM_Base_SetConfig+0xaa>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a32      	ldr	r2, [pc, #200]	@ (80061fc <TIM_Base_SetConfig+0x160>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d007      	beq.n	8006146 <TIM_Base_SetConfig+0xaa>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a31      	ldr	r2, [pc, #196]	@ (8006200 <TIM_Base_SetConfig+0x164>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d003      	beq.n	8006146 <TIM_Base_SetConfig+0xaa>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a2c      	ldr	r2, [pc, #176]	@ (80061f4 <TIM_Base_SetConfig+0x158>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d108      	bne.n	8006158 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800614c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	4313      	orrs	r3, r2
 8006156:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	4313      	orrs	r3, r2
 8006164:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	689a      	ldr	r2, [r3, #8]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a18      	ldr	r2, [pc, #96]	@ (80061e0 <TIM_Base_SetConfig+0x144>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d013      	beq.n	80061ac <TIM_Base_SetConfig+0x110>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4a1a      	ldr	r2, [pc, #104]	@ (80061f0 <TIM_Base_SetConfig+0x154>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d00f      	beq.n	80061ac <TIM_Base_SetConfig+0x110>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4a1a      	ldr	r2, [pc, #104]	@ (80061f8 <TIM_Base_SetConfig+0x15c>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d00b      	beq.n	80061ac <TIM_Base_SetConfig+0x110>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4a19      	ldr	r2, [pc, #100]	@ (80061fc <TIM_Base_SetConfig+0x160>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d007      	beq.n	80061ac <TIM_Base_SetConfig+0x110>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4a18      	ldr	r2, [pc, #96]	@ (8006200 <TIM_Base_SetConfig+0x164>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d003      	beq.n	80061ac <TIM_Base_SetConfig+0x110>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a13      	ldr	r2, [pc, #76]	@ (80061f4 <TIM_Base_SetConfig+0x158>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d103      	bne.n	80061b4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	691a      	ldr	r2, [r3, #16]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	f003 0301 	and.w	r3, r3, #1
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d105      	bne.n	80061d2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	f023 0201 	bic.w	r2, r3, #1
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	611a      	str	r2, [r3, #16]
  }
}
 80061d2:	bf00      	nop
 80061d4:	3714      	adds	r7, #20
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	40012c00 	.word	0x40012c00
 80061e4:	40000400 	.word	0x40000400
 80061e8:	40000800 	.word	0x40000800
 80061ec:	40000c00 	.word	0x40000c00
 80061f0:	40013400 	.word	0x40013400
 80061f4:	40015000 	.word	0x40015000
 80061f8:	40014000 	.word	0x40014000
 80061fc:	40014400 	.word	0x40014400
 8006200:	40014800 	.word	0x40014800

08006204 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006204:	b480      	push	{r7}
 8006206:	b087      	sub	sp, #28
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a1b      	ldr	r3, [r3, #32]
 8006212:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a1b      	ldr	r3, [r3, #32]
 8006218:	f023 0201 	bic.w	r2, r3, #1
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	699b      	ldr	r3, [r3, #24]
 800622a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006232:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f023 0303 	bic.w	r3, r3, #3
 800623e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68fa      	ldr	r2, [r7, #12]
 8006246:	4313      	orrs	r3, r2
 8006248:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	f023 0302 	bic.w	r3, r3, #2
 8006250:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	4313      	orrs	r3, r2
 800625a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	4a30      	ldr	r2, [pc, #192]	@ (8006320 <TIM_OC1_SetConfig+0x11c>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d013      	beq.n	800628c <TIM_OC1_SetConfig+0x88>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a2f      	ldr	r2, [pc, #188]	@ (8006324 <TIM_OC1_SetConfig+0x120>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d00f      	beq.n	800628c <TIM_OC1_SetConfig+0x88>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a2e      	ldr	r2, [pc, #184]	@ (8006328 <TIM_OC1_SetConfig+0x124>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d00b      	beq.n	800628c <TIM_OC1_SetConfig+0x88>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a2d      	ldr	r2, [pc, #180]	@ (800632c <TIM_OC1_SetConfig+0x128>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d007      	beq.n	800628c <TIM_OC1_SetConfig+0x88>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a2c      	ldr	r2, [pc, #176]	@ (8006330 <TIM_OC1_SetConfig+0x12c>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d003      	beq.n	800628c <TIM_OC1_SetConfig+0x88>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a2b      	ldr	r2, [pc, #172]	@ (8006334 <TIM_OC1_SetConfig+0x130>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d10c      	bne.n	80062a6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	f023 0308 	bic.w	r3, r3, #8
 8006292:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	697a      	ldr	r2, [r7, #20]
 800629a:	4313      	orrs	r3, r2
 800629c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	f023 0304 	bic.w	r3, r3, #4
 80062a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a1d      	ldr	r2, [pc, #116]	@ (8006320 <TIM_OC1_SetConfig+0x11c>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d013      	beq.n	80062d6 <TIM_OC1_SetConfig+0xd2>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a1c      	ldr	r2, [pc, #112]	@ (8006324 <TIM_OC1_SetConfig+0x120>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d00f      	beq.n	80062d6 <TIM_OC1_SetConfig+0xd2>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a1b      	ldr	r2, [pc, #108]	@ (8006328 <TIM_OC1_SetConfig+0x124>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d00b      	beq.n	80062d6 <TIM_OC1_SetConfig+0xd2>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a1a      	ldr	r2, [pc, #104]	@ (800632c <TIM_OC1_SetConfig+0x128>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d007      	beq.n	80062d6 <TIM_OC1_SetConfig+0xd2>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a19      	ldr	r2, [pc, #100]	@ (8006330 <TIM_OC1_SetConfig+0x12c>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d003      	beq.n	80062d6 <TIM_OC1_SetConfig+0xd2>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a18      	ldr	r2, [pc, #96]	@ (8006334 <TIM_OC1_SetConfig+0x130>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d111      	bne.n	80062fa <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80062dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80062e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	695b      	ldr	r3, [r3, #20]
 80062ea:	693a      	ldr	r2, [r7, #16]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	699b      	ldr	r3, [r3, #24]
 80062f4:	693a      	ldr	r2, [r7, #16]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	693a      	ldr	r2, [r7, #16]
 80062fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	685a      	ldr	r2, [r3, #4]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	697a      	ldr	r2, [r7, #20]
 8006312:	621a      	str	r2, [r3, #32]
}
 8006314:	bf00      	nop
 8006316:	371c      	adds	r7, #28
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr
 8006320:	40012c00 	.word	0x40012c00
 8006324:	40013400 	.word	0x40013400
 8006328:	40014000 	.word	0x40014000
 800632c:	40014400 	.word	0x40014400
 8006330:	40014800 	.word	0x40014800
 8006334:	40015000 	.word	0x40015000

08006338 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006338:	b480      	push	{r7}
 800633a:	b087      	sub	sp, #28
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a1b      	ldr	r3, [r3, #32]
 8006346:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6a1b      	ldr	r3, [r3, #32]
 800634c:	f023 0210 	bic.w	r2, r3, #16
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	699b      	ldr	r3, [r3, #24]
 800635e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006366:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800636a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006372:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	021b      	lsls	r3, r3, #8
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	4313      	orrs	r3, r2
 800637e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	f023 0320 	bic.w	r3, r3, #32
 8006386:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	011b      	lsls	r3, r3, #4
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	4313      	orrs	r3, r2
 8006392:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a2c      	ldr	r2, [pc, #176]	@ (8006448 <TIM_OC2_SetConfig+0x110>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d007      	beq.n	80063ac <TIM_OC2_SetConfig+0x74>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	4a2b      	ldr	r2, [pc, #172]	@ (800644c <TIM_OC2_SetConfig+0x114>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d003      	beq.n	80063ac <TIM_OC2_SetConfig+0x74>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a2a      	ldr	r2, [pc, #168]	@ (8006450 <TIM_OC2_SetConfig+0x118>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d10d      	bne.n	80063c8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	011b      	lsls	r3, r3, #4
 80063ba:	697a      	ldr	r2, [r7, #20]
 80063bc:	4313      	orrs	r3, r2
 80063be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	4a1f      	ldr	r2, [pc, #124]	@ (8006448 <TIM_OC2_SetConfig+0x110>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d013      	beq.n	80063f8 <TIM_OC2_SetConfig+0xc0>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a1e      	ldr	r2, [pc, #120]	@ (800644c <TIM_OC2_SetConfig+0x114>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d00f      	beq.n	80063f8 <TIM_OC2_SetConfig+0xc0>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4a1e      	ldr	r2, [pc, #120]	@ (8006454 <TIM_OC2_SetConfig+0x11c>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d00b      	beq.n	80063f8 <TIM_OC2_SetConfig+0xc0>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a1d      	ldr	r2, [pc, #116]	@ (8006458 <TIM_OC2_SetConfig+0x120>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d007      	beq.n	80063f8 <TIM_OC2_SetConfig+0xc0>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a1c      	ldr	r2, [pc, #112]	@ (800645c <TIM_OC2_SetConfig+0x124>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d003      	beq.n	80063f8 <TIM_OC2_SetConfig+0xc0>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a17      	ldr	r2, [pc, #92]	@ (8006450 <TIM_OC2_SetConfig+0x118>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d113      	bne.n	8006420 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80063fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006406:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	695b      	ldr	r3, [r3, #20]
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	693a      	ldr	r2, [r7, #16]
 8006410:	4313      	orrs	r3, r2
 8006412:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	699b      	ldr	r3, [r3, #24]
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	693a      	ldr	r2, [r7, #16]
 800641c:	4313      	orrs	r3, r2
 800641e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	68fa      	ldr	r2, [r7, #12]
 800642a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	685a      	ldr	r2, [r3, #4]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	697a      	ldr	r2, [r7, #20]
 8006438:	621a      	str	r2, [r3, #32]
}
 800643a:	bf00      	nop
 800643c:	371c      	adds	r7, #28
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr
 8006446:	bf00      	nop
 8006448:	40012c00 	.word	0x40012c00
 800644c:	40013400 	.word	0x40013400
 8006450:	40015000 	.word	0x40015000
 8006454:	40014000 	.word	0x40014000
 8006458:	40014400 	.word	0x40014400
 800645c:	40014800 	.word	0x40014800

08006460 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006460:	b480      	push	{r7}
 8006462:	b087      	sub	sp, #28
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a1b      	ldr	r3, [r3, #32]
 800646e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6a1b      	ldr	r3, [r3, #32]
 8006474:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	69db      	ldr	r3, [r3, #28]
 8006486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800648e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f023 0303 	bic.w	r3, r3, #3
 800649a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80064ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	021b      	lsls	r3, r3, #8
 80064b4:	697a      	ldr	r2, [r7, #20]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4a2b      	ldr	r2, [pc, #172]	@ (800656c <TIM_OC3_SetConfig+0x10c>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d007      	beq.n	80064d2 <TIM_OC3_SetConfig+0x72>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4a2a      	ldr	r2, [pc, #168]	@ (8006570 <TIM_OC3_SetConfig+0x110>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d003      	beq.n	80064d2 <TIM_OC3_SetConfig+0x72>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4a29      	ldr	r2, [pc, #164]	@ (8006574 <TIM_OC3_SetConfig+0x114>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d10d      	bne.n	80064ee <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80064d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	021b      	lsls	r3, r3, #8
 80064e0:	697a      	ldr	r2, [r7, #20]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80064ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a1e      	ldr	r2, [pc, #120]	@ (800656c <TIM_OC3_SetConfig+0x10c>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d013      	beq.n	800651e <TIM_OC3_SetConfig+0xbe>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a1d      	ldr	r2, [pc, #116]	@ (8006570 <TIM_OC3_SetConfig+0x110>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d00f      	beq.n	800651e <TIM_OC3_SetConfig+0xbe>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a1d      	ldr	r2, [pc, #116]	@ (8006578 <TIM_OC3_SetConfig+0x118>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d00b      	beq.n	800651e <TIM_OC3_SetConfig+0xbe>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a1c      	ldr	r2, [pc, #112]	@ (800657c <TIM_OC3_SetConfig+0x11c>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d007      	beq.n	800651e <TIM_OC3_SetConfig+0xbe>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a1b      	ldr	r2, [pc, #108]	@ (8006580 <TIM_OC3_SetConfig+0x120>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d003      	beq.n	800651e <TIM_OC3_SetConfig+0xbe>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a16      	ldr	r2, [pc, #88]	@ (8006574 <TIM_OC3_SetConfig+0x114>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d113      	bne.n	8006546 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006524:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800652c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	695b      	ldr	r3, [r3, #20]
 8006532:	011b      	lsls	r3, r3, #4
 8006534:	693a      	ldr	r2, [r7, #16]
 8006536:	4313      	orrs	r3, r2
 8006538:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	699b      	ldr	r3, [r3, #24]
 800653e:	011b      	lsls	r3, r3, #4
 8006540:	693a      	ldr	r2, [r7, #16]
 8006542:	4313      	orrs	r3, r2
 8006544:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	693a      	ldr	r2, [r7, #16]
 800654a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	68fa      	ldr	r2, [r7, #12]
 8006550:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	685a      	ldr	r2, [r3, #4]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	697a      	ldr	r2, [r7, #20]
 800655e:	621a      	str	r2, [r3, #32]
}
 8006560:	bf00      	nop
 8006562:	371c      	adds	r7, #28
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr
 800656c:	40012c00 	.word	0x40012c00
 8006570:	40013400 	.word	0x40013400
 8006574:	40015000 	.word	0x40015000
 8006578:	40014000 	.word	0x40014000
 800657c:	40014400 	.word	0x40014400
 8006580:	40014800 	.word	0x40014800

08006584 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006584:	b480      	push	{r7}
 8006586:	b087      	sub	sp, #28
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a1b      	ldr	r3, [r3, #32]
 8006592:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6a1b      	ldr	r3, [r3, #32]
 8006598:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	69db      	ldr	r3, [r3, #28]
 80065aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80065b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	021b      	lsls	r3, r3, #8
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80065d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	031b      	lsls	r3, r3, #12
 80065da:	697a      	ldr	r2, [r7, #20]
 80065dc:	4313      	orrs	r3, r2
 80065de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a2c      	ldr	r2, [pc, #176]	@ (8006694 <TIM_OC4_SetConfig+0x110>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d007      	beq.n	80065f8 <TIM_OC4_SetConfig+0x74>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a2b      	ldr	r2, [pc, #172]	@ (8006698 <TIM_OC4_SetConfig+0x114>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d003      	beq.n	80065f8 <TIM_OC4_SetConfig+0x74>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4a2a      	ldr	r2, [pc, #168]	@ (800669c <TIM_OC4_SetConfig+0x118>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d10d      	bne.n	8006614 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80065fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	031b      	lsls	r3, r3, #12
 8006606:	697a      	ldr	r2, [r7, #20]
 8006608:	4313      	orrs	r3, r2
 800660a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006612:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a1f      	ldr	r2, [pc, #124]	@ (8006694 <TIM_OC4_SetConfig+0x110>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d013      	beq.n	8006644 <TIM_OC4_SetConfig+0xc0>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a1e      	ldr	r2, [pc, #120]	@ (8006698 <TIM_OC4_SetConfig+0x114>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d00f      	beq.n	8006644 <TIM_OC4_SetConfig+0xc0>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a1e      	ldr	r2, [pc, #120]	@ (80066a0 <TIM_OC4_SetConfig+0x11c>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d00b      	beq.n	8006644 <TIM_OC4_SetConfig+0xc0>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a1d      	ldr	r2, [pc, #116]	@ (80066a4 <TIM_OC4_SetConfig+0x120>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d007      	beq.n	8006644 <TIM_OC4_SetConfig+0xc0>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a1c      	ldr	r2, [pc, #112]	@ (80066a8 <TIM_OC4_SetConfig+0x124>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d003      	beq.n	8006644 <TIM_OC4_SetConfig+0xc0>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a17      	ldr	r2, [pc, #92]	@ (800669c <TIM_OC4_SetConfig+0x118>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d113      	bne.n	800666c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800664a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006652:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	695b      	ldr	r3, [r3, #20]
 8006658:	019b      	lsls	r3, r3, #6
 800665a:	693a      	ldr	r2, [r7, #16]
 800665c:	4313      	orrs	r3, r2
 800665e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	699b      	ldr	r3, [r3, #24]
 8006664:	019b      	lsls	r3, r3, #6
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	4313      	orrs	r3, r2
 800666a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	693a      	ldr	r2, [r7, #16]
 8006670:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	685a      	ldr	r2, [r3, #4]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	621a      	str	r2, [r3, #32]
}
 8006686:	bf00      	nop
 8006688:	371c      	adds	r7, #28
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr
 8006692:	bf00      	nop
 8006694:	40012c00 	.word	0x40012c00
 8006698:	40013400 	.word	0x40013400
 800669c:	40015000 	.word	0x40015000
 80066a0:	40014000 	.word	0x40014000
 80066a4:	40014400 	.word	0x40014400
 80066a8:	40014800 	.word	0x40014800

080066ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b087      	sub	sp, #28
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6a1b      	ldr	r3, [r3, #32]
 80066ba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6a1b      	ldr	r3, [r3, #32]
 80066c0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80066f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	041b      	lsls	r3, r3, #16
 80066f8:	693a      	ldr	r2, [r7, #16]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a19      	ldr	r2, [pc, #100]	@ (8006768 <TIM_OC5_SetConfig+0xbc>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d013      	beq.n	800672e <TIM_OC5_SetConfig+0x82>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a18      	ldr	r2, [pc, #96]	@ (800676c <TIM_OC5_SetConfig+0xc0>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d00f      	beq.n	800672e <TIM_OC5_SetConfig+0x82>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a17      	ldr	r2, [pc, #92]	@ (8006770 <TIM_OC5_SetConfig+0xc4>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d00b      	beq.n	800672e <TIM_OC5_SetConfig+0x82>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a16      	ldr	r2, [pc, #88]	@ (8006774 <TIM_OC5_SetConfig+0xc8>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d007      	beq.n	800672e <TIM_OC5_SetConfig+0x82>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a15      	ldr	r2, [pc, #84]	@ (8006778 <TIM_OC5_SetConfig+0xcc>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d003      	beq.n	800672e <TIM_OC5_SetConfig+0x82>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a14      	ldr	r2, [pc, #80]	@ (800677c <TIM_OC5_SetConfig+0xd0>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d109      	bne.n	8006742 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006734:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	695b      	ldr	r3, [r3, #20]
 800673a:	021b      	lsls	r3, r3, #8
 800673c:	697a      	ldr	r2, [r7, #20]
 800673e:	4313      	orrs	r3, r2
 8006740:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	697a      	ldr	r2, [r7, #20]
 8006746:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	685a      	ldr	r2, [r3, #4]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	693a      	ldr	r2, [r7, #16]
 800675a:	621a      	str	r2, [r3, #32]
}
 800675c:	bf00      	nop
 800675e:	371c      	adds	r7, #28
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr
 8006768:	40012c00 	.word	0x40012c00
 800676c:	40013400 	.word	0x40013400
 8006770:	40014000 	.word	0x40014000
 8006774:	40014400 	.word	0x40014400
 8006778:	40014800 	.word	0x40014800
 800677c:	40015000 	.word	0x40015000

08006780 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006780:	b480      	push	{r7}
 8006782:	b087      	sub	sp, #28
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a1b      	ldr	r3, [r3, #32]
 800678e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a1b      	ldr	r3, [r3, #32]
 8006794:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80067ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	021b      	lsls	r3, r3, #8
 80067ba:	68fa      	ldr	r2, [r7, #12]
 80067bc:	4313      	orrs	r3, r2
 80067be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80067c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	051b      	lsls	r3, r3, #20
 80067ce:	693a      	ldr	r2, [r7, #16]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a1a      	ldr	r2, [pc, #104]	@ (8006840 <TIM_OC6_SetConfig+0xc0>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d013      	beq.n	8006804 <TIM_OC6_SetConfig+0x84>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a19      	ldr	r2, [pc, #100]	@ (8006844 <TIM_OC6_SetConfig+0xc4>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d00f      	beq.n	8006804 <TIM_OC6_SetConfig+0x84>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a18      	ldr	r2, [pc, #96]	@ (8006848 <TIM_OC6_SetConfig+0xc8>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d00b      	beq.n	8006804 <TIM_OC6_SetConfig+0x84>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a17      	ldr	r2, [pc, #92]	@ (800684c <TIM_OC6_SetConfig+0xcc>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d007      	beq.n	8006804 <TIM_OC6_SetConfig+0x84>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a16      	ldr	r2, [pc, #88]	@ (8006850 <TIM_OC6_SetConfig+0xd0>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d003      	beq.n	8006804 <TIM_OC6_SetConfig+0x84>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a15      	ldr	r2, [pc, #84]	@ (8006854 <TIM_OC6_SetConfig+0xd4>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d109      	bne.n	8006818 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800680a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	695b      	ldr	r3, [r3, #20]
 8006810:	029b      	lsls	r3, r3, #10
 8006812:	697a      	ldr	r2, [r7, #20]
 8006814:	4313      	orrs	r3, r2
 8006816:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	697a      	ldr	r2, [r7, #20]
 800681c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	685a      	ldr	r2, [r3, #4]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	693a      	ldr	r2, [r7, #16]
 8006830:	621a      	str	r2, [r3, #32]
}
 8006832:	bf00      	nop
 8006834:	371c      	adds	r7, #28
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	40012c00 	.word	0x40012c00
 8006844:	40013400 	.word	0x40013400
 8006848:	40014000 	.word	0x40014000
 800684c:	40014400 	.word	0x40014400
 8006850:	40014800 	.word	0x40014800
 8006854:	40015000 	.word	0x40015000

08006858 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006858:	b480      	push	{r7}
 800685a:	b087      	sub	sp, #28
 800685c:	af00      	add	r7, sp, #0
 800685e:	60f8      	str	r0, [r7, #12]
 8006860:	60b9      	str	r1, [r7, #8]
 8006862:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6a1b      	ldr	r3, [r3, #32]
 8006868:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6a1b      	ldr	r3, [r3, #32]
 800686e:	f023 0201 	bic.w	r2, r3, #1
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	699b      	ldr	r3, [r3, #24]
 800687a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006882:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	011b      	lsls	r3, r3, #4
 8006888:	693a      	ldr	r2, [r7, #16]
 800688a:	4313      	orrs	r3, r2
 800688c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	f023 030a 	bic.w	r3, r3, #10
 8006894:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006896:	697a      	ldr	r2, [r7, #20]
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	4313      	orrs	r3, r2
 800689c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	693a      	ldr	r2, [r7, #16]
 80068a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	697a      	ldr	r2, [r7, #20]
 80068a8:	621a      	str	r2, [r3, #32]
}
 80068aa:	bf00      	nop
 80068ac:	371c      	adds	r7, #28
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr

080068b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068b6:	b480      	push	{r7}
 80068b8:	b087      	sub	sp, #28
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	60f8      	str	r0, [r7, #12]
 80068be:	60b9      	str	r1, [r7, #8]
 80068c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6a1b      	ldr	r3, [r3, #32]
 80068c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6a1b      	ldr	r3, [r3, #32]
 80068cc:	f023 0210 	bic.w	r2, r3, #16
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	699b      	ldr	r3, [r3, #24]
 80068d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80068e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	031b      	lsls	r3, r3, #12
 80068e6:	693a      	ldr	r2, [r7, #16]
 80068e8:	4313      	orrs	r3, r2
 80068ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80068f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	011b      	lsls	r3, r3, #4
 80068f8:	697a      	ldr	r2, [r7, #20]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	693a      	ldr	r2, [r7, #16]
 8006902:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	697a      	ldr	r2, [r7, #20]
 8006908:	621a      	str	r2, [r3, #32]
}
 800690a:	bf00      	nop
 800690c:	371c      	adds	r7, #28
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr

08006916 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006916:	b480      	push	{r7}
 8006918:	b085      	sub	sp, #20
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
 800691e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800692c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006930:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006932:	683a      	ldr	r2, [r7, #0]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	4313      	orrs	r3, r2
 8006938:	f043 0307 	orr.w	r3, r3, #7
 800693c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	68fa      	ldr	r2, [r7, #12]
 8006942:	609a      	str	r2, [r3, #8]
}
 8006944:	bf00      	nop
 8006946:	3714      	adds	r7, #20
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006950:	b480      	push	{r7}
 8006952:	b087      	sub	sp, #28
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	607a      	str	r2, [r7, #4]
 800695c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800696a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	021a      	lsls	r2, r3, #8
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	431a      	orrs	r2, r3
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	4313      	orrs	r3, r2
 8006978:	697a      	ldr	r2, [r7, #20]
 800697a:	4313      	orrs	r3, r2
 800697c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	697a      	ldr	r2, [r7, #20]
 8006982:	609a      	str	r2, [r3, #8]
}
 8006984:	bf00      	nop
 8006986:	371c      	adds	r7, #28
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006990:	b480      	push	{r7}
 8006992:	b087      	sub	sp, #28
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	f003 031f 	and.w	r3, r3, #31
 80069a2:	2201      	movs	r2, #1
 80069a4:	fa02 f303 	lsl.w	r3, r2, r3
 80069a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6a1a      	ldr	r2, [r3, #32]
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	43db      	mvns	r3, r3
 80069b2:	401a      	ands	r2, r3
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6a1a      	ldr	r2, [r3, #32]
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	f003 031f 	and.w	r3, r3, #31
 80069c2:	6879      	ldr	r1, [r7, #4]
 80069c4:	fa01 f303 	lsl.w	r3, r1, r3
 80069c8:	431a      	orrs	r2, r3
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	621a      	str	r2, [r3, #32]
}
 80069ce:	bf00      	nop
 80069d0:	371c      	adds	r7, #28
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr
	...

080069dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069dc:	b480      	push	{r7}
 80069de:	b085      	sub	sp, #20
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d101      	bne.n	80069f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069f0:	2302      	movs	r3, #2
 80069f2:	e074      	b.n	8006ade <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2202      	movs	r2, #2
 8006a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a34      	ldr	r2, [pc, #208]	@ (8006aec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d009      	beq.n	8006a32 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a33      	ldr	r2, [pc, #204]	@ (8006af0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d004      	beq.n	8006a32 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a31      	ldr	r2, [pc, #196]	@ (8006af4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d108      	bne.n	8006a44 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006a38:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006a4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	68fa      	ldr	r2, [r7, #12]
 8006a56:	4313      	orrs	r3, r2
 8006a58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	68fa      	ldr	r2, [r7, #12]
 8006a60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a21      	ldr	r2, [pc, #132]	@ (8006aec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d022      	beq.n	8006ab2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a74:	d01d      	beq.n	8006ab2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a1f      	ldr	r2, [pc, #124]	@ (8006af8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d018      	beq.n	8006ab2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a1d      	ldr	r2, [pc, #116]	@ (8006afc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d013      	beq.n	8006ab2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a1c      	ldr	r2, [pc, #112]	@ (8006b00 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d00e      	beq.n	8006ab2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a15      	ldr	r2, [pc, #84]	@ (8006af0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d009      	beq.n	8006ab2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a18      	ldr	r2, [pc, #96]	@ (8006b04 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d004      	beq.n	8006ab2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a11      	ldr	r2, [pc, #68]	@ (8006af4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d10c      	bne.n	8006acc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ab8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	68ba      	ldr	r2, [r7, #8]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68ba      	ldr	r2, [r7, #8]
 8006aca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3714      	adds	r7, #20
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr
 8006aea:	bf00      	nop
 8006aec:	40012c00 	.word	0x40012c00
 8006af0:	40013400 	.word	0x40013400
 8006af4:	40015000 	.word	0x40015000
 8006af8:	40000400 	.word	0x40000400
 8006afc:	40000800 	.word	0x40000800
 8006b00:	40000c00 	.word	0x40000c00
 8006b04:	40014000 	.word	0x40014000

08006b08 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b085      	sub	sp, #20
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006b12:	2300      	movs	r3, #0
 8006b14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d101      	bne.n	8006b24 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006b20:	2302      	movs	r3, #2
 8006b22:	e078      	b.n	8006c16 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	4313      	orrs	r3, r2
 8006b46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	695b      	ldr	r3, [r3, #20]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	699b      	ldr	r3, [r3, #24]
 8006b98:	041b      	lsls	r3, r3, #16
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	69db      	ldr	r3, [r3, #28]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a1c      	ldr	r2, [pc, #112]	@ (8006c24 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d009      	beq.n	8006bca <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a1b      	ldr	r2, [pc, #108]	@ (8006c28 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d004      	beq.n	8006bca <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a19      	ldr	r2, [pc, #100]	@ (8006c2c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d11c      	bne.n	8006c04 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bd4:	051b      	lsls	r3, r3, #20
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	6a1b      	ldr	r3, [r3, #32]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c00:	4313      	orrs	r3, r2
 8006c02:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3714      	adds	r7, #20
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr
 8006c22:	bf00      	nop
 8006c24:	40012c00 	.word	0x40012c00
 8006c28:	40013400 	.word	0x40013400
 8006c2c:	40015000 	.word	0x40015000

08006c30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d101      	bne.n	8006c42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e042      	b.n	8006cc8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d106      	bne.n	8006c5a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f7fb f855 	bl	8001d04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2224      	movs	r2, #36	@ 0x24
 8006c5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f022 0201 	bic.w	r2, r2, #1
 8006c70:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d002      	beq.n	8006c80 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 fb24 	bl	80072c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 f825 	bl	8006cd0 <UART_SetConfig>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d101      	bne.n	8006c90 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e01b      	b.n	8006cc8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	685a      	ldr	r2, [r3, #4]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006c9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	689a      	ldr	r2, [r3, #8]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006cae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f042 0201 	orr.w	r2, r2, #1
 8006cbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 fba3 	bl	800740c <UART_CheckIdleState>
 8006cc6:	4603      	mov	r3, r0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3708      	adds	r7, #8
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cd4:	b08c      	sub	sp, #48	@ 0x30
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	689a      	ldr	r2, [r3, #8]
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	431a      	orrs	r2, r3
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	695b      	ldr	r3, [r3, #20]
 8006cee:	431a      	orrs	r2, r3
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	69db      	ldr	r3, [r3, #28]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	4baa      	ldr	r3, [pc, #680]	@ (8006fa8 <UART_SetConfig+0x2d8>)
 8006d00:	4013      	ands	r3, r2
 8006d02:	697a      	ldr	r2, [r7, #20]
 8006d04:	6812      	ldr	r2, [r2, #0]
 8006d06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d08:	430b      	orrs	r3, r1
 8006d0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	68da      	ldr	r2, [r3, #12]
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	430a      	orrs	r2, r1
 8006d20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	699b      	ldr	r3, [r3, #24]
 8006d26:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a9f      	ldr	r2, [pc, #636]	@ (8006fac <UART_SetConfig+0x2dc>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d004      	beq.n	8006d3c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	6a1b      	ldr	r3, [r3, #32]
 8006d36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006d46:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006d4a:	697a      	ldr	r2, [r7, #20]
 8006d4c:	6812      	ldr	r2, [r2, #0]
 8006d4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d50:	430b      	orrs	r3, r1
 8006d52:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d5a:	f023 010f 	bic.w	r1, r3, #15
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	430a      	orrs	r2, r1
 8006d68:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a90      	ldr	r2, [pc, #576]	@ (8006fb0 <UART_SetConfig+0x2e0>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d125      	bne.n	8006dc0 <UART_SetConfig+0xf0>
 8006d74:	4b8f      	ldr	r3, [pc, #572]	@ (8006fb4 <UART_SetConfig+0x2e4>)
 8006d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d7a:	f003 0303 	and.w	r3, r3, #3
 8006d7e:	2b03      	cmp	r3, #3
 8006d80:	d81a      	bhi.n	8006db8 <UART_SetConfig+0xe8>
 8006d82:	a201      	add	r2, pc, #4	@ (adr r2, 8006d88 <UART_SetConfig+0xb8>)
 8006d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d88:	08006d99 	.word	0x08006d99
 8006d8c:	08006da9 	.word	0x08006da9
 8006d90:	08006da1 	.word	0x08006da1
 8006d94:	08006db1 	.word	0x08006db1
 8006d98:	2301      	movs	r3, #1
 8006d9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d9e:	e116      	b.n	8006fce <UART_SetConfig+0x2fe>
 8006da0:	2302      	movs	r3, #2
 8006da2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006da6:	e112      	b.n	8006fce <UART_SetConfig+0x2fe>
 8006da8:	2304      	movs	r3, #4
 8006daa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dae:	e10e      	b.n	8006fce <UART_SetConfig+0x2fe>
 8006db0:	2308      	movs	r3, #8
 8006db2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006db6:	e10a      	b.n	8006fce <UART_SetConfig+0x2fe>
 8006db8:	2310      	movs	r3, #16
 8006dba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dbe:	e106      	b.n	8006fce <UART_SetConfig+0x2fe>
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a7c      	ldr	r2, [pc, #496]	@ (8006fb8 <UART_SetConfig+0x2e8>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d138      	bne.n	8006e3c <UART_SetConfig+0x16c>
 8006dca:	4b7a      	ldr	r3, [pc, #488]	@ (8006fb4 <UART_SetConfig+0x2e4>)
 8006dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dd0:	f003 030c 	and.w	r3, r3, #12
 8006dd4:	2b0c      	cmp	r3, #12
 8006dd6:	d82d      	bhi.n	8006e34 <UART_SetConfig+0x164>
 8006dd8:	a201      	add	r2, pc, #4	@ (adr r2, 8006de0 <UART_SetConfig+0x110>)
 8006dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dde:	bf00      	nop
 8006de0:	08006e15 	.word	0x08006e15
 8006de4:	08006e35 	.word	0x08006e35
 8006de8:	08006e35 	.word	0x08006e35
 8006dec:	08006e35 	.word	0x08006e35
 8006df0:	08006e25 	.word	0x08006e25
 8006df4:	08006e35 	.word	0x08006e35
 8006df8:	08006e35 	.word	0x08006e35
 8006dfc:	08006e35 	.word	0x08006e35
 8006e00:	08006e1d 	.word	0x08006e1d
 8006e04:	08006e35 	.word	0x08006e35
 8006e08:	08006e35 	.word	0x08006e35
 8006e0c:	08006e35 	.word	0x08006e35
 8006e10:	08006e2d 	.word	0x08006e2d
 8006e14:	2300      	movs	r3, #0
 8006e16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e1a:	e0d8      	b.n	8006fce <UART_SetConfig+0x2fe>
 8006e1c:	2302      	movs	r3, #2
 8006e1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e22:	e0d4      	b.n	8006fce <UART_SetConfig+0x2fe>
 8006e24:	2304      	movs	r3, #4
 8006e26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e2a:	e0d0      	b.n	8006fce <UART_SetConfig+0x2fe>
 8006e2c:	2308      	movs	r3, #8
 8006e2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e32:	e0cc      	b.n	8006fce <UART_SetConfig+0x2fe>
 8006e34:	2310      	movs	r3, #16
 8006e36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e3a:	e0c8      	b.n	8006fce <UART_SetConfig+0x2fe>
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a5e      	ldr	r2, [pc, #376]	@ (8006fbc <UART_SetConfig+0x2ec>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d125      	bne.n	8006e92 <UART_SetConfig+0x1c2>
 8006e46:	4b5b      	ldr	r3, [pc, #364]	@ (8006fb4 <UART_SetConfig+0x2e4>)
 8006e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e4c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006e50:	2b30      	cmp	r3, #48	@ 0x30
 8006e52:	d016      	beq.n	8006e82 <UART_SetConfig+0x1b2>
 8006e54:	2b30      	cmp	r3, #48	@ 0x30
 8006e56:	d818      	bhi.n	8006e8a <UART_SetConfig+0x1ba>
 8006e58:	2b20      	cmp	r3, #32
 8006e5a:	d00a      	beq.n	8006e72 <UART_SetConfig+0x1a2>
 8006e5c:	2b20      	cmp	r3, #32
 8006e5e:	d814      	bhi.n	8006e8a <UART_SetConfig+0x1ba>
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d002      	beq.n	8006e6a <UART_SetConfig+0x19a>
 8006e64:	2b10      	cmp	r3, #16
 8006e66:	d008      	beq.n	8006e7a <UART_SetConfig+0x1aa>
 8006e68:	e00f      	b.n	8006e8a <UART_SetConfig+0x1ba>
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e70:	e0ad      	b.n	8006fce <UART_SetConfig+0x2fe>
 8006e72:	2302      	movs	r3, #2
 8006e74:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e78:	e0a9      	b.n	8006fce <UART_SetConfig+0x2fe>
 8006e7a:	2304      	movs	r3, #4
 8006e7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e80:	e0a5      	b.n	8006fce <UART_SetConfig+0x2fe>
 8006e82:	2308      	movs	r3, #8
 8006e84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e88:	e0a1      	b.n	8006fce <UART_SetConfig+0x2fe>
 8006e8a:	2310      	movs	r3, #16
 8006e8c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e90:	e09d      	b.n	8006fce <UART_SetConfig+0x2fe>
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a4a      	ldr	r2, [pc, #296]	@ (8006fc0 <UART_SetConfig+0x2f0>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d125      	bne.n	8006ee8 <UART_SetConfig+0x218>
 8006e9c:	4b45      	ldr	r3, [pc, #276]	@ (8006fb4 <UART_SetConfig+0x2e4>)
 8006e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ea2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006ea6:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ea8:	d016      	beq.n	8006ed8 <UART_SetConfig+0x208>
 8006eaa:	2bc0      	cmp	r3, #192	@ 0xc0
 8006eac:	d818      	bhi.n	8006ee0 <UART_SetConfig+0x210>
 8006eae:	2b80      	cmp	r3, #128	@ 0x80
 8006eb0:	d00a      	beq.n	8006ec8 <UART_SetConfig+0x1f8>
 8006eb2:	2b80      	cmp	r3, #128	@ 0x80
 8006eb4:	d814      	bhi.n	8006ee0 <UART_SetConfig+0x210>
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d002      	beq.n	8006ec0 <UART_SetConfig+0x1f0>
 8006eba:	2b40      	cmp	r3, #64	@ 0x40
 8006ebc:	d008      	beq.n	8006ed0 <UART_SetConfig+0x200>
 8006ebe:	e00f      	b.n	8006ee0 <UART_SetConfig+0x210>
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ec6:	e082      	b.n	8006fce <UART_SetConfig+0x2fe>
 8006ec8:	2302      	movs	r3, #2
 8006eca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ece:	e07e      	b.n	8006fce <UART_SetConfig+0x2fe>
 8006ed0:	2304      	movs	r3, #4
 8006ed2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ed6:	e07a      	b.n	8006fce <UART_SetConfig+0x2fe>
 8006ed8:	2308      	movs	r3, #8
 8006eda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ede:	e076      	b.n	8006fce <UART_SetConfig+0x2fe>
 8006ee0:	2310      	movs	r3, #16
 8006ee2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ee6:	e072      	b.n	8006fce <UART_SetConfig+0x2fe>
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a35      	ldr	r2, [pc, #212]	@ (8006fc4 <UART_SetConfig+0x2f4>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d12a      	bne.n	8006f48 <UART_SetConfig+0x278>
 8006ef2:	4b30      	ldr	r3, [pc, #192]	@ (8006fb4 <UART_SetConfig+0x2e4>)
 8006ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ef8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006efc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f00:	d01a      	beq.n	8006f38 <UART_SetConfig+0x268>
 8006f02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f06:	d81b      	bhi.n	8006f40 <UART_SetConfig+0x270>
 8006f08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f0c:	d00c      	beq.n	8006f28 <UART_SetConfig+0x258>
 8006f0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f12:	d815      	bhi.n	8006f40 <UART_SetConfig+0x270>
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d003      	beq.n	8006f20 <UART_SetConfig+0x250>
 8006f18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f1c:	d008      	beq.n	8006f30 <UART_SetConfig+0x260>
 8006f1e:	e00f      	b.n	8006f40 <UART_SetConfig+0x270>
 8006f20:	2300      	movs	r3, #0
 8006f22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f26:	e052      	b.n	8006fce <UART_SetConfig+0x2fe>
 8006f28:	2302      	movs	r3, #2
 8006f2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f2e:	e04e      	b.n	8006fce <UART_SetConfig+0x2fe>
 8006f30:	2304      	movs	r3, #4
 8006f32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f36:	e04a      	b.n	8006fce <UART_SetConfig+0x2fe>
 8006f38:	2308      	movs	r3, #8
 8006f3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f3e:	e046      	b.n	8006fce <UART_SetConfig+0x2fe>
 8006f40:	2310      	movs	r3, #16
 8006f42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f46:	e042      	b.n	8006fce <UART_SetConfig+0x2fe>
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a17      	ldr	r2, [pc, #92]	@ (8006fac <UART_SetConfig+0x2dc>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d13a      	bne.n	8006fc8 <UART_SetConfig+0x2f8>
 8006f52:	4b18      	ldr	r3, [pc, #96]	@ (8006fb4 <UART_SetConfig+0x2e4>)
 8006f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f58:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006f5c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006f60:	d01a      	beq.n	8006f98 <UART_SetConfig+0x2c8>
 8006f62:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006f66:	d81b      	bhi.n	8006fa0 <UART_SetConfig+0x2d0>
 8006f68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f6c:	d00c      	beq.n	8006f88 <UART_SetConfig+0x2b8>
 8006f6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f72:	d815      	bhi.n	8006fa0 <UART_SetConfig+0x2d0>
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d003      	beq.n	8006f80 <UART_SetConfig+0x2b0>
 8006f78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f7c:	d008      	beq.n	8006f90 <UART_SetConfig+0x2c0>
 8006f7e:	e00f      	b.n	8006fa0 <UART_SetConfig+0x2d0>
 8006f80:	2300      	movs	r3, #0
 8006f82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f86:	e022      	b.n	8006fce <UART_SetConfig+0x2fe>
 8006f88:	2302      	movs	r3, #2
 8006f8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f8e:	e01e      	b.n	8006fce <UART_SetConfig+0x2fe>
 8006f90:	2304      	movs	r3, #4
 8006f92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f96:	e01a      	b.n	8006fce <UART_SetConfig+0x2fe>
 8006f98:	2308      	movs	r3, #8
 8006f9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f9e:	e016      	b.n	8006fce <UART_SetConfig+0x2fe>
 8006fa0:	2310      	movs	r3, #16
 8006fa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fa6:	e012      	b.n	8006fce <UART_SetConfig+0x2fe>
 8006fa8:	cfff69f3 	.word	0xcfff69f3
 8006fac:	40008000 	.word	0x40008000
 8006fb0:	40013800 	.word	0x40013800
 8006fb4:	40021000 	.word	0x40021000
 8006fb8:	40004400 	.word	0x40004400
 8006fbc:	40004800 	.word	0x40004800
 8006fc0:	40004c00 	.word	0x40004c00
 8006fc4:	40005000 	.word	0x40005000
 8006fc8:	2310      	movs	r3, #16
 8006fca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4aae      	ldr	r2, [pc, #696]	@ (800728c <UART_SetConfig+0x5bc>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	f040 8097 	bne.w	8007108 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006fda:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006fde:	2b08      	cmp	r3, #8
 8006fe0:	d823      	bhi.n	800702a <UART_SetConfig+0x35a>
 8006fe2:	a201      	add	r2, pc, #4	@ (adr r2, 8006fe8 <UART_SetConfig+0x318>)
 8006fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fe8:	0800700d 	.word	0x0800700d
 8006fec:	0800702b 	.word	0x0800702b
 8006ff0:	08007015 	.word	0x08007015
 8006ff4:	0800702b 	.word	0x0800702b
 8006ff8:	0800701b 	.word	0x0800701b
 8006ffc:	0800702b 	.word	0x0800702b
 8007000:	0800702b 	.word	0x0800702b
 8007004:	0800702b 	.word	0x0800702b
 8007008:	08007023 	.word	0x08007023
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800700c:	f7fd ffec 	bl	8004fe8 <HAL_RCC_GetPCLK1Freq>
 8007010:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007012:	e010      	b.n	8007036 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007014:	4b9e      	ldr	r3, [pc, #632]	@ (8007290 <UART_SetConfig+0x5c0>)
 8007016:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007018:	e00d      	b.n	8007036 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800701a:	f7fd ff77 	bl	8004f0c <HAL_RCC_GetSysClockFreq>
 800701e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007020:	e009      	b.n	8007036 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007022:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007026:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007028:	e005      	b.n	8007036 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800702a:	2300      	movs	r3, #0
 800702c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007034:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007038:	2b00      	cmp	r3, #0
 800703a:	f000 8130 	beq.w	800729e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007042:	4a94      	ldr	r2, [pc, #592]	@ (8007294 <UART_SetConfig+0x5c4>)
 8007044:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007048:	461a      	mov	r2, r3
 800704a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800704c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007050:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	685a      	ldr	r2, [r3, #4]
 8007056:	4613      	mov	r3, r2
 8007058:	005b      	lsls	r3, r3, #1
 800705a:	4413      	add	r3, r2
 800705c:	69ba      	ldr	r2, [r7, #24]
 800705e:	429a      	cmp	r2, r3
 8007060:	d305      	bcc.n	800706e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007068:	69ba      	ldr	r2, [r7, #24]
 800706a:	429a      	cmp	r2, r3
 800706c:	d903      	bls.n	8007076 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007074:	e113      	b.n	800729e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007078:	2200      	movs	r2, #0
 800707a:	60bb      	str	r3, [r7, #8]
 800707c:	60fa      	str	r2, [r7, #12]
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007082:	4a84      	ldr	r2, [pc, #528]	@ (8007294 <UART_SetConfig+0x5c4>)
 8007084:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007088:	b29b      	uxth	r3, r3
 800708a:	2200      	movs	r2, #0
 800708c:	603b      	str	r3, [r7, #0]
 800708e:	607a      	str	r2, [r7, #4]
 8007090:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007094:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007098:	f7f9 fcdc 	bl	8000a54 <__aeabi_uldivmod>
 800709c:	4602      	mov	r2, r0
 800709e:	460b      	mov	r3, r1
 80070a0:	4610      	mov	r0, r2
 80070a2:	4619      	mov	r1, r3
 80070a4:	f04f 0200 	mov.w	r2, #0
 80070a8:	f04f 0300 	mov.w	r3, #0
 80070ac:	020b      	lsls	r3, r1, #8
 80070ae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80070b2:	0202      	lsls	r2, r0, #8
 80070b4:	6979      	ldr	r1, [r7, #20]
 80070b6:	6849      	ldr	r1, [r1, #4]
 80070b8:	0849      	lsrs	r1, r1, #1
 80070ba:	2000      	movs	r0, #0
 80070bc:	460c      	mov	r4, r1
 80070be:	4605      	mov	r5, r0
 80070c0:	eb12 0804 	adds.w	r8, r2, r4
 80070c4:	eb43 0905 	adc.w	r9, r3, r5
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	469a      	mov	sl, r3
 80070d0:	4693      	mov	fp, r2
 80070d2:	4652      	mov	r2, sl
 80070d4:	465b      	mov	r3, fp
 80070d6:	4640      	mov	r0, r8
 80070d8:	4649      	mov	r1, r9
 80070da:	f7f9 fcbb 	bl	8000a54 <__aeabi_uldivmod>
 80070de:	4602      	mov	r2, r0
 80070e0:	460b      	mov	r3, r1
 80070e2:	4613      	mov	r3, r2
 80070e4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80070e6:	6a3b      	ldr	r3, [r7, #32]
 80070e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070ec:	d308      	bcc.n	8007100 <UART_SetConfig+0x430>
 80070ee:	6a3b      	ldr	r3, [r7, #32]
 80070f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070f4:	d204      	bcs.n	8007100 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	6a3a      	ldr	r2, [r7, #32]
 80070fc:	60da      	str	r2, [r3, #12]
 80070fe:	e0ce      	b.n	800729e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007106:	e0ca      	b.n	800729e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	69db      	ldr	r3, [r3, #28]
 800710c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007110:	d166      	bne.n	80071e0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007112:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007116:	2b08      	cmp	r3, #8
 8007118:	d827      	bhi.n	800716a <UART_SetConfig+0x49a>
 800711a:	a201      	add	r2, pc, #4	@ (adr r2, 8007120 <UART_SetConfig+0x450>)
 800711c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007120:	08007145 	.word	0x08007145
 8007124:	0800714d 	.word	0x0800714d
 8007128:	08007155 	.word	0x08007155
 800712c:	0800716b 	.word	0x0800716b
 8007130:	0800715b 	.word	0x0800715b
 8007134:	0800716b 	.word	0x0800716b
 8007138:	0800716b 	.word	0x0800716b
 800713c:	0800716b 	.word	0x0800716b
 8007140:	08007163 	.word	0x08007163
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007144:	f7fd ff50 	bl	8004fe8 <HAL_RCC_GetPCLK1Freq>
 8007148:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800714a:	e014      	b.n	8007176 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800714c:	f7fd ff62 	bl	8005014 <HAL_RCC_GetPCLK2Freq>
 8007150:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007152:	e010      	b.n	8007176 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007154:	4b4e      	ldr	r3, [pc, #312]	@ (8007290 <UART_SetConfig+0x5c0>)
 8007156:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007158:	e00d      	b.n	8007176 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800715a:	f7fd fed7 	bl	8004f0c <HAL_RCC_GetSysClockFreq>
 800715e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007160:	e009      	b.n	8007176 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007162:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007166:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007168:	e005      	b.n	8007176 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800716a:	2300      	movs	r3, #0
 800716c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007174:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007178:	2b00      	cmp	r3, #0
 800717a:	f000 8090 	beq.w	800729e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007182:	4a44      	ldr	r2, [pc, #272]	@ (8007294 <UART_SetConfig+0x5c4>)
 8007184:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007188:	461a      	mov	r2, r3
 800718a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800718c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007190:	005a      	lsls	r2, r3, #1
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	085b      	lsrs	r3, r3, #1
 8007198:	441a      	add	r2, r3
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	fbb2 f3f3 	udiv	r3, r2, r3
 80071a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071a4:	6a3b      	ldr	r3, [r7, #32]
 80071a6:	2b0f      	cmp	r3, #15
 80071a8:	d916      	bls.n	80071d8 <UART_SetConfig+0x508>
 80071aa:	6a3b      	ldr	r3, [r7, #32]
 80071ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071b0:	d212      	bcs.n	80071d8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071b2:	6a3b      	ldr	r3, [r7, #32]
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	f023 030f 	bic.w	r3, r3, #15
 80071ba:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071bc:	6a3b      	ldr	r3, [r7, #32]
 80071be:	085b      	lsrs	r3, r3, #1
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	f003 0307 	and.w	r3, r3, #7
 80071c6:	b29a      	uxth	r2, r3
 80071c8:	8bfb      	ldrh	r3, [r7, #30]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	8bfa      	ldrh	r2, [r7, #30]
 80071d4:	60da      	str	r2, [r3, #12]
 80071d6:	e062      	b.n	800729e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80071de:	e05e      	b.n	800729e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80071e0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80071e4:	2b08      	cmp	r3, #8
 80071e6:	d828      	bhi.n	800723a <UART_SetConfig+0x56a>
 80071e8:	a201      	add	r2, pc, #4	@ (adr r2, 80071f0 <UART_SetConfig+0x520>)
 80071ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ee:	bf00      	nop
 80071f0:	08007215 	.word	0x08007215
 80071f4:	0800721d 	.word	0x0800721d
 80071f8:	08007225 	.word	0x08007225
 80071fc:	0800723b 	.word	0x0800723b
 8007200:	0800722b 	.word	0x0800722b
 8007204:	0800723b 	.word	0x0800723b
 8007208:	0800723b 	.word	0x0800723b
 800720c:	0800723b 	.word	0x0800723b
 8007210:	08007233 	.word	0x08007233
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007214:	f7fd fee8 	bl	8004fe8 <HAL_RCC_GetPCLK1Freq>
 8007218:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800721a:	e014      	b.n	8007246 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800721c:	f7fd fefa 	bl	8005014 <HAL_RCC_GetPCLK2Freq>
 8007220:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007222:	e010      	b.n	8007246 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007224:	4b1a      	ldr	r3, [pc, #104]	@ (8007290 <UART_SetConfig+0x5c0>)
 8007226:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007228:	e00d      	b.n	8007246 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800722a:	f7fd fe6f 	bl	8004f0c <HAL_RCC_GetSysClockFreq>
 800722e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007230:	e009      	b.n	8007246 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007232:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007236:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007238:	e005      	b.n	8007246 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800723a:	2300      	movs	r3, #0
 800723c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800723e:	2301      	movs	r3, #1
 8007240:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007244:	bf00      	nop
    }

    if (pclk != 0U)
 8007246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007248:	2b00      	cmp	r3, #0
 800724a:	d028      	beq.n	800729e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007250:	4a10      	ldr	r2, [pc, #64]	@ (8007294 <UART_SetConfig+0x5c4>)
 8007252:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007256:	461a      	mov	r2, r3
 8007258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800725a:	fbb3 f2f2 	udiv	r2, r3, r2
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	085b      	lsrs	r3, r3, #1
 8007264:	441a      	add	r2, r3
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	fbb2 f3f3 	udiv	r3, r2, r3
 800726e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007270:	6a3b      	ldr	r3, [r7, #32]
 8007272:	2b0f      	cmp	r3, #15
 8007274:	d910      	bls.n	8007298 <UART_SetConfig+0x5c8>
 8007276:	6a3b      	ldr	r3, [r7, #32]
 8007278:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800727c:	d20c      	bcs.n	8007298 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800727e:	6a3b      	ldr	r3, [r7, #32]
 8007280:	b29a      	uxth	r2, r3
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	60da      	str	r2, [r3, #12]
 8007288:	e009      	b.n	800729e <UART_SetConfig+0x5ce>
 800728a:	bf00      	nop
 800728c:	40008000 	.word	0x40008000
 8007290:	00f42400 	.word	0x00f42400
 8007294:	08007a00 	.word	0x08007a00
      }
      else
      {
        ret = HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	2201      	movs	r2, #1
 80072a2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	2201      	movs	r2, #1
 80072aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	2200      	movs	r2, #0
 80072b2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	2200      	movs	r2, #0
 80072b8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80072ba:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3730      	adds	r7, #48	@ 0x30
 80072c2:	46bd      	mov	sp, r7
 80072c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080072c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072d4:	f003 0308 	and.w	r3, r3, #8
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d00a      	beq.n	80072f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	430a      	orrs	r2, r1
 80072f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072f6:	f003 0301 	and.w	r3, r3, #1
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d00a      	beq.n	8007314 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	430a      	orrs	r2, r1
 8007312:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007318:	f003 0302 	and.w	r3, r3, #2
 800731c:	2b00      	cmp	r3, #0
 800731e:	d00a      	beq.n	8007336 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	430a      	orrs	r2, r1
 8007334:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800733a:	f003 0304 	and.w	r3, r3, #4
 800733e:	2b00      	cmp	r3, #0
 8007340:	d00a      	beq.n	8007358 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	430a      	orrs	r2, r1
 8007356:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800735c:	f003 0310 	and.w	r3, r3, #16
 8007360:	2b00      	cmp	r3, #0
 8007362:	d00a      	beq.n	800737a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	430a      	orrs	r2, r1
 8007378:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800737e:	f003 0320 	and.w	r3, r3, #32
 8007382:	2b00      	cmp	r3, #0
 8007384:	d00a      	beq.n	800739c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	430a      	orrs	r2, r1
 800739a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d01a      	beq.n	80073de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	430a      	orrs	r2, r1
 80073bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073c6:	d10a      	bne.n	80073de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	430a      	orrs	r2, r1
 80073dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00a      	beq.n	8007400 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	430a      	orrs	r2, r1
 80073fe:	605a      	str	r2, [r3, #4]
  }
}
 8007400:	bf00      	nop
 8007402:	370c      	adds	r7, #12
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b098      	sub	sp, #96	@ 0x60
 8007410:	af02      	add	r7, sp, #8
 8007412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800741c:	f7fa fe80 	bl	8002120 <HAL_GetTick>
 8007420:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 0308 	and.w	r3, r3, #8
 800742c:	2b08      	cmp	r3, #8
 800742e:	d12f      	bne.n	8007490 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007430:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007434:	9300      	str	r3, [sp, #0]
 8007436:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007438:	2200      	movs	r2, #0
 800743a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 f88e 	bl	8007560 <UART_WaitOnFlagUntilTimeout>
 8007444:	4603      	mov	r3, r0
 8007446:	2b00      	cmp	r3, #0
 8007448:	d022      	beq.n	8007490 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007452:	e853 3f00 	ldrex	r3, [r3]
 8007456:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800745a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800745e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	461a      	mov	r2, r3
 8007466:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007468:	647b      	str	r3, [r7, #68]	@ 0x44
 800746a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800746c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800746e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007470:	e841 2300 	strex	r3, r2, [r1]
 8007474:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007476:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007478:	2b00      	cmp	r3, #0
 800747a:	d1e6      	bne.n	800744a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2220      	movs	r2, #32
 8007480:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800748c:	2303      	movs	r3, #3
 800748e:	e063      	b.n	8007558 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f003 0304 	and.w	r3, r3, #4
 800749a:	2b04      	cmp	r3, #4
 800749c:	d149      	bne.n	8007532 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800749e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80074a2:	9300      	str	r3, [sp, #0]
 80074a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074a6:	2200      	movs	r2, #0
 80074a8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 f857 	bl	8007560 <UART_WaitOnFlagUntilTimeout>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d03c      	beq.n	8007532 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c0:	e853 3f00 	ldrex	r3, [r3]
 80074c4:	623b      	str	r3, [r7, #32]
   return(result);
 80074c6:	6a3b      	ldr	r3, [r7, #32]
 80074c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80074cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	461a      	mov	r2, r3
 80074d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80074d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80074dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074de:	e841 2300 	strex	r3, r2, [r1]
 80074e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80074e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d1e6      	bne.n	80074b8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	3308      	adds	r3, #8
 80074f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	e853 3f00 	ldrex	r3, [r3]
 80074f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f023 0301 	bic.w	r3, r3, #1
 8007500:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	3308      	adds	r3, #8
 8007508:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800750a:	61fa      	str	r2, [r7, #28]
 800750c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800750e:	69b9      	ldr	r1, [r7, #24]
 8007510:	69fa      	ldr	r2, [r7, #28]
 8007512:	e841 2300 	strex	r3, r2, [r1]
 8007516:	617b      	str	r3, [r7, #20]
   return(result);
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d1e5      	bne.n	80074ea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2220      	movs	r2, #32
 8007522:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800752e:	2303      	movs	r3, #3
 8007530:	e012      	b.n	8007558 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2220      	movs	r2, #32
 8007536:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2220      	movs	r2, #32
 800753e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007556:	2300      	movs	r3, #0
}
 8007558:	4618      	mov	r0, r3
 800755a:	3758      	adds	r7, #88	@ 0x58
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	603b      	str	r3, [r7, #0]
 800756c:	4613      	mov	r3, r2
 800756e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007570:	e04f      	b.n	8007612 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007572:	69bb      	ldr	r3, [r7, #24]
 8007574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007578:	d04b      	beq.n	8007612 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800757a:	f7fa fdd1 	bl	8002120 <HAL_GetTick>
 800757e:	4602      	mov	r2, r0
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	1ad3      	subs	r3, r2, r3
 8007584:	69ba      	ldr	r2, [r7, #24]
 8007586:	429a      	cmp	r2, r3
 8007588:	d302      	bcc.n	8007590 <UART_WaitOnFlagUntilTimeout+0x30>
 800758a:	69bb      	ldr	r3, [r7, #24]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d101      	bne.n	8007594 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007590:	2303      	movs	r3, #3
 8007592:	e04e      	b.n	8007632 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f003 0304 	and.w	r3, r3, #4
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d037      	beq.n	8007612 <UART_WaitOnFlagUntilTimeout+0xb2>
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	2b80      	cmp	r3, #128	@ 0x80
 80075a6:	d034      	beq.n	8007612 <UART_WaitOnFlagUntilTimeout+0xb2>
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	2b40      	cmp	r3, #64	@ 0x40
 80075ac:	d031      	beq.n	8007612 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	69db      	ldr	r3, [r3, #28]
 80075b4:	f003 0308 	and.w	r3, r3, #8
 80075b8:	2b08      	cmp	r3, #8
 80075ba:	d110      	bne.n	80075de <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	2208      	movs	r2, #8
 80075c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80075c4:	68f8      	ldr	r0, [r7, #12]
 80075c6:	f000 f838 	bl	800763a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2208      	movs	r2, #8
 80075ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	e029      	b.n	8007632 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	69db      	ldr	r3, [r3, #28]
 80075e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075ec:	d111      	bne.n	8007612 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80075f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80075f8:	68f8      	ldr	r0, [r7, #12]
 80075fa:	f000 f81e 	bl	800763a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2220      	movs	r2, #32
 8007602:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2200      	movs	r2, #0
 800760a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800760e:	2303      	movs	r3, #3
 8007610:	e00f      	b.n	8007632 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	69da      	ldr	r2, [r3, #28]
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	4013      	ands	r3, r2
 800761c:	68ba      	ldr	r2, [r7, #8]
 800761e:	429a      	cmp	r2, r3
 8007620:	bf0c      	ite	eq
 8007622:	2301      	moveq	r3, #1
 8007624:	2300      	movne	r3, #0
 8007626:	b2db      	uxtb	r3, r3
 8007628:	461a      	mov	r2, r3
 800762a:	79fb      	ldrb	r3, [r7, #7]
 800762c:	429a      	cmp	r2, r3
 800762e:	d0a0      	beq.n	8007572 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007630:	2300      	movs	r3, #0
}
 8007632:	4618      	mov	r0, r3
 8007634:	3710      	adds	r7, #16
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}

0800763a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800763a:	b480      	push	{r7}
 800763c:	b095      	sub	sp, #84	@ 0x54
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800764a:	e853 3f00 	ldrex	r3, [r3]
 800764e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007652:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007656:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	461a      	mov	r2, r3
 800765e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007660:	643b      	str	r3, [r7, #64]	@ 0x40
 8007662:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007664:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007666:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007668:	e841 2300 	strex	r3, r2, [r1]
 800766c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800766e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007670:	2b00      	cmp	r3, #0
 8007672:	d1e6      	bne.n	8007642 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	3308      	adds	r3, #8
 800767a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800767c:	6a3b      	ldr	r3, [r7, #32]
 800767e:	e853 3f00 	ldrex	r3, [r3]
 8007682:	61fb      	str	r3, [r7, #28]
   return(result);
 8007684:	69fb      	ldr	r3, [r7, #28]
 8007686:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800768a:	f023 0301 	bic.w	r3, r3, #1
 800768e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	3308      	adds	r3, #8
 8007696:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007698:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800769a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800769e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076a0:	e841 2300 	strex	r3, r2, [r1]
 80076a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80076a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d1e3      	bne.n	8007674 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d118      	bne.n	80076e6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	e853 3f00 	ldrex	r3, [r3]
 80076c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	f023 0310 	bic.w	r3, r3, #16
 80076c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	461a      	mov	r2, r3
 80076d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076d2:	61bb      	str	r3, [r7, #24]
 80076d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d6:	6979      	ldr	r1, [r7, #20]
 80076d8:	69ba      	ldr	r2, [r7, #24]
 80076da:	e841 2300 	strex	r3, r2, [r1]
 80076de:	613b      	str	r3, [r7, #16]
   return(result);
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d1e6      	bne.n	80076b4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2220      	movs	r2, #32
 80076ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80076fa:	bf00      	nop
 80076fc:	3754      	adds	r7, #84	@ 0x54
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr

08007706 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007706:	b480      	push	{r7}
 8007708:	b085      	sub	sp, #20
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007714:	2b01      	cmp	r3, #1
 8007716:	d101      	bne.n	800771c <HAL_UARTEx_DisableFifoMode+0x16>
 8007718:	2302      	movs	r3, #2
 800771a:	e027      	b.n	800776c <HAL_UARTEx_DisableFifoMode+0x66>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2201      	movs	r2, #1
 8007720:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2224      	movs	r2, #36	@ 0x24
 8007728:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f022 0201 	bic.w	r2, r2, #1
 8007742:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800774a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	68fa      	ldr	r2, [r7, #12]
 8007758:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2220      	movs	r2, #32
 800775e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800776a:	2300      	movs	r3, #0
}
 800776c:	4618      	mov	r0, r3
 800776e:	3714      	adds	r7, #20
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr

08007778 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007788:	2b01      	cmp	r3, #1
 800778a:	d101      	bne.n	8007790 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800778c:	2302      	movs	r3, #2
 800778e:	e02d      	b.n	80077ec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2201      	movs	r2, #1
 8007794:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2224      	movs	r2, #36	@ 0x24
 800779c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f022 0201 	bic.w	r2, r2, #1
 80077b6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	683a      	ldr	r2, [r7, #0]
 80077c8:	430a      	orrs	r2, r1
 80077ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 f84f 	bl	8007870 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	68fa      	ldr	r2, [r7, #12]
 80077d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2220      	movs	r2, #32
 80077de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80077ea:	2300      	movs	r3, #0
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3710      	adds	r7, #16
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007804:	2b01      	cmp	r3, #1
 8007806:	d101      	bne.n	800780c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007808:	2302      	movs	r3, #2
 800780a:	e02d      	b.n	8007868 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2201      	movs	r2, #1
 8007810:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2224      	movs	r2, #36	@ 0x24
 8007818:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f022 0201 	bic.w	r2, r2, #1
 8007832:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	683a      	ldr	r2, [r7, #0]
 8007844:	430a      	orrs	r2, r1
 8007846:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 f811 	bl	8007870 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	68fa      	ldr	r2, [r7, #12]
 8007854:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2220      	movs	r2, #32
 800785a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007866:	2300      	movs	r3, #0
}
 8007868:	4618      	mov	r0, r3
 800786a:	3710      	adds	r7, #16
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007870:	b480      	push	{r7}
 8007872:	b085      	sub	sp, #20
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800787c:	2b00      	cmp	r3, #0
 800787e:	d108      	bne.n	8007892 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2201      	movs	r2, #1
 8007884:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2201      	movs	r2, #1
 800788c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007890:	e031      	b.n	80078f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007892:	2308      	movs	r3, #8
 8007894:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007896:	2308      	movs	r3, #8
 8007898:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	0e5b      	lsrs	r3, r3, #25
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	f003 0307 	and.w	r3, r3, #7
 80078a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	0f5b      	lsrs	r3, r3, #29
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	f003 0307 	and.w	r3, r3, #7
 80078b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80078ba:	7bbb      	ldrb	r3, [r7, #14]
 80078bc:	7b3a      	ldrb	r2, [r7, #12]
 80078be:	4911      	ldr	r1, [pc, #68]	@ (8007904 <UARTEx_SetNbDataToProcess+0x94>)
 80078c0:	5c8a      	ldrb	r2, [r1, r2]
 80078c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80078c6:	7b3a      	ldrb	r2, [r7, #12]
 80078c8:	490f      	ldr	r1, [pc, #60]	@ (8007908 <UARTEx_SetNbDataToProcess+0x98>)
 80078ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80078cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80078d0:	b29a      	uxth	r2, r3
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80078d8:	7bfb      	ldrb	r3, [r7, #15]
 80078da:	7b7a      	ldrb	r2, [r7, #13]
 80078dc:	4909      	ldr	r1, [pc, #36]	@ (8007904 <UARTEx_SetNbDataToProcess+0x94>)
 80078de:	5c8a      	ldrb	r2, [r1, r2]
 80078e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80078e4:	7b7a      	ldrb	r2, [r7, #13]
 80078e6:	4908      	ldr	r1, [pc, #32]	@ (8007908 <UARTEx_SetNbDataToProcess+0x98>)
 80078e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80078ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80078ee:	b29a      	uxth	r2, r3
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80078f6:	bf00      	nop
 80078f8:	3714      	adds	r7, #20
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr
 8007902:	bf00      	nop
 8007904:	08007a18 	.word	0x08007a18
 8007908:	08007a20 	.word	0x08007a20

0800790c <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b082      	sub	sp, #8
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	ed93 7a06 	vldr	s14, [r3, #24]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	edd3 7a07 	vldr	s15, [r3, #28]
 8007922:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	edd3 7a08 	vldr	s15, [r3, #32]
 800792c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	edd3 7a06 	vldr	s15, [r3, #24]
 800793c:	eeb1 7a67 	vneg.f32	s14, s15
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	edd3 7a08 	vldr	s15, [r3, #32]
 8007946:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800794a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6a1a      	ldr	r2, [r3, #32]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d006      	beq.n	8007970 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	330c      	adds	r3, #12
 8007966:	220c      	movs	r2, #12
 8007968:	2100      	movs	r1, #0
 800796a:	4618      	mov	r0, r3
 800796c:	f000 f804 	bl	8007978 <memset>
  }

}
 8007970:	bf00      	nop
 8007972:	3708      	adds	r7, #8
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <memset>:
 8007978:	4402      	add	r2, r0
 800797a:	4603      	mov	r3, r0
 800797c:	4293      	cmp	r3, r2
 800797e:	d100      	bne.n	8007982 <memset+0xa>
 8007980:	4770      	bx	lr
 8007982:	f803 1b01 	strb.w	r1, [r3], #1
 8007986:	e7f9      	b.n	800797c <memset+0x4>

08007988 <__libc_init_array>:
 8007988:	b570      	push	{r4, r5, r6, lr}
 800798a:	4d0d      	ldr	r5, [pc, #52]	@ (80079c0 <__libc_init_array+0x38>)
 800798c:	4c0d      	ldr	r4, [pc, #52]	@ (80079c4 <__libc_init_array+0x3c>)
 800798e:	1b64      	subs	r4, r4, r5
 8007990:	10a4      	asrs	r4, r4, #2
 8007992:	2600      	movs	r6, #0
 8007994:	42a6      	cmp	r6, r4
 8007996:	d109      	bne.n	80079ac <__libc_init_array+0x24>
 8007998:	4d0b      	ldr	r5, [pc, #44]	@ (80079c8 <__libc_init_array+0x40>)
 800799a:	4c0c      	ldr	r4, [pc, #48]	@ (80079cc <__libc_init_array+0x44>)
 800799c:	f000 f818 	bl	80079d0 <_init>
 80079a0:	1b64      	subs	r4, r4, r5
 80079a2:	10a4      	asrs	r4, r4, #2
 80079a4:	2600      	movs	r6, #0
 80079a6:	42a6      	cmp	r6, r4
 80079a8:	d105      	bne.n	80079b6 <__libc_init_array+0x2e>
 80079aa:	bd70      	pop	{r4, r5, r6, pc}
 80079ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80079b0:	4798      	blx	r3
 80079b2:	3601      	adds	r6, #1
 80079b4:	e7ee      	b.n	8007994 <__libc_init_array+0xc>
 80079b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80079ba:	4798      	blx	r3
 80079bc:	3601      	adds	r6, #1
 80079be:	e7f2      	b.n	80079a6 <__libc_init_array+0x1e>
 80079c0:	08007a30 	.word	0x08007a30
 80079c4:	08007a30 	.word	0x08007a30
 80079c8:	08007a30 	.word	0x08007a30
 80079cc:	08007a34 	.word	0x08007a34

080079d0 <_init>:
 80079d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079d2:	bf00      	nop
 80079d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079d6:	bc08      	pop	{r3}
 80079d8:	469e      	mov	lr, r3
 80079da:	4770      	bx	lr

080079dc <_fini>:
 80079dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079de:	bf00      	nop
 80079e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079e2:	bc08      	pop	{r3}
 80079e4:	469e      	mov	lr, r3
 80079e6:	4770      	bx	lr
