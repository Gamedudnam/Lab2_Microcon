
Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b14  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08007cec  08007cec  00008cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d2c  08007d2c  00009078  2**0
                  CONTENTS
  4 .ARM          00000008  08007d2c  08007d2c  00008d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d34  08007d34  00009078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d34  08007d34  00008d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d38  08007d38  00008d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007d3c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  20000078  08007db4  00009078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000350  08007db4  00009350  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001796d  00000000  00000000  000090a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c9a  00000000  00000000  00020a15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f8  00000000  00000000  000236b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001064  00000000  00000000  00024ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028dd6  00000000  00000000  00025c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018a9c  00000000  00000000  0004e9e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011410e  00000000  00000000  0006747e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017b58c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c20  00000000  00000000  0017b5d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  001811f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000078 	.word	0x20000078
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007cd4 	.word	0x08007cd4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000007c 	.word	0x2000007c
 8000214:	08007cd4 	.word	0x08007cd4

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b96a 	b.w	8000d40 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	460c      	mov	r4, r1
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d14e      	bne.n	8000b2e <__udivmoddi4+0xaa>
 8000a90:	4694      	mov	ip, r2
 8000a92:	458c      	cmp	ip, r1
 8000a94:	4686      	mov	lr, r0
 8000a96:	fab2 f282 	clz	r2, r2
 8000a9a:	d962      	bls.n	8000b62 <__udivmoddi4+0xde>
 8000a9c:	b14a      	cbz	r2, 8000ab2 <__udivmoddi4+0x2e>
 8000a9e:	f1c2 0320 	rsb	r3, r2, #32
 8000aa2:	4091      	lsls	r1, r2
 8000aa4:	fa20 f303 	lsr.w	r3, r0, r3
 8000aa8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aac:	4319      	orrs	r1, r3
 8000aae:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ab2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ab6:	fa1f f68c 	uxth.w	r6, ip
 8000aba:	fbb1 f4f7 	udiv	r4, r1, r7
 8000abe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ac2:	fb07 1114 	mls	r1, r7, r4, r1
 8000ac6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aca:	fb04 f106 	mul.w	r1, r4, r6
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	d90a      	bls.n	8000ae8 <__udivmoddi4+0x64>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ada:	f080 8112 	bcs.w	8000d02 <__udivmoddi4+0x27e>
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	f240 810f 	bls.w	8000d02 <__udivmoddi4+0x27e>
 8000ae4:	3c02      	subs	r4, #2
 8000ae6:	4463      	add	r3, ip
 8000ae8:	1a59      	subs	r1, r3, r1
 8000aea:	fa1f f38e 	uxth.w	r3, lr
 8000aee:	fbb1 f0f7 	udiv	r0, r1, r7
 8000af2:	fb07 1110 	mls	r1, r7, r0, r1
 8000af6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000afa:	fb00 f606 	mul.w	r6, r0, r6
 8000afe:	429e      	cmp	r6, r3
 8000b00:	d90a      	bls.n	8000b18 <__udivmoddi4+0x94>
 8000b02:	eb1c 0303 	adds.w	r3, ip, r3
 8000b06:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b0a:	f080 80fc 	bcs.w	8000d06 <__udivmoddi4+0x282>
 8000b0e:	429e      	cmp	r6, r3
 8000b10:	f240 80f9 	bls.w	8000d06 <__udivmoddi4+0x282>
 8000b14:	4463      	add	r3, ip
 8000b16:	3802      	subs	r0, #2
 8000b18:	1b9b      	subs	r3, r3, r6
 8000b1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b1e:	2100      	movs	r1, #0
 8000b20:	b11d      	cbz	r5, 8000b2a <__udivmoddi4+0xa6>
 8000b22:	40d3      	lsrs	r3, r2
 8000b24:	2200      	movs	r2, #0
 8000b26:	e9c5 3200 	strd	r3, r2, [r5]
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d905      	bls.n	8000b3e <__udivmoddi4+0xba>
 8000b32:	b10d      	cbz	r5, 8000b38 <__udivmoddi4+0xb4>
 8000b34:	e9c5 0100 	strd	r0, r1, [r5]
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4608      	mov	r0, r1
 8000b3c:	e7f5      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000b3e:	fab3 f183 	clz	r1, r3
 8000b42:	2900      	cmp	r1, #0
 8000b44:	d146      	bne.n	8000bd4 <__udivmoddi4+0x150>
 8000b46:	42a3      	cmp	r3, r4
 8000b48:	d302      	bcc.n	8000b50 <__udivmoddi4+0xcc>
 8000b4a:	4290      	cmp	r0, r2
 8000b4c:	f0c0 80f0 	bcc.w	8000d30 <__udivmoddi4+0x2ac>
 8000b50:	1a86      	subs	r6, r0, r2
 8000b52:	eb64 0303 	sbc.w	r3, r4, r3
 8000b56:	2001      	movs	r0, #1
 8000b58:	2d00      	cmp	r5, #0
 8000b5a:	d0e6      	beq.n	8000b2a <__udivmoddi4+0xa6>
 8000b5c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b60:	e7e3      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000b62:	2a00      	cmp	r2, #0
 8000b64:	f040 8090 	bne.w	8000c88 <__udivmoddi4+0x204>
 8000b68:	eba1 040c 	sub.w	r4, r1, ip
 8000b6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b70:	fa1f f78c 	uxth.w	r7, ip
 8000b74:	2101      	movs	r1, #1
 8000b76:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b7e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b86:	fb07 f006 	mul.w	r0, r7, r6
 8000b8a:	4298      	cmp	r0, r3
 8000b8c:	d908      	bls.n	8000ba0 <__udivmoddi4+0x11c>
 8000b8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b92:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x11a>
 8000b98:	4298      	cmp	r0, r3
 8000b9a:	f200 80cd 	bhi.w	8000d38 <__udivmoddi4+0x2b4>
 8000b9e:	4626      	mov	r6, r4
 8000ba0:	1a1c      	subs	r4, r3, r0
 8000ba2:	fa1f f38e 	uxth.w	r3, lr
 8000ba6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000baa:	fb08 4410 	mls	r4, r8, r0, r4
 8000bae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bb2:	fb00 f707 	mul.w	r7, r0, r7
 8000bb6:	429f      	cmp	r7, r3
 8000bb8:	d908      	bls.n	8000bcc <__udivmoddi4+0x148>
 8000bba:	eb1c 0303 	adds.w	r3, ip, r3
 8000bbe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bc2:	d202      	bcs.n	8000bca <__udivmoddi4+0x146>
 8000bc4:	429f      	cmp	r7, r3
 8000bc6:	f200 80b0 	bhi.w	8000d2a <__udivmoddi4+0x2a6>
 8000bca:	4620      	mov	r0, r4
 8000bcc:	1bdb      	subs	r3, r3, r7
 8000bce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bd2:	e7a5      	b.n	8000b20 <__udivmoddi4+0x9c>
 8000bd4:	f1c1 0620 	rsb	r6, r1, #32
 8000bd8:	408b      	lsls	r3, r1
 8000bda:	fa22 f706 	lsr.w	r7, r2, r6
 8000bde:	431f      	orrs	r7, r3
 8000be0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000be4:	fa04 f301 	lsl.w	r3, r4, r1
 8000be8:	ea43 030c 	orr.w	r3, r3, ip
 8000bec:	40f4      	lsrs	r4, r6
 8000bee:	fa00 f801 	lsl.w	r8, r0, r1
 8000bf2:	0c38      	lsrs	r0, r7, #16
 8000bf4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bf8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bfc:	fa1f fc87 	uxth.w	ip, r7
 8000c00:	fb00 441e 	mls	r4, r0, lr, r4
 8000c04:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c08:	fb0e f90c 	mul.w	r9, lr, ip
 8000c0c:	45a1      	cmp	r9, r4
 8000c0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c12:	d90a      	bls.n	8000c2a <__udivmoddi4+0x1a6>
 8000c14:	193c      	adds	r4, r7, r4
 8000c16:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c1a:	f080 8084 	bcs.w	8000d26 <__udivmoddi4+0x2a2>
 8000c1e:	45a1      	cmp	r9, r4
 8000c20:	f240 8081 	bls.w	8000d26 <__udivmoddi4+0x2a2>
 8000c24:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c28:	443c      	add	r4, r7
 8000c2a:	eba4 0409 	sub.w	r4, r4, r9
 8000c2e:	fa1f f983 	uxth.w	r9, r3
 8000c32:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c36:	fb00 4413 	mls	r4, r0, r3, r4
 8000c3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c3e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c42:	45a4      	cmp	ip, r4
 8000c44:	d907      	bls.n	8000c56 <__udivmoddi4+0x1d2>
 8000c46:	193c      	adds	r4, r7, r4
 8000c48:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c4c:	d267      	bcs.n	8000d1e <__udivmoddi4+0x29a>
 8000c4e:	45a4      	cmp	ip, r4
 8000c50:	d965      	bls.n	8000d1e <__udivmoddi4+0x29a>
 8000c52:	3b02      	subs	r3, #2
 8000c54:	443c      	add	r4, r7
 8000c56:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c5a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c5e:	eba4 040c 	sub.w	r4, r4, ip
 8000c62:	429c      	cmp	r4, r3
 8000c64:	46ce      	mov	lr, r9
 8000c66:	469c      	mov	ip, r3
 8000c68:	d351      	bcc.n	8000d0e <__udivmoddi4+0x28a>
 8000c6a:	d04e      	beq.n	8000d0a <__udivmoddi4+0x286>
 8000c6c:	b155      	cbz	r5, 8000c84 <__udivmoddi4+0x200>
 8000c6e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c72:	eb64 040c 	sbc.w	r4, r4, ip
 8000c76:	fa04 f606 	lsl.w	r6, r4, r6
 8000c7a:	40cb      	lsrs	r3, r1
 8000c7c:	431e      	orrs	r6, r3
 8000c7e:	40cc      	lsrs	r4, r1
 8000c80:	e9c5 6400 	strd	r6, r4, [r5]
 8000c84:	2100      	movs	r1, #0
 8000c86:	e750      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000c88:	f1c2 0320 	rsb	r3, r2, #32
 8000c8c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c94:	fa24 f303 	lsr.w	r3, r4, r3
 8000c98:	4094      	lsls	r4, r2
 8000c9a:	430c      	orrs	r4, r1
 8000c9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca4:	fa1f f78c 	uxth.w	r7, ip
 8000ca8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cac:	fb08 3110 	mls	r1, r8, r0, r3
 8000cb0:	0c23      	lsrs	r3, r4, #16
 8000cb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb6:	fb00 f107 	mul.w	r1, r0, r7
 8000cba:	4299      	cmp	r1, r3
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x24c>
 8000cbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cc6:	d22c      	bcs.n	8000d22 <__udivmoddi4+0x29e>
 8000cc8:	4299      	cmp	r1, r3
 8000cca:	d92a      	bls.n	8000d22 <__udivmoddi4+0x29e>
 8000ccc:	3802      	subs	r0, #2
 8000cce:	4463      	add	r3, ip
 8000cd0:	1a5b      	subs	r3, r3, r1
 8000cd2:	b2a4      	uxth	r4, r4
 8000cd4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cd8:	fb08 3311 	mls	r3, r8, r1, r3
 8000cdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce0:	fb01 f307 	mul.w	r3, r1, r7
 8000ce4:	42a3      	cmp	r3, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x276>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cf0:	d213      	bcs.n	8000d1a <__udivmoddi4+0x296>
 8000cf2:	42a3      	cmp	r3, r4
 8000cf4:	d911      	bls.n	8000d1a <__udivmoddi4+0x296>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	4464      	add	r4, ip
 8000cfa:	1ae4      	subs	r4, r4, r3
 8000cfc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d00:	e739      	b.n	8000b76 <__udivmoddi4+0xf2>
 8000d02:	4604      	mov	r4, r0
 8000d04:	e6f0      	b.n	8000ae8 <__udivmoddi4+0x64>
 8000d06:	4608      	mov	r0, r1
 8000d08:	e706      	b.n	8000b18 <__udivmoddi4+0x94>
 8000d0a:	45c8      	cmp	r8, r9
 8000d0c:	d2ae      	bcs.n	8000c6c <__udivmoddi4+0x1e8>
 8000d0e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d12:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d16:	3801      	subs	r0, #1
 8000d18:	e7a8      	b.n	8000c6c <__udivmoddi4+0x1e8>
 8000d1a:	4631      	mov	r1, r6
 8000d1c:	e7ed      	b.n	8000cfa <__udivmoddi4+0x276>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	e799      	b.n	8000c56 <__udivmoddi4+0x1d2>
 8000d22:	4630      	mov	r0, r6
 8000d24:	e7d4      	b.n	8000cd0 <__udivmoddi4+0x24c>
 8000d26:	46d6      	mov	lr, sl
 8000d28:	e77f      	b.n	8000c2a <__udivmoddi4+0x1a6>
 8000d2a:	4463      	add	r3, ip
 8000d2c:	3802      	subs	r0, #2
 8000d2e:	e74d      	b.n	8000bcc <__udivmoddi4+0x148>
 8000d30:	4606      	mov	r6, r0
 8000d32:	4623      	mov	r3, r4
 8000d34:	4608      	mov	r0, r1
 8000d36:	e70f      	b.n	8000b58 <__udivmoddi4+0xd4>
 8000d38:	3e02      	subs	r6, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	e730      	b.n	8000ba0 <__udivmoddi4+0x11c>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_idiv0>:
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop

08000d44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d4a:	f001 fa26 	bl	800219a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d4e:	f000 fa89 	bl	8001264 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d52:	f000 fd69 	bl	8001828 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d56:	f000 fd3d 	bl	80017d4 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000d5a:	f000 fb67 	bl	800142c <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 8000d5e:	f000 fc6b 	bl	8001638 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000d62:	f000 facb 	bl	80012fc <MX_ADC1_Init>
  MX_TIM1_Init();
 8000d66:	f000 fbab 	bl	80014c0 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000d6a:	f000 fcbb 	bl	80016e4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8000d6e:	213c      	movs	r1, #60	@ 0x3c
 8000d70:	489c      	ldr	r0, [pc, #624]	@ (8000fe4 <main+0x2a0>)
 8000d72:	f005 f85d 	bl	8005e30 <HAL_TIM_Encoder_Start>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000d76:	217f      	movs	r1, #127	@ 0x7f
 8000d78:	489b      	ldr	r0, [pc, #620]	@ (8000fe8 <main+0x2a4>)
 8000d7a:	f002 ff47 	bl	8003c0c <HAL_ADCEx_Calibration_Start>
//  PID.Kp =12;
//  PID.Ki =0.0001;
//  PID.Kd =2.5;

  // motor
  PID.Kp =3;
 8000d7e:	4b9b      	ldr	r3, [pc, #620]	@ (8000fec <main+0x2a8>)
 8000d80:	4a9b      	ldr	r2, [pc, #620]	@ (8000ff0 <main+0x2ac>)
 8000d82:	619a      	str	r2, [r3, #24]
  PID.Ki =0;
 8000d84:	4b99      	ldr	r3, [pc, #612]	@ (8000fec <main+0x2a8>)
 8000d86:	f04f 0200 	mov.w	r2, #0
 8000d8a:	61da      	str	r2, [r3, #28]
  PID.Kd =0;
 8000d8c:	4b97      	ldr	r3, [pc, #604]	@ (8000fec <main+0x2a8>)
 8000d8e:	f04f 0200 	mov.w	r2, #0
 8000d92:	621a      	str	r2, [r3, #32]

  arm_pid_init_f32(&PID, 0);
 8000d94:	2100      	movs	r1, #0
 8000d96:	4895      	ldr	r0, [pc, #596]	@ (8000fec <main+0x2a8>)
 8000d98:	f006 ff3a 	bl	8007c10 <arm_pid_init_f32>
  HAL_TIM_Base_Start(&htim1);
 8000d9c:	4895      	ldr	r0, [pc, #596]	@ (8000ff4 <main+0x2b0>)
 8000d9e:	f004 fdbd 	bl	800591c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000da2:	2100      	movs	r1, #0
 8000da4:	4893      	ldr	r0, [pc, #588]	@ (8000ff4 <main+0x2b0>)
 8000da6:	f004 fe8b 	bl	8005ac0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000daa:	2104      	movs	r1, #4
 8000dac:	4891      	ldr	r0, [pc, #580]	@ (8000ff4 <main+0x2b0>)
 8000dae:	f004 fe87 	bl	8005ac0 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim4);
 8000db2:	4891      	ldr	r0, [pc, #580]	@ (8000ff8 <main+0x2b4>)
 8000db4:	f004 fdb2 	bl	800591c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000db8:	2100      	movs	r1, #0
 8000dba:	488f      	ldr	r0, [pc, #572]	@ (8000ff8 <main+0x2b4>)
 8000dbc:	f004 fe80 	bl	8005ac0 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (check == 1)
 8000dc0:	4b8e      	ldr	r3, [pc, #568]	@ (8000ffc <main+0x2b8>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	f040 813b 	bne.w	8001040 <main+0x2fc>
	  {
		  NO1();
 8000dca:	f000 fdb5 	bl	8001938 <NO1>
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000dce:	4b89      	ldr	r3, [pc, #548]	@ (8000ff4 <main+0x2b0>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	635a      	str	r2, [r3, #52]	@ 0x34
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8000dd6:	4b87      	ldr	r3, [pc, #540]	@ (8000ff4 <main+0x2b0>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	2200      	movs	r2, #0
 8000ddc:	639a      	str	r2, [r3, #56]	@ 0x38
		  setposition2 = ADC1_Channel[1].data;
 8000dde:	4b88      	ldr	r3, [pc, #544]	@ (8001000 <main+0x2bc>)
 8000de0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000de4:	ee07 3a90 	vmov	s15, r3
 8000de8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dec:	4b85      	ldr	r3, [pc, #532]	@ (8001004 <main+0x2c0>)
 8000dee:	edc3 7a00 	vstr	s15, [r3]
		  position2 = ADC1_Channel[2].data;
 8000df2:	4b83      	ldr	r3, [pc, #524]	@ (8001000 <main+0x2bc>)
 8000df4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8000df8:	ee07 3a90 	vmov	s15, r3
 8000dfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e00:	4b81      	ldr	r3, [pc, #516]	@ (8001008 <main+0x2c4>)
 8000e02:	edc3 7a00 	vstr	s15, [r3]
		  Diff2 = ADC1_Channel[1].data - ADC1_Channel[2].data;
 8000e06:	4b7e      	ldr	r3, [pc, #504]	@ (8001000 <main+0x2bc>)
 8000e08:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4b7c      	ldr	r3, [pc, #496]	@ (8001000 <main+0x2bc>)
 8000e10:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	4a7d      	ldr	r2, [pc, #500]	@ (800100c <main+0x2c8>)
 8000e18:	6013      	str	r3, [r2, #0]
		  static uint32_t timestamp =0;
		  if(timestamp < HAL_GetTick())
 8000e1a:	f001 fa23 	bl	8002264 <HAL_GetTick>
 8000e1e:	4602      	mov	r2, r0
 8000e20:	4b7b      	ldr	r3, [pc, #492]	@ (8001010 <main+0x2cc>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d9cb      	bls.n	8000dc0 <main+0x7c>
		  {
			  timestamp = HAL_GetTick()+1;
 8000e28:	f001 fa1c 	bl	8002264 <HAL_GetTick>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	3301      	adds	r3, #1
 8000e30:	4a77      	ldr	r2, [pc, #476]	@ (8001010 <main+0x2cc>)
 8000e32:	6013      	str	r3, [r2, #0]
			  Vfeedback2 = arm_pid_f32(&PID, setposition2 - position2);
 8000e34:	4b73      	ldr	r3, [pc, #460]	@ (8001004 <main+0x2c0>)
 8000e36:	ed93 7a00 	vldr	s14, [r3]
 8000e3a:	4b73      	ldr	r3, [pc, #460]	@ (8001008 <main+0x2c4>)
 8000e3c:	edd3 7a00 	vldr	s15, [r3]
 8000e40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e44:	4b69      	ldr	r3, [pc, #420]	@ (8000fec <main+0x2a8>)
 8000e46:	617b      	str	r3, [r7, #20]
 8000e48:	edc7 7a04 	vstr	s15, [r7, #16]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	ed93 7a00 	vldr	s14, [r3]
 8000e52:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e56:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	edd3 6a01 	vldr	s13, [r3, #4]
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	edd3 7a03 	vldr	s15, [r3, #12]
 8000e66:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8000e6a:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	edd3 6a02 	vldr	s13, [r3, #8]
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	edd3 7a04 	vldr	s15, [r3, #16]
 8000e7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8000e88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e8c:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	68da      	ldr	r2, [r3, #12]
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	68fa      	ldr	r2, [r7, #12]
 8000ea2:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	4a5b      	ldr	r2, [pc, #364]	@ (8001014 <main+0x2d0>)
 8000ea8:	6013      	str	r3, [r2, #0]
			  position2 = PlantSimulation(Vfeedback2);
 8000eaa:	4b5a      	ldr	r3, [pc, #360]	@ (8001014 <main+0x2d0>)
 8000eac:	edd3 7a00 	vldr	s15, [r3]
 8000eb0:	eeb0 0a67 	vmov.f32	s0, s15
 8000eb4:	f000 fe4c 	bl	8001b50 <PlantSimulation>
 8000eb8:	eef0 7a40 	vmov.f32	s15, s0
 8000ebc:	4b52      	ldr	r3, [pc, #328]	@ (8001008 <main+0x2c4>)
 8000ebe:	edc3 7a00 	vstr	s15, [r3]
			  if (Vfeedback2 > 9999)
 8000ec2:	4b54      	ldr	r3, [pc, #336]	@ (8001014 <main+0x2d0>)
 8000ec4:	edd3 7a00 	vldr	s15, [r3]
 8000ec8:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8001018 <main+0x2d4>
 8000ecc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ed4:	dd02      	ble.n	8000edc <main+0x198>
			  {
				  Vfeedback2 = 9999;
 8000ed6:	4b4f      	ldr	r3, [pc, #316]	@ (8001014 <main+0x2d0>)
 8000ed8:	4a50      	ldr	r2, [pc, #320]	@ (800101c <main+0x2d8>)
 8000eda:	601a      	str	r2, [r3, #0]
			  }
			  if (Vfeedback2 < -9999)
 8000edc:	4b4d      	ldr	r3, [pc, #308]	@ (8001014 <main+0x2d0>)
 8000ede:	edd3 7a00 	vldr	s15, [r3]
 8000ee2:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8001020 <main+0x2dc>
 8000ee6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eee:	d502      	bpl.n	8000ef6 <main+0x1b2>
			  {
				  Vfeedback2 = -9999;
 8000ef0:	4b48      	ldr	r3, [pc, #288]	@ (8001014 <main+0x2d0>)
 8000ef2:	4a4c      	ldr	r2, [pc, #304]	@ (8001024 <main+0x2e0>)
 8000ef4:	601a      	str	r2, [r3, #0]
			  }
			  if (Vfeedback2 > 0 && Vfeedback2 < 1000)
 8000ef6:	4b47      	ldr	r3, [pc, #284]	@ (8001014 <main+0x2d0>)
 8000ef8:	edd3 7a00 	vldr	s15, [r3]
 8000efc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f04:	dd0c      	ble.n	8000f20 <main+0x1dc>
 8000f06:	4b43      	ldr	r3, [pc, #268]	@ (8001014 <main+0x2d0>)
 8000f08:	edd3 7a00 	vldr	s15, [r3]
 8000f0c:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8001028 <main+0x2e4>
 8000f10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f18:	d502      	bpl.n	8000f20 <main+0x1dc>
			  {
				  Vfeedback2 = 1000;
 8000f1a:	4b3e      	ldr	r3, [pc, #248]	@ (8001014 <main+0x2d0>)
 8000f1c:	4a43      	ldr	r2, [pc, #268]	@ (800102c <main+0x2e8>)
 8000f1e:	601a      	str	r2, [r3, #0]
			  }
			  if (Vfeedback2 < 0 && Vfeedback2 > -1000)
 8000f20:	4b3c      	ldr	r3, [pc, #240]	@ (8001014 <main+0x2d0>)
 8000f22:	edd3 7a00 	vldr	s15, [r3]
 8000f26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f2e:	d50c      	bpl.n	8000f4a <main+0x206>
 8000f30:	4b38      	ldr	r3, [pc, #224]	@ (8001014 <main+0x2d0>)
 8000f32:	edd3 7a00 	vldr	s15, [r3]
 8000f36:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8001030 <main+0x2ec>
 8000f3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f42:	dd02      	ble.n	8000f4a <main+0x206>
			  {
				  Vfeedback2 = -1000;
 8000f44:	4b33      	ldr	r3, [pc, #204]	@ (8001014 <main+0x2d0>)
 8000f46:	4a3b      	ldr	r2, [pc, #236]	@ (8001034 <main+0x2f0>)
 8000f48:	601a      	str	r2, [r3, #0]
			  }
			  if (Diff2 < 0)
 8000f4a:	4b30      	ldr	r3, [pc, #192]	@ (800100c <main+0x2c8>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	da1c      	bge.n	8000f8c <main+0x248>
			  {
				  G = 1;
 8000f52:	4b39      	ldr	r3, [pc, #228]	@ (8001038 <main+0x2f4>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	601a      	str	r2, [r3, #0]
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,GPIO_PIN_SET);
 8000f58:	2201      	movs	r2, #1
 8000f5a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f62:	f003 fc09 	bl	8004778 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f6c:	4833      	ldr	r0, [pc, #204]	@ (800103c <main+0x2f8>)
 8000f6e:	f003 fc03 	bl	8004778 <HAL_GPIO_WritePin>
				  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, -Vfeedback2);
 8000f72:	4b28      	ldr	r3, [pc, #160]	@ (8001014 <main+0x2d0>)
 8000f74:	edd3 7a00 	vldr	s15, [r3]
 8000f78:	eef1 7a67 	vneg.f32	s15, s15
 8000f7c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff8 <main+0x2b4>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f84:	ee17 2a90 	vmov	r2, s15
 8000f88:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f8a:	e01d      	b.n	8000fc8 <main+0x284>
			  }
			  else if (Diff2 > 0)
 8000f8c:	4b1f      	ldr	r3, [pc, #124]	@ (800100c <main+0x2c8>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	dd19      	ble.n	8000fc8 <main+0x284>
			  {
				  G = 2;
 8000f94:	4b28      	ldr	r3, [pc, #160]	@ (8001038 <main+0x2f4>)
 8000f96:	2202      	movs	r2, #2
 8000f98:	601a      	str	r2, [r3, #0]
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,GPIO_PIN_RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fa0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fa4:	f003 fbe8 	bl	8004778 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,GPIO_PIN_SET);
 8000fa8:	2201      	movs	r2, #1
 8000faa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fae:	4823      	ldr	r0, [pc, #140]	@ (800103c <main+0x2f8>)
 8000fb0:	f003 fbe2 	bl	8004778 <HAL_GPIO_WritePin>
				  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, Vfeedback2);
 8000fb4:	4b17      	ldr	r3, [pc, #92]	@ (8001014 <main+0x2d0>)
 8000fb6:	edd3 7a00 	vldr	s15, [r3]
 8000fba:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff8 <main+0x2b4>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fc2:	ee17 2a90 	vmov	r2, s15
 8000fc6:	635a      	str	r2, [r3, #52]	@ 0x34
			  }
			  if (Diff2 == 0)
 8000fc8:	4b10      	ldr	r3, [pc, #64]	@ (800100c <main+0x2c8>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	f47f aef7 	bne.w	8000dc0 <main+0x7c>
			  {
				  G = 3;
 8000fd2:	4b19      	ldr	r3, [pc, #100]	@ (8001038 <main+0x2f4>)
 8000fd4:	2203      	movs	r2, #3
 8000fd6:	601a      	str	r2, [r3, #0]
				  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8000fd8:	4b07      	ldr	r3, [pc, #28]	@ (8000ff8 <main+0x2b4>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	635a      	str	r2, [r3, #52]	@ 0x34
 8000fe0:	e6ee      	b.n	8000dc0 <main+0x7c>
 8000fe2:	bf00      	nop
 8000fe4:	20000240 	.word	0x20000240
 8000fe8:	20000094 	.word	0x20000094
 8000fec:	200002e8 	.word	0x200002e8
 8000ff0:	40400000 	.word	0x40400000
 8000ff4:	200001f4 	.word	0x200001f4
 8000ff8:	2000028c 	.word	0x2000028c
 8000ffc:	200002d8 	.word	0x200002d8
 8001000:	20000000 	.word	0x20000000
 8001004:	2000031c 	.word	0x2000031c
 8001008:	20000318 	.word	0x20000318
 800100c:	20000330 	.word	0x20000330
 8001010:	20000334 	.word	0x20000334
 8001014:	20000320 	.word	0x20000320
 8001018:	461c3c00 	.word	0x461c3c00
 800101c:	461c3c00 	.word	0x461c3c00
 8001020:	c61c3c00 	.word	0xc61c3c00
 8001024:	c61c3c00 	.word	0xc61c3c00
 8001028:	447a0000 	.word	0x447a0000
 800102c:	447a0000 	.word	0x447a0000
 8001030:	c47a0000 	.word	0xc47a0000
 8001034:	c47a0000 	.word	0xc47a0000
 8001038:	20000328 	.word	0x20000328
 800103c:	48000400 	.word	0x48000400
			  }
		  }
	  }
	  else if (check == 2)
 8001040:	4b78      	ldr	r3, [pc, #480]	@ (8001224 <main+0x4e0>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b02      	cmp	r3, #2
 8001046:	f040 80e1 	bne.w	800120c <main+0x4c8>
	  {
		  NO2();
 800104a:	f000 fcf1 	bl	8001a30 <NO2>
		  setposition = Gain;
 800104e:	4b76      	ldr	r3, [pc, #472]	@ (8001228 <main+0x4e4>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a76      	ldr	r2, [pc, #472]	@ (800122c <main+0x4e8>)
 8001054:	6013      	str	r3, [r2, #0]
		  position = QEIReadRaw;
 8001056:	4b76      	ldr	r3, [pc, #472]	@ (8001230 <main+0x4ec>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	ee07 3a90 	vmov	s15, r3
 800105e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001062:	4b74      	ldr	r3, [pc, #464]	@ (8001234 <main+0x4f0>)
 8001064:	edc3 7a00 	vstr	s15, [r3]
		  Diff = Gain - QEIReadRaw;
 8001068:	4b6f      	ldr	r3, [pc, #444]	@ (8001228 <main+0x4e4>)
 800106a:	ed93 7a00 	vldr	s14, [r3]
 800106e:	4b70      	ldr	r3, [pc, #448]	@ (8001230 <main+0x4ec>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	ee07 3a90 	vmov	s15, r3
 8001076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800107a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800107e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001082:	ee17 2a90 	vmov	r2, s15
 8001086:	4b6c      	ldr	r3, [pc, #432]	@ (8001238 <main+0x4f4>)
 8001088:	601a      	str	r2, [r3, #0]
		  static uint32_t timestamp =0;
		  if(timestamp < HAL_GetTick())
 800108a:	f001 f8eb 	bl	8002264 <HAL_GetTick>
 800108e:	4602      	mov	r2, r0
 8001090:	4b6a      	ldr	r3, [pc, #424]	@ (800123c <main+0x4f8>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	429a      	cmp	r2, r3
 8001096:	f67f ae93 	bls.w	8000dc0 <main+0x7c>
		  {
			  timestamp = HAL_GetTick()+1;
 800109a:	f001 f8e3 	bl	8002264 <HAL_GetTick>
 800109e:	4603      	mov	r3, r0
 80010a0:	3301      	adds	r3, #1
 80010a2:	4a66      	ldr	r2, [pc, #408]	@ (800123c <main+0x4f8>)
 80010a4:	6013      	str	r3, [r2, #0]
			  Vfeedback = arm_pid_f32(&PID, setposition - position);
 80010a6:	4b61      	ldr	r3, [pc, #388]	@ (800122c <main+0x4e8>)
 80010a8:	ed93 7a00 	vldr	s14, [r3]
 80010ac:	4b61      	ldr	r3, [pc, #388]	@ (8001234 <main+0x4f0>)
 80010ae:	edd3 7a00 	vldr	s15, [r3]
 80010b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010b6:	4b62      	ldr	r3, [pc, #392]	@ (8001240 <main+0x4fc>)
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	edc7 7a01 	vstr	s15, [r7, #4]
    out = (S->A0 * in) +
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	ed93 7a00 	vldr	s14, [r3]
 80010c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80010c8:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	edd3 6a01 	vldr	s13, [r3, #4]
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	edd3 7a03 	vldr	s15, [r3, #12]
 80010d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80010dc:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	edd3 6a02 	vldr	s13, [r3, #8]
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	edd3 7a04 	vldr	s15, [r3, #16]
 80010ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80010fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010fe:	edc7 7a00 	vstr	s15, [r7]
    S->state[1] = S->state[0];
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	68da      	ldr	r2, [r3, #12]
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	683a      	ldr	r2, [r7, #0]
 8001114:	615a      	str	r2, [r3, #20]
    return (out);
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	4a4a      	ldr	r2, [pc, #296]	@ (8001244 <main+0x500>)
 800111a:	6013      	str	r3, [r2, #0]
			  position = PlantSimulation(Vfeedback);
 800111c:	4b49      	ldr	r3, [pc, #292]	@ (8001244 <main+0x500>)
 800111e:	edd3 7a00 	vldr	s15, [r3]
 8001122:	eeb0 0a67 	vmov.f32	s0, s15
 8001126:	f000 fd13 	bl	8001b50 <PlantSimulation>
 800112a:	eef0 7a40 	vmov.f32	s15, s0
 800112e:	4b41      	ldr	r3, [pc, #260]	@ (8001234 <main+0x4f0>)
 8001130:	edc3 7a00 	vstr	s15, [r3]
			  if (Vfeedback > 19999)
 8001134:	4b43      	ldr	r3, [pc, #268]	@ (8001244 <main+0x500>)
 8001136:	edd3 7a00 	vldr	s15, [r3]
 800113a:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8001248 <main+0x504>
 800113e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001146:	dd02      	ble.n	800114e <main+0x40a>
			  {
				  Vfeedback = 19999;
 8001148:	4b3e      	ldr	r3, [pc, #248]	@ (8001244 <main+0x500>)
 800114a:	4a40      	ldr	r2, [pc, #256]	@ (800124c <main+0x508>)
 800114c:	601a      	str	r2, [r3, #0]
			  }
			  if (Vfeedback > 0 && Vfeedback < 2000)
 800114e:	4b3d      	ldr	r3, [pc, #244]	@ (8001244 <main+0x500>)
 8001150:	edd3 7a00 	vldr	s15, [r3]
 8001154:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800115c:	dd0c      	ble.n	8001178 <main+0x434>
 800115e:	4b39      	ldr	r3, [pc, #228]	@ (8001244 <main+0x500>)
 8001160:	edd3 7a00 	vldr	s15, [r3]
 8001164:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8001250 <main+0x50c>
 8001168:	eef4 7ac7 	vcmpe.f32	s15, s14
 800116c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001170:	d502      	bpl.n	8001178 <main+0x434>
			  {
				  Vfeedback = 2000;
 8001172:	4b34      	ldr	r3, [pc, #208]	@ (8001244 <main+0x500>)
 8001174:	4a37      	ldr	r2, [pc, #220]	@ (8001254 <main+0x510>)
 8001176:	601a      	str	r2, [r3, #0]
			  }
			  if (Vfeedback < 0 && Vfeedback > -2000)
 8001178:	4b32      	ldr	r3, [pc, #200]	@ (8001244 <main+0x500>)
 800117a:	edd3 7a00 	vldr	s15, [r3]
 800117e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001186:	d50c      	bpl.n	80011a2 <main+0x45e>
 8001188:	4b2e      	ldr	r3, [pc, #184]	@ (8001244 <main+0x500>)
 800118a:	edd3 7a00 	vldr	s15, [r3]
 800118e:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8001258 <main+0x514>
 8001192:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800119a:	dd02      	ble.n	80011a2 <main+0x45e>
			  {
				  Vfeedback = -2000;
 800119c:	4b29      	ldr	r3, [pc, #164]	@ (8001244 <main+0x500>)
 800119e:	4a2f      	ldr	r2, [pc, #188]	@ (800125c <main+0x518>)
 80011a0:	601a      	str	r2, [r3, #0]
			  }
			  if (Diff < 0)
 80011a2:	4b25      	ldr	r3, [pc, #148]	@ (8001238 <main+0x4f4>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	da10      	bge.n	80011cc <main+0x488>
			  {
				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80011aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001260 <main+0x51c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2200      	movs	r2, #0
 80011b0:	635a      	str	r2, [r3, #52]	@ 0x34
				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, -Vfeedback);
 80011b2:	4b24      	ldr	r3, [pc, #144]	@ (8001244 <main+0x500>)
 80011b4:	edd3 7a00 	vldr	s15, [r3]
 80011b8:	eef1 7a67 	vneg.f32	s15, s15
 80011bc:	4b28      	ldr	r3, [pc, #160]	@ (8001260 <main+0x51c>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011c4:	ee17 2a90 	vmov	r2, s15
 80011c8:	639a      	str	r2, [r3, #56]	@ 0x38
 80011ca:	e011      	b.n	80011f0 <main+0x4ac>
			  }

			  else if (Diff > 0)
 80011cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001238 <main+0x4f4>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	dd0d      	ble.n	80011f0 <main+0x4ac>
			  {
				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, Vfeedback);
 80011d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001244 <main+0x500>)
 80011d6:	edd3 7a00 	vldr	s15, [r3]
 80011da:	4b21      	ldr	r3, [pc, #132]	@ (8001260 <main+0x51c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011e2:	ee17 2a90 	vmov	r2, s15
 80011e6:	635a      	str	r2, [r3, #52]	@ 0x34
				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80011e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001260 <main+0x51c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2200      	movs	r2, #0
 80011ee:	639a      	str	r2, [r3, #56]	@ 0x38
			  }
			  if (Diff == 0)
 80011f0:	4b11      	ldr	r3, [pc, #68]	@ (8001238 <main+0x4f4>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	f47f ade3 	bne.w	8000dc0 <main+0x7c>
			  {
				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80011fa:	4b19      	ldr	r3, [pc, #100]	@ (8001260 <main+0x51c>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2200      	movs	r2, #0
 8001200:	635a      	str	r2, [r3, #52]	@ 0x34
				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001202:	4b17      	ldr	r3, [pc, #92]	@ (8001260 <main+0x51c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2200      	movs	r2, #0
 8001208:	639a      	str	r2, [r3, #56]	@ 0x38
 800120a:	e5d9      	b.n	8000dc0 <main+0x7c>
			  }
		  }
	  }
	  else
	  {
		  NO3();
 800120c:	f000 fd10 	bl	8001c30 <NO3>
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001210:	4b13      	ldr	r3, [pc, #76]	@ (8001260 <main+0x51c>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2200      	movs	r2, #0
 8001216:	635a      	str	r2, [r3, #52]	@ 0x34
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001218:	4b11      	ldr	r3, [pc, #68]	@ (8001260 <main+0x51c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2200      	movs	r2, #0
 800121e:	639a      	str	r2, [r3, #56]	@ 0x38
	  if (check == 1)
 8001220:	e5ce      	b.n	8000dc0 <main+0x7c>
 8001222:	bf00      	nop
 8001224:	200002d8 	.word	0x200002d8
 8001228:	20000324 	.word	0x20000324
 800122c:	20000310 	.word	0x20000310
 8001230:	200002dc 	.word	0x200002dc
 8001234:	2000030c 	.word	0x2000030c
 8001238:	2000032c 	.word	0x2000032c
 800123c:	20000338 	.word	0x20000338
 8001240:	200002e8 	.word	0x200002e8
 8001244:	20000314 	.word	0x20000314
 8001248:	469c3e00 	.word	0x469c3e00
 800124c:	469c3e00 	.word	0x469c3e00
 8001250:	44fa0000 	.word	0x44fa0000
 8001254:	44fa0000 	.word	0x44fa0000
 8001258:	c4fa0000 	.word	0xc4fa0000
 800125c:	c4fa0000 	.word	0xc4fa0000
 8001260:	200001f4 	.word	0x200001f4

08001264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b094      	sub	sp, #80	@ 0x50
 8001268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800126a:	f107 0318 	add.w	r3, r7, #24
 800126e:	2238      	movs	r2, #56	@ 0x38
 8001270:	2100      	movs	r1, #0
 8001272:	4618      	mov	r0, r3
 8001274:	f006 fd02 	bl	8007c7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	60da      	str	r2, [r3, #12]
 8001284:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001286:	2000      	movs	r0, #0
 8001288:	f003 fac0 	bl	800480c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800128c:	2302      	movs	r3, #2
 800128e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001290:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001294:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001296:	2340      	movs	r3, #64	@ 0x40
 8001298:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800129a:	2302      	movs	r3, #2
 800129c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800129e:	2302      	movs	r3, #2
 80012a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80012a2:	2304      	movs	r3, #4
 80012a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80012a6:	2355      	movs	r3, #85	@ 0x55
 80012a8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012aa:	2302      	movs	r3, #2
 80012ac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012ae:	2302      	movs	r3, #2
 80012b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012b2:	2302      	movs	r3, #2
 80012b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b6:	f107 0318 	add.w	r3, r7, #24
 80012ba:	4618      	mov	r0, r3
 80012bc:	f003 fb5a 	bl	8004974 <HAL_RCC_OscConfig>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <SystemClock_Config+0x66>
  {
    Error_Handler();
 80012c6:	f000 fcf9 	bl	8001cbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ca:	230f      	movs	r3, #15
 80012cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ce:	2303      	movs	r3, #3
 80012d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	2104      	movs	r1, #4
 80012e2:	4618      	mov	r0, r3
 80012e4:	f003 fe58 	bl	8004f98 <HAL_RCC_ClockConfig>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80012ee:	f000 fce5 	bl	8001cbc <Error_Handler>
  }
}
 80012f2:	bf00      	nop
 80012f4:	3750      	adds	r7, #80	@ 0x50
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08c      	sub	sp, #48	@ 0x30
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001302:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	2220      	movs	r2, #32
 8001312:	2100      	movs	r1, #0
 8001314:	4618      	mov	r0, r3
 8001316:	f006 fcb1 	bl	8007c7c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800131a:	4b40      	ldr	r3, [pc, #256]	@ (800141c <MX_ADC1_Init+0x120>)
 800131c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001320:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001322:	4b3e      	ldr	r3, [pc, #248]	@ (800141c <MX_ADC1_Init+0x120>)
 8001324:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001328:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800132a:	4b3c      	ldr	r3, [pc, #240]	@ (800141c <MX_ADC1_Init+0x120>)
 800132c:	2200      	movs	r2, #0
 800132e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001330:	4b3a      	ldr	r3, [pc, #232]	@ (800141c <MX_ADC1_Init+0x120>)
 8001332:	2200      	movs	r2, #0
 8001334:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001336:	4b39      	ldr	r3, [pc, #228]	@ (800141c <MX_ADC1_Init+0x120>)
 8001338:	2200      	movs	r2, #0
 800133a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800133c:	4b37      	ldr	r3, [pc, #220]	@ (800141c <MX_ADC1_Init+0x120>)
 800133e:	2201      	movs	r2, #1
 8001340:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001342:	4b36      	ldr	r3, [pc, #216]	@ (800141c <MX_ADC1_Init+0x120>)
 8001344:	2204      	movs	r2, #4
 8001346:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001348:	4b34      	ldr	r3, [pc, #208]	@ (800141c <MX_ADC1_Init+0x120>)
 800134a:	2200      	movs	r2, #0
 800134c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800134e:	4b33      	ldr	r3, [pc, #204]	@ (800141c <MX_ADC1_Init+0x120>)
 8001350:	2201      	movs	r2, #1
 8001352:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8001354:	4b31      	ldr	r3, [pc, #196]	@ (800141c <MX_ADC1_Init+0x120>)
 8001356:	2203      	movs	r2, #3
 8001358:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800135a:	4b30      	ldr	r3, [pc, #192]	@ (800141c <MX_ADC1_Init+0x120>)
 800135c:	2200      	movs	r2, #0
 800135e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001362:	4b2e      	ldr	r3, [pc, #184]	@ (800141c <MX_ADC1_Init+0x120>)
 8001364:	2200      	movs	r2, #0
 8001366:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001368:	4b2c      	ldr	r3, [pc, #176]	@ (800141c <MX_ADC1_Init+0x120>)
 800136a:	2200      	movs	r2, #0
 800136c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800136e:	4b2b      	ldr	r3, [pc, #172]	@ (800141c <MX_ADC1_Init+0x120>)
 8001370:	2201      	movs	r2, #1
 8001372:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001376:	4b29      	ldr	r3, [pc, #164]	@ (800141c <MX_ADC1_Init+0x120>)
 8001378:	2200      	movs	r2, #0
 800137a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800137c:	4b27      	ldr	r3, [pc, #156]	@ (800141c <MX_ADC1_Init+0x120>)
 800137e:	2200      	movs	r2, #0
 8001380:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001384:	4825      	ldr	r0, [pc, #148]	@ (800141c <MX_ADC1_Init+0x120>)
 8001386:	f001 fa15 	bl	80027b4 <HAL_ADC_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001390:	f000 fc94 	bl	8001cbc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001394:	2300      	movs	r3, #0
 8001396:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001398:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800139c:	4619      	mov	r1, r3
 800139e:	481f      	ldr	r0, [pc, #124]	@ (800141c <MX_ADC1_Init+0x120>)
 80013a0:	f002 fc96 	bl	8003cd0 <HAL_ADCEx_MultiModeConfigChannel>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80013aa:	f000 fc87 	bl	8001cbc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80013ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001420 <MX_ADC1_Init+0x124>)
 80013b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013b2:	2306      	movs	r3, #6
 80013b4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80013b6:	2307      	movs	r3, #7
 80013b8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013ba:	237f      	movs	r3, #127	@ 0x7f
 80013bc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013be:	2304      	movs	r3, #4
 80013c0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013c6:	1d3b      	adds	r3, r7, #4
 80013c8:	4619      	mov	r1, r3
 80013ca:	4814      	ldr	r0, [pc, #80]	@ (800141c <MX_ADC1_Init+0x120>)
 80013cc:	f001 fdda 	bl	8002f84 <HAL_ADC_ConfigChannel>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80013d6:	f000 fc71 	bl	8001cbc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80013da:	4b12      	ldr	r3, [pc, #72]	@ (8001424 <MX_ADC1_Init+0x128>)
 80013dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80013de:	230c      	movs	r3, #12
 80013e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013e2:	1d3b      	adds	r3, r7, #4
 80013e4:	4619      	mov	r1, r3
 80013e6:	480d      	ldr	r0, [pc, #52]	@ (800141c <MX_ADC1_Init+0x120>)
 80013e8:	f001 fdcc 	bl	8002f84 <HAL_ADC_ConfigChannel>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80013f2:	f000 fc63 	bl	8001cbc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80013f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001428 <MX_ADC1_Init+0x12c>)
 80013f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80013fa:	2312      	movs	r3, #18
 80013fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	4619      	mov	r1, r3
 8001402:	4806      	ldr	r0, [pc, #24]	@ (800141c <MX_ADC1_Init+0x120>)
 8001404:	f001 fdbe 	bl	8002f84 <HAL_ADC_ConfigChannel>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 800140e:	f000 fc55 	bl	8001cbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001412:	bf00      	nop
 8001414:	3730      	adds	r7, #48	@ 0x30
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000094 	.word	0x20000094
 8001420:	04300002 	.word	0x04300002
 8001424:	08600004 	.word	0x08600004
 8001428:	3ef08000 	.word	0x3ef08000

0800142c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001430:	4b21      	ldr	r3, [pc, #132]	@ (80014b8 <MX_LPUART1_UART_Init+0x8c>)
 8001432:	4a22      	ldr	r2, [pc, #136]	@ (80014bc <MX_LPUART1_UART_Init+0x90>)
 8001434:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001436:	4b20      	ldr	r3, [pc, #128]	@ (80014b8 <MX_LPUART1_UART_Init+0x8c>)
 8001438:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800143c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800143e:	4b1e      	ldr	r3, [pc, #120]	@ (80014b8 <MX_LPUART1_UART_Init+0x8c>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001444:	4b1c      	ldr	r3, [pc, #112]	@ (80014b8 <MX_LPUART1_UART_Init+0x8c>)
 8001446:	2200      	movs	r2, #0
 8001448:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800144a:	4b1b      	ldr	r3, [pc, #108]	@ (80014b8 <MX_LPUART1_UART_Init+0x8c>)
 800144c:	2200      	movs	r2, #0
 800144e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001450:	4b19      	ldr	r3, [pc, #100]	@ (80014b8 <MX_LPUART1_UART_Init+0x8c>)
 8001452:	220c      	movs	r2, #12
 8001454:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001456:	4b18      	ldr	r3, [pc, #96]	@ (80014b8 <MX_LPUART1_UART_Init+0x8c>)
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800145c:	4b16      	ldr	r3, [pc, #88]	@ (80014b8 <MX_LPUART1_UART_Init+0x8c>)
 800145e:	2200      	movs	r2, #0
 8001460:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001462:	4b15      	ldr	r3, [pc, #84]	@ (80014b8 <MX_LPUART1_UART_Init+0x8c>)
 8001464:	2200      	movs	r2, #0
 8001466:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001468:	4b13      	ldr	r3, [pc, #76]	@ (80014b8 <MX_LPUART1_UART_Init+0x8c>)
 800146a:	2200      	movs	r2, #0
 800146c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800146e:	4812      	ldr	r0, [pc, #72]	@ (80014b8 <MX_LPUART1_UART_Init+0x8c>)
 8001470:	f005 fd60 	bl	8006f34 <HAL_UART_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800147a:	f000 fc1f 	bl	8001cbc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800147e:	2100      	movs	r1, #0
 8001480:	480d      	ldr	r0, [pc, #52]	@ (80014b8 <MX_LPUART1_UART_Init+0x8c>)
 8001482:	f006 fafb 	bl	8007a7c <HAL_UARTEx_SetTxFifoThreshold>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800148c:	f000 fc16 	bl	8001cbc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001490:	2100      	movs	r1, #0
 8001492:	4809      	ldr	r0, [pc, #36]	@ (80014b8 <MX_LPUART1_UART_Init+0x8c>)
 8001494:	f006 fb30 	bl	8007af8 <HAL_UARTEx_SetRxFifoThreshold>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800149e:	f000 fc0d 	bl	8001cbc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80014a2:	4805      	ldr	r0, [pc, #20]	@ (80014b8 <MX_LPUART1_UART_Init+0x8c>)
 80014a4:	f006 fab1 	bl	8007a0a <HAL_UARTEx_DisableFifoMode>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80014ae:	f000 fc05 	bl	8001cbc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000160 	.word	0x20000160
 80014bc:	40008000 	.word	0x40008000

080014c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b09c      	sub	sp, #112	@ 0x70
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014c6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]
 80014d0:	609a      	str	r2, [r3, #8]
 80014d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014e0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
 80014f0:	615a      	str	r2, [r3, #20]
 80014f2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	2234      	movs	r2, #52	@ 0x34
 80014f8:	2100      	movs	r1, #0
 80014fa:	4618      	mov	r0, r3
 80014fc:	f006 fbbe 	bl	8007c7c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001500:	4b4b      	ldr	r3, [pc, #300]	@ (8001630 <MX_TIM1_Init+0x170>)
 8001502:	4a4c      	ldr	r2, [pc, #304]	@ (8001634 <MX_TIM1_Init+0x174>)
 8001504:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 8001506:	4b4a      	ldr	r3, [pc, #296]	@ (8001630 <MX_TIM1_Init+0x170>)
 8001508:	22a9      	movs	r2, #169	@ 0xa9
 800150a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800150c:	4b48      	ldr	r3, [pc, #288]	@ (8001630 <MX_TIM1_Init+0x170>)
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8001512:	4b47      	ldr	r3, [pc, #284]	@ (8001630 <MX_TIM1_Init+0x170>)
 8001514:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001518:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800151a:	4b45      	ldr	r3, [pc, #276]	@ (8001630 <MX_TIM1_Init+0x170>)
 800151c:	2200      	movs	r2, #0
 800151e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001520:	4b43      	ldr	r3, [pc, #268]	@ (8001630 <MX_TIM1_Init+0x170>)
 8001522:	2200      	movs	r2, #0
 8001524:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001526:	4b42      	ldr	r3, [pc, #264]	@ (8001630 <MX_TIM1_Init+0x170>)
 8001528:	2200      	movs	r2, #0
 800152a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800152c:	4840      	ldr	r0, [pc, #256]	@ (8001630 <MX_TIM1_Init+0x170>)
 800152e:	f004 f99d 	bl	800586c <HAL_TIM_Base_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001538:	f000 fbc0 	bl	8001cbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800153c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001540:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001542:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001546:	4619      	mov	r1, r3
 8001548:	4839      	ldr	r0, [pc, #228]	@ (8001630 <MX_TIM1_Init+0x170>)
 800154a:	f004 fe13 	bl	8006174 <HAL_TIM_ConfigClockSource>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001554:	f000 fbb2 	bl	8001cbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001558:	4835      	ldr	r0, [pc, #212]	@ (8001630 <MX_TIM1_Init+0x170>)
 800155a:	f004 fa4f 	bl	80059fc <HAL_TIM_PWM_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001564:	f000 fbaa 	bl	8001cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001568:	2300      	movs	r3, #0
 800156a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800156c:	2300      	movs	r3, #0
 800156e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001570:	2300      	movs	r3, #0
 8001572:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001574:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001578:	4619      	mov	r1, r3
 800157a:	482d      	ldr	r0, [pc, #180]	@ (8001630 <MX_TIM1_Init+0x170>)
 800157c:	f005 fbb0 	bl	8006ce0 <HAL_TIMEx_MasterConfigSynchronization>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001586:	f000 fb99 	bl	8001cbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800158a:	2360      	movs	r3, #96	@ 0x60
 800158c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800158e:	2300      	movs	r3, #0
 8001590:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001592:	2300      	movs	r3, #0
 8001594:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001596:	2300      	movs	r3, #0
 8001598:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800159a:	2300      	movs	r3, #0
 800159c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800159e:	2300      	movs	r3, #0
 80015a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015a2:	2300      	movs	r3, #0
 80015a4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015a6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80015aa:	2200      	movs	r2, #0
 80015ac:	4619      	mov	r1, r3
 80015ae:	4820      	ldr	r0, [pc, #128]	@ (8001630 <MX_TIM1_Init+0x170>)
 80015b0:	f004 fccc 	bl	8005f4c <HAL_TIM_PWM_ConfigChannel>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80015ba:	f000 fb7f 	bl	8001cbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015be:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80015c2:	2204      	movs	r2, #4
 80015c4:	4619      	mov	r1, r3
 80015c6:	481a      	ldr	r0, [pc, #104]	@ (8001630 <MX_TIM1_Init+0x170>)
 80015c8:	f004 fcc0 	bl	8005f4c <HAL_TIM_PWM_ConfigChannel>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80015d2:	f000 fb73 	bl	8001cbc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015d6:	2300      	movs	r3, #0
 80015d8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015da:	2300      	movs	r3, #0
 80015dc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015e2:	2300      	movs	r3, #0
 80015e4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015ee:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80015f4:	2300      	movs	r3, #0
 80015f6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001600:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001602:	2300      	movs	r3, #0
 8001604:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001606:	2300      	movs	r3, #0
 8001608:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800160a:	2300      	movs	r3, #0
 800160c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800160e:	1d3b      	adds	r3, r7, #4
 8001610:	4619      	mov	r1, r3
 8001612:	4807      	ldr	r0, [pc, #28]	@ (8001630 <MX_TIM1_Init+0x170>)
 8001614:	f005 fbfa 	bl	8006e0c <HAL_TIMEx_ConfigBreakDeadTime>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 800161e:	f000 fb4d 	bl	8001cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001622:	4803      	ldr	r0, [pc, #12]	@ (8001630 <MX_TIM1_Init+0x170>)
 8001624:	f000 fcde 	bl	8001fe4 <HAL_TIM_MspPostInit>

}
 8001628:	bf00      	nop
 800162a:	3770      	adds	r7, #112	@ 0x70
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	200001f4 	.word	0x200001f4
 8001634:	40012c00 	.word	0x40012c00

08001638 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08c      	sub	sp, #48	@ 0x30
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800163e:	f107 030c 	add.w	r3, r7, #12
 8001642:	2224      	movs	r2, #36	@ 0x24
 8001644:	2100      	movs	r1, #0
 8001646:	4618      	mov	r0, r3
 8001648:	f006 fb18 	bl	8007c7c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800164c:	463b      	mov	r3, r7
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001656:	4b21      	ldr	r3, [pc, #132]	@ (80016dc <MX_TIM3_Init+0xa4>)
 8001658:	4a21      	ldr	r2, [pc, #132]	@ (80016e0 <MX_TIM3_Init+0xa8>)
 800165a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800165c:	4b1f      	ldr	r3, [pc, #124]	@ (80016dc <MX_TIM3_Init+0xa4>)
 800165e:	2200      	movs	r2, #0
 8001660:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001662:	4b1e      	ldr	r3, [pc, #120]	@ (80016dc <MX_TIM3_Init+0xa4>)
 8001664:	2200      	movs	r2, #0
 8001666:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3071;
 8001668:	4b1c      	ldr	r3, [pc, #112]	@ (80016dc <MX_TIM3_Init+0xa4>)
 800166a:	f640 32ff 	movw	r2, #3071	@ 0xbff
 800166e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001670:	4b1a      	ldr	r3, [pc, #104]	@ (80016dc <MX_TIM3_Init+0xa4>)
 8001672:	2200      	movs	r2, #0
 8001674:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001676:	4b19      	ldr	r3, [pc, #100]	@ (80016dc <MX_TIM3_Init+0xa4>)
 8001678:	2200      	movs	r2, #0
 800167a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800167c:	2303      	movs	r3, #3
 800167e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001680:	2300      	movs	r3, #0
 8001682:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001684:	2301      	movs	r3, #1
 8001686:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001688:	2300      	movs	r3, #0
 800168a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800168c:	2300      	movs	r3, #0
 800168e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001690:	2300      	movs	r3, #0
 8001692:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001694:	2301      	movs	r3, #1
 8001696:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001698:	2300      	movs	r3, #0
 800169a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800169c:	2300      	movs	r3, #0
 800169e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80016a0:	f107 030c 	add.w	r3, r7, #12
 80016a4:	4619      	mov	r1, r3
 80016a6:	480d      	ldr	r0, [pc, #52]	@ (80016dc <MX_TIM3_Init+0xa4>)
 80016a8:	f004 fb1c 	bl	8005ce4 <HAL_TIM_Encoder_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80016b2:	f000 fb03 	bl	8001cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016b6:	2300      	movs	r3, #0
 80016b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ba:	2300      	movs	r3, #0
 80016bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016be:	463b      	mov	r3, r7
 80016c0:	4619      	mov	r1, r3
 80016c2:	4806      	ldr	r0, [pc, #24]	@ (80016dc <MX_TIM3_Init+0xa4>)
 80016c4:	f005 fb0c 	bl	8006ce0 <HAL_TIMEx_MasterConfigSynchronization>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80016ce:	f000 faf5 	bl	8001cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80016d2:	bf00      	nop
 80016d4:	3730      	adds	r7, #48	@ 0x30
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000240 	.word	0x20000240
 80016e0:	40000400 	.word	0x40000400

080016e4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08e      	sub	sp, #56	@ 0x38
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	605a      	str	r2, [r3, #4]
 80016f4:	609a      	str	r2, [r3, #8]
 80016f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f8:	f107 031c 	add.w	r3, r7, #28
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001704:	463b      	mov	r3, r7
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	60da      	str	r2, [r3, #12]
 8001710:	611a      	str	r2, [r3, #16]
 8001712:	615a      	str	r2, [r3, #20]
 8001714:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001716:	4b2d      	ldr	r3, [pc, #180]	@ (80017cc <MX_TIM4_Init+0xe8>)
 8001718:	4a2d      	ldr	r2, [pc, #180]	@ (80017d0 <MX_TIM4_Init+0xec>)
 800171a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 800171c:	4b2b      	ldr	r3, [pc, #172]	@ (80017cc <MX_TIM4_Init+0xe8>)
 800171e:	22a9      	movs	r2, #169	@ 0xa9
 8001720:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001722:	4b2a      	ldr	r3, [pc, #168]	@ (80017cc <MX_TIM4_Init+0xe8>)
 8001724:	2200      	movs	r2, #0
 8001726:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 49999;
 8001728:	4b28      	ldr	r3, [pc, #160]	@ (80017cc <MX_TIM4_Init+0xe8>)
 800172a:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 800172e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001730:	4b26      	ldr	r3, [pc, #152]	@ (80017cc <MX_TIM4_Init+0xe8>)
 8001732:	2200      	movs	r2, #0
 8001734:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001736:	4b25      	ldr	r3, [pc, #148]	@ (80017cc <MX_TIM4_Init+0xe8>)
 8001738:	2200      	movs	r2, #0
 800173a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800173c:	4823      	ldr	r0, [pc, #140]	@ (80017cc <MX_TIM4_Init+0xe8>)
 800173e:	f004 f895 	bl	800586c <HAL_TIM_Base_Init>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001748:	f000 fab8 	bl	8001cbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800174c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001750:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001752:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001756:	4619      	mov	r1, r3
 8001758:	481c      	ldr	r0, [pc, #112]	@ (80017cc <MX_TIM4_Init+0xe8>)
 800175a:	f004 fd0b 	bl	8006174 <HAL_TIM_ConfigClockSource>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001764:	f000 faaa 	bl	8001cbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001768:	4818      	ldr	r0, [pc, #96]	@ (80017cc <MX_TIM4_Init+0xe8>)
 800176a:	f004 f947 	bl	80059fc <HAL_TIM_PWM_Init>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001774:	f000 faa2 	bl	8001cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001778:	2300      	movs	r3, #0
 800177a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800177c:	2300      	movs	r3, #0
 800177e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001780:	f107 031c 	add.w	r3, r7, #28
 8001784:	4619      	mov	r1, r3
 8001786:	4811      	ldr	r0, [pc, #68]	@ (80017cc <MX_TIM4_Init+0xe8>)
 8001788:	f005 faaa 	bl	8006ce0 <HAL_TIMEx_MasterConfigSynchronization>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001792:	f000 fa93 	bl	8001cbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001796:	2360      	movs	r3, #96	@ 0x60
 8001798:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800179e:	2300      	movs	r3, #0
 80017a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017a2:	2300      	movs	r3, #0
 80017a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017a6:	463b      	mov	r3, r7
 80017a8:	2200      	movs	r2, #0
 80017aa:	4619      	mov	r1, r3
 80017ac:	4807      	ldr	r0, [pc, #28]	@ (80017cc <MX_TIM4_Init+0xe8>)
 80017ae:	f004 fbcd 	bl	8005f4c <HAL_TIM_PWM_ConfigChannel>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80017b8:	f000 fa80 	bl	8001cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80017bc:	4803      	ldr	r0, [pc, #12]	@ (80017cc <MX_TIM4_Init+0xe8>)
 80017be:	f000 fc11 	bl	8001fe4 <HAL_TIM_MspPostInit>

}
 80017c2:	bf00      	nop
 80017c4:	3738      	adds	r7, #56	@ 0x38
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	2000028c 	.word	0x2000028c
 80017d0:	40000800 	.word	0x40000800

080017d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80017da:	4b12      	ldr	r3, [pc, #72]	@ (8001824 <MX_DMA_Init+0x50>)
 80017dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017de:	4a11      	ldr	r2, [pc, #68]	@ (8001824 <MX_DMA_Init+0x50>)
 80017e0:	f043 0304 	orr.w	r3, r3, #4
 80017e4:	6493      	str	r3, [r2, #72]	@ 0x48
 80017e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001824 <MX_DMA_Init+0x50>)
 80017e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017ea:	f003 0304 	and.w	r3, r3, #4
 80017ee:	607b      	str	r3, [r7, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001824 <MX_DMA_Init+0x50>)
 80017f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017f6:	4a0b      	ldr	r2, [pc, #44]	@ (8001824 <MX_DMA_Init+0x50>)
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	6493      	str	r3, [r2, #72]	@ 0x48
 80017fe:	4b09      	ldr	r3, [pc, #36]	@ (8001824 <MX_DMA_Init+0x50>)
 8001800:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	603b      	str	r3, [r7, #0]
 8001808:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800180a:	2200      	movs	r2, #0
 800180c:	2100      	movs	r1, #0
 800180e:	200b      	movs	r0, #11
 8001810:	f002 fc41 	bl	8004096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001814:	200b      	movs	r0, #11
 8001816:	f002 fc58 	bl	80040ca <HAL_NVIC_EnableIRQ>

}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40021000 	.word	0x40021000

08001828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08a      	sub	sp, #40	@ 0x28
 800182c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182e:	f107 0314 	add.w	r3, r7, #20
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]
 800183a:	60da      	str	r2, [r3, #12]
 800183c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800183e:	4b3b      	ldr	r3, [pc, #236]	@ (800192c <MX_GPIO_Init+0x104>)
 8001840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001842:	4a3a      	ldr	r2, [pc, #232]	@ (800192c <MX_GPIO_Init+0x104>)
 8001844:	f043 0304 	orr.w	r3, r3, #4
 8001848:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800184a:	4b38      	ldr	r3, [pc, #224]	@ (800192c <MX_GPIO_Init+0x104>)
 800184c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800184e:	f003 0304 	and.w	r3, r3, #4
 8001852:	613b      	str	r3, [r7, #16]
 8001854:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001856:	4b35      	ldr	r3, [pc, #212]	@ (800192c <MX_GPIO_Init+0x104>)
 8001858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800185a:	4a34      	ldr	r2, [pc, #208]	@ (800192c <MX_GPIO_Init+0x104>)
 800185c:	f043 0320 	orr.w	r3, r3, #32
 8001860:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001862:	4b32      	ldr	r3, [pc, #200]	@ (800192c <MX_GPIO_Init+0x104>)
 8001864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001866:	f003 0320 	and.w	r3, r3, #32
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800186e:	4b2f      	ldr	r3, [pc, #188]	@ (800192c <MX_GPIO_Init+0x104>)
 8001870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001872:	4a2e      	ldr	r2, [pc, #184]	@ (800192c <MX_GPIO_Init+0x104>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800187a:	4b2c      	ldr	r3, [pc, #176]	@ (800192c <MX_GPIO_Init+0x104>)
 800187c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	60bb      	str	r3, [r7, #8]
 8001884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001886:	4b29      	ldr	r3, [pc, #164]	@ (800192c <MX_GPIO_Init+0x104>)
 8001888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800188a:	4a28      	ldr	r2, [pc, #160]	@ (800192c <MX_GPIO_Init+0x104>)
 800188c:	f043 0302 	orr.w	r3, r3, #2
 8001890:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001892:	4b26      	ldr	r3, [pc, #152]	@ (800192c <MX_GPIO_Init+0x104>)
 8001894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	607b      	str	r3, [r7, #4]
 800189c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 800189e:	2200      	movs	r2, #0
 80018a0:	f44f 7190 	mov.w	r1, #288	@ 0x120
 80018a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018a8:	f002 ff66 	bl	8004778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80018ac:	2200      	movs	r2, #0
 80018ae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80018b2:	481f      	ldr	r0, [pc, #124]	@ (8001930 <MX_GPIO_Init+0x108>)
 80018b4:	f002 ff60 	bl	8004778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018be:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80018c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018c8:	f107 0314 	add.w	r3, r7, #20
 80018cc:	4619      	mov	r1, r3
 80018ce:	4819      	ldr	r0, [pc, #100]	@ (8001934 <MX_GPIO_Init+0x10c>)
 80018d0:	f002 fdd0 	bl	8004474 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 80018d4:	f44f 7390 	mov.w	r3, #288	@ 0x120
 80018d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018da:	2301      	movs	r3, #1
 80018dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e2:	2300      	movs	r3, #0
 80018e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e6:	f107 0314 	add.w	r3, r7, #20
 80018ea:	4619      	mov	r1, r3
 80018ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018f0:	f002 fdc0 	bl	8004474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fa:	2301      	movs	r3, #1
 80018fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001902:	2300      	movs	r3, #0
 8001904:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001906:	f107 0314 	add.w	r3, r7, #20
 800190a:	4619      	mov	r1, r3
 800190c:	4808      	ldr	r0, [pc, #32]	@ (8001930 <MX_GPIO_Init+0x108>)
 800190e:	f002 fdb1 	bl	8004474 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001912:	2200      	movs	r2, #0
 8001914:	2100      	movs	r1, #0
 8001916:	2028      	movs	r0, #40	@ 0x28
 8001918:	f002 fbbd 	bl	8004096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800191c:	2028      	movs	r0, #40	@ 0x28
 800191e:	f002 fbd4 	bl	80040ca <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001922:	bf00      	nop
 8001924:	3728      	adds	r7, #40	@ 0x28
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40021000 	.word	0x40021000
 8001930:	48000400 	.word	0x48000400
 8001934:	48000800 	.word	0x48000800

08001938 <NO1>:

/* USER CODE BEGIN 4 */
void NO1()
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
	//LD2
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,GPIO_PIN_SET);
 800193e:	2201      	movs	r2, #1
 8001940:	2120      	movs	r1, #32
 8001942:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001946:	f002 ff17 	bl	8004778 <HAL_GPIO_WritePin>
	ADC1_Channel[0].data = 0;
 800194a:	4b35      	ldr	r3, [pc, #212]	@ (8001a20 <NO1+0xe8>)
 800194c:	2200      	movs	r2, #0
 800194e:	841a      	strh	r2, [r3, #32]

	//ADC Position[1], Setposition[2]
	static uint32_t TimeStamp = 0;
	if( HAL_GetTick()<TimeStamp) return;
 8001950:	f000 fc88 	bl	8002264 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	4b33      	ldr	r3, [pc, #204]	@ (8001a24 <NO1+0xec>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	429a      	cmp	r2, r3
 800195c:	d352      	bcc.n	8001a04 <NO1+0xcc>
	TimeStamp = HAL_GetTick()+500;
 800195e:	f000 fc81 	bl	8002264 <HAL_GetTick>
 8001962:	4603      	mov	r3, r0
 8001964:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001968:	4a2e      	ldr	r2, [pc, #184]	@ (8001a24 <NO1+0xec>)
 800196a:	6013      	str	r3, [r2, #0]
	for(int i=1;i<3;i++)
 800196c:	2301      	movs	r3, #1
 800196e:	607b      	str	r3, [r7, #4]
 8001970:	e027      	b.n	80019c2 <NO1+0x8a>
	{
		HAL_ADC_ConfigChannel(&hadc1, &ADC1_Channel[i].Config);
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	4613      	mov	r3, r2
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	4413      	add	r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4a28      	ldr	r2, [pc, #160]	@ (8001a20 <NO1+0xe8>)
 800197e:	4413      	add	r3, r2
 8001980:	4619      	mov	r1, r3
 8001982:	4829      	ldr	r0, [pc, #164]	@ (8001a28 <NO1+0xf0>)
 8001984:	f001 fafe 	bl	8002f84 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc1);
 8001988:	4827      	ldr	r0, [pc, #156]	@ (8001a28 <NO1+0xf0>)
 800198a:	f001 f8cf 	bl	8002b2c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 500);
 800198e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001992:	4825      	ldr	r0, [pc, #148]	@ (8001a28 <NO1+0xf0>)
 8001994:	f001 f9e2 	bl	8002d5c <HAL_ADC_PollForConversion>
		ADC1_Channel[i].data = HAL_ADC_GetValue(&hadc1);
 8001998:	4823      	ldr	r0, [pc, #140]	@ (8001a28 <NO1+0xf0>)
 800199a:	f001 fae5 	bl	8002f68 <HAL_ADC_GetValue>
 800199e:	4603      	mov	r3, r0
 80019a0:	b298      	uxth	r0, r3
 80019a2:	491f      	ldr	r1, [pc, #124]	@ (8001a20 <NO1+0xe8>)
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	4613      	mov	r3, r2
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	4413      	add	r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	440b      	add	r3, r1
 80019b0:	3320      	adds	r3, #32
 80019b2:	4602      	mov	r2, r0
 80019b4:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Stop(&hadc1);
 80019b6:	481c      	ldr	r0, [pc, #112]	@ (8001a28 <NO1+0xf0>)
 80019b8:	f001 f99c 	bl	8002cf4 <HAL_ADC_Stop>
	for(int i=1;i<3;i++)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3301      	adds	r3, #1
 80019c0:	607b      	str	r3, [r7, #4]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	ddd4      	ble.n	8001972 <NO1+0x3a>
	}
	Radiant2 = (ADC1_Channel[1].data*6.28)/4095.0;
 80019c8:	4b15      	ldr	r3, [pc, #84]	@ (8001a20 <NO1+0xe8>)
 80019ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7fe fd74 	bl	80004bc <__aeabi_i2d>
 80019d4:	a30e      	add	r3, pc, #56	@ (adr r3, 8001a10 <NO1+0xd8>)
 80019d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019da:	f7fe fdd9 	bl	8000590 <__aeabi_dmul>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	4610      	mov	r0, r2
 80019e4:	4619      	mov	r1, r3
 80019e6:	a30c      	add	r3, pc, #48	@ (adr r3, 8001a18 <NO1+0xe0>)
 80019e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ec:	f7fe fefa 	bl	80007e4 <__aeabi_ddiv>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4610      	mov	r0, r2
 80019f6:	4619      	mov	r1, r3
 80019f8:	f7fe ffdc 	bl	80009b4 <__aeabi_d2f>
 80019fc:	4603      	mov	r3, r0
 80019fe:	4a0b      	ldr	r2, [pc, #44]	@ (8001a2c <NO1+0xf4>)
 8001a00:	6013      	str	r3, [r2, #0]
 8001a02:	e000      	b.n	8001a06 <NO1+0xce>
	if( HAL_GetTick()<TimeStamp) return;
 8001a04:	bf00      	nop

}
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	f3af 8000 	nop.w
 8001a10:	51eb851f 	.word	0x51eb851f
 8001a14:	40191eb8 	.word	0x40191eb8
 8001a18:	00000000 	.word	0x00000000
 8001a1c:	40affe00 	.word	0x40affe00
 8001a20:	20000000 	.word	0x20000000
 8001a24:	2000033c 	.word	0x2000033c
 8001a28:	20000094 	.word	0x20000094
 8001a2c:	200002e4 	.word	0x200002e4

08001a30 <NO2>:

void NO2()
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
	// LD2
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,GPIO_PIN_RESET);
 8001a34:	2200      	movs	r2, #0
 8001a36:	2120      	movs	r1, #32
 8001a38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a3c:	f002 fe9c 	bl	8004778 <HAL_GPIO_WritePin>
	ADC1_Channel[1].data = 0;
 8001a40:	4b3b      	ldr	r3, [pc, #236]	@ (8001b30 <NO2+0x100>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
	ADC1_Channel[2].data = 0;
 8001a48:	4b39      	ldr	r3, [pc, #228]	@ (8001b30 <NO2+0x100>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

	// QEI
	QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim3);
 8001a50:	4b38      	ldr	r3, [pc, #224]	@ (8001b34 <NO2+0x104>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a56:	4a38      	ldr	r2, [pc, #224]	@ (8001b38 <NO2+0x108>)
 8001a58:	6013      	str	r3, [r2, #0]
	Radiant = (QEIReadRaw*6.28)/3071.0;
 8001a5a:	4b37      	ldr	r3, [pc, #220]	@ (8001b38 <NO2+0x108>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7fe fd1c 	bl	800049c <__aeabi_ui2d>
 8001a64:	a32c      	add	r3, pc, #176	@ (adr r3, 8001b18 <NO2+0xe8>)
 8001a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6a:	f7fe fd91 	bl	8000590 <__aeabi_dmul>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	460b      	mov	r3, r1
 8001a72:	4610      	mov	r0, r2
 8001a74:	4619      	mov	r1, r3
 8001a76:	a32a      	add	r3, pc, #168	@ (adr r3, 8001b20 <NO2+0xf0>)
 8001a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7c:	f7fe feb2 	bl	80007e4 <__aeabi_ddiv>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	4610      	mov	r0, r2
 8001a86:	4619      	mov	r1, r3
 8001a88:	f7fe ff94 	bl	80009b4 <__aeabi_d2f>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	4a2b      	ldr	r2, [pc, #172]	@ (8001b3c <NO2+0x10c>)
 8001a90:	6013      	str	r3, [r2, #0]

	// ADC
	static uint32_t TimeStamp = 0;
	if( HAL_GetTick()<TimeStamp) return;
 8001a92:	f000 fbe7 	bl	8002264 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	4b29      	ldr	r3, [pc, #164]	@ (8001b40 <NO2+0x110>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d339      	bcc.n	8001b14 <NO2+0xe4>
	TimeStamp = HAL_GetTick()+500;
 8001aa0:	f000 fbe0 	bl	8002264 <HAL_GetTick>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001aaa:	4a25      	ldr	r2, [pc, #148]	@ (8001b40 <NO2+0x110>)
 8001aac:	6013      	str	r3, [r2, #0]
	HAL_ADC_ConfigChannel(&hadc1, &ADC1_Channel[0].Config);
 8001aae:	4920      	ldr	r1, [pc, #128]	@ (8001b30 <NO2+0x100>)
 8001ab0:	4824      	ldr	r0, [pc, #144]	@ (8001b44 <NO2+0x114>)
 8001ab2:	f001 fa67 	bl	8002f84 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 8001ab6:	4823      	ldr	r0, [pc, #140]	@ (8001b44 <NO2+0x114>)
 8001ab8:	f001 f838 	bl	8002b2c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 500);
 8001abc:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001ac0:	4820      	ldr	r0, [pc, #128]	@ (8001b44 <NO2+0x114>)
 8001ac2:	f001 f94b 	bl	8002d5c <HAL_ADC_PollForConversion>
	ADC1_Channel[0].data = HAL_ADC_GetValue(&hadc1);
 8001ac6:	481f      	ldr	r0, [pc, #124]	@ (8001b44 <NO2+0x114>)
 8001ac8:	f001 fa4e 	bl	8002f68 <HAL_ADC_GetValue>
 8001acc:	4603      	mov	r3, r0
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	4b17      	ldr	r3, [pc, #92]	@ (8001b30 <NO2+0x100>)
 8001ad2:	841a      	strh	r2, [r3, #32]
	HAL_ADC_Stop(&hadc1);
 8001ad4:	481b      	ldr	r0, [pc, #108]	@ (8001b44 <NO2+0x114>)
 8001ad6:	f001 f90d 	bl	8002cf4 <HAL_ADC_Stop>

	// Scale 4095 to 3071
	Gain = (ADC1_Channel[0].data*3071.0)/4095.0;
 8001ada:	4b15      	ldr	r3, [pc, #84]	@ (8001b30 <NO2+0x100>)
 8001adc:	8c1b      	ldrh	r3, [r3, #32]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7fe fcec 	bl	80004bc <__aeabi_i2d>
 8001ae4:	a30e      	add	r3, pc, #56	@ (adr r3, 8001b20 <NO2+0xf0>)
 8001ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aea:	f7fe fd51 	bl	8000590 <__aeabi_dmul>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	4610      	mov	r0, r2
 8001af4:	4619      	mov	r1, r3
 8001af6:	a30c      	add	r3, pc, #48	@ (adr r3, 8001b28 <NO2+0xf8>)
 8001af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afc:	f7fe fe72 	bl	80007e4 <__aeabi_ddiv>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	4610      	mov	r0, r2
 8001b06:	4619      	mov	r1, r3
 8001b08:	f7fe ff54 	bl	80009b4 <__aeabi_d2f>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	4a0e      	ldr	r2, [pc, #56]	@ (8001b48 <NO2+0x118>)
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	e000      	b.n	8001b16 <NO2+0xe6>
	if( HAL_GetTick()<TimeStamp) return;
 8001b14:	bf00      	nop
}
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	51eb851f 	.word	0x51eb851f
 8001b1c:	40191eb8 	.word	0x40191eb8
 8001b20:	00000000 	.word	0x00000000
 8001b24:	40a7fe00 	.word	0x40a7fe00
 8001b28:	00000000 	.word	0x00000000
 8001b2c:	40affe00 	.word	0x40affe00
 8001b30:	20000000 	.word	0x20000000
 8001b34:	20000240 	.word	0x20000240
 8001b38:	200002dc 	.word	0x200002dc
 8001b3c:	200002e0 	.word	0x200002e0
 8001b40:	20000340 	.word	0x20000340
 8001b44:	20000094 	.word	0x20000094
 8001b48:	20000324 	.word	0x20000324
 8001b4c:	00000000 	.word	0x00000000

08001b50 <PlantSimulation>:
float PlantSimulation(float VIn) // run with fix frequency
{
 8001b50:	b5b0      	push	{r4, r5, r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	ed87 0a01 	vstr	s0, [r7, #4]
	static float speed =0;
	static float position =0;
	float current= VIn - speed * 0.0123;
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7fe fcc0 	bl	80004e0 <__aeabi_f2d>
 8001b60:	4604      	mov	r4, r0
 8001b62:	460d      	mov	r5, r1
 8001b64:	4b30      	ldr	r3, [pc, #192]	@ (8001c28 <PlantSimulation+0xd8>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7fe fcb9 	bl	80004e0 <__aeabi_f2d>
 8001b6e:	a328      	add	r3, pc, #160	@ (adr r3, 8001c10 <PlantSimulation+0xc0>)
 8001b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b74:	f7fe fd0c 	bl	8000590 <__aeabi_dmul>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	4620      	mov	r0, r4
 8001b7e:	4629      	mov	r1, r5
 8001b80:	f7fe fb4e 	bl	8000220 <__aeabi_dsub>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	4610      	mov	r0, r2
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	f7fe ff12 	bl	80009b4 <__aeabi_d2f>
 8001b90:	4603      	mov	r3, r0
 8001b92:	617b      	str	r3, [r7, #20]
	float torque = current * 0.456;
 8001b94:	6978      	ldr	r0, [r7, #20]
 8001b96:	f7fe fca3 	bl	80004e0 <__aeabi_f2d>
 8001b9a:	a31f      	add	r3, pc, #124	@ (adr r3, 8001c18 <PlantSimulation+0xc8>)
 8001b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba0:	f7fe fcf6 	bl	8000590 <__aeabi_dmul>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	4610      	mov	r0, r2
 8001baa:	4619      	mov	r1, r3
 8001bac:	f7fe ff02 	bl	80009b4 <__aeabi_d2f>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	613b      	str	r3, [r7, #16]
	float acc = torque * 0.789;
 8001bb4:	6938      	ldr	r0, [r7, #16]
 8001bb6:	f7fe fc93 	bl	80004e0 <__aeabi_f2d>
 8001bba:	a319      	add	r3, pc, #100	@ (adr r3, 8001c20 <PlantSimulation+0xd0>)
 8001bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc0:	f7fe fce6 	bl	8000590 <__aeabi_dmul>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	4610      	mov	r0, r2
 8001bca:	4619      	mov	r1, r3
 8001bcc:	f7fe fef2 	bl	80009b4 <__aeabi_d2f>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	60fb      	str	r3, [r7, #12]
	speed += acc;
 8001bd4:	4b14      	ldr	r3, [pc, #80]	@ (8001c28 <PlantSimulation+0xd8>)
 8001bd6:	ed93 7a00 	vldr	s14, [r3]
 8001bda:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be2:	4b11      	ldr	r3, [pc, #68]	@ (8001c28 <PlantSimulation+0xd8>)
 8001be4:	edc3 7a00 	vstr	s15, [r3]
	position += speed;
 8001be8:	4b10      	ldr	r3, [pc, #64]	@ (8001c2c <PlantSimulation+0xdc>)
 8001bea:	ed93 7a00 	vldr	s14, [r3]
 8001bee:	4b0e      	ldr	r3, [pc, #56]	@ (8001c28 <PlantSimulation+0xd8>)
 8001bf0:	edd3 7a00 	vldr	s15, [r3]
 8001bf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8001c2c <PlantSimulation+0xdc>)
 8001bfa:	edc3 7a00 	vstr	s15, [r3]
	return position;
 8001bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8001c2c <PlantSimulation+0xdc>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	ee07 3a90 	vmov	s15, r3
}
 8001c06:	eeb0 0a67 	vmov.f32	s0, s15
 8001c0a:	3718      	adds	r7, #24
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bdb0      	pop	{r4, r5, r7, pc}
 8001c10:	0ded288d 	.word	0x0ded288d
 8001c14:	3f8930be 	.word	0x3f8930be
 8001c18:	9fbe76c9 	.word	0x9fbe76c9
 8001c1c:	3fdd2f1a 	.word	0x3fdd2f1a
 8001c20:	ed916873 	.word	0xed916873
 8001c24:	3fe93f7c 	.word	0x3fe93f7c
 8001c28:	20000344 	.word	0x20000344
 8001c2c:	20000348 	.word	0x20000348

08001c30 <NO3>:

void NO3()
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
	//LD2
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001c34:	2120      	movs	r1, #32
 8001c36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c3a:	f002 fdb5 	bl	80047a8 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8001c3e:	2064      	movs	r0, #100	@ 0x64
 8001c40:	f000 fb1c 	bl	800227c <HAL_Delay>
	ADC1_Channel[0].data = 0;
 8001c44:	4b06      	ldr	r3, [pc, #24]	@ (8001c60 <NO3+0x30>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	841a      	strh	r2, [r3, #32]
	ADC1_Channel[1].data = 0;
 8001c4a:	4b05      	ldr	r3, [pc, #20]	@ (8001c60 <NO3+0x30>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
	ADC1_Channel[2].data = 0;
 8001c52:	4b03      	ldr	r3, [pc, #12]	@ (8001c60 <NO3+0x30>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20000000 	.word	0x20000000

08001c64 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13)
 8001c6e:	88fb      	ldrh	r3, [r7, #6]
 8001c70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c74:	d11a      	bne.n	8001cac <HAL_GPIO_EXTI_Callback+0x48>
	{
		if (check == 0)
 8001c76:	4b10      	ldr	r3, [pc, #64]	@ (8001cb8 <HAL_GPIO_EXTI_Callback+0x54>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d103      	bne.n	8001c86 <HAL_GPIO_EXTI_Callback+0x22>
		{
			check = 1;
 8001c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb8 <HAL_GPIO_EXTI_Callback+0x54>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	601a      	str	r2, [r3, #0]
		else
		{
			check = 1;
		}
	}
}
 8001c84:	e012      	b.n	8001cac <HAL_GPIO_EXTI_Callback+0x48>
		else if (check == 1)
 8001c86:	4b0c      	ldr	r3, [pc, #48]	@ (8001cb8 <HAL_GPIO_EXTI_Callback+0x54>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d103      	bne.n	8001c96 <HAL_GPIO_EXTI_Callback+0x32>
			check = 2;
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb8 <HAL_GPIO_EXTI_Callback+0x54>)
 8001c90:	2202      	movs	r2, #2
 8001c92:	601a      	str	r2, [r3, #0]
}
 8001c94:	e00a      	b.n	8001cac <HAL_GPIO_EXTI_Callback+0x48>
		else if (check == 2)
 8001c96:	4b08      	ldr	r3, [pc, #32]	@ (8001cb8 <HAL_GPIO_EXTI_Callback+0x54>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d103      	bne.n	8001ca6 <HAL_GPIO_EXTI_Callback+0x42>
			check= 3;
 8001c9e:	4b06      	ldr	r3, [pc, #24]	@ (8001cb8 <HAL_GPIO_EXTI_Callback+0x54>)
 8001ca0:	2203      	movs	r2, #3
 8001ca2:	601a      	str	r2, [r3, #0]
}
 8001ca4:	e002      	b.n	8001cac <HAL_GPIO_EXTI_Callback+0x48>
			check = 1;
 8001ca6:	4b04      	ldr	r3, [pc, #16]	@ (8001cb8 <HAL_GPIO_EXTI_Callback+0x54>)
 8001ca8:	2201      	movs	r2, #1
 8001caa:	601a      	str	r2, [r3, #0]
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	200002d8 	.word	0x200002d8

08001cbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cc0:	b672      	cpsid	i
}
 8001cc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cc4:	bf00      	nop
 8001cc6:	e7fd      	b.n	8001cc4 <Error_Handler+0x8>

08001cc8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cce:	4b0f      	ldr	r3, [pc, #60]	@ (8001d0c <HAL_MspInit+0x44>)
 8001cd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cd2:	4a0e      	ldr	r2, [pc, #56]	@ (8001d0c <HAL_MspInit+0x44>)
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001cda:	4b0c      	ldr	r3, [pc, #48]	@ (8001d0c <HAL_MspInit+0x44>)
 8001cdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	607b      	str	r3, [r7, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ce6:	4b09      	ldr	r3, [pc, #36]	@ (8001d0c <HAL_MspInit+0x44>)
 8001ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cea:	4a08      	ldr	r2, [pc, #32]	@ (8001d0c <HAL_MspInit+0x44>)
 8001cec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cf0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cf2:	4b06      	ldr	r3, [pc, #24]	@ (8001d0c <HAL_MspInit+0x44>)
 8001cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cfa:	603b      	str	r3, [r7, #0]
 8001cfc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001cfe:	f002 fe29 	bl	8004954 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d02:	bf00      	nop
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40021000 	.word	0x40021000

08001d10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b0a0      	sub	sp, #128	@ 0x80
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d18:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	609a      	str	r2, [r3, #8]
 8001d24:	60da      	str	r2, [r3, #12]
 8001d26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d28:	f107 0318 	add.w	r3, r7, #24
 8001d2c:	2254      	movs	r2, #84	@ 0x54
 8001d2e:	2100      	movs	r1, #0
 8001d30:	4618      	mov	r0, r3
 8001d32:	f005 ffa3 	bl	8007c7c <memset>
  if(hadc->Instance==ADC1)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d3e:	d177      	bne.n	8001e30 <HAL_ADC_MspInit+0x120>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001d40:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d44:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001d46:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001d4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d4c:	f107 0318 	add.w	r3, r7, #24
 8001d50:	4618      	mov	r0, r3
 8001d52:	f003 fb3d 	bl	80053d0 <HAL_RCCEx_PeriphCLKConfig>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001d5c:	f7ff ffae 	bl	8001cbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001d60:	4b35      	ldr	r3, [pc, #212]	@ (8001e38 <HAL_ADC_MspInit+0x128>)
 8001d62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d64:	4a34      	ldr	r2, [pc, #208]	@ (8001e38 <HAL_ADC_MspInit+0x128>)
 8001d66:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001d6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d6c:	4b32      	ldr	r3, [pc, #200]	@ (8001e38 <HAL_ADC_MspInit+0x128>)
 8001d6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d74:	617b      	str	r3, [r7, #20]
 8001d76:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d78:	4b2f      	ldr	r3, [pc, #188]	@ (8001e38 <HAL_ADC_MspInit+0x128>)
 8001d7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d7c:	4a2e      	ldr	r2, [pc, #184]	@ (8001e38 <HAL_ADC_MspInit+0x128>)
 8001d7e:	f043 0301 	orr.w	r3, r3, #1
 8001d82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d84:	4b2c      	ldr	r3, [pc, #176]	@ (8001e38 <HAL_ADC_MspInit+0x128>)
 8001d86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	613b      	str	r3, [r7, #16]
 8001d8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d90:	4b29      	ldr	r3, [pc, #164]	@ (8001e38 <HAL_ADC_MspInit+0x128>)
 8001d92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d94:	4a28      	ldr	r2, [pc, #160]	@ (8001e38 <HAL_ADC_MspInit+0x128>)
 8001d96:	f043 0302 	orr.w	r3, r3, #2
 8001d9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d9c:	4b26      	ldr	r3, [pc, #152]	@ (8001e38 <HAL_ADC_MspInit+0x128>)
 8001d9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001da8:	2303      	movs	r3, #3
 8001daa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dac:	2303      	movs	r3, #3
 8001dae:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001db8:	4619      	mov	r1, r3
 8001dba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dbe:	f002 fb59 	bl	8004474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dce:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4819      	ldr	r0, [pc, #100]	@ (8001e3c <HAL_ADC_MspInit+0x12c>)
 8001dd6:	f002 fb4d 	bl	8004474 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001dda:	4b19      	ldr	r3, [pc, #100]	@ (8001e40 <HAL_ADC_MspInit+0x130>)
 8001ddc:	4a19      	ldr	r2, [pc, #100]	@ (8001e44 <HAL_ADC_MspInit+0x134>)
 8001dde:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001de0:	4b17      	ldr	r3, [pc, #92]	@ (8001e40 <HAL_ADC_MspInit+0x130>)
 8001de2:	2205      	movs	r2, #5
 8001de4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001de6:	4b16      	ldr	r3, [pc, #88]	@ (8001e40 <HAL_ADC_MspInit+0x130>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dec:	4b14      	ldr	r3, [pc, #80]	@ (8001e40 <HAL_ADC_MspInit+0x130>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001df2:	4b13      	ldr	r3, [pc, #76]	@ (8001e40 <HAL_ADC_MspInit+0x130>)
 8001df4:	2280      	movs	r2, #128	@ 0x80
 8001df6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001df8:	4b11      	ldr	r3, [pc, #68]	@ (8001e40 <HAL_ADC_MspInit+0x130>)
 8001dfa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001dfe:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e00:	4b0f      	ldr	r3, [pc, #60]	@ (8001e40 <HAL_ADC_MspInit+0x130>)
 8001e02:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e06:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e08:	4b0d      	ldr	r3, [pc, #52]	@ (8001e40 <HAL_ADC_MspInit+0x130>)
 8001e0a:	2220      	movs	r2, #32
 8001e0c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001e40 <HAL_ADC_MspInit+0x130>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e14:	480a      	ldr	r0, [pc, #40]	@ (8001e40 <HAL_ADC_MspInit+0x130>)
 8001e16:	f002 f973 	bl	8004100 <HAL_DMA_Init>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 8001e20:	f7ff ff4c 	bl	8001cbc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a06      	ldr	r2, [pc, #24]	@ (8001e40 <HAL_ADC_MspInit+0x130>)
 8001e28:	655a      	str	r2, [r3, #84]	@ 0x54
 8001e2a:	4a05      	ldr	r2, [pc, #20]	@ (8001e40 <HAL_ADC_MspInit+0x130>)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e30:	bf00      	nop
 8001e32:	3780      	adds	r7, #128	@ 0x80
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	48000400 	.word	0x48000400
 8001e40:	20000100 	.word	0x20000100
 8001e44:	40020008 	.word	0x40020008

08001e48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b09e      	sub	sp, #120	@ 0x78
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e50:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	605a      	str	r2, [r3, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	60da      	str	r2, [r3, #12]
 8001e5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e60:	f107 0310 	add.w	r3, r7, #16
 8001e64:	2254      	movs	r2, #84	@ 0x54
 8001e66:	2100      	movs	r1, #0
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f005 ff07 	bl	8007c7c <memset>
  if(huart->Instance==LPUART1)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a1f      	ldr	r2, [pc, #124]	@ (8001ef0 <HAL_UART_MspInit+0xa8>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d136      	bne.n	8001ee6 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001e78:	2320      	movs	r3, #32
 8001e7a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e80:	f107 0310 	add.w	r3, r7, #16
 8001e84:	4618      	mov	r0, r3
 8001e86:	f003 faa3 	bl	80053d0 <HAL_RCCEx_PeriphCLKConfig>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e90:	f7ff ff14 	bl	8001cbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001e94:	4b17      	ldr	r3, [pc, #92]	@ (8001ef4 <HAL_UART_MspInit+0xac>)
 8001e96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e98:	4a16      	ldr	r2, [pc, #88]	@ (8001ef4 <HAL_UART_MspInit+0xac>)
 8001e9a:	f043 0301 	orr.w	r3, r3, #1
 8001e9e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001ea0:	4b14      	ldr	r3, [pc, #80]	@ (8001ef4 <HAL_UART_MspInit+0xac>)
 8001ea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eac:	4b11      	ldr	r3, [pc, #68]	@ (8001ef4 <HAL_UART_MspInit+0xac>)
 8001eae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eb0:	4a10      	ldr	r2, [pc, #64]	@ (8001ef4 <HAL_UART_MspInit+0xac>)
 8001eb2:	f043 0301 	orr.w	r3, r3, #1
 8001eb6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001eb8:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef4 <HAL_UART_MspInit+0xac>)
 8001eba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	60bb      	str	r3, [r7, #8]
 8001ec2:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001ec4:	230c      	movs	r3, #12
 8001ec6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001ed4:	230c      	movs	r3, #12
 8001ed6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001edc:	4619      	mov	r1, r3
 8001ede:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ee2:	f002 fac7 	bl	8004474 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001ee6:	bf00      	nop
 8001ee8:	3778      	adds	r7, #120	@ 0x78
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40008000 	.word	0x40008000
 8001ef4:	40021000 	.word	0x40021000

08001ef8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a13      	ldr	r2, [pc, #76]	@ (8001f54 <HAL_TIM_Base_MspInit+0x5c>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d10c      	bne.n	8001f24 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f0a:	4b13      	ldr	r3, [pc, #76]	@ (8001f58 <HAL_TIM_Base_MspInit+0x60>)
 8001f0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f0e:	4a12      	ldr	r2, [pc, #72]	@ (8001f58 <HAL_TIM_Base_MspInit+0x60>)
 8001f10:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f14:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f16:	4b10      	ldr	r3, [pc, #64]	@ (8001f58 <HAL_TIM_Base_MspInit+0x60>)
 8001f18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001f22:	e010      	b.n	8001f46 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a0c      	ldr	r2, [pc, #48]	@ (8001f5c <HAL_TIM_Base_MspInit+0x64>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d10b      	bne.n	8001f46 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f58 <HAL_TIM_Base_MspInit+0x60>)
 8001f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f32:	4a09      	ldr	r2, [pc, #36]	@ (8001f58 <HAL_TIM_Base_MspInit+0x60>)
 8001f34:	f043 0304 	orr.w	r3, r3, #4
 8001f38:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f3a:	4b07      	ldr	r3, [pc, #28]	@ (8001f58 <HAL_TIM_Base_MspInit+0x60>)
 8001f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f3e:	f003 0304 	and.w	r3, r3, #4
 8001f42:	60bb      	str	r3, [r7, #8]
 8001f44:	68bb      	ldr	r3, [r7, #8]
}
 8001f46:	bf00      	nop
 8001f48:	3714      	adds	r7, #20
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	40012c00 	.word	0x40012c00
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	40000800 	.word	0x40000800

08001f60 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08a      	sub	sp, #40	@ 0x28
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f68:	f107 0314 	add.w	r3, r7, #20
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	60da      	str	r2, [r3, #12]
 8001f76:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a17      	ldr	r2, [pc, #92]	@ (8001fdc <HAL_TIM_Encoder_MspInit+0x7c>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d128      	bne.n	8001fd4 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f82:	4b17      	ldr	r3, [pc, #92]	@ (8001fe0 <HAL_TIM_Encoder_MspInit+0x80>)
 8001f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f86:	4a16      	ldr	r2, [pc, #88]	@ (8001fe0 <HAL_TIM_Encoder_MspInit+0x80>)
 8001f88:	f043 0302 	orr.w	r3, r3, #2
 8001f8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f8e:	4b14      	ldr	r3, [pc, #80]	@ (8001fe0 <HAL_TIM_Encoder_MspInit+0x80>)
 8001f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	613b      	str	r3, [r7, #16]
 8001f98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9a:	4b11      	ldr	r3, [pc, #68]	@ (8001fe0 <HAL_TIM_Encoder_MspInit+0x80>)
 8001f9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f9e:	4a10      	ldr	r2, [pc, #64]	@ (8001fe0 <HAL_TIM_Encoder_MspInit+0x80>)
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe0 <HAL_TIM_Encoder_MspInit+0x80>)
 8001fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fb2:	23c0      	movs	r3, #192	@ 0xc0
 8001fb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc6:	f107 0314 	add.w	r3, r7, #20
 8001fca:	4619      	mov	r1, r3
 8001fcc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fd0:	f002 fa50 	bl	8004474 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001fd4:	bf00      	nop
 8001fd6:	3728      	adds	r7, #40	@ 0x28
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40000400 	.word	0x40000400
 8001fe0:	40021000 	.word	0x40021000

08001fe4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08a      	sub	sp, #40	@ 0x28
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fec:	f107 0314 	add.w	r3, r7, #20
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	60da      	str	r2, [r3, #12]
 8001ffa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a23      	ldr	r2, [pc, #140]	@ (8002090 <HAL_TIM_MspPostInit+0xac>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d11c      	bne.n	8002040 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002006:	4b23      	ldr	r3, [pc, #140]	@ (8002094 <HAL_TIM_MspPostInit+0xb0>)
 8002008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800200a:	4a22      	ldr	r2, [pc, #136]	@ (8002094 <HAL_TIM_MspPostInit+0xb0>)
 800200c:	f043 0304 	orr.w	r3, r3, #4
 8002010:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002012:	4b20      	ldr	r3, [pc, #128]	@ (8002094 <HAL_TIM_MspPostInit+0xb0>)
 8002014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002016:	f003 0304 	and.w	r3, r3, #4
 800201a:	613b      	str	r3, [r7, #16]
 800201c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800201e:	2303      	movs	r3, #3
 8002020:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002022:	2302      	movs	r3, #2
 8002024:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002026:	2300      	movs	r3, #0
 8002028:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202a:	2300      	movs	r3, #0
 800202c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800202e:	2302      	movs	r3, #2
 8002030:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002032:	f107 0314 	add.w	r3, r7, #20
 8002036:	4619      	mov	r1, r3
 8002038:	4817      	ldr	r0, [pc, #92]	@ (8002098 <HAL_TIM_MspPostInit+0xb4>)
 800203a:	f002 fa1b 	bl	8004474 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800203e:	e022      	b.n	8002086 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM4)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a15      	ldr	r2, [pc, #84]	@ (800209c <HAL_TIM_MspPostInit+0xb8>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d11d      	bne.n	8002086 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800204a:	4b12      	ldr	r3, [pc, #72]	@ (8002094 <HAL_TIM_MspPostInit+0xb0>)
 800204c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800204e:	4a11      	ldr	r2, [pc, #68]	@ (8002094 <HAL_TIM_MspPostInit+0xb0>)
 8002050:	f043 0301 	orr.w	r3, r3, #1
 8002054:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002056:	4b0f      	ldr	r3, [pc, #60]	@ (8002094 <HAL_TIM_MspPostInit+0xb0>)
 8002058:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002062:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002066:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002068:	2302      	movs	r3, #2
 800206a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	2300      	movs	r3, #0
 800206e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002070:	2300      	movs	r3, #0
 8002072:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002074:	230a      	movs	r3, #10
 8002076:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002078:	f107 0314 	add.w	r3, r7, #20
 800207c:	4619      	mov	r1, r3
 800207e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002082:	f002 f9f7 	bl	8004474 <HAL_GPIO_Init>
}
 8002086:	bf00      	nop
 8002088:	3728      	adds	r7, #40	@ 0x28
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40012c00 	.word	0x40012c00
 8002094:	40021000 	.word	0x40021000
 8002098:	48000800 	.word	0x48000800
 800209c:	40000800 	.word	0x40000800

080020a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020a4:	bf00      	nop
 80020a6:	e7fd      	b.n	80020a4 <NMI_Handler+0x4>

080020a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020ac:	bf00      	nop
 80020ae:	e7fd      	b.n	80020ac <HardFault_Handler+0x4>

080020b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020b4:	bf00      	nop
 80020b6:	e7fd      	b.n	80020b4 <MemManage_Handler+0x4>

080020b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020bc:	bf00      	nop
 80020be:	e7fd      	b.n	80020bc <BusFault_Handler+0x4>

080020c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020c4:	bf00      	nop
 80020c6:	e7fd      	b.n	80020c4 <UsageFault_Handler+0x4>

080020c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020cc:	bf00      	nop
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020d6:	b480      	push	{r7}
 80020d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020da:	bf00      	nop
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020f6:	f000 f8a3 	bl	8002240 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020fa:	bf00      	nop
 80020fc:	bd80      	pop	{r7, pc}
	...

08002100 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002104:	4802      	ldr	r0, [pc, #8]	@ (8002110 <DMA1_Channel1_IRQHandler+0x10>)
 8002106:	f002 f8a3 	bl	8004250 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20000100 	.word	0x20000100

08002114 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002118:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800211c:	f002 fb5e 	bl	80047dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002120:	bf00      	nop
 8002122:	bd80      	pop	{r7, pc}

08002124 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002128:	4b06      	ldr	r3, [pc, #24]	@ (8002144 <SystemInit+0x20>)
 800212a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800212e:	4a05      	ldr	r2, [pc, #20]	@ (8002144 <SystemInit+0x20>)
 8002130:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002134:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002138:	bf00      	nop
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	e000ed00 	.word	0xe000ed00

08002148 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002148:	480d      	ldr	r0, [pc, #52]	@ (8002180 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800214a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800214c:	f7ff ffea 	bl	8002124 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002150:	480c      	ldr	r0, [pc, #48]	@ (8002184 <LoopForever+0x6>)
  ldr r1, =_edata
 8002152:	490d      	ldr	r1, [pc, #52]	@ (8002188 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002154:	4a0d      	ldr	r2, [pc, #52]	@ (800218c <LoopForever+0xe>)
  movs r3, #0
 8002156:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002158:	e002      	b.n	8002160 <LoopCopyDataInit>

0800215a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800215a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800215c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800215e:	3304      	adds	r3, #4

08002160 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002160:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002162:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002164:	d3f9      	bcc.n	800215a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002166:	4a0a      	ldr	r2, [pc, #40]	@ (8002190 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002168:	4c0a      	ldr	r4, [pc, #40]	@ (8002194 <LoopForever+0x16>)
  movs r3, #0
 800216a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800216c:	e001      	b.n	8002172 <LoopFillZerobss>

0800216e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800216e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002170:	3204      	adds	r2, #4

08002172 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002172:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002174:	d3fb      	bcc.n	800216e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002176:	f005 fd89 	bl	8007c8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800217a:	f7fe fde3 	bl	8000d44 <main>

0800217e <LoopForever>:

LoopForever:
    b LoopForever
 800217e:	e7fe      	b.n	800217e <LoopForever>
  ldr   r0, =_estack
 8002180:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002184:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002188:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800218c:	08007d3c 	.word	0x08007d3c
  ldr r2, =_sbss
 8002190:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002194:	20000350 	.word	0x20000350

08002198 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002198:	e7fe      	b.n	8002198 <ADC1_2_IRQHandler>

0800219a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b082      	sub	sp, #8
 800219e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021a0:	2300      	movs	r3, #0
 80021a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021a4:	2003      	movs	r0, #3
 80021a6:	f001 ff6b 	bl	8004080 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021aa:	2000      	movs	r0, #0
 80021ac:	f000 f80e 	bl	80021cc <HAL_InitTick>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d002      	beq.n	80021bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	71fb      	strb	r3, [r7, #7]
 80021ba:	e001      	b.n	80021c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80021bc:	f7ff fd84 	bl	8001cc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021c0:	79fb      	ldrb	r3, [r7, #7]

}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
	...

080021cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80021d4:	2300      	movs	r3, #0
 80021d6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80021d8:	4b16      	ldr	r3, [pc, #88]	@ (8002234 <HAL_InitTick+0x68>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d022      	beq.n	8002226 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80021e0:	4b15      	ldr	r3, [pc, #84]	@ (8002238 <HAL_InitTick+0x6c>)
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	4b13      	ldr	r3, [pc, #76]	@ (8002234 <HAL_InitTick+0x68>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80021ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80021f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f4:	4618      	mov	r0, r3
 80021f6:	f001 ff76 	bl	80040e6 <HAL_SYSTICK_Config>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d10f      	bne.n	8002220 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2b0f      	cmp	r3, #15
 8002204:	d809      	bhi.n	800221a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002206:	2200      	movs	r2, #0
 8002208:	6879      	ldr	r1, [r7, #4]
 800220a:	f04f 30ff 	mov.w	r0, #4294967295
 800220e:	f001 ff42 	bl	8004096 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002212:	4a0a      	ldr	r2, [pc, #40]	@ (800223c <HAL_InitTick+0x70>)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6013      	str	r3, [r2, #0]
 8002218:	e007      	b.n	800222a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	73fb      	strb	r3, [r7, #15]
 800221e:	e004      	b.n	800222a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	73fb      	strb	r3, [r7, #15]
 8002224:	e001      	b.n	800222a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800222a:	7bfb      	ldrb	r3, [r7, #15]
}
 800222c:	4618      	mov	r0, r3
 800222e:	3710      	adds	r7, #16
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	20000074 	.word	0x20000074
 8002238:	2000006c 	.word	0x2000006c
 800223c:	20000070 	.word	0x20000070

08002240 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002244:	4b05      	ldr	r3, [pc, #20]	@ (800225c <HAL_IncTick+0x1c>)
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	4b05      	ldr	r3, [pc, #20]	@ (8002260 <HAL_IncTick+0x20>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4413      	add	r3, r2
 800224e:	4a03      	ldr	r2, [pc, #12]	@ (800225c <HAL_IncTick+0x1c>)
 8002250:	6013      	str	r3, [r2, #0]
}
 8002252:	bf00      	nop
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	2000034c 	.word	0x2000034c
 8002260:	20000074 	.word	0x20000074

08002264 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  return uwTick;
 8002268:	4b03      	ldr	r3, [pc, #12]	@ (8002278 <HAL_GetTick+0x14>)
 800226a:	681b      	ldr	r3, [r3, #0]
}
 800226c:	4618      	mov	r0, r3
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	2000034c 	.word	0x2000034c

0800227c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002284:	f7ff ffee 	bl	8002264 <HAL_GetTick>
 8002288:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002294:	d004      	beq.n	80022a0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002296:	4b09      	ldr	r3, [pc, #36]	@ (80022bc <HAL_Delay+0x40>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	4413      	add	r3, r2
 800229e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022a0:	bf00      	nop
 80022a2:	f7ff ffdf 	bl	8002264 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d8f7      	bhi.n	80022a2 <HAL_Delay+0x26>
  {
  }
}
 80022b2:	bf00      	nop
 80022b4:	bf00      	nop
 80022b6:	3710      	adds	r7, #16
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	20000074 	.word	0x20000074

080022c0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	431a      	orrs	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	609a      	str	r2, [r3, #8]
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80022e6:	b480      	push	{r7}
 80022e8:	b083      	sub	sp, #12
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
 80022ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	431a      	orrs	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	609a      	str	r2, [r3, #8]
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800231c:	4618      	mov	r0, r3
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002328:	b480      	push	{r7}
 800232a:	b087      	sub	sp, #28
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
 8002334:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	3360      	adds	r3, #96	@ 0x60
 800233a:	461a      	mov	r2, r3
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	4b08      	ldr	r3, [pc, #32]	@ (800236c <LL_ADC_SetOffset+0x44>)
 800234a:	4013      	ands	r3, r2
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	430a      	orrs	r2, r1
 8002356:	4313      	orrs	r3, r2
 8002358:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002360:	bf00      	nop
 8002362:	371c      	adds	r7, #28
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	03fff000 	.word	0x03fff000

08002370 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	3360      	adds	r3, #96	@ 0x60
 800237e:	461a      	mov	r2, r3
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	4413      	add	r3, r2
 8002386:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002390:	4618      	mov	r0, r3
 8002392:	3714      	adds	r7, #20
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800239c:	b480      	push	{r7}
 800239e:	b087      	sub	sp, #28
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	3360      	adds	r3, #96	@ 0x60
 80023ac:	461a      	mov	r2, r3
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	431a      	orrs	r2, r3
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80023c6:	bf00      	nop
 80023c8:	371c      	adds	r7, #28
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80023d2:	b480      	push	{r7}
 80023d4:	b087      	sub	sp, #28
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	60f8      	str	r0, [r7, #12]
 80023da:	60b9      	str	r1, [r7, #8]
 80023dc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	3360      	adds	r3, #96	@ 0x60
 80023e2:	461a      	mov	r2, r3
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	431a      	orrs	r2, r3
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80023fc:	bf00      	nop
 80023fe:	371c      	adds	r7, #28
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002408:	b480      	push	{r7}
 800240a:	b087      	sub	sp, #28
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	3360      	adds	r3, #96	@ 0x60
 8002418:	461a      	mov	r2, r3
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	431a      	orrs	r2, r3
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002432:	bf00      	nop
 8002434:	371c      	adds	r7, #28
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr

0800243e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800243e:	b480      	push	{r7}
 8002440:	b083      	sub	sp, #12
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
 8002446:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	695b      	ldr	r3, [r3, #20]
 800244c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	431a      	orrs	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	615a      	str	r2, [r3, #20]
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002474:	2b00      	cmp	r3, #0
 8002476:	d101      	bne.n	800247c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002478:	2301      	movs	r3, #1
 800247a:	e000      	b.n	800247e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800248a:	b480      	push	{r7}
 800248c:	b087      	sub	sp, #28
 800248e:	af00      	add	r7, sp, #0
 8002490:	60f8      	str	r0, [r7, #12]
 8002492:	60b9      	str	r1, [r7, #8]
 8002494:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	3330      	adds	r3, #48	@ 0x30
 800249a:	461a      	mov	r2, r3
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	0a1b      	lsrs	r3, r3, #8
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	f003 030c 	and.w	r3, r3, #12
 80024a6:	4413      	add	r3, r2
 80024a8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	f003 031f 	and.w	r3, r3, #31
 80024b4:	211f      	movs	r1, #31
 80024b6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ba:	43db      	mvns	r3, r3
 80024bc:	401a      	ands	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	0e9b      	lsrs	r3, r3, #26
 80024c2:	f003 011f 	and.w	r1, r3, #31
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	f003 031f 	and.w	r3, r3, #31
 80024cc:	fa01 f303 	lsl.w	r3, r1, r3
 80024d0:	431a      	orrs	r2, r3
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80024d6:	bf00      	nop
 80024d8:	371c      	adds	r7, #28
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80024e2:	b480      	push	{r7}
 80024e4:	b087      	sub	sp, #28
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	60f8      	str	r0, [r7, #12]
 80024ea:	60b9      	str	r1, [r7, #8]
 80024ec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	3314      	adds	r3, #20
 80024f2:	461a      	mov	r2, r3
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	0e5b      	lsrs	r3, r3, #25
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	f003 0304 	and.w	r3, r3, #4
 80024fe:	4413      	add	r3, r2
 8002500:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	0d1b      	lsrs	r3, r3, #20
 800250a:	f003 031f 	and.w	r3, r3, #31
 800250e:	2107      	movs	r1, #7
 8002510:	fa01 f303 	lsl.w	r3, r1, r3
 8002514:	43db      	mvns	r3, r3
 8002516:	401a      	ands	r2, r3
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	0d1b      	lsrs	r3, r3, #20
 800251c:	f003 031f 	and.w	r3, r3, #31
 8002520:	6879      	ldr	r1, [r7, #4]
 8002522:	fa01 f303 	lsl.w	r3, r1, r3
 8002526:	431a      	orrs	r2, r3
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800252c:	bf00      	nop
 800252e:	371c      	adds	r7, #28
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002550:	43db      	mvns	r3, r3
 8002552:	401a      	ands	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f003 0318 	and.w	r3, r3, #24
 800255a:	4908      	ldr	r1, [pc, #32]	@ (800257c <LL_ADC_SetChannelSingleDiff+0x44>)
 800255c:	40d9      	lsrs	r1, r3
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	400b      	ands	r3, r1
 8002562:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002566:	431a      	orrs	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800256e:	bf00      	nop
 8002570:	3714      	adds	r7, #20
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	0007ffff 	.word	0x0007ffff

08002580 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f003 031f 	and.w	r3, r3, #31
}
 8002590:	4618      	mov	r0, r3
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80025c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	6093      	str	r3, [r2, #8]
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80025ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80025f0:	d101      	bne.n	80025f6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80025f2:	2301      	movs	r3, #1
 80025f4:	e000      	b.n	80025f8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002614:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002618:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800263c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002640:	d101      	bne.n	8002646 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002642:	2301      	movs	r3, #1
 8002644:	e000      	b.n	8002648 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002664:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002668:	f043 0201 	orr.w	r2, r3, #1
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800268c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002690:	f043 0202 	orr.w	r2, r3, #2
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d101      	bne.n	80026bc <LL_ADC_IsEnabled+0x18>
 80026b8:	2301      	movs	r3, #1
 80026ba:	e000      	b.n	80026be <LL_ADC_IsEnabled+0x1a>
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr

080026ca <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b083      	sub	sp, #12
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d101      	bne.n	80026e2 <LL_ADC_IsDisableOngoing+0x18>
 80026de:	2301      	movs	r3, #1
 80026e0:	e000      	b.n	80026e4 <LL_ADC_IsDisableOngoing+0x1a>
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002700:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002704:	f043 0204 	orr.w	r2, r3, #4
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002728:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800272c:	f043 0210 	orr.w	r2, r3, #16
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f003 0304 	and.w	r3, r3, #4
 8002750:	2b04      	cmp	r3, #4
 8002752:	d101      	bne.n	8002758 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002754:	2301      	movs	r3, #1
 8002756:	e000      	b.n	800275a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002766:	b480      	push	{r7}
 8002768:	b083      	sub	sp, #12
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002776:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800277a:	f043 0220 	orr.w	r2, r3, #32
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002782:	bf00      	nop
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800278e:	b480      	push	{r7}
 8002790:	b083      	sub	sp, #12
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 0308 	and.w	r3, r3, #8
 800279e:	2b08      	cmp	r3, #8
 80027a0:	d101      	bne.n	80027a6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80027a2:	2301      	movs	r3, #1
 80027a4:	e000      	b.n	80027a8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80027b4:	b590      	push	{r4, r7, lr}
 80027b6:	b089      	sub	sp, #36	@ 0x24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027bc:	2300      	movs	r3, #0
 80027be:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80027c0:	2300      	movs	r3, #0
 80027c2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e1a9      	b.n	8002b22 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d109      	bne.n	80027f0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f7ff fa97 	bl	8001d10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff fef1 	bl	80025dc <LL_ADC_IsDeepPowerDownEnabled>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d004      	beq.n	800280a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff fed7 	bl	80025b8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff ff0c 	bl	800262c <LL_ADC_IsInternalRegulatorEnabled>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d115      	bne.n	8002846 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff fef0 	bl	8002604 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002824:	4b9c      	ldr	r3, [pc, #624]	@ (8002a98 <HAL_ADC_Init+0x2e4>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	099b      	lsrs	r3, r3, #6
 800282a:	4a9c      	ldr	r2, [pc, #624]	@ (8002a9c <HAL_ADC_Init+0x2e8>)
 800282c:	fba2 2303 	umull	r2, r3, r2, r3
 8002830:	099b      	lsrs	r3, r3, #6
 8002832:	3301      	adds	r3, #1
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002838:	e002      	b.n	8002840 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	3b01      	subs	r3, #1
 800283e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f9      	bne.n	800283a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff feee 	bl	800262c <LL_ADC_IsInternalRegulatorEnabled>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d10d      	bne.n	8002872 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800285a:	f043 0210 	orr.w	r2, r3, #16
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002866:	f043 0201 	orr.w	r2, r3, #1
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f7ff ff62 	bl	8002740 <LL_ADC_REG_IsConversionOngoing>
 800287c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002882:	f003 0310 	and.w	r3, r3, #16
 8002886:	2b00      	cmp	r3, #0
 8002888:	f040 8142 	bne.w	8002b10 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	2b00      	cmp	r3, #0
 8002890:	f040 813e 	bne.w	8002b10 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002898:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800289c:	f043 0202 	orr.w	r2, r3, #2
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7ff fefb 	bl	80026a4 <LL_ADC_IsEnabled>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d141      	bne.n	8002938 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028bc:	d004      	beq.n	80028c8 <HAL_ADC_Init+0x114>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a77      	ldr	r2, [pc, #476]	@ (8002aa0 <HAL_ADC_Init+0x2ec>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d10f      	bne.n	80028e8 <HAL_ADC_Init+0x134>
 80028c8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80028cc:	f7ff feea 	bl	80026a4 <LL_ADC_IsEnabled>
 80028d0:	4604      	mov	r4, r0
 80028d2:	4873      	ldr	r0, [pc, #460]	@ (8002aa0 <HAL_ADC_Init+0x2ec>)
 80028d4:	f7ff fee6 	bl	80026a4 <LL_ADC_IsEnabled>
 80028d8:	4603      	mov	r3, r0
 80028da:	4323      	orrs	r3, r4
 80028dc:	2b00      	cmp	r3, #0
 80028de:	bf0c      	ite	eq
 80028e0:	2301      	moveq	r3, #1
 80028e2:	2300      	movne	r3, #0
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	e012      	b.n	800290e <HAL_ADC_Init+0x15a>
 80028e8:	486e      	ldr	r0, [pc, #440]	@ (8002aa4 <HAL_ADC_Init+0x2f0>)
 80028ea:	f7ff fedb 	bl	80026a4 <LL_ADC_IsEnabled>
 80028ee:	4604      	mov	r4, r0
 80028f0:	486d      	ldr	r0, [pc, #436]	@ (8002aa8 <HAL_ADC_Init+0x2f4>)
 80028f2:	f7ff fed7 	bl	80026a4 <LL_ADC_IsEnabled>
 80028f6:	4603      	mov	r3, r0
 80028f8:	431c      	orrs	r4, r3
 80028fa:	486c      	ldr	r0, [pc, #432]	@ (8002aac <HAL_ADC_Init+0x2f8>)
 80028fc:	f7ff fed2 	bl	80026a4 <LL_ADC_IsEnabled>
 8002900:	4603      	mov	r3, r0
 8002902:	4323      	orrs	r3, r4
 8002904:	2b00      	cmp	r3, #0
 8002906:	bf0c      	ite	eq
 8002908:	2301      	moveq	r3, #1
 800290a:	2300      	movne	r3, #0
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d012      	beq.n	8002938 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800291a:	d004      	beq.n	8002926 <HAL_ADC_Init+0x172>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a5f      	ldr	r2, [pc, #380]	@ (8002aa0 <HAL_ADC_Init+0x2ec>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d101      	bne.n	800292a <HAL_ADC_Init+0x176>
 8002926:	4a62      	ldr	r2, [pc, #392]	@ (8002ab0 <HAL_ADC_Init+0x2fc>)
 8002928:	e000      	b.n	800292c <HAL_ADC_Init+0x178>
 800292a:	4a62      	ldr	r2, [pc, #392]	@ (8002ab4 <HAL_ADC_Init+0x300>)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	4619      	mov	r1, r3
 8002932:	4610      	mov	r0, r2
 8002934:	f7ff fcc4 	bl	80022c0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	7f5b      	ldrb	r3, [r3, #29]
 800293c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002942:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002948:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800294e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002956:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002958:	4313      	orrs	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002962:	2b01      	cmp	r3, #1
 8002964:	d106      	bne.n	8002974 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800296a:	3b01      	subs	r3, #1
 800296c:	045b      	lsls	r3, r3, #17
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	4313      	orrs	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002978:	2b00      	cmp	r3, #0
 800297a:	d009      	beq.n	8002990 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002980:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002988:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	4313      	orrs	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68da      	ldr	r2, [r3, #12]
 8002996:	4b48      	ldr	r3, [pc, #288]	@ (8002ab8 <HAL_ADC_Init+0x304>)
 8002998:	4013      	ands	r3, r2
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	6812      	ldr	r2, [r2, #0]
 800299e:	69b9      	ldr	r1, [r7, #24]
 80029a0:	430b      	orrs	r3, r1
 80029a2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	430a      	orrs	r2, r1
 80029b8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f7ff fee5 	bl	800278e <LL_ADC_INJ_IsConversionOngoing>
 80029c4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d17f      	bne.n	8002acc <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d17c      	bne.n	8002acc <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80029d6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80029de:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80029e0:	4313      	orrs	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80029ee:	f023 0302 	bic.w	r3, r3, #2
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	6812      	ldr	r2, [r2, #0]
 80029f6:	69b9      	ldr	r1, [r7, #24]
 80029f8:	430b      	orrs	r3, r1
 80029fa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d017      	beq.n	8002a34 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	691a      	ldr	r2, [r3, #16]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002a12:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002a1c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002a20:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	6911      	ldr	r1, [r2, #16]
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	6812      	ldr	r2, [r2, #0]
 8002a2c:	430b      	orrs	r3, r1
 8002a2e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002a32:	e013      	b.n	8002a5c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	691a      	ldr	r2, [r3, #16]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002a42:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	6812      	ldr	r2, [r2, #0]
 8002a50:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002a54:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a58:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d12a      	bne.n	8002abc <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002a70:	f023 0304 	bic.w	r3, r3, #4
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002a7c:	4311      	orrs	r1, r2
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002a82:	4311      	orrs	r1, r2
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f042 0201 	orr.w	r2, r2, #1
 8002a94:	611a      	str	r2, [r3, #16]
 8002a96:	e019      	b.n	8002acc <HAL_ADC_Init+0x318>
 8002a98:	2000006c 	.word	0x2000006c
 8002a9c:	053e2d63 	.word	0x053e2d63
 8002aa0:	50000100 	.word	0x50000100
 8002aa4:	50000400 	.word	0x50000400
 8002aa8:	50000500 	.word	0x50000500
 8002aac:	50000600 	.word	0x50000600
 8002ab0:	50000300 	.word	0x50000300
 8002ab4:	50000700 	.word	0x50000700
 8002ab8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	691a      	ldr	r2, [r3, #16]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f022 0201 	bic.w	r2, r2, #1
 8002aca:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	695b      	ldr	r3, [r3, #20]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d10c      	bne.n	8002aee <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ada:	f023 010f 	bic.w	r1, r3, #15
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	1e5a      	subs	r2, r3, #1
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	631a      	str	r2, [r3, #48]	@ 0x30
 8002aec:	e007      	b.n	8002afe <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 020f 	bic.w	r2, r2, #15
 8002afc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b02:	f023 0303 	bic.w	r3, r3, #3
 8002b06:	f043 0201 	orr.w	r2, r3, #1
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002b0e:	e007      	b.n	8002b20 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b14:	f043 0210 	orr.w	r2, r3, #16
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b20:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3724      	adds	r7, #36	@ 0x24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd90      	pop	{r4, r7, pc}
 8002b2a:	bf00      	nop

08002b2c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b3c:	d004      	beq.n	8002b48 <HAL_ADC_Start+0x1c>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a67      	ldr	r2, [pc, #412]	@ (8002ce0 <HAL_ADC_Start+0x1b4>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d101      	bne.n	8002b4c <HAL_ADC_Start+0x20>
 8002b48:	4b66      	ldr	r3, [pc, #408]	@ (8002ce4 <HAL_ADC_Start+0x1b8>)
 8002b4a:	e000      	b.n	8002b4e <HAL_ADC_Start+0x22>
 8002b4c:	4b66      	ldr	r3, [pc, #408]	@ (8002ce8 <HAL_ADC_Start+0x1bc>)
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff fd16 	bl	8002580 <LL_ADC_GetMultimode>
 8002b54:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff fdf0 	bl	8002740 <LL_ADC_REG_IsConversionOngoing>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f040 80b4 	bne.w	8002cd0 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d101      	bne.n	8002b76 <HAL_ADC_Start+0x4a>
 8002b72:	2302      	movs	r3, #2
 8002b74:	e0af      	b.n	8002cd6 <HAL_ADC_Start+0x1aa>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 fefc 	bl	800397c <ADC_Enable>
 8002b84:	4603      	mov	r3, r0
 8002b86:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002b88:	7dfb      	ldrb	r3, [r7, #23]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	f040 809b 	bne.w	8002cc6 <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b94:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002b98:	f023 0301 	bic.w	r3, r3, #1
 8002b9c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a4d      	ldr	r2, [pc, #308]	@ (8002ce0 <HAL_ADC_Start+0x1b4>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d009      	beq.n	8002bc2 <HAL_ADC_Start+0x96>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a4e      	ldr	r2, [pc, #312]	@ (8002cec <HAL_ADC_Start+0x1c0>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d002      	beq.n	8002bbe <HAL_ADC_Start+0x92>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	e003      	b.n	8002bc6 <HAL_ADC_Start+0x9a>
 8002bbe:	4b4c      	ldr	r3, [pc, #304]	@ (8002cf0 <HAL_ADC_Start+0x1c4>)
 8002bc0:	e001      	b.n	8002bc6 <HAL_ADC_Start+0x9a>
 8002bc2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	6812      	ldr	r2, [r2, #0]
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d002      	beq.n	8002bd4 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d105      	bne.n	8002be0 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bd8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002be4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002be8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bec:	d106      	bne.n	8002bfc <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bf2:	f023 0206 	bic.w	r2, r3, #6
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	661a      	str	r2, [r3, #96]	@ 0x60
 8002bfa:	e002      	b.n	8002c02 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	221c      	movs	r2, #28
 8002c08:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a32      	ldr	r2, [pc, #200]	@ (8002ce0 <HAL_ADC_Start+0x1b4>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d009      	beq.n	8002c30 <HAL_ADC_Start+0x104>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a32      	ldr	r2, [pc, #200]	@ (8002cec <HAL_ADC_Start+0x1c0>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d002      	beq.n	8002c2c <HAL_ADC_Start+0x100>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	e003      	b.n	8002c34 <HAL_ADC_Start+0x108>
 8002c2c:	4b30      	ldr	r3, [pc, #192]	@ (8002cf0 <HAL_ADC_Start+0x1c4>)
 8002c2e:	e001      	b.n	8002c34 <HAL_ADC_Start+0x108>
 8002c30:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	6812      	ldr	r2, [r2, #0]
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d008      	beq.n	8002c4e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d005      	beq.n	8002c4e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	2b05      	cmp	r3, #5
 8002c46:	d002      	beq.n	8002c4e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	2b09      	cmp	r3, #9
 8002c4c:	d114      	bne.n	8002c78 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d007      	beq.n	8002c6c <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c60:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002c64:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff fd3d 	bl	80026f0 <LL_ADC_REG_StartConversion>
 8002c76:	e02d      	b.n	8002cd4 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c7c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a15      	ldr	r2, [pc, #84]	@ (8002ce0 <HAL_ADC_Start+0x1b4>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d009      	beq.n	8002ca2 <HAL_ADC_Start+0x176>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a16      	ldr	r2, [pc, #88]	@ (8002cec <HAL_ADC_Start+0x1c0>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d002      	beq.n	8002c9e <HAL_ADC_Start+0x172>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	e003      	b.n	8002ca6 <HAL_ADC_Start+0x17a>
 8002c9e:	4b14      	ldr	r3, [pc, #80]	@ (8002cf0 <HAL_ADC_Start+0x1c4>)
 8002ca0:	e001      	b.n	8002ca6 <HAL_ADC_Start+0x17a>
 8002ca2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002ca6:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00f      	beq.n	8002cd4 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cb8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002cbc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002cc4:	e006      	b.n	8002cd4 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002cce:	e001      	b.n	8002cd4 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002cd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3718      	adds	r7, #24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	50000100 	.word	0x50000100
 8002ce4:	50000300 	.word	0x50000300
 8002ce8:	50000700 	.word	0x50000700
 8002cec:	50000500 	.word	0x50000500
 8002cf0:	50000400 	.word	0x50000400

08002cf4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d101      	bne.n	8002d0a <HAL_ADC_Stop+0x16>
 8002d06:	2302      	movs	r3, #2
 8002d08:	e023      	b.n	8002d52 <HAL_ADC_Stop+0x5e>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002d12:	2103      	movs	r1, #3
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 fd75 	bl	8003804 <ADC_ConversionStop>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002d1e:	7bfb      	ldrb	r3, [r7, #15]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d111      	bne.n	8002d48 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 febf 	bl	8003aa8 <ADC_Disable>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002d2e:	7bfb      	ldrb	r3, [r7, #15]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d109      	bne.n	8002d48 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d38:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002d3c:	f023 0301 	bic.w	r3, r3, #1
 8002d40:	f043 0201 	orr.w	r2, r3, #1
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	65da      	str	r2, [r3, #92]	@ 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
	...

08002d5c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b088      	sub	sp, #32
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d6e:	d004      	beq.n	8002d7a <HAL_ADC_PollForConversion+0x1e>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a77      	ldr	r2, [pc, #476]	@ (8002f54 <HAL_ADC_PollForConversion+0x1f8>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d101      	bne.n	8002d7e <HAL_ADC_PollForConversion+0x22>
 8002d7a:	4b77      	ldr	r3, [pc, #476]	@ (8002f58 <HAL_ADC_PollForConversion+0x1fc>)
 8002d7c:	e000      	b.n	8002d80 <HAL_ADC_PollForConversion+0x24>
 8002d7e:	4b77      	ldr	r3, [pc, #476]	@ (8002f5c <HAL_ADC_PollForConversion+0x200>)
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff fbfd 	bl	8002580 <LL_ADC_GetMultimode>
 8002d86:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	2b08      	cmp	r3, #8
 8002d8e:	d102      	bne.n	8002d96 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002d90:	2308      	movs	r3, #8
 8002d92:	61fb      	str	r3, [r7, #28]
 8002d94:	e037      	b.n	8002e06 <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d005      	beq.n	8002da8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	2b05      	cmp	r3, #5
 8002da0:	d002      	beq.n	8002da8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	2b09      	cmp	r3, #9
 8002da6:	d111      	bne.n	8002dcc <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d007      	beq.n	8002dc6 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dba:	f043 0220 	orr.w	r2, r3, #32
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e0c1      	b.n	8002f4a <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002dc6:	2304      	movs	r3, #4
 8002dc8:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002dca:	e01c      	b.n	8002e06 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002dd4:	d004      	beq.n	8002de0 <HAL_ADC_PollForConversion+0x84>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a5e      	ldr	r2, [pc, #376]	@ (8002f54 <HAL_ADC_PollForConversion+0x1f8>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d101      	bne.n	8002de4 <HAL_ADC_PollForConversion+0x88>
 8002de0:	4b5d      	ldr	r3, [pc, #372]	@ (8002f58 <HAL_ADC_PollForConversion+0x1fc>)
 8002de2:	e000      	b.n	8002de6 <HAL_ADC_PollForConversion+0x8a>
 8002de4:	4b5d      	ldr	r3, [pc, #372]	@ (8002f5c <HAL_ADC_PollForConversion+0x200>)
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff fbd8 	bl	800259c <LL_ADC_GetMultiDMATransfer>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d007      	beq.n	8002e02 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002df6:	f043 0220 	orr.w	r2, r3, #32
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e0a3      	b.n	8002f4a <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002e02:	2304      	movs	r3, #4
 8002e04:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002e06:	f7ff fa2d 	bl	8002264 <HAL_GetTick>
 8002e0a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002e0c:	e021      	b.n	8002e52 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e14:	d01d      	beq.n	8002e52 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002e16:	f7ff fa25 	bl	8002264 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d302      	bcc.n	8002e2c <HAL_ADC_PollForConversion+0xd0>
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d112      	bne.n	8002e52 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	4013      	ands	r3, r2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10b      	bne.n	8002e52 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e3e:	f043 0204 	orr.w	r2, r3, #4
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e07b      	b.n	8002f4a <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d0d6      	beq.n	8002e0e <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e64:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7ff faf7 	bl	8002464 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d01c      	beq.n	8002eb6 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	7f5b      	ldrb	r3, [r3, #29]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d118      	bne.n	8002eb6 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0308 	and.w	r3, r3, #8
 8002e8e:	2b08      	cmp	r3, #8
 8002e90:	d111      	bne.n	8002eb6 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e96:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ea2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d105      	bne.n	8002eb6 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eae:	f043 0201 	orr.w	r2, r3, #1
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a26      	ldr	r2, [pc, #152]	@ (8002f54 <HAL_ADC_PollForConversion+0x1f8>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d009      	beq.n	8002ed4 <HAL_ADC_PollForConversion+0x178>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a26      	ldr	r2, [pc, #152]	@ (8002f60 <HAL_ADC_PollForConversion+0x204>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d002      	beq.n	8002ed0 <HAL_ADC_PollForConversion+0x174>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	e003      	b.n	8002ed8 <HAL_ADC_PollForConversion+0x17c>
 8002ed0:	4b24      	ldr	r3, [pc, #144]	@ (8002f64 <HAL_ADC_PollForConversion+0x208>)
 8002ed2:	e001      	b.n	8002ed8 <HAL_ADC_PollForConversion+0x17c>
 8002ed4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	6812      	ldr	r2, [r2, #0]
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d008      	beq.n	8002ef2 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d005      	beq.n	8002ef2 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	2b05      	cmp	r3, #5
 8002eea:	d002      	beq.n	8002ef2 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	2b09      	cmp	r3, #9
 8002ef0:	d104      	bne.n	8002efc <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	61bb      	str	r3, [r7, #24]
 8002efa:	e014      	b.n	8002f26 <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a14      	ldr	r2, [pc, #80]	@ (8002f54 <HAL_ADC_PollForConversion+0x1f8>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d009      	beq.n	8002f1a <HAL_ADC_PollForConversion+0x1be>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a15      	ldr	r2, [pc, #84]	@ (8002f60 <HAL_ADC_PollForConversion+0x204>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d002      	beq.n	8002f16 <HAL_ADC_PollForConversion+0x1ba>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	e003      	b.n	8002f1e <HAL_ADC_PollForConversion+0x1c2>
 8002f16:	4b13      	ldr	r3, [pc, #76]	@ (8002f64 <HAL_ADC_PollForConversion+0x208>)
 8002f18:	e001      	b.n	8002f1e <HAL_ADC_PollForConversion+0x1c2>
 8002f1a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002f1e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	2b08      	cmp	r3, #8
 8002f2a:	d104      	bne.n	8002f36 <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2208      	movs	r2, #8
 8002f32:	601a      	str	r2, [r3, #0]
 8002f34:	e008      	b.n	8002f48 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d103      	bne.n	8002f48 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	220c      	movs	r2, #12
 8002f46:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3720      	adds	r7, #32
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	50000100 	.word	0x50000100
 8002f58:	50000300 	.word	0x50000300
 8002f5c:	50000700 	.word	0x50000700
 8002f60:	50000500 	.word	0x50000500
 8002f64:	50000400 	.word	0x50000400

08002f68 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
	...

08002f84 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b0b6      	sub	sp, #216	@ 0xd8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002f94:	2300      	movs	r3, #0
 8002f96:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d102      	bne.n	8002fa8 <HAL_ADC_ConfigChannel+0x24>
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	f000 bc13 	b.w	80037ce <HAL_ADC_ConfigChannel+0x84a>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7ff fbc3 	bl	8002740 <LL_ADC_REG_IsConversionOngoing>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f040 83f3 	bne.w	80037a8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6818      	ldr	r0, [r3, #0]
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	6859      	ldr	r1, [r3, #4]
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	461a      	mov	r2, r3
 8002fd0:	f7ff fa5b 	bl	800248a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7ff fbb1 	bl	8002740 <LL_ADC_REG_IsConversionOngoing>
 8002fde:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7ff fbd1 	bl	800278e <LL_ADC_INJ_IsConversionOngoing>
 8002fec:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ff0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f040 81d9 	bne.w	80033ac <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ffa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f040 81d4 	bne.w	80033ac <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800300c:	d10f      	bne.n	800302e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6818      	ldr	r0, [r3, #0]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2200      	movs	r2, #0
 8003018:	4619      	mov	r1, r3
 800301a:	f7ff fa62 	bl	80024e2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003026:	4618      	mov	r0, r3
 8003028:	f7ff fa09 	bl	800243e <LL_ADC_SetSamplingTimeCommonConfig>
 800302c:	e00e      	b.n	800304c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6818      	ldr	r0, [r3, #0]
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	6819      	ldr	r1, [r3, #0]
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	461a      	mov	r2, r3
 800303c:	f7ff fa51 	bl	80024e2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2100      	movs	r1, #0
 8003046:	4618      	mov	r0, r3
 8003048:	f7ff f9f9 	bl	800243e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	695a      	ldr	r2, [r3, #20]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	08db      	lsrs	r3, r3, #3
 8003058:	f003 0303 	and.w	r3, r3, #3
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	2b04      	cmp	r3, #4
 800306c:	d022      	beq.n	80030b4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6818      	ldr	r0, [r3, #0]
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	6919      	ldr	r1, [r3, #16]
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800307e:	f7ff f953 	bl	8002328 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6818      	ldr	r0, [r3, #0]
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	6919      	ldr	r1, [r3, #16]
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	461a      	mov	r2, r3
 8003090:	f7ff f99f 	bl	80023d2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6818      	ldr	r0, [r3, #0]
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d102      	bne.n	80030aa <HAL_ADC_ConfigChannel+0x126>
 80030a4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80030a8:	e000      	b.n	80030ac <HAL_ADC_ConfigChannel+0x128>
 80030aa:	2300      	movs	r3, #0
 80030ac:	461a      	mov	r2, r3
 80030ae:	f7ff f9ab 	bl	8002408 <LL_ADC_SetOffsetSaturation>
 80030b2:	e17b      	b.n	80033ac <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2100      	movs	r1, #0
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff f958 	bl	8002370 <LL_ADC_GetOffsetChannel>
 80030c0:	4603      	mov	r3, r0
 80030c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10a      	bne.n	80030e0 <HAL_ADC_ConfigChannel+0x15c>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2100      	movs	r1, #0
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff f94d 	bl	8002370 <LL_ADC_GetOffsetChannel>
 80030d6:	4603      	mov	r3, r0
 80030d8:	0e9b      	lsrs	r3, r3, #26
 80030da:	f003 021f 	and.w	r2, r3, #31
 80030de:	e01e      	b.n	800311e <HAL_ADC_ConfigChannel+0x19a>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2100      	movs	r1, #0
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7ff f942 	bl	8002370 <LL_ADC_GetOffsetChannel>
 80030ec:	4603      	mov	r3, r0
 80030ee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80030f6:	fa93 f3a3 	rbit	r3, r3
 80030fa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80030fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003102:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003106:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800310e:	2320      	movs	r3, #32
 8003110:	e004      	b.n	800311c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003112:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003116:	fab3 f383 	clz	r3, r3
 800311a:	b2db      	uxtb	r3, r3
 800311c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003126:	2b00      	cmp	r3, #0
 8003128:	d105      	bne.n	8003136 <HAL_ADC_ConfigChannel+0x1b2>
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	0e9b      	lsrs	r3, r3, #26
 8003130:	f003 031f 	and.w	r3, r3, #31
 8003134:	e018      	b.n	8003168 <HAL_ADC_ConfigChannel+0x1e4>
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003142:	fa93 f3a3 	rbit	r3, r3
 8003146:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800314a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800314e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003152:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800315a:	2320      	movs	r3, #32
 800315c:	e004      	b.n	8003168 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800315e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003162:	fab3 f383 	clz	r3, r3
 8003166:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003168:	429a      	cmp	r2, r3
 800316a:	d106      	bne.n	800317a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2200      	movs	r2, #0
 8003172:	2100      	movs	r1, #0
 8003174:	4618      	mov	r0, r3
 8003176:	f7ff f911 	bl	800239c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2101      	movs	r1, #1
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff f8f5 	bl	8002370 <LL_ADC_GetOffsetChannel>
 8003186:	4603      	mov	r3, r0
 8003188:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10a      	bne.n	80031a6 <HAL_ADC_ConfigChannel+0x222>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2101      	movs	r1, #1
 8003196:	4618      	mov	r0, r3
 8003198:	f7ff f8ea 	bl	8002370 <LL_ADC_GetOffsetChannel>
 800319c:	4603      	mov	r3, r0
 800319e:	0e9b      	lsrs	r3, r3, #26
 80031a0:	f003 021f 	and.w	r2, r3, #31
 80031a4:	e01e      	b.n	80031e4 <HAL_ADC_ConfigChannel+0x260>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2101      	movs	r1, #1
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff f8df 	bl	8002370 <LL_ADC_GetOffsetChannel>
 80031b2:	4603      	mov	r3, r0
 80031b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80031bc:	fa93 f3a3 	rbit	r3, r3
 80031c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80031c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80031c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80031cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d101      	bne.n	80031d8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80031d4:	2320      	movs	r3, #32
 80031d6:	e004      	b.n	80031e2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80031d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80031dc:	fab3 f383 	clz	r3, r3
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d105      	bne.n	80031fc <HAL_ADC_ConfigChannel+0x278>
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	0e9b      	lsrs	r3, r3, #26
 80031f6:	f003 031f 	and.w	r3, r3, #31
 80031fa:	e018      	b.n	800322e <HAL_ADC_ConfigChannel+0x2aa>
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003204:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003208:	fa93 f3a3 	rbit	r3, r3
 800320c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003210:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003214:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003218:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800321c:	2b00      	cmp	r3, #0
 800321e:	d101      	bne.n	8003224 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003220:	2320      	movs	r3, #32
 8003222:	e004      	b.n	800322e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003224:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003228:	fab3 f383 	clz	r3, r3
 800322c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800322e:	429a      	cmp	r2, r3
 8003230:	d106      	bne.n	8003240 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2200      	movs	r2, #0
 8003238:	2101      	movs	r1, #1
 800323a:	4618      	mov	r0, r3
 800323c:	f7ff f8ae 	bl	800239c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2102      	movs	r1, #2
 8003246:	4618      	mov	r0, r3
 8003248:	f7ff f892 	bl	8002370 <LL_ADC_GetOffsetChannel>
 800324c:	4603      	mov	r3, r0
 800324e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10a      	bne.n	800326c <HAL_ADC_ConfigChannel+0x2e8>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2102      	movs	r1, #2
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff f887 	bl	8002370 <LL_ADC_GetOffsetChannel>
 8003262:	4603      	mov	r3, r0
 8003264:	0e9b      	lsrs	r3, r3, #26
 8003266:	f003 021f 	and.w	r2, r3, #31
 800326a:	e01e      	b.n	80032aa <HAL_ADC_ConfigChannel+0x326>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2102      	movs	r1, #2
 8003272:	4618      	mov	r0, r3
 8003274:	f7ff f87c 	bl	8002370 <LL_ADC_GetOffsetChannel>
 8003278:	4603      	mov	r3, r0
 800327a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003282:	fa93 f3a3 	rbit	r3, r3
 8003286:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800328a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800328e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003292:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800329a:	2320      	movs	r3, #32
 800329c:	e004      	b.n	80032a8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800329e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80032a2:	fab3 f383 	clz	r3, r3
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d105      	bne.n	80032c2 <HAL_ADC_ConfigChannel+0x33e>
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	0e9b      	lsrs	r3, r3, #26
 80032bc:	f003 031f 	and.w	r3, r3, #31
 80032c0:	e016      	b.n	80032f0 <HAL_ADC_ConfigChannel+0x36c>
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80032ce:	fa93 f3a3 	rbit	r3, r3
 80032d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80032d4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80032d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80032da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80032e2:	2320      	movs	r3, #32
 80032e4:	e004      	b.n	80032f0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80032e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80032ea:	fab3 f383 	clz	r3, r3
 80032ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d106      	bne.n	8003302 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2200      	movs	r2, #0
 80032fa:	2102      	movs	r1, #2
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff f84d 	bl	800239c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2103      	movs	r1, #3
 8003308:	4618      	mov	r0, r3
 800330a:	f7ff f831 	bl	8002370 <LL_ADC_GetOffsetChannel>
 800330e:	4603      	mov	r3, r0
 8003310:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003314:	2b00      	cmp	r3, #0
 8003316:	d10a      	bne.n	800332e <HAL_ADC_ConfigChannel+0x3aa>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2103      	movs	r1, #3
 800331e:	4618      	mov	r0, r3
 8003320:	f7ff f826 	bl	8002370 <LL_ADC_GetOffsetChannel>
 8003324:	4603      	mov	r3, r0
 8003326:	0e9b      	lsrs	r3, r3, #26
 8003328:	f003 021f 	and.w	r2, r3, #31
 800332c:	e017      	b.n	800335e <HAL_ADC_ConfigChannel+0x3da>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2103      	movs	r1, #3
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff f81b 	bl	8002370 <LL_ADC_GetOffsetChannel>
 800333a:	4603      	mov	r3, r0
 800333c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003340:	fa93 f3a3 	rbit	r3, r3
 8003344:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003346:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003348:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800334a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800334c:	2b00      	cmp	r3, #0
 800334e:	d101      	bne.n	8003354 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003350:	2320      	movs	r3, #32
 8003352:	e003      	b.n	800335c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003354:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003356:	fab3 f383 	clz	r3, r3
 800335a:	b2db      	uxtb	r3, r3
 800335c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003366:	2b00      	cmp	r3, #0
 8003368:	d105      	bne.n	8003376 <HAL_ADC_ConfigChannel+0x3f2>
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	0e9b      	lsrs	r3, r3, #26
 8003370:	f003 031f 	and.w	r3, r3, #31
 8003374:	e011      	b.n	800339a <HAL_ADC_ConfigChannel+0x416>
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800337e:	fa93 f3a3 	rbit	r3, r3
 8003382:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003384:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003386:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003388:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800338e:	2320      	movs	r3, #32
 8003390:	e003      	b.n	800339a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003392:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003394:	fab3 f383 	clz	r3, r3
 8003398:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800339a:	429a      	cmp	r2, r3
 800339c:	d106      	bne.n	80033ac <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2200      	movs	r2, #0
 80033a4:	2103      	movs	r1, #3
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7fe fff8 	bl	800239c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7ff f977 	bl	80026a4 <LL_ADC_IsEnabled>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f040 813d 	bne.w	8003638 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6818      	ldr	r0, [r3, #0]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	6819      	ldr	r1, [r3, #0]
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	461a      	mov	r2, r3
 80033cc:	f7ff f8b4 	bl	8002538 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	4aa2      	ldr	r2, [pc, #648]	@ (8003660 <HAL_ADC_ConfigChannel+0x6dc>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	f040 812e 	bne.w	8003638 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10b      	bne.n	8003404 <HAL_ADC_ConfigChannel+0x480>
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	0e9b      	lsrs	r3, r3, #26
 80033f2:	3301      	adds	r3, #1
 80033f4:	f003 031f 	and.w	r3, r3, #31
 80033f8:	2b09      	cmp	r3, #9
 80033fa:	bf94      	ite	ls
 80033fc:	2301      	movls	r3, #1
 80033fe:	2300      	movhi	r3, #0
 8003400:	b2db      	uxtb	r3, r3
 8003402:	e019      	b.n	8003438 <HAL_ADC_ConfigChannel+0x4b4>
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800340c:	fa93 f3a3 	rbit	r3, r3
 8003410:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003412:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003414:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003416:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003418:	2b00      	cmp	r3, #0
 800341a:	d101      	bne.n	8003420 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800341c:	2320      	movs	r3, #32
 800341e:	e003      	b.n	8003428 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003420:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003422:	fab3 f383 	clz	r3, r3
 8003426:	b2db      	uxtb	r3, r3
 8003428:	3301      	adds	r3, #1
 800342a:	f003 031f 	and.w	r3, r3, #31
 800342e:	2b09      	cmp	r3, #9
 8003430:	bf94      	ite	ls
 8003432:	2301      	movls	r3, #1
 8003434:	2300      	movhi	r3, #0
 8003436:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003438:	2b00      	cmp	r3, #0
 800343a:	d079      	beq.n	8003530 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003444:	2b00      	cmp	r3, #0
 8003446:	d107      	bne.n	8003458 <HAL_ADC_ConfigChannel+0x4d4>
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	0e9b      	lsrs	r3, r3, #26
 800344e:	3301      	adds	r3, #1
 8003450:	069b      	lsls	r3, r3, #26
 8003452:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003456:	e015      	b.n	8003484 <HAL_ADC_ConfigChannel+0x500>
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003460:	fa93 f3a3 	rbit	r3, r3
 8003464:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003466:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003468:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800346a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800346c:	2b00      	cmp	r3, #0
 800346e:	d101      	bne.n	8003474 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003470:	2320      	movs	r3, #32
 8003472:	e003      	b.n	800347c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003474:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003476:	fab3 f383 	clz	r3, r3
 800347a:	b2db      	uxtb	r3, r3
 800347c:	3301      	adds	r3, #1
 800347e:	069b      	lsls	r3, r3, #26
 8003480:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800348c:	2b00      	cmp	r3, #0
 800348e:	d109      	bne.n	80034a4 <HAL_ADC_ConfigChannel+0x520>
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	0e9b      	lsrs	r3, r3, #26
 8003496:	3301      	adds	r3, #1
 8003498:	f003 031f 	and.w	r3, r3, #31
 800349c:	2101      	movs	r1, #1
 800349e:	fa01 f303 	lsl.w	r3, r1, r3
 80034a2:	e017      	b.n	80034d4 <HAL_ADC_ConfigChannel+0x550>
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034ac:	fa93 f3a3 	rbit	r3, r3
 80034b0:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80034b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80034b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d101      	bne.n	80034c0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80034bc:	2320      	movs	r3, #32
 80034be:	e003      	b.n	80034c8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80034c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034c2:	fab3 f383 	clz	r3, r3
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	3301      	adds	r3, #1
 80034ca:	f003 031f 	and.w	r3, r3, #31
 80034ce:	2101      	movs	r1, #1
 80034d0:	fa01 f303 	lsl.w	r3, r1, r3
 80034d4:	ea42 0103 	orr.w	r1, r2, r3
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d10a      	bne.n	80034fa <HAL_ADC_ConfigChannel+0x576>
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	0e9b      	lsrs	r3, r3, #26
 80034ea:	3301      	adds	r3, #1
 80034ec:	f003 021f 	and.w	r2, r3, #31
 80034f0:	4613      	mov	r3, r2
 80034f2:	005b      	lsls	r3, r3, #1
 80034f4:	4413      	add	r3, r2
 80034f6:	051b      	lsls	r3, r3, #20
 80034f8:	e018      	b.n	800352c <HAL_ADC_ConfigChannel+0x5a8>
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003502:	fa93 f3a3 	rbit	r3, r3
 8003506:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800350a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800350c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003512:	2320      	movs	r3, #32
 8003514:	e003      	b.n	800351e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003516:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003518:	fab3 f383 	clz	r3, r3
 800351c:	b2db      	uxtb	r3, r3
 800351e:	3301      	adds	r3, #1
 8003520:	f003 021f 	and.w	r2, r3, #31
 8003524:	4613      	mov	r3, r2
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	4413      	add	r3, r2
 800352a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800352c:	430b      	orrs	r3, r1
 800352e:	e07e      	b.n	800362e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003538:	2b00      	cmp	r3, #0
 800353a:	d107      	bne.n	800354c <HAL_ADC_ConfigChannel+0x5c8>
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	0e9b      	lsrs	r3, r3, #26
 8003542:	3301      	adds	r3, #1
 8003544:	069b      	lsls	r3, r3, #26
 8003546:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800354a:	e015      	b.n	8003578 <HAL_ADC_ConfigChannel+0x5f4>
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003554:	fa93 f3a3 	rbit	r3, r3
 8003558:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800355a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800355c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800355e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003560:	2b00      	cmp	r3, #0
 8003562:	d101      	bne.n	8003568 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003564:	2320      	movs	r3, #32
 8003566:	e003      	b.n	8003570 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800356a:	fab3 f383 	clz	r3, r3
 800356e:	b2db      	uxtb	r3, r3
 8003570:	3301      	adds	r3, #1
 8003572:	069b      	lsls	r3, r3, #26
 8003574:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003580:	2b00      	cmp	r3, #0
 8003582:	d109      	bne.n	8003598 <HAL_ADC_ConfigChannel+0x614>
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	0e9b      	lsrs	r3, r3, #26
 800358a:	3301      	adds	r3, #1
 800358c:	f003 031f 	and.w	r3, r3, #31
 8003590:	2101      	movs	r1, #1
 8003592:	fa01 f303 	lsl.w	r3, r1, r3
 8003596:	e017      	b.n	80035c8 <HAL_ADC_ConfigChannel+0x644>
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359e:	6a3b      	ldr	r3, [r7, #32]
 80035a0:	fa93 f3a3 	rbit	r3, r3
 80035a4:	61fb      	str	r3, [r7, #28]
  return result;
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80035aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80035b0:	2320      	movs	r3, #32
 80035b2:	e003      	b.n	80035bc <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80035b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b6:	fab3 f383 	clz	r3, r3
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	3301      	adds	r3, #1
 80035be:	f003 031f 	and.w	r3, r3, #31
 80035c2:	2101      	movs	r1, #1
 80035c4:	fa01 f303 	lsl.w	r3, r1, r3
 80035c8:	ea42 0103 	orr.w	r1, r2, r3
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10d      	bne.n	80035f4 <HAL_ADC_ConfigChannel+0x670>
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	0e9b      	lsrs	r3, r3, #26
 80035de:	3301      	adds	r3, #1
 80035e0:	f003 021f 	and.w	r2, r3, #31
 80035e4:	4613      	mov	r3, r2
 80035e6:	005b      	lsls	r3, r3, #1
 80035e8:	4413      	add	r3, r2
 80035ea:	3b1e      	subs	r3, #30
 80035ec:	051b      	lsls	r3, r3, #20
 80035ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80035f2:	e01b      	b.n	800362c <HAL_ADC_ConfigChannel+0x6a8>
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	fa93 f3a3 	rbit	r3, r3
 8003600:	613b      	str	r3, [r7, #16]
  return result;
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d101      	bne.n	8003610 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800360c:	2320      	movs	r3, #32
 800360e:	e003      	b.n	8003618 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	fab3 f383 	clz	r3, r3
 8003616:	b2db      	uxtb	r3, r3
 8003618:	3301      	adds	r3, #1
 800361a:	f003 021f 	and.w	r2, r3, #31
 800361e:	4613      	mov	r3, r2
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	4413      	add	r3, r2
 8003624:	3b1e      	subs	r3, #30
 8003626:	051b      	lsls	r3, r3, #20
 8003628:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800362c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003632:	4619      	mov	r1, r3
 8003634:	f7fe ff55 	bl	80024e2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	4b09      	ldr	r3, [pc, #36]	@ (8003664 <HAL_ADC_ConfigChannel+0x6e0>)
 800363e:	4013      	ands	r3, r2
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 80be 	beq.w	80037c2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800364e:	d004      	beq.n	800365a <HAL_ADC_ConfigChannel+0x6d6>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a04      	ldr	r2, [pc, #16]	@ (8003668 <HAL_ADC_ConfigChannel+0x6e4>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d10a      	bne.n	8003670 <HAL_ADC_ConfigChannel+0x6ec>
 800365a:	4b04      	ldr	r3, [pc, #16]	@ (800366c <HAL_ADC_ConfigChannel+0x6e8>)
 800365c:	e009      	b.n	8003672 <HAL_ADC_ConfigChannel+0x6ee>
 800365e:	bf00      	nop
 8003660:	407f0000 	.word	0x407f0000
 8003664:	80080000 	.word	0x80080000
 8003668:	50000100 	.word	0x50000100
 800366c:	50000300 	.word	0x50000300
 8003670:	4b59      	ldr	r3, [pc, #356]	@ (80037d8 <HAL_ADC_ConfigChannel+0x854>)
 8003672:	4618      	mov	r0, r3
 8003674:	f7fe fe4a 	bl	800230c <LL_ADC_GetCommonPathInternalCh>
 8003678:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a56      	ldr	r2, [pc, #344]	@ (80037dc <HAL_ADC_ConfigChannel+0x858>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d004      	beq.n	8003690 <HAL_ADC_ConfigChannel+0x70c>
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a55      	ldr	r2, [pc, #340]	@ (80037e0 <HAL_ADC_ConfigChannel+0x85c>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d13a      	bne.n	8003706 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003690:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003694:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d134      	bne.n	8003706 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036a4:	d005      	beq.n	80036b2 <HAL_ADC_ConfigChannel+0x72e>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a4e      	ldr	r2, [pc, #312]	@ (80037e4 <HAL_ADC_ConfigChannel+0x860>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	f040 8085 	bne.w	80037bc <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036ba:	d004      	beq.n	80036c6 <HAL_ADC_ConfigChannel+0x742>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a49      	ldr	r2, [pc, #292]	@ (80037e8 <HAL_ADC_ConfigChannel+0x864>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d101      	bne.n	80036ca <HAL_ADC_ConfigChannel+0x746>
 80036c6:	4a49      	ldr	r2, [pc, #292]	@ (80037ec <HAL_ADC_ConfigChannel+0x868>)
 80036c8:	e000      	b.n	80036cc <HAL_ADC_ConfigChannel+0x748>
 80036ca:	4a43      	ldr	r2, [pc, #268]	@ (80037d8 <HAL_ADC_ConfigChannel+0x854>)
 80036cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80036d0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80036d4:	4619      	mov	r1, r3
 80036d6:	4610      	mov	r0, r2
 80036d8:	f7fe fe05 	bl	80022e6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036dc:	4b44      	ldr	r3, [pc, #272]	@ (80037f0 <HAL_ADC_ConfigChannel+0x86c>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	099b      	lsrs	r3, r3, #6
 80036e2:	4a44      	ldr	r2, [pc, #272]	@ (80037f4 <HAL_ADC_ConfigChannel+0x870>)
 80036e4:	fba2 2303 	umull	r2, r3, r2, r3
 80036e8:	099b      	lsrs	r3, r3, #6
 80036ea:	1c5a      	adds	r2, r3, #1
 80036ec:	4613      	mov	r3, r2
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	4413      	add	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80036f6:	e002      	b.n	80036fe <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	3b01      	subs	r3, #1
 80036fc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1f9      	bne.n	80036f8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003704:	e05a      	b.n	80037bc <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a3b      	ldr	r2, [pc, #236]	@ (80037f8 <HAL_ADC_ConfigChannel+0x874>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d125      	bne.n	800375c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003710:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003714:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d11f      	bne.n	800375c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a31      	ldr	r2, [pc, #196]	@ (80037e8 <HAL_ADC_ConfigChannel+0x864>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d104      	bne.n	8003730 <HAL_ADC_ConfigChannel+0x7ac>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a34      	ldr	r2, [pc, #208]	@ (80037fc <HAL_ADC_ConfigChannel+0x878>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d047      	beq.n	80037c0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003738:	d004      	beq.n	8003744 <HAL_ADC_ConfigChannel+0x7c0>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a2a      	ldr	r2, [pc, #168]	@ (80037e8 <HAL_ADC_ConfigChannel+0x864>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d101      	bne.n	8003748 <HAL_ADC_ConfigChannel+0x7c4>
 8003744:	4a29      	ldr	r2, [pc, #164]	@ (80037ec <HAL_ADC_ConfigChannel+0x868>)
 8003746:	e000      	b.n	800374a <HAL_ADC_ConfigChannel+0x7c6>
 8003748:	4a23      	ldr	r2, [pc, #140]	@ (80037d8 <HAL_ADC_ConfigChannel+0x854>)
 800374a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800374e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003752:	4619      	mov	r1, r3
 8003754:	4610      	mov	r0, r2
 8003756:	f7fe fdc6 	bl	80022e6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800375a:	e031      	b.n	80037c0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a27      	ldr	r2, [pc, #156]	@ (8003800 <HAL_ADC_ConfigChannel+0x87c>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d12d      	bne.n	80037c2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003766:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800376a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d127      	bne.n	80037c2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a1c      	ldr	r2, [pc, #112]	@ (80037e8 <HAL_ADC_ConfigChannel+0x864>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d022      	beq.n	80037c2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003784:	d004      	beq.n	8003790 <HAL_ADC_ConfigChannel+0x80c>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a17      	ldr	r2, [pc, #92]	@ (80037e8 <HAL_ADC_ConfigChannel+0x864>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d101      	bne.n	8003794 <HAL_ADC_ConfigChannel+0x810>
 8003790:	4a16      	ldr	r2, [pc, #88]	@ (80037ec <HAL_ADC_ConfigChannel+0x868>)
 8003792:	e000      	b.n	8003796 <HAL_ADC_ConfigChannel+0x812>
 8003794:	4a10      	ldr	r2, [pc, #64]	@ (80037d8 <HAL_ADC_ConfigChannel+0x854>)
 8003796:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800379a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800379e:	4619      	mov	r1, r3
 80037a0:	4610      	mov	r0, r2
 80037a2:	f7fe fda0 	bl	80022e6 <LL_ADC_SetCommonPathInternalCh>
 80037a6:	e00c      	b.n	80037c2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ac:	f043 0220 	orr.w	r2, r3, #32
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80037ba:	e002      	b.n	80037c2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037bc:	bf00      	nop
 80037be:	e000      	b.n	80037c2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037c0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80037ca:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	37d8      	adds	r7, #216	@ 0xd8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	50000700 	.word	0x50000700
 80037dc:	c3210000 	.word	0xc3210000
 80037e0:	90c00010 	.word	0x90c00010
 80037e4:	50000600 	.word	0x50000600
 80037e8:	50000100 	.word	0x50000100
 80037ec:	50000300 	.word	0x50000300
 80037f0:	2000006c 	.word	0x2000006c
 80037f4:	053e2d63 	.word	0x053e2d63
 80037f8:	c7520000 	.word	0xc7520000
 80037fc:	50000500 	.word	0x50000500
 8003800:	cb840000 	.word	0xcb840000

08003804 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b088      	sub	sp, #32
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800380e:	2300      	movs	r3, #0
 8003810:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4618      	mov	r0, r3
 800381c:	f7fe ff90 	bl	8002740 <LL_ADC_REG_IsConversionOngoing>
 8003820:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4618      	mov	r0, r3
 8003828:	f7fe ffb1 	bl	800278e <LL_ADC_INJ_IsConversionOngoing>
 800382c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d103      	bne.n	800383c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2b00      	cmp	r3, #0
 8003838:	f000 8098 	beq.w	800396c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d02a      	beq.n	80038a0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	7f5b      	ldrb	r3, [r3, #29]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d126      	bne.n	80038a0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	7f1b      	ldrb	r3, [r3, #28]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d122      	bne.n	80038a0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800385a:	2301      	movs	r3, #1
 800385c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800385e:	e014      	b.n	800388a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	4a45      	ldr	r2, [pc, #276]	@ (8003978 <ADC_ConversionStop+0x174>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d90d      	bls.n	8003884 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800386c:	f043 0210 	orr.w	r2, r3, #16
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003878:	f043 0201 	orr.w	r2, r3, #1
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e074      	b.n	800396e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	3301      	adds	r3, #1
 8003888:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003894:	2b40      	cmp	r3, #64	@ 0x40
 8003896:	d1e3      	bne.n	8003860 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2240      	movs	r2, #64	@ 0x40
 800389e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d014      	beq.n	80038d0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fe ff48 	bl	8002740 <LL_ADC_REG_IsConversionOngoing>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00c      	beq.n	80038d0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7fe ff05 	bl	80026ca <LL_ADC_IsDisableOngoing>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d104      	bne.n	80038d0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7fe ff24 	bl	8002718 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d014      	beq.n	8003900 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4618      	mov	r0, r3
 80038dc:	f7fe ff57 	bl	800278e <LL_ADC_INJ_IsConversionOngoing>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00c      	beq.n	8003900 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7fe feed 	bl	80026ca <LL_ADC_IsDisableOngoing>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d104      	bne.n	8003900 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7fe ff33 	bl	8002766 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	2b02      	cmp	r3, #2
 8003904:	d005      	beq.n	8003912 <ADC_ConversionStop+0x10e>
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	2b03      	cmp	r3, #3
 800390a:	d105      	bne.n	8003918 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800390c:	230c      	movs	r3, #12
 800390e:	617b      	str	r3, [r7, #20]
        break;
 8003910:	e005      	b.n	800391e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003912:	2308      	movs	r3, #8
 8003914:	617b      	str	r3, [r7, #20]
        break;
 8003916:	e002      	b.n	800391e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003918:	2304      	movs	r3, #4
 800391a:	617b      	str	r3, [r7, #20]
        break;
 800391c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800391e:	f7fe fca1 	bl	8002264 <HAL_GetTick>
 8003922:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003924:	e01b      	b.n	800395e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003926:	f7fe fc9d 	bl	8002264 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b05      	cmp	r3, #5
 8003932:	d914      	bls.n	800395e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689a      	ldr	r2, [r3, #8]
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	4013      	ands	r3, r2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00d      	beq.n	800395e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003946:	f043 0210 	orr.w	r2, r3, #16
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003952:	f043 0201 	orr.w	r2, r3, #1
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e007      	b.n	800396e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	689a      	ldr	r2, [r3, #8]
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	4013      	ands	r3, r2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1dc      	bne.n	8003926 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3720      	adds	r7, #32
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	a33fffff 	.word	0xa33fffff

0800397c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003984:	2300      	movs	r3, #0
 8003986:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4618      	mov	r0, r3
 800398e:	f7fe fe89 	bl	80026a4 <LL_ADC_IsEnabled>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d176      	bne.n	8003a86 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689a      	ldr	r2, [r3, #8]
 800399e:	4b3c      	ldr	r3, [pc, #240]	@ (8003a90 <ADC_Enable+0x114>)
 80039a0:	4013      	ands	r3, r2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00d      	beq.n	80039c2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039aa:	f043 0210 	orr.w	r2, r3, #16
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039b6:	f043 0201 	orr.w	r2, r3, #1
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e062      	b.n	8003a88 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7fe fe44 	bl	8002654 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039d4:	d004      	beq.n	80039e0 <ADC_Enable+0x64>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a2e      	ldr	r2, [pc, #184]	@ (8003a94 <ADC_Enable+0x118>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d101      	bne.n	80039e4 <ADC_Enable+0x68>
 80039e0:	4b2d      	ldr	r3, [pc, #180]	@ (8003a98 <ADC_Enable+0x11c>)
 80039e2:	e000      	b.n	80039e6 <ADC_Enable+0x6a>
 80039e4:	4b2d      	ldr	r3, [pc, #180]	@ (8003a9c <ADC_Enable+0x120>)
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7fe fc90 	bl	800230c <LL_ADC_GetCommonPathInternalCh>
 80039ec:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80039ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d013      	beq.n	8003a1e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80039f6:	4b2a      	ldr	r3, [pc, #168]	@ (8003aa0 <ADC_Enable+0x124>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	099b      	lsrs	r3, r3, #6
 80039fc:	4a29      	ldr	r2, [pc, #164]	@ (8003aa4 <ADC_Enable+0x128>)
 80039fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003a02:	099b      	lsrs	r3, r3, #6
 8003a04:	1c5a      	adds	r2, r3, #1
 8003a06:	4613      	mov	r3, r2
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	4413      	add	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003a10:	e002      	b.n	8003a18 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	3b01      	subs	r3, #1
 8003a16:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1f9      	bne.n	8003a12 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003a1e:	f7fe fc21 	bl	8002264 <HAL_GetTick>
 8003a22:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a24:	e028      	b.n	8003a78 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7fe fe3a 	bl	80026a4 <LL_ADC_IsEnabled>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d104      	bne.n	8003a40 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7fe fe0a 	bl	8002654 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a40:	f7fe fc10 	bl	8002264 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d914      	bls.n	8003a78 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0301 	and.w	r3, r3, #1
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d00d      	beq.n	8003a78 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a60:	f043 0210 	orr.w	r2, r3, #16
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a6c:	f043 0201 	orr.w	r2, r3, #1
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e007      	b.n	8003a88 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d1cf      	bne.n	8003a26 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	8000003f 	.word	0x8000003f
 8003a94:	50000100 	.word	0x50000100
 8003a98:	50000300 	.word	0x50000300
 8003a9c:	50000700 	.word	0x50000700
 8003aa0:	2000006c 	.word	0x2000006c
 8003aa4:	053e2d63 	.word	0x053e2d63

08003aa8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7fe fe08 	bl	80026ca <LL_ADC_IsDisableOngoing>
 8003aba:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7fe fdef 	bl	80026a4 <LL_ADC_IsEnabled>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d047      	beq.n	8003b5c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d144      	bne.n	8003b5c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f003 030d 	and.w	r3, r3, #13
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d10c      	bne.n	8003afa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7fe fdc9 	bl	800267c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2203      	movs	r2, #3
 8003af0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003af2:	f7fe fbb7 	bl	8002264 <HAL_GetTick>
 8003af6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003af8:	e029      	b.n	8003b4e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003afe:	f043 0210 	orr.w	r2, r3, #16
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b0a:	f043 0201 	orr.w	r2, r3, #1
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e023      	b.n	8003b5e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b16:	f7fe fba5 	bl	8002264 <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d914      	bls.n	8003b4e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00d      	beq.n	8003b4e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b36:	f043 0210 	orr.w	r2, r3, #16
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b42:	f043 0201 	orr.w	r2, r3, #1
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e007      	b.n	8003b5e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1dc      	bne.n	8003b16 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <LL_ADC_IsEnabled>:
{
 8003b66:	b480      	push	{r7}
 8003b68:	b083      	sub	sp, #12
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d101      	bne.n	8003b7e <LL_ADC_IsEnabled+0x18>
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e000      	b.n	8003b80 <LL_ADC_IsEnabled+0x1a>
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <LL_ADC_StartCalibration>:
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003b9e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003ba2:	683a      	ldr	r2, [r7, #0]
 8003ba4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	609a      	str	r2, [r3, #8]
}
 8003bb2:	bf00      	nop
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <LL_ADC_IsCalibrationOnGoing>:
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b083      	sub	sp, #12
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003bce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003bd2:	d101      	bne.n	8003bd8 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e000      	b.n	8003bda <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr

08003be6 <LL_ADC_REG_IsConversionOngoing>:
{
 8003be6:	b480      	push	{r7}
 8003be8:	b083      	sub	sp, #12
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f003 0304 	and.w	r3, r3, #4
 8003bf6:	2b04      	cmp	r3, #4
 8003bf8:	d101      	bne.n	8003bfe <LL_ADC_REG_IsConversionOngoing+0x18>
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e000      	b.n	8003c00 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003c16:	2300      	movs	r3, #0
 8003c18:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d101      	bne.n	8003c28 <HAL_ADCEx_Calibration_Start+0x1c>
 8003c24:	2302      	movs	r3, #2
 8003c26:	e04d      	b.n	8003cc4 <HAL_ADCEx_Calibration_Start+0xb8>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f7ff ff39 	bl	8003aa8 <ADC_Disable>
 8003c36:	4603      	mov	r3, r0
 8003c38:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003c3a:	7bfb      	ldrb	r3, [r7, #15]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d136      	bne.n	8003cae <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c44:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003c48:	f023 0302 	bic.w	r3, r3, #2
 8003c4c:	f043 0202 	orr.w	r2, r3, #2
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6839      	ldr	r1, [r7, #0]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7ff ff96 	bl	8003b8c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003c60:	e014      	b.n	8003c8c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	3301      	adds	r3, #1
 8003c66:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	4a18      	ldr	r2, [pc, #96]	@ (8003ccc <HAL_ADCEx_Calibration_Start+0xc0>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d90d      	bls.n	8003c8c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c74:	f023 0312 	bic.w	r3, r3, #18
 8003c78:	f043 0210 	orr.w	r2, r3, #16
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e01b      	b.n	8003cc4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7ff ff94 	bl	8003bbe <LL_ADC_IsCalibrationOnGoing>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1e2      	bne.n	8003c62 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ca0:	f023 0303 	bic.w	r3, r3, #3
 8003ca4:	f043 0201 	orr.w	r2, r3, #1
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003cac:	e005      	b.n	8003cba <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cb2:	f043 0210 	orr.w	r2, r3, #16
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3710      	adds	r7, #16
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	0004de01 	.word	0x0004de01

08003cd0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003cd0:	b590      	push	{r4, r7, lr}
 8003cd2:	b0a1      	sub	sp, #132	@ 0x84
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d101      	bne.n	8003cee <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003cea:	2302      	movs	r3, #2
 8003cec:	e0e7      	b.n	8003ebe <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d06:	d102      	bne.n	8003d0e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003d08:	4b6f      	ldr	r3, [pc, #444]	@ (8003ec8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003d0a:	60bb      	str	r3, [r7, #8]
 8003d0c:	e009      	b.n	8003d22 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a6e      	ldr	r2, [pc, #440]	@ (8003ecc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d102      	bne.n	8003d1e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003d18:	4b6d      	ldr	r3, [pc, #436]	@ (8003ed0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003d1a:	60bb      	str	r3, [r7, #8]
 8003d1c:	e001      	b.n	8003d22 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003d1e:	2300      	movs	r3, #0
 8003d20:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d10b      	bne.n	8003d40 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d2c:	f043 0220 	orr.w	r2, r3, #32
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e0be      	b.n	8003ebe <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7ff ff4f 	bl	8003be6 <LL_ADC_REG_IsConversionOngoing>
 8003d48:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7ff ff49 	bl	8003be6 <LL_ADC_REG_IsConversionOngoing>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f040 80a0 	bne.w	8003e9c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003d5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f040 809c 	bne.w	8003e9c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d6c:	d004      	beq.n	8003d78 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a55      	ldr	r2, [pc, #340]	@ (8003ec8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d101      	bne.n	8003d7c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003d78:	4b56      	ldr	r3, [pc, #344]	@ (8003ed4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003d7a:	e000      	b.n	8003d7e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003d7c:	4b56      	ldr	r3, [pc, #344]	@ (8003ed8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003d7e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d04b      	beq.n	8003e20 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003d88:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	6859      	ldr	r1, [r3, #4]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003d9a:	035b      	lsls	r3, r3, #13
 8003d9c:	430b      	orrs	r3, r1
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003da2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003dac:	d004      	beq.n	8003db8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a45      	ldr	r2, [pc, #276]	@ (8003ec8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d10f      	bne.n	8003dd8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003db8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003dbc:	f7ff fed3 	bl	8003b66 <LL_ADC_IsEnabled>
 8003dc0:	4604      	mov	r4, r0
 8003dc2:	4841      	ldr	r0, [pc, #260]	@ (8003ec8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003dc4:	f7ff fecf 	bl	8003b66 <LL_ADC_IsEnabled>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	4323      	orrs	r3, r4
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	bf0c      	ite	eq
 8003dd0:	2301      	moveq	r3, #1
 8003dd2:	2300      	movne	r3, #0
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	e012      	b.n	8003dfe <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003dd8:	483c      	ldr	r0, [pc, #240]	@ (8003ecc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003dda:	f7ff fec4 	bl	8003b66 <LL_ADC_IsEnabled>
 8003dde:	4604      	mov	r4, r0
 8003de0:	483b      	ldr	r0, [pc, #236]	@ (8003ed0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003de2:	f7ff fec0 	bl	8003b66 <LL_ADC_IsEnabled>
 8003de6:	4603      	mov	r3, r0
 8003de8:	431c      	orrs	r4, r3
 8003dea:	483c      	ldr	r0, [pc, #240]	@ (8003edc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003dec:	f7ff febb 	bl	8003b66 <LL_ADC_IsEnabled>
 8003df0:	4603      	mov	r3, r0
 8003df2:	4323      	orrs	r3, r4
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	bf0c      	ite	eq
 8003df8:	2301      	moveq	r3, #1
 8003dfa:	2300      	movne	r3, #0
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d056      	beq.n	8003eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003e02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003e0a:	f023 030f 	bic.w	r3, r3, #15
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	6811      	ldr	r1, [r2, #0]
 8003e12:	683a      	ldr	r2, [r7, #0]
 8003e14:	6892      	ldr	r2, [r2, #8]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	431a      	orrs	r2, r3
 8003e1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e1c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003e1e:	e047      	b.n	8003eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003e20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e28:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e2a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e34:	d004      	beq.n	8003e40 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a23      	ldr	r2, [pc, #140]	@ (8003ec8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d10f      	bne.n	8003e60 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003e40:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003e44:	f7ff fe8f 	bl	8003b66 <LL_ADC_IsEnabled>
 8003e48:	4604      	mov	r4, r0
 8003e4a:	481f      	ldr	r0, [pc, #124]	@ (8003ec8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003e4c:	f7ff fe8b 	bl	8003b66 <LL_ADC_IsEnabled>
 8003e50:	4603      	mov	r3, r0
 8003e52:	4323      	orrs	r3, r4
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	bf0c      	ite	eq
 8003e58:	2301      	moveq	r3, #1
 8003e5a:	2300      	movne	r3, #0
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	e012      	b.n	8003e86 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003e60:	481a      	ldr	r0, [pc, #104]	@ (8003ecc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003e62:	f7ff fe80 	bl	8003b66 <LL_ADC_IsEnabled>
 8003e66:	4604      	mov	r4, r0
 8003e68:	4819      	ldr	r0, [pc, #100]	@ (8003ed0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003e6a:	f7ff fe7c 	bl	8003b66 <LL_ADC_IsEnabled>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	431c      	orrs	r4, r3
 8003e72:	481a      	ldr	r0, [pc, #104]	@ (8003edc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003e74:	f7ff fe77 	bl	8003b66 <LL_ADC_IsEnabled>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	4323      	orrs	r3, r4
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	bf0c      	ite	eq
 8003e80:	2301      	moveq	r3, #1
 8003e82:	2300      	movne	r3, #0
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d012      	beq.n	8003eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003e8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003e92:	f023 030f 	bic.w	r3, r3, #15
 8003e96:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003e98:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003e9a:	e009      	b.n	8003eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ea0:	f043 0220 	orr.w	r2, r3, #32
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003eae:	e000      	b.n	8003eb2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003eb0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003eba:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3784      	adds	r7, #132	@ 0x84
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd90      	pop	{r4, r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	50000100 	.word	0x50000100
 8003ecc:	50000400 	.word	0x50000400
 8003ed0:	50000500 	.word	0x50000500
 8003ed4:	50000300 	.word	0x50000300
 8003ed8:	50000700 	.word	0x50000700
 8003edc:	50000600 	.word	0x50000600

08003ee0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f003 0307 	and.w	r3, r3, #7
 8003eee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8003f24 <__NVIC_SetPriorityGrouping+0x44>)
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003efc:	4013      	ands	r3, r2
 8003efe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003f0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f12:	4a04      	ldr	r2, [pc, #16]	@ (8003f24 <__NVIC_SetPriorityGrouping+0x44>)
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	60d3      	str	r3, [r2, #12]
}
 8003f18:	bf00      	nop
 8003f1a:	3714      	adds	r7, #20
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr
 8003f24:	e000ed00 	.word	0xe000ed00

08003f28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f2c:	4b04      	ldr	r3, [pc, #16]	@ (8003f40 <__NVIC_GetPriorityGrouping+0x18>)
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	0a1b      	lsrs	r3, r3, #8
 8003f32:	f003 0307 	and.w	r3, r3, #7
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr
 8003f40:	e000ed00 	.word	0xe000ed00

08003f44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	db0b      	blt.n	8003f6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f56:	79fb      	ldrb	r3, [r7, #7]
 8003f58:	f003 021f 	and.w	r2, r3, #31
 8003f5c:	4907      	ldr	r1, [pc, #28]	@ (8003f7c <__NVIC_EnableIRQ+0x38>)
 8003f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f62:	095b      	lsrs	r3, r3, #5
 8003f64:	2001      	movs	r0, #1
 8003f66:	fa00 f202 	lsl.w	r2, r0, r2
 8003f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f6e:	bf00      	nop
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	e000e100 	.word	0xe000e100

08003f80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	4603      	mov	r3, r0
 8003f88:	6039      	str	r1, [r7, #0]
 8003f8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	db0a      	blt.n	8003faa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	b2da      	uxtb	r2, r3
 8003f98:	490c      	ldr	r1, [pc, #48]	@ (8003fcc <__NVIC_SetPriority+0x4c>)
 8003f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f9e:	0112      	lsls	r2, r2, #4
 8003fa0:	b2d2      	uxtb	r2, r2
 8003fa2:	440b      	add	r3, r1
 8003fa4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003fa8:	e00a      	b.n	8003fc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	b2da      	uxtb	r2, r3
 8003fae:	4908      	ldr	r1, [pc, #32]	@ (8003fd0 <__NVIC_SetPriority+0x50>)
 8003fb0:	79fb      	ldrb	r3, [r7, #7]
 8003fb2:	f003 030f 	and.w	r3, r3, #15
 8003fb6:	3b04      	subs	r3, #4
 8003fb8:	0112      	lsls	r2, r2, #4
 8003fba:	b2d2      	uxtb	r2, r2
 8003fbc:	440b      	add	r3, r1
 8003fbe:	761a      	strb	r2, [r3, #24]
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr
 8003fcc:	e000e100 	.word	0xe000e100
 8003fd0:	e000ed00 	.word	0xe000ed00

08003fd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b089      	sub	sp, #36	@ 0x24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f003 0307 	and.w	r3, r3, #7
 8003fe6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	f1c3 0307 	rsb	r3, r3, #7
 8003fee:	2b04      	cmp	r3, #4
 8003ff0:	bf28      	it	cs
 8003ff2:	2304      	movcs	r3, #4
 8003ff4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	3304      	adds	r3, #4
 8003ffa:	2b06      	cmp	r3, #6
 8003ffc:	d902      	bls.n	8004004 <NVIC_EncodePriority+0x30>
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	3b03      	subs	r3, #3
 8004002:	e000      	b.n	8004006 <NVIC_EncodePriority+0x32>
 8004004:	2300      	movs	r3, #0
 8004006:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004008:	f04f 32ff 	mov.w	r2, #4294967295
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	fa02 f303 	lsl.w	r3, r2, r3
 8004012:	43da      	mvns	r2, r3
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	401a      	ands	r2, r3
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800401c:	f04f 31ff 	mov.w	r1, #4294967295
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	fa01 f303 	lsl.w	r3, r1, r3
 8004026:	43d9      	mvns	r1, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800402c:	4313      	orrs	r3, r2
         );
}
 800402e:	4618      	mov	r0, r3
 8004030:	3724      	adds	r7, #36	@ 0x24
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
	...

0800403c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	3b01      	subs	r3, #1
 8004048:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800404c:	d301      	bcc.n	8004052 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800404e:	2301      	movs	r3, #1
 8004050:	e00f      	b.n	8004072 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004052:	4a0a      	ldr	r2, [pc, #40]	@ (800407c <SysTick_Config+0x40>)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	3b01      	subs	r3, #1
 8004058:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800405a:	210f      	movs	r1, #15
 800405c:	f04f 30ff 	mov.w	r0, #4294967295
 8004060:	f7ff ff8e 	bl	8003f80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004064:	4b05      	ldr	r3, [pc, #20]	@ (800407c <SysTick_Config+0x40>)
 8004066:	2200      	movs	r2, #0
 8004068:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800406a:	4b04      	ldr	r3, [pc, #16]	@ (800407c <SysTick_Config+0x40>)
 800406c:	2207      	movs	r2, #7
 800406e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3708      	adds	r7, #8
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	e000e010 	.word	0xe000e010

08004080 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f7ff ff29 	bl	8003ee0 <__NVIC_SetPriorityGrouping>
}
 800408e:	bf00      	nop
 8004090:	3708      	adds	r7, #8
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b086      	sub	sp, #24
 800409a:	af00      	add	r7, sp, #0
 800409c:	4603      	mov	r3, r0
 800409e:	60b9      	str	r1, [r7, #8]
 80040a0:	607a      	str	r2, [r7, #4]
 80040a2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80040a4:	f7ff ff40 	bl	8003f28 <__NVIC_GetPriorityGrouping>
 80040a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	68b9      	ldr	r1, [r7, #8]
 80040ae:	6978      	ldr	r0, [r7, #20]
 80040b0:	f7ff ff90 	bl	8003fd4 <NVIC_EncodePriority>
 80040b4:	4602      	mov	r2, r0
 80040b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040ba:	4611      	mov	r1, r2
 80040bc:	4618      	mov	r0, r3
 80040be:	f7ff ff5f 	bl	8003f80 <__NVIC_SetPriority>
}
 80040c2:	bf00      	nop
 80040c4:	3718      	adds	r7, #24
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b082      	sub	sp, #8
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	4603      	mov	r3, r0
 80040d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040d8:	4618      	mov	r0, r3
 80040da:	f7ff ff33 	bl	8003f44 <__NVIC_EnableIRQ>
}
 80040de:	bf00      	nop
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}

080040e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b082      	sub	sp, #8
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f7ff ffa4 	bl	800403c <SysTick_Config>
 80040f4:	4603      	mov	r3, r0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
	...

08004100 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d101      	bne.n	8004112 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e08d      	b.n	800422e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	461a      	mov	r2, r3
 8004118:	4b47      	ldr	r3, [pc, #284]	@ (8004238 <HAL_DMA_Init+0x138>)
 800411a:	429a      	cmp	r2, r3
 800411c:	d80f      	bhi.n	800413e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	461a      	mov	r2, r3
 8004124:	4b45      	ldr	r3, [pc, #276]	@ (800423c <HAL_DMA_Init+0x13c>)
 8004126:	4413      	add	r3, r2
 8004128:	4a45      	ldr	r2, [pc, #276]	@ (8004240 <HAL_DMA_Init+0x140>)
 800412a:	fba2 2303 	umull	r2, r3, r2, r3
 800412e:	091b      	lsrs	r3, r3, #4
 8004130:	009a      	lsls	r2, r3, #2
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a42      	ldr	r2, [pc, #264]	@ (8004244 <HAL_DMA_Init+0x144>)
 800413a:	641a      	str	r2, [r3, #64]	@ 0x40
 800413c:	e00e      	b.n	800415c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	461a      	mov	r2, r3
 8004144:	4b40      	ldr	r3, [pc, #256]	@ (8004248 <HAL_DMA_Init+0x148>)
 8004146:	4413      	add	r3, r2
 8004148:	4a3d      	ldr	r2, [pc, #244]	@ (8004240 <HAL_DMA_Init+0x140>)
 800414a:	fba2 2303 	umull	r2, r3, r2, r3
 800414e:	091b      	lsrs	r3, r3, #4
 8004150:	009a      	lsls	r2, r3, #2
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a3c      	ldr	r2, [pc, #240]	@ (800424c <HAL_DMA_Init+0x14c>)
 800415a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2202      	movs	r2, #2
 8004160:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004172:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004176:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004180:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800418c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004198:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 f8fe 	bl	80043b0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041bc:	d102      	bne.n	80041c4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685a      	ldr	r2, [r3, #4]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041cc:	b2d2      	uxtb	r2, r2
 80041ce:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80041d8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d010      	beq.n	8004204 <HAL_DMA_Init+0x104>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	2b04      	cmp	r3, #4
 80041e8:	d80c      	bhi.n	8004204 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f91e 	bl	800442c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041f4:	2200      	movs	r2, #0
 80041f6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004200:	605a      	str	r2, [r3, #4]
 8004202:	e008      	b.n	8004216 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	40020407 	.word	0x40020407
 800423c:	bffdfff8 	.word	0xbffdfff8
 8004240:	cccccccd 	.word	0xcccccccd
 8004244:	40020000 	.word	0x40020000
 8004248:	bffdfbf8 	.word	0xbffdfbf8
 800424c:	40020400 	.word	0x40020400

08004250 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800426c:	f003 031f 	and.w	r3, r3, #31
 8004270:	2204      	movs	r2, #4
 8004272:	409a      	lsls	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	4013      	ands	r3, r2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d026      	beq.n	80042ca <HAL_DMA_IRQHandler+0x7a>
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	f003 0304 	and.w	r3, r3, #4
 8004282:	2b00      	cmp	r3, #0
 8004284:	d021      	beq.n	80042ca <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0320 	and.w	r3, r3, #32
 8004290:	2b00      	cmp	r3, #0
 8004292:	d107      	bne.n	80042a4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f022 0204 	bic.w	r2, r2, #4
 80042a2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042a8:	f003 021f 	and.w	r2, r3, #31
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b0:	2104      	movs	r1, #4
 80042b2:	fa01 f202 	lsl.w	r2, r1, r2
 80042b6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d071      	beq.n	80043a4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80042c8:	e06c      	b.n	80043a4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ce:	f003 031f 	and.w	r3, r3, #31
 80042d2:	2202      	movs	r2, #2
 80042d4:	409a      	lsls	r2, r3
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	4013      	ands	r3, r2
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d02e      	beq.n	800433c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	f003 0302 	and.w	r3, r3, #2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d029      	beq.n	800433c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0320 	and.w	r3, r3, #32
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10b      	bne.n	800430e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f022 020a 	bic.w	r2, r2, #10
 8004304:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004312:	f003 021f 	and.w	r2, r3, #31
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431a:	2102      	movs	r1, #2
 800431c:	fa01 f202 	lsl.w	r2, r1, r2
 8004320:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800432e:	2b00      	cmp	r3, #0
 8004330:	d038      	beq.n	80043a4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800433a:	e033      	b.n	80043a4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004340:	f003 031f 	and.w	r3, r3, #31
 8004344:	2208      	movs	r2, #8
 8004346:	409a      	lsls	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	4013      	ands	r3, r2
 800434c:	2b00      	cmp	r3, #0
 800434e:	d02a      	beq.n	80043a6 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	f003 0308 	and.w	r3, r3, #8
 8004356:	2b00      	cmp	r3, #0
 8004358:	d025      	beq.n	80043a6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f022 020e 	bic.w	r2, r2, #14
 8004368:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800436e:	f003 021f 	and.w	r2, r3, #31
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004376:	2101      	movs	r1, #1
 8004378:	fa01 f202 	lsl.w	r2, r1, r2
 800437c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2201      	movs	r2, #1
 8004382:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004398:	2b00      	cmp	r3, #0
 800439a:	d004      	beq.n	80043a6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80043a4:	bf00      	nop
 80043a6:	bf00      	nop
}
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
	...

080043b0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b087      	sub	sp, #28
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	461a      	mov	r2, r3
 80043be:	4b16      	ldr	r3, [pc, #88]	@ (8004418 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d802      	bhi.n	80043ca <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80043c4:	4b15      	ldr	r3, [pc, #84]	@ (800441c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80043c6:	617b      	str	r3, [r7, #20]
 80043c8:	e001      	b.n	80043ce <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80043ca:	4b15      	ldr	r3, [pc, #84]	@ (8004420 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80043cc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	3b08      	subs	r3, #8
 80043da:	4a12      	ldr	r2, [pc, #72]	@ (8004424 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80043dc:	fba2 2303 	umull	r2, r3, r2, r3
 80043e0:	091b      	lsrs	r3, r3, #4
 80043e2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043e8:	089b      	lsrs	r3, r3, #2
 80043ea:	009a      	lsls	r2, r3, #2
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	4413      	add	r3, r2
 80043f0:	461a      	mov	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a0b      	ldr	r2, [pc, #44]	@ (8004428 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80043fa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f003 031f 	and.w	r3, r3, #31
 8004402:	2201      	movs	r2, #1
 8004404:	409a      	lsls	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800440a:	bf00      	nop
 800440c:	371c      	adds	r7, #28
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	40020407 	.word	0x40020407
 800441c:	40020800 	.word	0x40020800
 8004420:	40020820 	.word	0x40020820
 8004424:	cccccccd 	.word	0xcccccccd
 8004428:	40020880 	.word	0x40020880

0800442c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	b2db      	uxtb	r3, r3
 800443a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	4b0b      	ldr	r3, [pc, #44]	@ (800446c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004440:	4413      	add	r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	461a      	mov	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a08      	ldr	r2, [pc, #32]	@ (8004470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800444e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	3b01      	subs	r3, #1
 8004454:	f003 031f 	and.w	r3, r3, #31
 8004458:	2201      	movs	r2, #1
 800445a:	409a      	lsls	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004460:	bf00      	nop
 8004462:	3714      	adds	r7, #20
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr
 800446c:	1000823f 	.word	0x1000823f
 8004470:	40020940 	.word	0x40020940

08004474 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004474:	b480      	push	{r7}
 8004476:	b087      	sub	sp, #28
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800447e:	2300      	movs	r3, #0
 8004480:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004482:	e15a      	b.n	800473a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	2101      	movs	r1, #1
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	fa01 f303 	lsl.w	r3, r1, r3
 8004490:	4013      	ands	r3, r2
 8004492:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2b00      	cmp	r3, #0
 8004498:	f000 814c 	beq.w	8004734 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f003 0303 	and.w	r3, r3, #3
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d005      	beq.n	80044b4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d130      	bne.n	8004516 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	2203      	movs	r2, #3
 80044c0:	fa02 f303 	lsl.w	r3, r2, r3
 80044c4:	43db      	mvns	r3, r3
 80044c6:	693a      	ldr	r2, [r7, #16]
 80044c8:	4013      	ands	r3, r2
 80044ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	68da      	ldr	r2, [r3, #12]
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	005b      	lsls	r3, r3, #1
 80044d4:	fa02 f303 	lsl.w	r3, r2, r3
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	4313      	orrs	r3, r2
 80044dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044ea:	2201      	movs	r2, #1
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	fa02 f303 	lsl.w	r3, r2, r3
 80044f2:	43db      	mvns	r3, r3
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	4013      	ands	r3, r2
 80044f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	091b      	lsrs	r3, r3, #4
 8004500:	f003 0201 	and.w	r2, r3, #1
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	fa02 f303 	lsl.w	r3, r2, r3
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	4313      	orrs	r3, r2
 800450e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f003 0303 	and.w	r3, r3, #3
 800451e:	2b03      	cmp	r3, #3
 8004520:	d017      	beq.n	8004552 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	005b      	lsls	r3, r3, #1
 800452c:	2203      	movs	r2, #3
 800452e:	fa02 f303 	lsl.w	r3, r2, r3
 8004532:	43db      	mvns	r3, r3
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	4013      	ands	r3, r2
 8004538:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	689a      	ldr	r2, [r3, #8]
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	005b      	lsls	r3, r3, #1
 8004542:	fa02 f303 	lsl.w	r3, r2, r3
 8004546:	693a      	ldr	r2, [r7, #16]
 8004548:	4313      	orrs	r3, r2
 800454a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f003 0303 	and.w	r3, r3, #3
 800455a:	2b02      	cmp	r3, #2
 800455c:	d123      	bne.n	80045a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	08da      	lsrs	r2, r3, #3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	3208      	adds	r2, #8
 8004566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800456a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	f003 0307 	and.w	r3, r3, #7
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	220f      	movs	r2, #15
 8004576:	fa02 f303 	lsl.w	r3, r2, r3
 800457a:	43db      	mvns	r3, r3
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	4013      	ands	r3, r2
 8004580:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	691a      	ldr	r2, [r3, #16]
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	f003 0307 	and.w	r3, r3, #7
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	fa02 f303 	lsl.w	r3, r2, r3
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	4313      	orrs	r3, r2
 8004596:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	08da      	lsrs	r2, r3, #3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	3208      	adds	r2, #8
 80045a0:	6939      	ldr	r1, [r7, #16]
 80045a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	005b      	lsls	r3, r3, #1
 80045b0:	2203      	movs	r2, #3
 80045b2:	fa02 f303 	lsl.w	r3, r2, r3
 80045b6:	43db      	mvns	r3, r3
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	4013      	ands	r3, r2
 80045bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f003 0203 	and.w	r2, r3, #3
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	005b      	lsls	r3, r3, #1
 80045ca:	fa02 f303 	lsl.w	r3, r2, r3
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f000 80a6 	beq.w	8004734 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045e8:	4b5b      	ldr	r3, [pc, #364]	@ (8004758 <HAL_GPIO_Init+0x2e4>)
 80045ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045ec:	4a5a      	ldr	r2, [pc, #360]	@ (8004758 <HAL_GPIO_Init+0x2e4>)
 80045ee:	f043 0301 	orr.w	r3, r3, #1
 80045f2:	6613      	str	r3, [r2, #96]	@ 0x60
 80045f4:	4b58      	ldr	r3, [pc, #352]	@ (8004758 <HAL_GPIO_Init+0x2e4>)
 80045f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	60bb      	str	r3, [r7, #8]
 80045fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004600:	4a56      	ldr	r2, [pc, #344]	@ (800475c <HAL_GPIO_Init+0x2e8>)
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	089b      	lsrs	r3, r3, #2
 8004606:	3302      	adds	r3, #2
 8004608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800460c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	f003 0303 	and.w	r3, r3, #3
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	220f      	movs	r2, #15
 8004618:	fa02 f303 	lsl.w	r3, r2, r3
 800461c:	43db      	mvns	r3, r3
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	4013      	ands	r3, r2
 8004622:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800462a:	d01f      	beq.n	800466c <HAL_GPIO_Init+0x1f8>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a4c      	ldr	r2, [pc, #304]	@ (8004760 <HAL_GPIO_Init+0x2ec>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d019      	beq.n	8004668 <HAL_GPIO_Init+0x1f4>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a4b      	ldr	r2, [pc, #300]	@ (8004764 <HAL_GPIO_Init+0x2f0>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d013      	beq.n	8004664 <HAL_GPIO_Init+0x1f0>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a4a      	ldr	r2, [pc, #296]	@ (8004768 <HAL_GPIO_Init+0x2f4>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d00d      	beq.n	8004660 <HAL_GPIO_Init+0x1ec>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4a49      	ldr	r2, [pc, #292]	@ (800476c <HAL_GPIO_Init+0x2f8>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d007      	beq.n	800465c <HAL_GPIO_Init+0x1e8>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4a48      	ldr	r2, [pc, #288]	@ (8004770 <HAL_GPIO_Init+0x2fc>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d101      	bne.n	8004658 <HAL_GPIO_Init+0x1e4>
 8004654:	2305      	movs	r3, #5
 8004656:	e00a      	b.n	800466e <HAL_GPIO_Init+0x1fa>
 8004658:	2306      	movs	r3, #6
 800465a:	e008      	b.n	800466e <HAL_GPIO_Init+0x1fa>
 800465c:	2304      	movs	r3, #4
 800465e:	e006      	b.n	800466e <HAL_GPIO_Init+0x1fa>
 8004660:	2303      	movs	r3, #3
 8004662:	e004      	b.n	800466e <HAL_GPIO_Init+0x1fa>
 8004664:	2302      	movs	r3, #2
 8004666:	e002      	b.n	800466e <HAL_GPIO_Init+0x1fa>
 8004668:	2301      	movs	r3, #1
 800466a:	e000      	b.n	800466e <HAL_GPIO_Init+0x1fa>
 800466c:	2300      	movs	r3, #0
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	f002 0203 	and.w	r2, r2, #3
 8004674:	0092      	lsls	r2, r2, #2
 8004676:	4093      	lsls	r3, r2
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	4313      	orrs	r3, r2
 800467c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800467e:	4937      	ldr	r1, [pc, #220]	@ (800475c <HAL_GPIO_Init+0x2e8>)
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	089b      	lsrs	r3, r3, #2
 8004684:	3302      	adds	r3, #2
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800468c:	4b39      	ldr	r3, [pc, #228]	@ (8004774 <HAL_GPIO_Init+0x300>)
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	43db      	mvns	r3, r3
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	4013      	ands	r3, r2
 800469a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d003      	beq.n	80046b0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80046b0:	4a30      	ldr	r2, [pc, #192]	@ (8004774 <HAL_GPIO_Init+0x300>)
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80046b6:	4b2f      	ldr	r3, [pc, #188]	@ (8004774 <HAL_GPIO_Init+0x300>)
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	43db      	mvns	r3, r3
 80046c0:	693a      	ldr	r2, [r7, #16]
 80046c2:	4013      	ands	r3, r2
 80046c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d003      	beq.n	80046da <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80046da:	4a26      	ldr	r2, [pc, #152]	@ (8004774 <HAL_GPIO_Init+0x300>)
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80046e0:	4b24      	ldr	r3, [pc, #144]	@ (8004774 <HAL_GPIO_Init+0x300>)
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	43db      	mvns	r3, r3
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	4013      	ands	r3, r2
 80046ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d003      	beq.n	8004704 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	4313      	orrs	r3, r2
 8004702:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004704:	4a1b      	ldr	r2, [pc, #108]	@ (8004774 <HAL_GPIO_Init+0x300>)
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800470a:	4b1a      	ldr	r3, [pc, #104]	@ (8004774 <HAL_GPIO_Init+0x300>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	43db      	mvns	r3, r3
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	4013      	ands	r3, r2
 8004718:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d003      	beq.n	800472e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	4313      	orrs	r3, r2
 800472c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800472e:	4a11      	ldr	r2, [pc, #68]	@ (8004774 <HAL_GPIO_Init+0x300>)
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	3301      	adds	r3, #1
 8004738:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	fa22 f303 	lsr.w	r3, r2, r3
 8004744:	2b00      	cmp	r3, #0
 8004746:	f47f ae9d 	bne.w	8004484 <HAL_GPIO_Init+0x10>
  }
}
 800474a:	bf00      	nop
 800474c:	bf00      	nop
 800474e:	371c      	adds	r7, #28
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr
 8004758:	40021000 	.word	0x40021000
 800475c:	40010000 	.word	0x40010000
 8004760:	48000400 	.word	0x48000400
 8004764:	48000800 	.word	0x48000800
 8004768:	48000c00 	.word	0x48000c00
 800476c:	48001000 	.word	0x48001000
 8004770:	48001400 	.word	0x48001400
 8004774:	40010400 	.word	0x40010400

08004778 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	460b      	mov	r3, r1
 8004782:	807b      	strh	r3, [r7, #2]
 8004784:	4613      	mov	r3, r2
 8004786:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004788:	787b      	ldrb	r3, [r7, #1]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d003      	beq.n	8004796 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800478e:	887a      	ldrh	r2, [r7, #2]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004794:	e002      	b.n	800479c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004796:	887a      	ldrh	r2, [r7, #2]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800479c:	bf00      	nop
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	460b      	mov	r3, r1
 80047b2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	695b      	ldr	r3, [r3, #20]
 80047b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80047ba:	887a      	ldrh	r2, [r7, #2]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	4013      	ands	r3, r2
 80047c0:	041a      	lsls	r2, r3, #16
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	43d9      	mvns	r1, r3
 80047c6:	887b      	ldrh	r3, [r7, #2]
 80047c8:	400b      	ands	r3, r1
 80047ca:	431a      	orrs	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	619a      	str	r2, [r3, #24]
}
 80047d0:	bf00      	nop
 80047d2:	3714      	adds	r7, #20
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	4603      	mov	r3, r0
 80047e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80047e6:	4b08      	ldr	r3, [pc, #32]	@ (8004808 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047e8:	695a      	ldr	r2, [r3, #20]
 80047ea:	88fb      	ldrh	r3, [r7, #6]
 80047ec:	4013      	ands	r3, r2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d006      	beq.n	8004800 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80047f2:	4a05      	ldr	r2, [pc, #20]	@ (8004808 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047f4:	88fb      	ldrh	r3, [r7, #6]
 80047f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80047f8:	88fb      	ldrh	r3, [r7, #6]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7fd fa32 	bl	8001c64 <HAL_GPIO_EXTI_Callback>
  }
}
 8004800:	bf00      	nop
 8004802:	3708      	adds	r7, #8
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	40010400 	.word	0x40010400

0800480c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d141      	bne.n	800489e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800481a:	4b4b      	ldr	r3, [pc, #300]	@ (8004948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004822:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004826:	d131      	bne.n	800488c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004828:	4b47      	ldr	r3, [pc, #284]	@ (8004948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800482a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800482e:	4a46      	ldr	r2, [pc, #280]	@ (8004948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004830:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004834:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004838:	4b43      	ldr	r3, [pc, #268]	@ (8004948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004840:	4a41      	ldr	r2, [pc, #260]	@ (8004948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004842:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004846:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004848:	4b40      	ldr	r3, [pc, #256]	@ (800494c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2232      	movs	r2, #50	@ 0x32
 800484e:	fb02 f303 	mul.w	r3, r2, r3
 8004852:	4a3f      	ldr	r2, [pc, #252]	@ (8004950 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004854:	fba2 2303 	umull	r2, r3, r2, r3
 8004858:	0c9b      	lsrs	r3, r3, #18
 800485a:	3301      	adds	r3, #1
 800485c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800485e:	e002      	b.n	8004866 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	3b01      	subs	r3, #1
 8004864:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004866:	4b38      	ldr	r3, [pc, #224]	@ (8004948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800486e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004872:	d102      	bne.n	800487a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1f2      	bne.n	8004860 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800487a:	4b33      	ldr	r3, [pc, #204]	@ (8004948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800487c:	695b      	ldr	r3, [r3, #20]
 800487e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004882:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004886:	d158      	bne.n	800493a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e057      	b.n	800493c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800488c:	4b2e      	ldr	r3, [pc, #184]	@ (8004948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800488e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004892:	4a2d      	ldr	r2, [pc, #180]	@ (8004948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004894:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004898:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800489c:	e04d      	b.n	800493a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048a4:	d141      	bne.n	800492a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80048a6:	4b28      	ldr	r3, [pc, #160]	@ (8004948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80048ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048b2:	d131      	bne.n	8004918 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048b4:	4b24      	ldr	r3, [pc, #144]	@ (8004948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048ba:	4a23      	ldr	r2, [pc, #140]	@ (8004948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80048c4:	4b20      	ldr	r3, [pc, #128]	@ (8004948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80048cc:	4a1e      	ldr	r2, [pc, #120]	@ (8004948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80048d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80048d4:	4b1d      	ldr	r3, [pc, #116]	@ (800494c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2232      	movs	r2, #50	@ 0x32
 80048da:	fb02 f303 	mul.w	r3, r2, r3
 80048de:	4a1c      	ldr	r2, [pc, #112]	@ (8004950 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80048e0:	fba2 2303 	umull	r2, r3, r2, r3
 80048e4:	0c9b      	lsrs	r3, r3, #18
 80048e6:	3301      	adds	r3, #1
 80048e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048ea:	e002      	b.n	80048f2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	3b01      	subs	r3, #1
 80048f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048f2:	4b15      	ldr	r3, [pc, #84]	@ (8004948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048fe:	d102      	bne.n	8004906 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1f2      	bne.n	80048ec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004906:	4b10      	ldr	r3, [pc, #64]	@ (8004948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800490e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004912:	d112      	bne.n	800493a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e011      	b.n	800493c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004918:	4b0b      	ldr	r3, [pc, #44]	@ (8004948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800491a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800491e:	4a0a      	ldr	r2, [pc, #40]	@ (8004948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004920:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004924:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004928:	e007      	b.n	800493a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800492a:	4b07      	ldr	r3, [pc, #28]	@ (8004948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004932:	4a05      	ldr	r2, [pc, #20]	@ (8004948 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004934:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004938:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	3714      	adds	r7, #20
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr
 8004948:	40007000 	.word	0x40007000
 800494c:	2000006c 	.word	0x2000006c
 8004950:	431bde83 	.word	0x431bde83

08004954 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004954:	b480      	push	{r7}
 8004956:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004958:	4b05      	ldr	r3, [pc, #20]	@ (8004970 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	4a04      	ldr	r2, [pc, #16]	@ (8004970 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800495e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004962:	6093      	str	r3, [r2, #8]
}
 8004964:	bf00      	nop
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	40007000 	.word	0x40007000

08004974 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b088      	sub	sp, #32
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e2fe      	b.n	8004f84 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	2b00      	cmp	r3, #0
 8004990:	d075      	beq.n	8004a7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004992:	4b97      	ldr	r3, [pc, #604]	@ (8004bf0 <HAL_RCC_OscConfig+0x27c>)
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f003 030c 	and.w	r3, r3, #12
 800499a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800499c:	4b94      	ldr	r3, [pc, #592]	@ (8004bf0 <HAL_RCC_OscConfig+0x27c>)
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	f003 0303 	and.w	r3, r3, #3
 80049a4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	2b0c      	cmp	r3, #12
 80049aa:	d102      	bne.n	80049b2 <HAL_RCC_OscConfig+0x3e>
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	2b03      	cmp	r3, #3
 80049b0:	d002      	beq.n	80049b8 <HAL_RCC_OscConfig+0x44>
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	2b08      	cmp	r3, #8
 80049b6:	d10b      	bne.n	80049d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049b8:	4b8d      	ldr	r3, [pc, #564]	@ (8004bf0 <HAL_RCC_OscConfig+0x27c>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d05b      	beq.n	8004a7c <HAL_RCC_OscConfig+0x108>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d157      	bne.n	8004a7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e2d9      	b.n	8004f84 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049d8:	d106      	bne.n	80049e8 <HAL_RCC_OscConfig+0x74>
 80049da:	4b85      	ldr	r3, [pc, #532]	@ (8004bf0 <HAL_RCC_OscConfig+0x27c>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a84      	ldr	r2, [pc, #528]	@ (8004bf0 <HAL_RCC_OscConfig+0x27c>)
 80049e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049e4:	6013      	str	r3, [r2, #0]
 80049e6:	e01d      	b.n	8004a24 <HAL_RCC_OscConfig+0xb0>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80049f0:	d10c      	bne.n	8004a0c <HAL_RCC_OscConfig+0x98>
 80049f2:	4b7f      	ldr	r3, [pc, #508]	@ (8004bf0 <HAL_RCC_OscConfig+0x27c>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a7e      	ldr	r2, [pc, #504]	@ (8004bf0 <HAL_RCC_OscConfig+0x27c>)
 80049f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049fc:	6013      	str	r3, [r2, #0]
 80049fe:	4b7c      	ldr	r3, [pc, #496]	@ (8004bf0 <HAL_RCC_OscConfig+0x27c>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a7b      	ldr	r2, [pc, #492]	@ (8004bf0 <HAL_RCC_OscConfig+0x27c>)
 8004a04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a08:	6013      	str	r3, [r2, #0]
 8004a0a:	e00b      	b.n	8004a24 <HAL_RCC_OscConfig+0xb0>
 8004a0c:	4b78      	ldr	r3, [pc, #480]	@ (8004bf0 <HAL_RCC_OscConfig+0x27c>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a77      	ldr	r2, [pc, #476]	@ (8004bf0 <HAL_RCC_OscConfig+0x27c>)
 8004a12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a16:	6013      	str	r3, [r2, #0]
 8004a18:	4b75      	ldr	r3, [pc, #468]	@ (8004bf0 <HAL_RCC_OscConfig+0x27c>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a74      	ldr	r2, [pc, #464]	@ (8004bf0 <HAL_RCC_OscConfig+0x27c>)
 8004a1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d013      	beq.n	8004a54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a2c:	f7fd fc1a 	bl	8002264 <HAL_GetTick>
 8004a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a32:	e008      	b.n	8004a46 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a34:	f7fd fc16 	bl	8002264 <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	2b64      	cmp	r3, #100	@ 0x64
 8004a40:	d901      	bls.n	8004a46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e29e      	b.n	8004f84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a46:	4b6a      	ldr	r3, [pc, #424]	@ (8004bf0 <HAL_RCC_OscConfig+0x27c>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d0f0      	beq.n	8004a34 <HAL_RCC_OscConfig+0xc0>
 8004a52:	e014      	b.n	8004a7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a54:	f7fd fc06 	bl	8002264 <HAL_GetTick>
 8004a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a5c:	f7fd fc02 	bl	8002264 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b64      	cmp	r3, #100	@ 0x64
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e28a      	b.n	8004f84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a6e:	4b60      	ldr	r3, [pc, #384]	@ (8004bf0 <HAL_RCC_OscConfig+0x27c>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1f0      	bne.n	8004a5c <HAL_RCC_OscConfig+0xe8>
 8004a7a:	e000      	b.n	8004a7e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d075      	beq.n	8004b76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a8a:	4b59      	ldr	r3, [pc, #356]	@ (8004bf0 <HAL_RCC_OscConfig+0x27c>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f003 030c 	and.w	r3, r3, #12
 8004a92:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a94:	4b56      	ldr	r3, [pc, #344]	@ (8004bf0 <HAL_RCC_OscConfig+0x27c>)
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	f003 0303 	and.w	r3, r3, #3
 8004a9c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	2b0c      	cmp	r3, #12
 8004aa2:	d102      	bne.n	8004aaa <HAL_RCC_OscConfig+0x136>
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d002      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x13c>
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	2b04      	cmp	r3, #4
 8004aae:	d11f      	bne.n	8004af0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ab0:	4b4f      	ldr	r3, [pc, #316]	@ (8004bf0 <HAL_RCC_OscConfig+0x27c>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d005      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x154>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d101      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e25d      	b.n	8004f84 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ac8:	4b49      	ldr	r3, [pc, #292]	@ (8004bf0 <HAL_RCC_OscConfig+0x27c>)
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	061b      	lsls	r3, r3, #24
 8004ad6:	4946      	ldr	r1, [pc, #280]	@ (8004bf0 <HAL_RCC_OscConfig+0x27c>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004adc:	4b45      	ldr	r3, [pc, #276]	@ (8004bf4 <HAL_RCC_OscConfig+0x280>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f7fd fb73 	bl	80021cc <HAL_InitTick>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d043      	beq.n	8004b74 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e249      	b.n	8004f84 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d023      	beq.n	8004b40 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004af8:	4b3d      	ldr	r3, [pc, #244]	@ (8004bf0 <HAL_RCC_OscConfig+0x27c>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a3c      	ldr	r2, [pc, #240]	@ (8004bf0 <HAL_RCC_OscConfig+0x27c>)
 8004afe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b04:	f7fd fbae 	bl	8002264 <HAL_GetTick>
 8004b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b0a:	e008      	b.n	8004b1e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b0c:	f7fd fbaa 	bl	8002264 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d901      	bls.n	8004b1e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e232      	b.n	8004f84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b1e:	4b34      	ldr	r3, [pc, #208]	@ (8004bf0 <HAL_RCC_OscConfig+0x27c>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d0f0      	beq.n	8004b0c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b2a:	4b31      	ldr	r3, [pc, #196]	@ (8004bf0 <HAL_RCC_OscConfig+0x27c>)
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	061b      	lsls	r3, r3, #24
 8004b38:	492d      	ldr	r1, [pc, #180]	@ (8004bf0 <HAL_RCC_OscConfig+0x27c>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	604b      	str	r3, [r1, #4]
 8004b3e:	e01a      	b.n	8004b76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b40:	4b2b      	ldr	r3, [pc, #172]	@ (8004bf0 <HAL_RCC_OscConfig+0x27c>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a2a      	ldr	r2, [pc, #168]	@ (8004bf0 <HAL_RCC_OscConfig+0x27c>)
 8004b46:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b4c:	f7fd fb8a 	bl	8002264 <HAL_GetTick>
 8004b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b52:	e008      	b.n	8004b66 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b54:	f7fd fb86 	bl	8002264 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e20e      	b.n	8004f84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b66:	4b22      	ldr	r3, [pc, #136]	@ (8004bf0 <HAL_RCC_OscConfig+0x27c>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1f0      	bne.n	8004b54 <HAL_RCC_OscConfig+0x1e0>
 8004b72:	e000      	b.n	8004b76 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b74:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0308 	and.w	r3, r3, #8
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d041      	beq.n	8004c06 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d01c      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b8a:	4b19      	ldr	r3, [pc, #100]	@ (8004bf0 <HAL_RCC_OscConfig+0x27c>)
 8004b8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b90:	4a17      	ldr	r2, [pc, #92]	@ (8004bf0 <HAL_RCC_OscConfig+0x27c>)
 8004b92:	f043 0301 	orr.w	r3, r3, #1
 8004b96:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b9a:	f7fd fb63 	bl	8002264 <HAL_GetTick>
 8004b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ba0:	e008      	b.n	8004bb4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ba2:	f7fd fb5f 	bl	8002264 <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d901      	bls.n	8004bb4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e1e7      	b.n	8004f84 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bb4:	4b0e      	ldr	r3, [pc, #56]	@ (8004bf0 <HAL_RCC_OscConfig+0x27c>)
 8004bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d0ef      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x22e>
 8004bc2:	e020      	b.n	8004c06 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bc4:	4b0a      	ldr	r3, [pc, #40]	@ (8004bf0 <HAL_RCC_OscConfig+0x27c>)
 8004bc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bca:	4a09      	ldr	r2, [pc, #36]	@ (8004bf0 <HAL_RCC_OscConfig+0x27c>)
 8004bcc:	f023 0301 	bic.w	r3, r3, #1
 8004bd0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bd4:	f7fd fb46 	bl	8002264 <HAL_GetTick>
 8004bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bda:	e00d      	b.n	8004bf8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bdc:	f7fd fb42 	bl	8002264 <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d906      	bls.n	8004bf8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e1ca      	b.n	8004f84 <HAL_RCC_OscConfig+0x610>
 8004bee:	bf00      	nop
 8004bf0:	40021000 	.word	0x40021000
 8004bf4:	20000070 	.word	0x20000070
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bf8:	4b8c      	ldr	r3, [pc, #560]	@ (8004e2c <HAL_RCC_OscConfig+0x4b8>)
 8004bfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bfe:	f003 0302 	and.w	r3, r3, #2
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1ea      	bne.n	8004bdc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0304 	and.w	r3, r3, #4
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	f000 80a6 	beq.w	8004d60 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c14:	2300      	movs	r3, #0
 8004c16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c18:	4b84      	ldr	r3, [pc, #528]	@ (8004e2c <HAL_RCC_OscConfig+0x4b8>)
 8004c1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d101      	bne.n	8004c28 <HAL_RCC_OscConfig+0x2b4>
 8004c24:	2301      	movs	r3, #1
 8004c26:	e000      	b.n	8004c2a <HAL_RCC_OscConfig+0x2b6>
 8004c28:	2300      	movs	r3, #0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00d      	beq.n	8004c4a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c2e:	4b7f      	ldr	r3, [pc, #508]	@ (8004e2c <HAL_RCC_OscConfig+0x4b8>)
 8004c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c32:	4a7e      	ldr	r2, [pc, #504]	@ (8004e2c <HAL_RCC_OscConfig+0x4b8>)
 8004c34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c38:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c3a:	4b7c      	ldr	r3, [pc, #496]	@ (8004e2c <HAL_RCC_OscConfig+0x4b8>)
 8004c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c42:	60fb      	str	r3, [r7, #12]
 8004c44:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004c46:	2301      	movs	r3, #1
 8004c48:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c4a:	4b79      	ldr	r3, [pc, #484]	@ (8004e30 <HAL_RCC_OscConfig+0x4bc>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d118      	bne.n	8004c88 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c56:	4b76      	ldr	r3, [pc, #472]	@ (8004e30 <HAL_RCC_OscConfig+0x4bc>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a75      	ldr	r2, [pc, #468]	@ (8004e30 <HAL_RCC_OscConfig+0x4bc>)
 8004c5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c62:	f7fd faff 	bl	8002264 <HAL_GetTick>
 8004c66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c68:	e008      	b.n	8004c7c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c6a:	f7fd fafb 	bl	8002264 <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d901      	bls.n	8004c7c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e183      	b.n	8004f84 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c7c:	4b6c      	ldr	r3, [pc, #432]	@ (8004e30 <HAL_RCC_OscConfig+0x4bc>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d0f0      	beq.n	8004c6a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d108      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x32e>
 8004c90:	4b66      	ldr	r3, [pc, #408]	@ (8004e2c <HAL_RCC_OscConfig+0x4b8>)
 8004c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c96:	4a65      	ldr	r2, [pc, #404]	@ (8004e2c <HAL_RCC_OscConfig+0x4b8>)
 8004c98:	f043 0301 	orr.w	r3, r3, #1
 8004c9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ca0:	e024      	b.n	8004cec <HAL_RCC_OscConfig+0x378>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	2b05      	cmp	r3, #5
 8004ca8:	d110      	bne.n	8004ccc <HAL_RCC_OscConfig+0x358>
 8004caa:	4b60      	ldr	r3, [pc, #384]	@ (8004e2c <HAL_RCC_OscConfig+0x4b8>)
 8004cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cb0:	4a5e      	ldr	r2, [pc, #376]	@ (8004e2c <HAL_RCC_OscConfig+0x4b8>)
 8004cb2:	f043 0304 	orr.w	r3, r3, #4
 8004cb6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004cba:	4b5c      	ldr	r3, [pc, #368]	@ (8004e2c <HAL_RCC_OscConfig+0x4b8>)
 8004cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cc0:	4a5a      	ldr	r2, [pc, #360]	@ (8004e2c <HAL_RCC_OscConfig+0x4b8>)
 8004cc2:	f043 0301 	orr.w	r3, r3, #1
 8004cc6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004cca:	e00f      	b.n	8004cec <HAL_RCC_OscConfig+0x378>
 8004ccc:	4b57      	ldr	r3, [pc, #348]	@ (8004e2c <HAL_RCC_OscConfig+0x4b8>)
 8004cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cd2:	4a56      	ldr	r2, [pc, #344]	@ (8004e2c <HAL_RCC_OscConfig+0x4b8>)
 8004cd4:	f023 0301 	bic.w	r3, r3, #1
 8004cd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004cdc:	4b53      	ldr	r3, [pc, #332]	@ (8004e2c <HAL_RCC_OscConfig+0x4b8>)
 8004cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ce2:	4a52      	ldr	r2, [pc, #328]	@ (8004e2c <HAL_RCC_OscConfig+0x4b8>)
 8004ce4:	f023 0304 	bic.w	r3, r3, #4
 8004ce8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d016      	beq.n	8004d22 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cf4:	f7fd fab6 	bl	8002264 <HAL_GetTick>
 8004cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cfa:	e00a      	b.n	8004d12 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cfc:	f7fd fab2 	bl	8002264 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e138      	b.n	8004f84 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d12:	4b46      	ldr	r3, [pc, #280]	@ (8004e2c <HAL_RCC_OscConfig+0x4b8>)
 8004d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d18:	f003 0302 	and.w	r3, r3, #2
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d0ed      	beq.n	8004cfc <HAL_RCC_OscConfig+0x388>
 8004d20:	e015      	b.n	8004d4e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d22:	f7fd fa9f 	bl	8002264 <HAL_GetTick>
 8004d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d28:	e00a      	b.n	8004d40 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d2a:	f7fd fa9b 	bl	8002264 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d901      	bls.n	8004d40 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e121      	b.n	8004f84 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d40:	4b3a      	ldr	r3, [pc, #232]	@ (8004e2c <HAL_RCC_OscConfig+0x4b8>)
 8004d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d46:	f003 0302 	and.w	r3, r3, #2
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d1ed      	bne.n	8004d2a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d4e:	7ffb      	ldrb	r3, [r7, #31]
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d105      	bne.n	8004d60 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d54:	4b35      	ldr	r3, [pc, #212]	@ (8004e2c <HAL_RCC_OscConfig+0x4b8>)
 8004d56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d58:	4a34      	ldr	r2, [pc, #208]	@ (8004e2c <HAL_RCC_OscConfig+0x4b8>)
 8004d5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d5e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0320 	and.w	r3, r3, #32
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d03c      	beq.n	8004de6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d01c      	beq.n	8004dae <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d74:	4b2d      	ldr	r3, [pc, #180]	@ (8004e2c <HAL_RCC_OscConfig+0x4b8>)
 8004d76:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d7a:	4a2c      	ldr	r2, [pc, #176]	@ (8004e2c <HAL_RCC_OscConfig+0x4b8>)
 8004d7c:	f043 0301 	orr.w	r3, r3, #1
 8004d80:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d84:	f7fd fa6e 	bl	8002264 <HAL_GetTick>
 8004d88:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d8a:	e008      	b.n	8004d9e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d8c:	f7fd fa6a 	bl	8002264 <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d901      	bls.n	8004d9e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e0f2      	b.n	8004f84 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d9e:	4b23      	ldr	r3, [pc, #140]	@ (8004e2c <HAL_RCC_OscConfig+0x4b8>)
 8004da0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004da4:	f003 0302 	and.w	r3, r3, #2
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d0ef      	beq.n	8004d8c <HAL_RCC_OscConfig+0x418>
 8004dac:	e01b      	b.n	8004de6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004dae:	4b1f      	ldr	r3, [pc, #124]	@ (8004e2c <HAL_RCC_OscConfig+0x4b8>)
 8004db0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004db4:	4a1d      	ldr	r2, [pc, #116]	@ (8004e2c <HAL_RCC_OscConfig+0x4b8>)
 8004db6:	f023 0301 	bic.w	r3, r3, #1
 8004dba:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dbe:	f7fd fa51 	bl	8002264 <HAL_GetTick>
 8004dc2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004dc4:	e008      	b.n	8004dd8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004dc6:	f7fd fa4d 	bl	8002264 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d901      	bls.n	8004dd8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e0d5      	b.n	8004f84 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004dd8:	4b14      	ldr	r3, [pc, #80]	@ (8004e2c <HAL_RCC_OscConfig+0x4b8>)
 8004dda:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1ef      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	69db      	ldr	r3, [r3, #28]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f000 80c9 	beq.w	8004f82 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004df0:	4b0e      	ldr	r3, [pc, #56]	@ (8004e2c <HAL_RCC_OscConfig+0x4b8>)
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f003 030c 	and.w	r3, r3, #12
 8004df8:	2b0c      	cmp	r3, #12
 8004dfa:	f000 8083 	beq.w	8004f04 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	69db      	ldr	r3, [r3, #28]
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d15e      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e06:	4b09      	ldr	r3, [pc, #36]	@ (8004e2c <HAL_RCC_OscConfig+0x4b8>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a08      	ldr	r2, [pc, #32]	@ (8004e2c <HAL_RCC_OscConfig+0x4b8>)
 8004e0c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e12:	f7fd fa27 	bl	8002264 <HAL_GetTick>
 8004e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e18:	e00c      	b.n	8004e34 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e1a:	f7fd fa23 	bl	8002264 <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d905      	bls.n	8004e34 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e0ab      	b.n	8004f84 <HAL_RCC_OscConfig+0x610>
 8004e2c:	40021000 	.word	0x40021000
 8004e30:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e34:	4b55      	ldr	r3, [pc, #340]	@ (8004f8c <HAL_RCC_OscConfig+0x618>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d1ec      	bne.n	8004e1a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e40:	4b52      	ldr	r3, [pc, #328]	@ (8004f8c <HAL_RCC_OscConfig+0x618>)
 8004e42:	68da      	ldr	r2, [r3, #12]
 8004e44:	4b52      	ldr	r3, [pc, #328]	@ (8004f90 <HAL_RCC_OscConfig+0x61c>)
 8004e46:	4013      	ands	r3, r2
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	6a11      	ldr	r1, [r2, #32]
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004e50:	3a01      	subs	r2, #1
 8004e52:	0112      	lsls	r2, r2, #4
 8004e54:	4311      	orrs	r1, r2
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004e5a:	0212      	lsls	r2, r2, #8
 8004e5c:	4311      	orrs	r1, r2
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004e62:	0852      	lsrs	r2, r2, #1
 8004e64:	3a01      	subs	r2, #1
 8004e66:	0552      	lsls	r2, r2, #21
 8004e68:	4311      	orrs	r1, r2
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004e6e:	0852      	lsrs	r2, r2, #1
 8004e70:	3a01      	subs	r2, #1
 8004e72:	0652      	lsls	r2, r2, #25
 8004e74:	4311      	orrs	r1, r2
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004e7a:	06d2      	lsls	r2, r2, #27
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	4943      	ldr	r1, [pc, #268]	@ (8004f8c <HAL_RCC_OscConfig+0x618>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e84:	4b41      	ldr	r3, [pc, #260]	@ (8004f8c <HAL_RCC_OscConfig+0x618>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a40      	ldr	r2, [pc, #256]	@ (8004f8c <HAL_RCC_OscConfig+0x618>)
 8004e8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e8e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e90:	4b3e      	ldr	r3, [pc, #248]	@ (8004f8c <HAL_RCC_OscConfig+0x618>)
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	4a3d      	ldr	r2, [pc, #244]	@ (8004f8c <HAL_RCC_OscConfig+0x618>)
 8004e96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e9a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e9c:	f7fd f9e2 	bl	8002264 <HAL_GetTick>
 8004ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ea2:	e008      	b.n	8004eb6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ea4:	f7fd f9de 	bl	8002264 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d901      	bls.n	8004eb6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e066      	b.n	8004f84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004eb6:	4b35      	ldr	r3, [pc, #212]	@ (8004f8c <HAL_RCC_OscConfig+0x618>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d0f0      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x530>
 8004ec2:	e05e      	b.n	8004f82 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ec4:	4b31      	ldr	r3, [pc, #196]	@ (8004f8c <HAL_RCC_OscConfig+0x618>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a30      	ldr	r2, [pc, #192]	@ (8004f8c <HAL_RCC_OscConfig+0x618>)
 8004eca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ece:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed0:	f7fd f9c8 	bl	8002264 <HAL_GetTick>
 8004ed4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ed6:	e008      	b.n	8004eea <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ed8:	f7fd f9c4 	bl	8002264 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d901      	bls.n	8004eea <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e04c      	b.n	8004f84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004eea:	4b28      	ldr	r3, [pc, #160]	@ (8004f8c <HAL_RCC_OscConfig+0x618>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1f0      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004ef6:	4b25      	ldr	r3, [pc, #148]	@ (8004f8c <HAL_RCC_OscConfig+0x618>)
 8004ef8:	68da      	ldr	r2, [r3, #12]
 8004efa:	4924      	ldr	r1, [pc, #144]	@ (8004f8c <HAL_RCC_OscConfig+0x618>)
 8004efc:	4b25      	ldr	r3, [pc, #148]	@ (8004f94 <HAL_RCC_OscConfig+0x620>)
 8004efe:	4013      	ands	r3, r2
 8004f00:	60cb      	str	r3, [r1, #12]
 8004f02:	e03e      	b.n	8004f82 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	69db      	ldr	r3, [r3, #28]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d101      	bne.n	8004f10 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e039      	b.n	8004f84 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004f10:	4b1e      	ldr	r3, [pc, #120]	@ (8004f8c <HAL_RCC_OscConfig+0x618>)
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	f003 0203 	and.w	r2, r3, #3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a1b      	ldr	r3, [r3, #32]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d12c      	bne.n	8004f7e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d123      	bne.n	8004f7e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f40:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d11b      	bne.n	8004f7e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f50:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d113      	bne.n	8004f7e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f60:	085b      	lsrs	r3, r3, #1
 8004f62:	3b01      	subs	r3, #1
 8004f64:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d109      	bne.n	8004f7e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f74:	085b      	lsrs	r3, r3, #1
 8004f76:	3b01      	subs	r3, #1
 8004f78:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d001      	beq.n	8004f82 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e000      	b.n	8004f84 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3720      	adds	r7, #32
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	40021000 	.word	0x40021000
 8004f90:	019f800c 	.word	0x019f800c
 8004f94:	feeefffc 	.word	0xfeeefffc

08004f98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d101      	bne.n	8004fb0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e11e      	b.n	80051ee <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004fb0:	4b91      	ldr	r3, [pc, #580]	@ (80051f8 <HAL_RCC_ClockConfig+0x260>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 030f 	and.w	r3, r3, #15
 8004fb8:	683a      	ldr	r2, [r7, #0]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d910      	bls.n	8004fe0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fbe:	4b8e      	ldr	r3, [pc, #568]	@ (80051f8 <HAL_RCC_ClockConfig+0x260>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f023 020f 	bic.w	r2, r3, #15
 8004fc6:	498c      	ldr	r1, [pc, #560]	@ (80051f8 <HAL_RCC_ClockConfig+0x260>)
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fce:	4b8a      	ldr	r3, [pc, #552]	@ (80051f8 <HAL_RCC_ClockConfig+0x260>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 030f 	and.w	r3, r3, #15
 8004fd6:	683a      	ldr	r2, [r7, #0]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d001      	beq.n	8004fe0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e106      	b.n	80051ee <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0301 	and.w	r3, r3, #1
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d073      	beq.n	80050d4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	2b03      	cmp	r3, #3
 8004ff2:	d129      	bne.n	8005048 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ff4:	4b81      	ldr	r3, [pc, #516]	@ (80051fc <HAL_RCC_ClockConfig+0x264>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d101      	bne.n	8005004 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e0f4      	b.n	80051ee <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005004:	f000 f99e 	bl	8005344 <RCC_GetSysClockFreqFromPLLSource>
 8005008:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	4a7c      	ldr	r2, [pc, #496]	@ (8005200 <HAL_RCC_ClockConfig+0x268>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d93f      	bls.n	8005092 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005012:	4b7a      	ldr	r3, [pc, #488]	@ (80051fc <HAL_RCC_ClockConfig+0x264>)
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d009      	beq.n	8005032 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005026:	2b00      	cmp	r3, #0
 8005028:	d033      	beq.n	8005092 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800502e:	2b00      	cmp	r3, #0
 8005030:	d12f      	bne.n	8005092 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005032:	4b72      	ldr	r3, [pc, #456]	@ (80051fc <HAL_RCC_ClockConfig+0x264>)
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800503a:	4a70      	ldr	r2, [pc, #448]	@ (80051fc <HAL_RCC_ClockConfig+0x264>)
 800503c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005040:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005042:	2380      	movs	r3, #128	@ 0x80
 8005044:	617b      	str	r3, [r7, #20]
 8005046:	e024      	b.n	8005092 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	2b02      	cmp	r3, #2
 800504e:	d107      	bne.n	8005060 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005050:	4b6a      	ldr	r3, [pc, #424]	@ (80051fc <HAL_RCC_ClockConfig+0x264>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d109      	bne.n	8005070 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e0c6      	b.n	80051ee <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005060:	4b66      	ldr	r3, [pc, #408]	@ (80051fc <HAL_RCC_ClockConfig+0x264>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005068:	2b00      	cmp	r3, #0
 800506a:	d101      	bne.n	8005070 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e0be      	b.n	80051ee <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005070:	f000 f8ce 	bl	8005210 <HAL_RCC_GetSysClockFreq>
 8005074:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	4a61      	ldr	r2, [pc, #388]	@ (8005200 <HAL_RCC_ClockConfig+0x268>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d909      	bls.n	8005092 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800507e:	4b5f      	ldr	r3, [pc, #380]	@ (80051fc <HAL_RCC_ClockConfig+0x264>)
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005086:	4a5d      	ldr	r2, [pc, #372]	@ (80051fc <HAL_RCC_ClockConfig+0x264>)
 8005088:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800508c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800508e:	2380      	movs	r3, #128	@ 0x80
 8005090:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005092:	4b5a      	ldr	r3, [pc, #360]	@ (80051fc <HAL_RCC_ClockConfig+0x264>)
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f023 0203 	bic.w	r2, r3, #3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	4957      	ldr	r1, [pc, #348]	@ (80051fc <HAL_RCC_ClockConfig+0x264>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050a4:	f7fd f8de 	bl	8002264 <HAL_GetTick>
 80050a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050aa:	e00a      	b.n	80050c2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050ac:	f7fd f8da 	bl	8002264 <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d901      	bls.n	80050c2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e095      	b.n	80051ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050c2:	4b4e      	ldr	r3, [pc, #312]	@ (80051fc <HAL_RCC_ClockConfig+0x264>)
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f003 020c 	and.w	r2, r3, #12
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d1eb      	bne.n	80050ac <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0302 	and.w	r3, r3, #2
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d023      	beq.n	8005128 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0304 	and.w	r3, r3, #4
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d005      	beq.n	80050f8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050ec:	4b43      	ldr	r3, [pc, #268]	@ (80051fc <HAL_RCC_ClockConfig+0x264>)
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	4a42      	ldr	r2, [pc, #264]	@ (80051fc <HAL_RCC_ClockConfig+0x264>)
 80050f2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80050f6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 0308 	and.w	r3, r3, #8
 8005100:	2b00      	cmp	r3, #0
 8005102:	d007      	beq.n	8005114 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005104:	4b3d      	ldr	r3, [pc, #244]	@ (80051fc <HAL_RCC_ClockConfig+0x264>)
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800510c:	4a3b      	ldr	r2, [pc, #236]	@ (80051fc <HAL_RCC_ClockConfig+0x264>)
 800510e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005112:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005114:	4b39      	ldr	r3, [pc, #228]	@ (80051fc <HAL_RCC_ClockConfig+0x264>)
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	4936      	ldr	r1, [pc, #216]	@ (80051fc <HAL_RCC_ClockConfig+0x264>)
 8005122:	4313      	orrs	r3, r2
 8005124:	608b      	str	r3, [r1, #8]
 8005126:	e008      	b.n	800513a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	2b80      	cmp	r3, #128	@ 0x80
 800512c:	d105      	bne.n	800513a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800512e:	4b33      	ldr	r3, [pc, #204]	@ (80051fc <HAL_RCC_ClockConfig+0x264>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	4a32      	ldr	r2, [pc, #200]	@ (80051fc <HAL_RCC_ClockConfig+0x264>)
 8005134:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005138:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800513a:	4b2f      	ldr	r3, [pc, #188]	@ (80051f8 <HAL_RCC_ClockConfig+0x260>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 030f 	and.w	r3, r3, #15
 8005142:	683a      	ldr	r2, [r7, #0]
 8005144:	429a      	cmp	r2, r3
 8005146:	d21d      	bcs.n	8005184 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005148:	4b2b      	ldr	r3, [pc, #172]	@ (80051f8 <HAL_RCC_ClockConfig+0x260>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f023 020f 	bic.w	r2, r3, #15
 8005150:	4929      	ldr	r1, [pc, #164]	@ (80051f8 <HAL_RCC_ClockConfig+0x260>)
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	4313      	orrs	r3, r2
 8005156:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005158:	f7fd f884 	bl	8002264 <HAL_GetTick>
 800515c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800515e:	e00a      	b.n	8005176 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005160:	f7fd f880 	bl	8002264 <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800516e:	4293      	cmp	r3, r2
 8005170:	d901      	bls.n	8005176 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e03b      	b.n	80051ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005176:	4b20      	ldr	r3, [pc, #128]	@ (80051f8 <HAL_RCC_ClockConfig+0x260>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 030f 	and.w	r3, r3, #15
 800517e:	683a      	ldr	r2, [r7, #0]
 8005180:	429a      	cmp	r2, r3
 8005182:	d1ed      	bne.n	8005160 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0304 	and.w	r3, r3, #4
 800518c:	2b00      	cmp	r3, #0
 800518e:	d008      	beq.n	80051a2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005190:	4b1a      	ldr	r3, [pc, #104]	@ (80051fc <HAL_RCC_ClockConfig+0x264>)
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	4917      	ldr	r1, [pc, #92]	@ (80051fc <HAL_RCC_ClockConfig+0x264>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0308 	and.w	r3, r3, #8
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d009      	beq.n	80051c2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051ae:	4b13      	ldr	r3, [pc, #76]	@ (80051fc <HAL_RCC_ClockConfig+0x264>)
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	00db      	lsls	r3, r3, #3
 80051bc:	490f      	ldr	r1, [pc, #60]	@ (80051fc <HAL_RCC_ClockConfig+0x264>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80051c2:	f000 f825 	bl	8005210 <HAL_RCC_GetSysClockFreq>
 80051c6:	4602      	mov	r2, r0
 80051c8:	4b0c      	ldr	r3, [pc, #48]	@ (80051fc <HAL_RCC_ClockConfig+0x264>)
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	091b      	lsrs	r3, r3, #4
 80051ce:	f003 030f 	and.w	r3, r3, #15
 80051d2:	490c      	ldr	r1, [pc, #48]	@ (8005204 <HAL_RCC_ClockConfig+0x26c>)
 80051d4:	5ccb      	ldrb	r3, [r1, r3]
 80051d6:	f003 031f 	and.w	r3, r3, #31
 80051da:	fa22 f303 	lsr.w	r3, r2, r3
 80051de:	4a0a      	ldr	r2, [pc, #40]	@ (8005208 <HAL_RCC_ClockConfig+0x270>)
 80051e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80051e2:	4b0a      	ldr	r3, [pc, #40]	@ (800520c <HAL_RCC_ClockConfig+0x274>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7fc fff0 	bl	80021cc <HAL_InitTick>
 80051ec:	4603      	mov	r3, r0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3718      	adds	r7, #24
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	40022000 	.word	0x40022000
 80051fc:	40021000 	.word	0x40021000
 8005200:	04c4b400 	.word	0x04c4b400
 8005204:	08007cec 	.word	0x08007cec
 8005208:	2000006c 	.word	0x2000006c
 800520c:	20000070 	.word	0x20000070

08005210 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005210:	b480      	push	{r7}
 8005212:	b087      	sub	sp, #28
 8005214:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005216:	4b2c      	ldr	r3, [pc, #176]	@ (80052c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f003 030c 	and.w	r3, r3, #12
 800521e:	2b04      	cmp	r3, #4
 8005220:	d102      	bne.n	8005228 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005222:	4b2a      	ldr	r3, [pc, #168]	@ (80052cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005224:	613b      	str	r3, [r7, #16]
 8005226:	e047      	b.n	80052b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005228:	4b27      	ldr	r3, [pc, #156]	@ (80052c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f003 030c 	and.w	r3, r3, #12
 8005230:	2b08      	cmp	r3, #8
 8005232:	d102      	bne.n	800523a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005234:	4b26      	ldr	r3, [pc, #152]	@ (80052d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005236:	613b      	str	r3, [r7, #16]
 8005238:	e03e      	b.n	80052b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800523a:	4b23      	ldr	r3, [pc, #140]	@ (80052c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f003 030c 	and.w	r3, r3, #12
 8005242:	2b0c      	cmp	r3, #12
 8005244:	d136      	bne.n	80052b4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005246:	4b20      	ldr	r3, [pc, #128]	@ (80052c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	f003 0303 	and.w	r3, r3, #3
 800524e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005250:	4b1d      	ldr	r3, [pc, #116]	@ (80052c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	091b      	lsrs	r3, r3, #4
 8005256:	f003 030f 	and.w	r3, r3, #15
 800525a:	3301      	adds	r3, #1
 800525c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2b03      	cmp	r3, #3
 8005262:	d10c      	bne.n	800527e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005264:	4a1a      	ldr	r2, [pc, #104]	@ (80052d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	fbb2 f3f3 	udiv	r3, r2, r3
 800526c:	4a16      	ldr	r2, [pc, #88]	@ (80052c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800526e:	68d2      	ldr	r2, [r2, #12]
 8005270:	0a12      	lsrs	r2, r2, #8
 8005272:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005276:	fb02 f303 	mul.w	r3, r2, r3
 800527a:	617b      	str	r3, [r7, #20]
      break;
 800527c:	e00c      	b.n	8005298 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800527e:	4a13      	ldr	r2, [pc, #76]	@ (80052cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	fbb2 f3f3 	udiv	r3, r2, r3
 8005286:	4a10      	ldr	r2, [pc, #64]	@ (80052c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005288:	68d2      	ldr	r2, [r2, #12]
 800528a:	0a12      	lsrs	r2, r2, #8
 800528c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005290:	fb02 f303 	mul.w	r3, r2, r3
 8005294:	617b      	str	r3, [r7, #20]
      break;
 8005296:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005298:	4b0b      	ldr	r3, [pc, #44]	@ (80052c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	0e5b      	lsrs	r3, r3, #25
 800529e:	f003 0303 	and.w	r3, r3, #3
 80052a2:	3301      	adds	r3, #1
 80052a4:	005b      	lsls	r3, r3, #1
 80052a6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80052a8:	697a      	ldr	r2, [r7, #20]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80052b0:	613b      	str	r3, [r7, #16]
 80052b2:	e001      	b.n	80052b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80052b4:	2300      	movs	r3, #0
 80052b6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80052b8:	693b      	ldr	r3, [r7, #16]
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	371c      	adds	r7, #28
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	40021000 	.word	0x40021000
 80052cc:	00f42400 	.word	0x00f42400
 80052d0:	016e3600 	.word	0x016e3600

080052d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052d4:	b480      	push	{r7}
 80052d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052d8:	4b03      	ldr	r3, [pc, #12]	@ (80052e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80052da:	681b      	ldr	r3, [r3, #0]
}
 80052dc:	4618      	mov	r0, r3
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	2000006c 	.word	0x2000006c

080052ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80052f0:	f7ff fff0 	bl	80052d4 <HAL_RCC_GetHCLKFreq>
 80052f4:	4602      	mov	r2, r0
 80052f6:	4b06      	ldr	r3, [pc, #24]	@ (8005310 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	0a1b      	lsrs	r3, r3, #8
 80052fc:	f003 0307 	and.w	r3, r3, #7
 8005300:	4904      	ldr	r1, [pc, #16]	@ (8005314 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005302:	5ccb      	ldrb	r3, [r1, r3]
 8005304:	f003 031f 	and.w	r3, r3, #31
 8005308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800530c:	4618      	mov	r0, r3
 800530e:	bd80      	pop	{r7, pc}
 8005310:	40021000 	.word	0x40021000
 8005314:	08007cfc 	.word	0x08007cfc

08005318 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800531c:	f7ff ffda 	bl	80052d4 <HAL_RCC_GetHCLKFreq>
 8005320:	4602      	mov	r2, r0
 8005322:	4b06      	ldr	r3, [pc, #24]	@ (800533c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	0adb      	lsrs	r3, r3, #11
 8005328:	f003 0307 	and.w	r3, r3, #7
 800532c:	4904      	ldr	r1, [pc, #16]	@ (8005340 <HAL_RCC_GetPCLK2Freq+0x28>)
 800532e:	5ccb      	ldrb	r3, [r1, r3]
 8005330:	f003 031f 	and.w	r3, r3, #31
 8005334:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005338:	4618      	mov	r0, r3
 800533a:	bd80      	pop	{r7, pc}
 800533c:	40021000 	.word	0x40021000
 8005340:	08007cfc 	.word	0x08007cfc

08005344 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005344:	b480      	push	{r7}
 8005346:	b087      	sub	sp, #28
 8005348:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800534a:	4b1e      	ldr	r3, [pc, #120]	@ (80053c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	f003 0303 	and.w	r3, r3, #3
 8005352:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005354:	4b1b      	ldr	r3, [pc, #108]	@ (80053c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	091b      	lsrs	r3, r3, #4
 800535a:	f003 030f 	and.w	r3, r3, #15
 800535e:	3301      	adds	r3, #1
 8005360:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	2b03      	cmp	r3, #3
 8005366:	d10c      	bne.n	8005382 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005368:	4a17      	ldr	r2, [pc, #92]	@ (80053c8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005370:	4a14      	ldr	r2, [pc, #80]	@ (80053c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005372:	68d2      	ldr	r2, [r2, #12]
 8005374:	0a12      	lsrs	r2, r2, #8
 8005376:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800537a:	fb02 f303 	mul.w	r3, r2, r3
 800537e:	617b      	str	r3, [r7, #20]
    break;
 8005380:	e00c      	b.n	800539c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005382:	4a12      	ldr	r2, [pc, #72]	@ (80053cc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	fbb2 f3f3 	udiv	r3, r2, r3
 800538a:	4a0e      	ldr	r2, [pc, #56]	@ (80053c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800538c:	68d2      	ldr	r2, [r2, #12]
 800538e:	0a12      	lsrs	r2, r2, #8
 8005390:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005394:	fb02 f303 	mul.w	r3, r2, r3
 8005398:	617b      	str	r3, [r7, #20]
    break;
 800539a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800539c:	4b09      	ldr	r3, [pc, #36]	@ (80053c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	0e5b      	lsrs	r3, r3, #25
 80053a2:	f003 0303 	and.w	r3, r3, #3
 80053a6:	3301      	adds	r3, #1
 80053a8:	005b      	lsls	r3, r3, #1
 80053aa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80053ac:	697a      	ldr	r2, [r7, #20]
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80053b6:	687b      	ldr	r3, [r7, #4]
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	371c      	adds	r7, #28
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr
 80053c4:	40021000 	.word	0x40021000
 80053c8:	016e3600 	.word	0x016e3600
 80053cc:	00f42400 	.word	0x00f42400

080053d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b086      	sub	sp, #24
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80053d8:	2300      	movs	r3, #0
 80053da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80053dc:	2300      	movs	r3, #0
 80053de:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	f000 8098 	beq.w	800551e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053ee:	2300      	movs	r3, #0
 80053f0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053f2:	4b43      	ldr	r3, [pc, #268]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d10d      	bne.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053fe:	4b40      	ldr	r3, [pc, #256]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005402:	4a3f      	ldr	r2, [pc, #252]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005404:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005408:	6593      	str	r3, [r2, #88]	@ 0x58
 800540a:	4b3d      	ldr	r3, [pc, #244]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800540c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800540e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005412:	60bb      	str	r3, [r7, #8]
 8005414:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005416:	2301      	movs	r3, #1
 8005418:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800541a:	4b3a      	ldr	r3, [pc, #232]	@ (8005504 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a39      	ldr	r2, [pc, #228]	@ (8005504 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005420:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005424:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005426:	f7fc ff1d 	bl	8002264 <HAL_GetTick>
 800542a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800542c:	e009      	b.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800542e:	f7fc ff19 	bl	8002264 <HAL_GetTick>
 8005432:	4602      	mov	r2, r0
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	2b02      	cmp	r3, #2
 800543a:	d902      	bls.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800543c:	2303      	movs	r3, #3
 800543e:	74fb      	strb	r3, [r7, #19]
        break;
 8005440:	e005      	b.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005442:	4b30      	ldr	r3, [pc, #192]	@ (8005504 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800544a:	2b00      	cmp	r3, #0
 800544c:	d0ef      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800544e:	7cfb      	ldrb	r3, [r7, #19]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d159      	bne.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005454:	4b2a      	ldr	r3, [pc, #168]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005456:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800545a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800545e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d01e      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	429a      	cmp	r2, r3
 800546e:	d019      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005470:	4b23      	ldr	r3, [pc, #140]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005472:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005476:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800547a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800547c:	4b20      	ldr	r3, [pc, #128]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800547e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005482:	4a1f      	ldr	r2, [pc, #124]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005484:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005488:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800548c:	4b1c      	ldr	r3, [pc, #112]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800548e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005492:	4a1b      	ldr	r2, [pc, #108]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005494:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005498:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800549c:	4a18      	ldr	r2, [pc, #96]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	f003 0301 	and.w	r3, r3, #1
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d016      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ae:	f7fc fed9 	bl	8002264 <HAL_GetTick>
 80054b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054b4:	e00b      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054b6:	f7fc fed5 	bl	8002264 <HAL_GetTick>
 80054ba:	4602      	mov	r2, r0
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d902      	bls.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	74fb      	strb	r3, [r7, #19]
            break;
 80054cc:	e006      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054ce:	4b0c      	ldr	r3, [pc, #48]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054d4:	f003 0302 	and.w	r3, r3, #2
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d0ec      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80054dc:	7cfb      	ldrb	r3, [r7, #19]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10b      	bne.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054e2:	4b07      	ldr	r3, [pc, #28]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054f0:	4903      	ldr	r1, [pc, #12]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054f2:	4313      	orrs	r3, r2
 80054f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80054f8:	e008      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80054fa:	7cfb      	ldrb	r3, [r7, #19]
 80054fc:	74bb      	strb	r3, [r7, #18]
 80054fe:	e005      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005500:	40021000 	.word	0x40021000
 8005504:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005508:	7cfb      	ldrb	r3, [r7, #19]
 800550a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800550c:	7c7b      	ldrb	r3, [r7, #17]
 800550e:	2b01      	cmp	r3, #1
 8005510:	d105      	bne.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005512:	4ba7      	ldr	r3, [pc, #668]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005516:	4aa6      	ldr	r2, [pc, #664]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005518:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800551c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0301 	and.w	r3, r3, #1
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00a      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800552a:	4ba1      	ldr	r3, [pc, #644]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800552c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005530:	f023 0203 	bic.w	r2, r3, #3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	499d      	ldr	r1, [pc, #628]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800553a:	4313      	orrs	r3, r2
 800553c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0302 	and.w	r3, r3, #2
 8005548:	2b00      	cmp	r3, #0
 800554a:	d00a      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800554c:	4b98      	ldr	r3, [pc, #608]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800554e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005552:	f023 020c 	bic.w	r2, r3, #12
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	4995      	ldr	r1, [pc, #596]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800555c:	4313      	orrs	r3, r2
 800555e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0304 	and.w	r3, r3, #4
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00a      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800556e:	4b90      	ldr	r3, [pc, #576]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005570:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005574:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	498c      	ldr	r1, [pc, #560]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800557e:	4313      	orrs	r3, r2
 8005580:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0308 	and.w	r3, r3, #8
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00a      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005590:	4b87      	ldr	r3, [pc, #540]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005596:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	4984      	ldr	r1, [pc, #528]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055a0:	4313      	orrs	r3, r2
 80055a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0310 	and.w	r3, r3, #16
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00a      	beq.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80055b2:	4b7f      	ldr	r3, [pc, #508]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	695b      	ldr	r3, [r3, #20]
 80055c0:	497b      	ldr	r1, [pc, #492]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0320 	and.w	r3, r3, #32
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00a      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80055d4:	4b76      	ldr	r3, [pc, #472]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055da:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	4973      	ldr	r1, [pc, #460]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055e4:	4313      	orrs	r3, r2
 80055e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00a      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055f6:	4b6e      	ldr	r3, [pc, #440]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055fc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	69db      	ldr	r3, [r3, #28]
 8005604:	496a      	ldr	r1, [pc, #424]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005606:	4313      	orrs	r3, r2
 8005608:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005614:	2b00      	cmp	r3, #0
 8005616:	d00a      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005618:	4b65      	ldr	r3, [pc, #404]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800561a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800561e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a1b      	ldr	r3, [r3, #32]
 8005626:	4962      	ldr	r1, [pc, #392]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005628:	4313      	orrs	r3, r2
 800562a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00a      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800563a:	4b5d      	ldr	r3, [pc, #372]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800563c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005640:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005648:	4959      	ldr	r1, [pc, #356]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800564a:	4313      	orrs	r3, r2
 800564c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d00a      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800565c:	4b54      	ldr	r3, [pc, #336]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800565e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005662:	f023 0203 	bic.w	r2, r3, #3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800566a:	4951      	ldr	r1, [pc, #324]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800566c:	4313      	orrs	r3, r2
 800566e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00a      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800567e:	4b4c      	ldr	r3, [pc, #304]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005680:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005684:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800568c:	4948      	ldr	r1, [pc, #288]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800568e:	4313      	orrs	r3, r2
 8005690:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800569c:	2b00      	cmp	r3, #0
 800569e:	d015      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80056a0:	4b43      	ldr	r3, [pc, #268]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ae:	4940      	ldr	r1, [pc, #256]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056b0:	4313      	orrs	r3, r2
 80056b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056be:	d105      	bne.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056c0:	4b3b      	ldr	r3, [pc, #236]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	4a3a      	ldr	r2, [pc, #232]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056ca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d015      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80056d8:	4b35      	ldr	r3, [pc, #212]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056de:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056e6:	4932      	ldr	r1, [pc, #200]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056e8:	4313      	orrs	r3, r2
 80056ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80056f6:	d105      	bne.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056f8:	4b2d      	ldr	r3, [pc, #180]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	4a2c      	ldr	r2, [pc, #176]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005702:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d015      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005710:	4b27      	ldr	r3, [pc, #156]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005716:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800571e:	4924      	ldr	r1, [pc, #144]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005720:	4313      	orrs	r3, r2
 8005722:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800572a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800572e:	d105      	bne.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005730:	4b1f      	ldr	r3, [pc, #124]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	4a1e      	ldr	r2, [pc, #120]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005736:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800573a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d015      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005748:	4b19      	ldr	r3, [pc, #100]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800574a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800574e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005756:	4916      	ldr	r1, [pc, #88]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005758:	4313      	orrs	r3, r2
 800575a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005762:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005766:	d105      	bne.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005768:	4b11      	ldr	r3, [pc, #68]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	4a10      	ldr	r2, [pc, #64]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800576e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005772:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800577c:	2b00      	cmp	r3, #0
 800577e:	d019      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005780:	4b0b      	ldr	r3, [pc, #44]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005782:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005786:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800578e:	4908      	ldr	r1, [pc, #32]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005790:	4313      	orrs	r3, r2
 8005792:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800579a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800579e:	d109      	bne.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057a0:	4b03      	ldr	r3, [pc, #12]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	4a02      	ldr	r2, [pc, #8]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057aa:	60d3      	str	r3, [r2, #12]
 80057ac:	e002      	b.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80057ae:	bf00      	nop
 80057b0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d015      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80057c0:	4b29      	ldr	r3, [pc, #164]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057c6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ce:	4926      	ldr	r1, [pc, #152]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80057de:	d105      	bne.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80057e0:	4b21      	ldr	r3, [pc, #132]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	4a20      	ldr	r2, [pc, #128]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057ea:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d015      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80057f8:	4b1b      	ldr	r3, [pc, #108]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057fe:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005806:	4918      	ldr	r1, [pc, #96]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005808:	4313      	orrs	r3, r2
 800580a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005812:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005816:	d105      	bne.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005818:	4b13      	ldr	r3, [pc, #76]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	4a12      	ldr	r2, [pc, #72]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800581e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005822:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800582c:	2b00      	cmp	r3, #0
 800582e:	d015      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005830:	4b0d      	ldr	r3, [pc, #52]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005832:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005836:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800583e:	490a      	ldr	r1, [pc, #40]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005840:	4313      	orrs	r3, r2
 8005842:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800584a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800584e:	d105      	bne.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005850:	4b05      	ldr	r3, [pc, #20]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	4a04      	ldr	r2, [pc, #16]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005856:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800585a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800585c:	7cbb      	ldrb	r3, [r7, #18]
}
 800585e:	4618      	mov	r0, r3
 8005860:	3718      	adds	r7, #24
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	40021000 	.word	0x40021000

0800586c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d101      	bne.n	800587e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e049      	b.n	8005912 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b00      	cmp	r3, #0
 8005888:	d106      	bne.n	8005898 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f7fc fb30 	bl	8001ef8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2202      	movs	r2, #2
 800589c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	3304      	adds	r3, #4
 80058a8:	4619      	mov	r1, r3
 80058aa:	4610      	mov	r0, r2
 80058ac:	f000 fd78 	bl	80063a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3708      	adds	r7, #8
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
	...

0800591c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800591c:	b480      	push	{r7}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800592a:	b2db      	uxtb	r3, r3
 800592c:	2b01      	cmp	r3, #1
 800592e:	d001      	beq.n	8005934 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e04c      	b.n	80059ce <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2202      	movs	r2, #2
 8005938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a26      	ldr	r2, [pc, #152]	@ (80059dc <HAL_TIM_Base_Start+0xc0>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d022      	beq.n	800598c <HAL_TIM_Base_Start+0x70>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800594e:	d01d      	beq.n	800598c <HAL_TIM_Base_Start+0x70>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a22      	ldr	r2, [pc, #136]	@ (80059e0 <HAL_TIM_Base_Start+0xc4>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d018      	beq.n	800598c <HAL_TIM_Base_Start+0x70>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a21      	ldr	r2, [pc, #132]	@ (80059e4 <HAL_TIM_Base_Start+0xc8>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d013      	beq.n	800598c <HAL_TIM_Base_Start+0x70>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a1f      	ldr	r2, [pc, #124]	@ (80059e8 <HAL_TIM_Base_Start+0xcc>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d00e      	beq.n	800598c <HAL_TIM_Base_Start+0x70>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a1e      	ldr	r2, [pc, #120]	@ (80059ec <HAL_TIM_Base_Start+0xd0>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d009      	beq.n	800598c <HAL_TIM_Base_Start+0x70>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a1c      	ldr	r2, [pc, #112]	@ (80059f0 <HAL_TIM_Base_Start+0xd4>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d004      	beq.n	800598c <HAL_TIM_Base_Start+0x70>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a1b      	ldr	r2, [pc, #108]	@ (80059f4 <HAL_TIM_Base_Start+0xd8>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d115      	bne.n	80059b8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	689a      	ldr	r2, [r3, #8]
 8005992:	4b19      	ldr	r3, [pc, #100]	@ (80059f8 <HAL_TIM_Base_Start+0xdc>)
 8005994:	4013      	ands	r3, r2
 8005996:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2b06      	cmp	r3, #6
 800599c:	d015      	beq.n	80059ca <HAL_TIM_Base_Start+0xae>
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059a4:	d011      	beq.n	80059ca <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f042 0201 	orr.w	r2, r2, #1
 80059b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059b6:	e008      	b.n	80059ca <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f042 0201 	orr.w	r2, r2, #1
 80059c6:	601a      	str	r2, [r3, #0]
 80059c8:	e000      	b.n	80059cc <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3714      	adds	r7, #20
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	40012c00 	.word	0x40012c00
 80059e0:	40000400 	.word	0x40000400
 80059e4:	40000800 	.word	0x40000800
 80059e8:	40000c00 	.word	0x40000c00
 80059ec:	40013400 	.word	0x40013400
 80059f0:	40014000 	.word	0x40014000
 80059f4:	40015000 	.word	0x40015000
 80059f8:	00010007 	.word	0x00010007

080059fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d101      	bne.n	8005a0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e049      	b.n	8005aa2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d106      	bne.n	8005a28 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 f841 	bl	8005aaa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2202      	movs	r2, #2
 8005a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	3304      	adds	r3, #4
 8005a38:	4619      	mov	r1, r3
 8005a3a:	4610      	mov	r0, r2
 8005a3c:	f000 fcb0 	bl	80063a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3708      	adds	r7, #8
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}

08005aaa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005aaa:	b480      	push	{r7}
 8005aac:	b083      	sub	sp, #12
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005ab2:	bf00      	nop
 8005ab4:	370c      	adds	r7, #12
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
	...

08005ac0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d109      	bne.n	8005ae4 <HAL_TIM_PWM_Start+0x24>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	bf14      	ite	ne
 8005adc:	2301      	movne	r3, #1
 8005ade:	2300      	moveq	r3, #0
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	e03c      	b.n	8005b5e <HAL_TIM_PWM_Start+0x9e>
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	2b04      	cmp	r3, #4
 8005ae8:	d109      	bne.n	8005afe <HAL_TIM_PWM_Start+0x3e>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	bf14      	ite	ne
 8005af6:	2301      	movne	r3, #1
 8005af8:	2300      	moveq	r3, #0
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	e02f      	b.n	8005b5e <HAL_TIM_PWM_Start+0x9e>
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	2b08      	cmp	r3, #8
 8005b02:	d109      	bne.n	8005b18 <HAL_TIM_PWM_Start+0x58>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	bf14      	ite	ne
 8005b10:	2301      	movne	r3, #1
 8005b12:	2300      	moveq	r3, #0
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	e022      	b.n	8005b5e <HAL_TIM_PWM_Start+0x9e>
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	2b0c      	cmp	r3, #12
 8005b1c:	d109      	bne.n	8005b32 <HAL_TIM_PWM_Start+0x72>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	bf14      	ite	ne
 8005b2a:	2301      	movne	r3, #1
 8005b2c:	2300      	moveq	r3, #0
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	e015      	b.n	8005b5e <HAL_TIM_PWM_Start+0x9e>
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	2b10      	cmp	r3, #16
 8005b36:	d109      	bne.n	8005b4c <HAL_TIM_PWM_Start+0x8c>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	bf14      	ite	ne
 8005b44:	2301      	movne	r3, #1
 8005b46:	2300      	moveq	r3, #0
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	e008      	b.n	8005b5e <HAL_TIM_PWM_Start+0x9e>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	bf14      	ite	ne
 8005b58:	2301      	movne	r3, #1
 8005b5a:	2300      	moveq	r3, #0
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d001      	beq.n	8005b66 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e0a6      	b.n	8005cb4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d104      	bne.n	8005b76 <HAL_TIM_PWM_Start+0xb6>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2202      	movs	r2, #2
 8005b70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b74:	e023      	b.n	8005bbe <HAL_TIM_PWM_Start+0xfe>
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	2b04      	cmp	r3, #4
 8005b7a:	d104      	bne.n	8005b86 <HAL_TIM_PWM_Start+0xc6>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2202      	movs	r2, #2
 8005b80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b84:	e01b      	b.n	8005bbe <HAL_TIM_PWM_Start+0xfe>
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	2b08      	cmp	r3, #8
 8005b8a:	d104      	bne.n	8005b96 <HAL_TIM_PWM_Start+0xd6>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2202      	movs	r2, #2
 8005b90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b94:	e013      	b.n	8005bbe <HAL_TIM_PWM_Start+0xfe>
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	2b0c      	cmp	r3, #12
 8005b9a:	d104      	bne.n	8005ba6 <HAL_TIM_PWM_Start+0xe6>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2202      	movs	r2, #2
 8005ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ba4:	e00b      	b.n	8005bbe <HAL_TIM_PWM_Start+0xfe>
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	2b10      	cmp	r3, #16
 8005baa:	d104      	bne.n	8005bb6 <HAL_TIM_PWM_Start+0xf6>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2202      	movs	r2, #2
 8005bb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005bb4:	e003      	b.n	8005bbe <HAL_TIM_PWM_Start+0xfe>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2202      	movs	r2, #2
 8005bba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	6839      	ldr	r1, [r7, #0]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f001 f864 	bl	8006c94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a3a      	ldr	r2, [pc, #232]	@ (8005cbc <HAL_TIM_PWM_Start+0x1fc>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d018      	beq.n	8005c08 <HAL_TIM_PWM_Start+0x148>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a39      	ldr	r2, [pc, #228]	@ (8005cc0 <HAL_TIM_PWM_Start+0x200>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d013      	beq.n	8005c08 <HAL_TIM_PWM_Start+0x148>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a37      	ldr	r2, [pc, #220]	@ (8005cc4 <HAL_TIM_PWM_Start+0x204>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d00e      	beq.n	8005c08 <HAL_TIM_PWM_Start+0x148>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a36      	ldr	r2, [pc, #216]	@ (8005cc8 <HAL_TIM_PWM_Start+0x208>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d009      	beq.n	8005c08 <HAL_TIM_PWM_Start+0x148>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a34      	ldr	r2, [pc, #208]	@ (8005ccc <HAL_TIM_PWM_Start+0x20c>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d004      	beq.n	8005c08 <HAL_TIM_PWM_Start+0x148>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a33      	ldr	r2, [pc, #204]	@ (8005cd0 <HAL_TIM_PWM_Start+0x210>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d101      	bne.n	8005c0c <HAL_TIM_PWM_Start+0x14c>
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e000      	b.n	8005c0e <HAL_TIM_PWM_Start+0x14e>
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d007      	beq.n	8005c22 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c20:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a25      	ldr	r2, [pc, #148]	@ (8005cbc <HAL_TIM_PWM_Start+0x1fc>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d022      	beq.n	8005c72 <HAL_TIM_PWM_Start+0x1b2>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c34:	d01d      	beq.n	8005c72 <HAL_TIM_PWM_Start+0x1b2>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a26      	ldr	r2, [pc, #152]	@ (8005cd4 <HAL_TIM_PWM_Start+0x214>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d018      	beq.n	8005c72 <HAL_TIM_PWM_Start+0x1b2>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a24      	ldr	r2, [pc, #144]	@ (8005cd8 <HAL_TIM_PWM_Start+0x218>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d013      	beq.n	8005c72 <HAL_TIM_PWM_Start+0x1b2>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a23      	ldr	r2, [pc, #140]	@ (8005cdc <HAL_TIM_PWM_Start+0x21c>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d00e      	beq.n	8005c72 <HAL_TIM_PWM_Start+0x1b2>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a19      	ldr	r2, [pc, #100]	@ (8005cc0 <HAL_TIM_PWM_Start+0x200>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d009      	beq.n	8005c72 <HAL_TIM_PWM_Start+0x1b2>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a18      	ldr	r2, [pc, #96]	@ (8005cc4 <HAL_TIM_PWM_Start+0x204>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d004      	beq.n	8005c72 <HAL_TIM_PWM_Start+0x1b2>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a18      	ldr	r2, [pc, #96]	@ (8005cd0 <HAL_TIM_PWM_Start+0x210>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d115      	bne.n	8005c9e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	689a      	ldr	r2, [r3, #8]
 8005c78:	4b19      	ldr	r3, [pc, #100]	@ (8005ce0 <HAL_TIM_PWM_Start+0x220>)
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2b06      	cmp	r3, #6
 8005c82:	d015      	beq.n	8005cb0 <HAL_TIM_PWM_Start+0x1f0>
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c8a:	d011      	beq.n	8005cb0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f042 0201 	orr.w	r2, r2, #1
 8005c9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c9c:	e008      	b.n	8005cb0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f042 0201 	orr.w	r2, r2, #1
 8005cac:	601a      	str	r2, [r3, #0]
 8005cae:	e000      	b.n	8005cb2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cb0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3710      	adds	r7, #16
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	40012c00 	.word	0x40012c00
 8005cc0:	40013400 	.word	0x40013400
 8005cc4:	40014000 	.word	0x40014000
 8005cc8:	40014400 	.word	0x40014400
 8005ccc:	40014800 	.word	0x40014800
 8005cd0:	40015000 	.word	0x40015000
 8005cd4:	40000400 	.word	0x40000400
 8005cd8:	40000800 	.word	0x40000800
 8005cdc:	40000c00 	.word	0x40000c00
 8005ce0:	00010007 	.word	0x00010007

08005ce4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b086      	sub	sp, #24
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d101      	bne.n	8005cf8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e097      	b.n	8005e28 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d106      	bne.n	8005d12 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f7fc f927 	bl	8001f60 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2202      	movs	r2, #2
 8005d16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	6812      	ldr	r2, [r2, #0]
 8005d24:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005d28:	f023 0307 	bic.w	r3, r3, #7
 8005d2c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	3304      	adds	r3, #4
 8005d36:	4619      	mov	r1, r3
 8005d38:	4610      	mov	r0, r2
 8005d3a:	f000 fb31 	bl	80063a0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	699b      	ldr	r3, [r3, #24]
 8005d4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	6a1b      	ldr	r3, [r3, #32]
 8005d54:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d66:	f023 0303 	bic.w	r3, r3, #3
 8005d6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	689a      	ldr	r2, [r3, #8]
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	699b      	ldr	r3, [r3, #24]
 8005d74:	021b      	lsls	r3, r3, #8
 8005d76:	4313      	orrs	r3, r2
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005d84:	f023 030c 	bic.w	r3, r3, #12
 8005d88:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005d90:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	68da      	ldr	r2, [r3, #12]
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	69db      	ldr	r3, [r3, #28]
 8005d9e:	021b      	lsls	r3, r3, #8
 8005da0:	4313      	orrs	r3, r2
 8005da2:	693a      	ldr	r2, [r7, #16]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	011a      	lsls	r2, r3, #4
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	6a1b      	ldr	r3, [r3, #32]
 8005db2:	031b      	lsls	r3, r3, #12
 8005db4:	4313      	orrs	r3, r2
 8005db6:	693a      	ldr	r2, [r7, #16]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005dc2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005dca:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	685a      	ldr	r2, [r3, #4]
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	695b      	ldr	r3, [r3, #20]
 8005dd4:	011b      	lsls	r3, r3, #4
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	697a      	ldr	r2, [r7, #20]
 8005de4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	693a      	ldr	r2, [r7, #16]
 8005dec:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2201      	movs	r2, #1
 8005e02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3718      	adds	r7, #24
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e40:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005e48:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005e50:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e58:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d110      	bne.n	8005e82 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e60:	7bfb      	ldrb	r3, [r7, #15]
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d102      	bne.n	8005e6c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e66:	7b7b      	ldrb	r3, [r7, #13]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d001      	beq.n	8005e70 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e069      	b.n	8005f44 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2202      	movs	r2, #2
 8005e74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2202      	movs	r2, #2
 8005e7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e80:	e031      	b.n	8005ee6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	2b04      	cmp	r3, #4
 8005e86:	d110      	bne.n	8005eaa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e88:	7bbb      	ldrb	r3, [r7, #14]
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d102      	bne.n	8005e94 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e8e:	7b3b      	ldrb	r3, [r7, #12]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d001      	beq.n	8005e98 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e055      	b.n	8005f44 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2202      	movs	r2, #2
 8005e9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2202      	movs	r2, #2
 8005ea4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ea8:	e01d      	b.n	8005ee6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005eaa:	7bfb      	ldrb	r3, [r7, #15]
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d108      	bne.n	8005ec2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005eb0:	7bbb      	ldrb	r3, [r7, #14]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d105      	bne.n	8005ec2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005eb6:	7b7b      	ldrb	r3, [r7, #13]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d102      	bne.n	8005ec2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ebc:	7b3b      	ldrb	r3, [r7, #12]
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d001      	beq.n	8005ec6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e03e      	b.n	8005f44 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2202      	movs	r2, #2
 8005eca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2202      	movs	r2, #2
 8005ed2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2202      	movs	r2, #2
 8005eda:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2202      	movs	r2, #2
 8005ee2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d003      	beq.n	8005ef4 <HAL_TIM_Encoder_Start+0xc4>
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	2b04      	cmp	r3, #4
 8005ef0:	d008      	beq.n	8005f04 <HAL_TIM_Encoder_Start+0xd4>
 8005ef2:	e00f      	b.n	8005f14 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	2100      	movs	r1, #0
 8005efc:	4618      	mov	r0, r3
 8005efe:	f000 fec9 	bl	8006c94 <TIM_CCxChannelCmd>
      break;
 8005f02:	e016      	b.n	8005f32 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	2104      	movs	r1, #4
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f000 fec1 	bl	8006c94 <TIM_CCxChannelCmd>
      break;
 8005f12:	e00e      	b.n	8005f32 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	2100      	movs	r1, #0
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f000 feb9 	bl	8006c94 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2201      	movs	r2, #1
 8005f28:	2104      	movs	r1, #4
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f000 feb2 	bl	8006c94 <TIM_CCxChannelCmd>
      break;
 8005f30:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f042 0201 	orr.w	r2, r2, #1
 8005f40:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3710      	adds	r7, #16
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b086      	sub	sp, #24
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d101      	bne.n	8005f6a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f66:	2302      	movs	r3, #2
 8005f68:	e0ff      	b.n	800616a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2b14      	cmp	r3, #20
 8005f76:	f200 80f0 	bhi.w	800615a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005f7a:	a201      	add	r2, pc, #4	@ (adr r2, 8005f80 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f80:	08005fd5 	.word	0x08005fd5
 8005f84:	0800615b 	.word	0x0800615b
 8005f88:	0800615b 	.word	0x0800615b
 8005f8c:	0800615b 	.word	0x0800615b
 8005f90:	08006015 	.word	0x08006015
 8005f94:	0800615b 	.word	0x0800615b
 8005f98:	0800615b 	.word	0x0800615b
 8005f9c:	0800615b 	.word	0x0800615b
 8005fa0:	08006057 	.word	0x08006057
 8005fa4:	0800615b 	.word	0x0800615b
 8005fa8:	0800615b 	.word	0x0800615b
 8005fac:	0800615b 	.word	0x0800615b
 8005fb0:	08006097 	.word	0x08006097
 8005fb4:	0800615b 	.word	0x0800615b
 8005fb8:	0800615b 	.word	0x0800615b
 8005fbc:	0800615b 	.word	0x0800615b
 8005fc0:	080060d9 	.word	0x080060d9
 8005fc4:	0800615b 	.word	0x0800615b
 8005fc8:	0800615b 	.word	0x0800615b
 8005fcc:	0800615b 	.word	0x0800615b
 8005fd0:	08006119 	.word	0x08006119
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	68b9      	ldr	r1, [r7, #8]
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f000 fa94 	bl	8006508 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	699a      	ldr	r2, [r3, #24]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f042 0208 	orr.w	r2, r2, #8
 8005fee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	699a      	ldr	r2, [r3, #24]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f022 0204 	bic.w	r2, r2, #4
 8005ffe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	6999      	ldr	r1, [r3, #24]
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	691a      	ldr	r2, [r3, #16]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	430a      	orrs	r2, r1
 8006010:	619a      	str	r2, [r3, #24]
      break;
 8006012:	e0a5      	b.n	8006160 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68b9      	ldr	r1, [r7, #8]
 800601a:	4618      	mov	r0, r3
 800601c:	f000 fb0e 	bl	800663c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	699a      	ldr	r2, [r3, #24]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800602e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	699a      	ldr	r2, [r3, #24]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800603e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	6999      	ldr	r1, [r3, #24]
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	021a      	lsls	r2, r3, #8
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	430a      	orrs	r2, r1
 8006052:	619a      	str	r2, [r3, #24]
      break;
 8006054:	e084      	b.n	8006160 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68b9      	ldr	r1, [r7, #8]
 800605c:	4618      	mov	r0, r3
 800605e:	f000 fb81 	bl	8006764 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	69da      	ldr	r2, [r3, #28]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f042 0208 	orr.w	r2, r2, #8
 8006070:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	69da      	ldr	r2, [r3, #28]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f022 0204 	bic.w	r2, r2, #4
 8006080:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	69d9      	ldr	r1, [r3, #28]
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	691a      	ldr	r2, [r3, #16]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	430a      	orrs	r2, r1
 8006092:	61da      	str	r2, [r3, #28]
      break;
 8006094:	e064      	b.n	8006160 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68b9      	ldr	r1, [r7, #8]
 800609c:	4618      	mov	r0, r3
 800609e:	f000 fbf3 	bl	8006888 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	69da      	ldr	r2, [r3, #28]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	69da      	ldr	r2, [r3, #28]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	69d9      	ldr	r1, [r3, #28]
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	021a      	lsls	r2, r3, #8
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	430a      	orrs	r2, r1
 80060d4:	61da      	str	r2, [r3, #28]
      break;
 80060d6:	e043      	b.n	8006160 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68b9      	ldr	r1, [r7, #8]
 80060de:	4618      	mov	r0, r3
 80060e0:	f000 fc66 	bl	80069b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f042 0208 	orr.w	r2, r2, #8
 80060f2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f022 0204 	bic.w	r2, r2, #4
 8006102:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	691a      	ldr	r2, [r3, #16]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	430a      	orrs	r2, r1
 8006114:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006116:	e023      	b.n	8006160 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68b9      	ldr	r1, [r7, #8]
 800611e:	4618      	mov	r0, r3
 8006120:	f000 fcb0 	bl	8006a84 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006132:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006142:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	021a      	lsls	r2, r3, #8
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	430a      	orrs	r2, r1
 8006156:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006158:	e002      	b.n	8006160 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	75fb      	strb	r3, [r7, #23]
      break;
 800615e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2200      	movs	r2, #0
 8006164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006168:	7dfb      	ldrb	r3, [r7, #23]
}
 800616a:	4618      	mov	r0, r3
 800616c:	3718      	adds	r7, #24
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop

08006174 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800617e:	2300      	movs	r3, #0
 8006180:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006188:	2b01      	cmp	r3, #1
 800618a:	d101      	bne.n	8006190 <HAL_TIM_ConfigClockSource+0x1c>
 800618c:	2302      	movs	r3, #2
 800618e:	e0f6      	b.n	800637e <HAL_TIM_ConfigClockSource+0x20a>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2202      	movs	r2, #2
 800619c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80061ae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80061b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80061ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68ba      	ldr	r2, [r7, #8]
 80061c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a6f      	ldr	r2, [pc, #444]	@ (8006388 <HAL_TIM_ConfigClockSource+0x214>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	f000 80c1 	beq.w	8006352 <HAL_TIM_ConfigClockSource+0x1de>
 80061d0:	4a6d      	ldr	r2, [pc, #436]	@ (8006388 <HAL_TIM_ConfigClockSource+0x214>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	f200 80c6 	bhi.w	8006364 <HAL_TIM_ConfigClockSource+0x1f0>
 80061d8:	4a6c      	ldr	r2, [pc, #432]	@ (800638c <HAL_TIM_ConfigClockSource+0x218>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	f000 80b9 	beq.w	8006352 <HAL_TIM_ConfigClockSource+0x1de>
 80061e0:	4a6a      	ldr	r2, [pc, #424]	@ (800638c <HAL_TIM_ConfigClockSource+0x218>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	f200 80be 	bhi.w	8006364 <HAL_TIM_ConfigClockSource+0x1f0>
 80061e8:	4a69      	ldr	r2, [pc, #420]	@ (8006390 <HAL_TIM_ConfigClockSource+0x21c>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	f000 80b1 	beq.w	8006352 <HAL_TIM_ConfigClockSource+0x1de>
 80061f0:	4a67      	ldr	r2, [pc, #412]	@ (8006390 <HAL_TIM_ConfigClockSource+0x21c>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	f200 80b6 	bhi.w	8006364 <HAL_TIM_ConfigClockSource+0x1f0>
 80061f8:	4a66      	ldr	r2, [pc, #408]	@ (8006394 <HAL_TIM_ConfigClockSource+0x220>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	f000 80a9 	beq.w	8006352 <HAL_TIM_ConfigClockSource+0x1de>
 8006200:	4a64      	ldr	r2, [pc, #400]	@ (8006394 <HAL_TIM_ConfigClockSource+0x220>)
 8006202:	4293      	cmp	r3, r2
 8006204:	f200 80ae 	bhi.w	8006364 <HAL_TIM_ConfigClockSource+0x1f0>
 8006208:	4a63      	ldr	r2, [pc, #396]	@ (8006398 <HAL_TIM_ConfigClockSource+0x224>)
 800620a:	4293      	cmp	r3, r2
 800620c:	f000 80a1 	beq.w	8006352 <HAL_TIM_ConfigClockSource+0x1de>
 8006210:	4a61      	ldr	r2, [pc, #388]	@ (8006398 <HAL_TIM_ConfigClockSource+0x224>)
 8006212:	4293      	cmp	r3, r2
 8006214:	f200 80a6 	bhi.w	8006364 <HAL_TIM_ConfigClockSource+0x1f0>
 8006218:	4a60      	ldr	r2, [pc, #384]	@ (800639c <HAL_TIM_ConfigClockSource+0x228>)
 800621a:	4293      	cmp	r3, r2
 800621c:	f000 8099 	beq.w	8006352 <HAL_TIM_ConfigClockSource+0x1de>
 8006220:	4a5e      	ldr	r2, [pc, #376]	@ (800639c <HAL_TIM_ConfigClockSource+0x228>)
 8006222:	4293      	cmp	r3, r2
 8006224:	f200 809e 	bhi.w	8006364 <HAL_TIM_ConfigClockSource+0x1f0>
 8006228:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800622c:	f000 8091 	beq.w	8006352 <HAL_TIM_ConfigClockSource+0x1de>
 8006230:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006234:	f200 8096 	bhi.w	8006364 <HAL_TIM_ConfigClockSource+0x1f0>
 8006238:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800623c:	f000 8089 	beq.w	8006352 <HAL_TIM_ConfigClockSource+0x1de>
 8006240:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006244:	f200 808e 	bhi.w	8006364 <HAL_TIM_ConfigClockSource+0x1f0>
 8006248:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800624c:	d03e      	beq.n	80062cc <HAL_TIM_ConfigClockSource+0x158>
 800624e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006252:	f200 8087 	bhi.w	8006364 <HAL_TIM_ConfigClockSource+0x1f0>
 8006256:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800625a:	f000 8086 	beq.w	800636a <HAL_TIM_ConfigClockSource+0x1f6>
 800625e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006262:	d87f      	bhi.n	8006364 <HAL_TIM_ConfigClockSource+0x1f0>
 8006264:	2b70      	cmp	r3, #112	@ 0x70
 8006266:	d01a      	beq.n	800629e <HAL_TIM_ConfigClockSource+0x12a>
 8006268:	2b70      	cmp	r3, #112	@ 0x70
 800626a:	d87b      	bhi.n	8006364 <HAL_TIM_ConfigClockSource+0x1f0>
 800626c:	2b60      	cmp	r3, #96	@ 0x60
 800626e:	d050      	beq.n	8006312 <HAL_TIM_ConfigClockSource+0x19e>
 8006270:	2b60      	cmp	r3, #96	@ 0x60
 8006272:	d877      	bhi.n	8006364 <HAL_TIM_ConfigClockSource+0x1f0>
 8006274:	2b50      	cmp	r3, #80	@ 0x50
 8006276:	d03c      	beq.n	80062f2 <HAL_TIM_ConfigClockSource+0x17e>
 8006278:	2b50      	cmp	r3, #80	@ 0x50
 800627a:	d873      	bhi.n	8006364 <HAL_TIM_ConfigClockSource+0x1f0>
 800627c:	2b40      	cmp	r3, #64	@ 0x40
 800627e:	d058      	beq.n	8006332 <HAL_TIM_ConfigClockSource+0x1be>
 8006280:	2b40      	cmp	r3, #64	@ 0x40
 8006282:	d86f      	bhi.n	8006364 <HAL_TIM_ConfigClockSource+0x1f0>
 8006284:	2b30      	cmp	r3, #48	@ 0x30
 8006286:	d064      	beq.n	8006352 <HAL_TIM_ConfigClockSource+0x1de>
 8006288:	2b30      	cmp	r3, #48	@ 0x30
 800628a:	d86b      	bhi.n	8006364 <HAL_TIM_ConfigClockSource+0x1f0>
 800628c:	2b20      	cmp	r3, #32
 800628e:	d060      	beq.n	8006352 <HAL_TIM_ConfigClockSource+0x1de>
 8006290:	2b20      	cmp	r3, #32
 8006292:	d867      	bhi.n	8006364 <HAL_TIM_ConfigClockSource+0x1f0>
 8006294:	2b00      	cmp	r3, #0
 8006296:	d05c      	beq.n	8006352 <HAL_TIM_ConfigClockSource+0x1de>
 8006298:	2b10      	cmp	r3, #16
 800629a:	d05a      	beq.n	8006352 <HAL_TIM_ConfigClockSource+0x1de>
 800629c:	e062      	b.n	8006364 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062ae:	f000 fcd1 	bl	8006c54 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80062c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68ba      	ldr	r2, [r7, #8]
 80062c8:	609a      	str	r2, [r3, #8]
      break;
 80062ca:	e04f      	b.n	800636c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062dc:	f000 fcba 	bl	8006c54 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	689a      	ldr	r2, [r3, #8]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80062ee:	609a      	str	r2, [r3, #8]
      break;
 80062f0:	e03c      	b.n	800636c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062fe:	461a      	mov	r2, r3
 8006300:	f000 fc2c 	bl	8006b5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2150      	movs	r1, #80	@ 0x50
 800630a:	4618      	mov	r0, r3
 800630c:	f000 fc85 	bl	8006c1a <TIM_ITRx_SetConfig>
      break;
 8006310:	e02c      	b.n	800636c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800631e:	461a      	mov	r2, r3
 8006320:	f000 fc4b 	bl	8006bba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2160      	movs	r1, #96	@ 0x60
 800632a:	4618      	mov	r0, r3
 800632c:	f000 fc75 	bl	8006c1a <TIM_ITRx_SetConfig>
      break;
 8006330:	e01c      	b.n	800636c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800633e:	461a      	mov	r2, r3
 8006340:	f000 fc0c 	bl	8006b5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2140      	movs	r1, #64	@ 0x40
 800634a:	4618      	mov	r0, r3
 800634c:	f000 fc65 	bl	8006c1a <TIM_ITRx_SetConfig>
      break;
 8006350:	e00c      	b.n	800636c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4619      	mov	r1, r3
 800635c:	4610      	mov	r0, r2
 800635e:	f000 fc5c 	bl	8006c1a <TIM_ITRx_SetConfig>
      break;
 8006362:	e003      	b.n	800636c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	73fb      	strb	r3, [r7, #15]
      break;
 8006368:	e000      	b.n	800636c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800636a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800637c:	7bfb      	ldrb	r3, [r7, #15]
}
 800637e:	4618      	mov	r0, r3
 8006380:	3710      	adds	r7, #16
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	00100070 	.word	0x00100070
 800638c:	00100060 	.word	0x00100060
 8006390:	00100050 	.word	0x00100050
 8006394:	00100040 	.word	0x00100040
 8006398:	00100030 	.word	0x00100030
 800639c:	00100020 	.word	0x00100020

080063a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b085      	sub	sp, #20
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a4c      	ldr	r2, [pc, #304]	@ (80064e4 <TIM_Base_SetConfig+0x144>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d017      	beq.n	80063e8 <TIM_Base_SetConfig+0x48>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063be:	d013      	beq.n	80063e8 <TIM_Base_SetConfig+0x48>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a49      	ldr	r2, [pc, #292]	@ (80064e8 <TIM_Base_SetConfig+0x148>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d00f      	beq.n	80063e8 <TIM_Base_SetConfig+0x48>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	4a48      	ldr	r2, [pc, #288]	@ (80064ec <TIM_Base_SetConfig+0x14c>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d00b      	beq.n	80063e8 <TIM_Base_SetConfig+0x48>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a47      	ldr	r2, [pc, #284]	@ (80064f0 <TIM_Base_SetConfig+0x150>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d007      	beq.n	80063e8 <TIM_Base_SetConfig+0x48>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4a46      	ldr	r2, [pc, #280]	@ (80064f4 <TIM_Base_SetConfig+0x154>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d003      	beq.n	80063e8 <TIM_Base_SetConfig+0x48>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a45      	ldr	r2, [pc, #276]	@ (80064f8 <TIM_Base_SetConfig+0x158>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d108      	bne.n	80063fa <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a39      	ldr	r2, [pc, #228]	@ (80064e4 <TIM_Base_SetConfig+0x144>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d023      	beq.n	800644a <TIM_Base_SetConfig+0xaa>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006408:	d01f      	beq.n	800644a <TIM_Base_SetConfig+0xaa>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a36      	ldr	r2, [pc, #216]	@ (80064e8 <TIM_Base_SetConfig+0x148>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d01b      	beq.n	800644a <TIM_Base_SetConfig+0xaa>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a35      	ldr	r2, [pc, #212]	@ (80064ec <TIM_Base_SetConfig+0x14c>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d017      	beq.n	800644a <TIM_Base_SetConfig+0xaa>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a34      	ldr	r2, [pc, #208]	@ (80064f0 <TIM_Base_SetConfig+0x150>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d013      	beq.n	800644a <TIM_Base_SetConfig+0xaa>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a33      	ldr	r2, [pc, #204]	@ (80064f4 <TIM_Base_SetConfig+0x154>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d00f      	beq.n	800644a <TIM_Base_SetConfig+0xaa>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a33      	ldr	r2, [pc, #204]	@ (80064fc <TIM_Base_SetConfig+0x15c>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d00b      	beq.n	800644a <TIM_Base_SetConfig+0xaa>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a32      	ldr	r2, [pc, #200]	@ (8006500 <TIM_Base_SetConfig+0x160>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d007      	beq.n	800644a <TIM_Base_SetConfig+0xaa>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a31      	ldr	r2, [pc, #196]	@ (8006504 <TIM_Base_SetConfig+0x164>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d003      	beq.n	800644a <TIM_Base_SetConfig+0xaa>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a2c      	ldr	r2, [pc, #176]	@ (80064f8 <TIM_Base_SetConfig+0x158>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d108      	bne.n	800645c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006450:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	4313      	orrs	r3, r2
 800645a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	4313      	orrs	r3, r2
 8006468:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	689a      	ldr	r2, [r3, #8]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a18      	ldr	r2, [pc, #96]	@ (80064e4 <TIM_Base_SetConfig+0x144>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d013      	beq.n	80064b0 <TIM_Base_SetConfig+0x110>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4a1a      	ldr	r2, [pc, #104]	@ (80064f4 <TIM_Base_SetConfig+0x154>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d00f      	beq.n	80064b0 <TIM_Base_SetConfig+0x110>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a1a      	ldr	r2, [pc, #104]	@ (80064fc <TIM_Base_SetConfig+0x15c>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d00b      	beq.n	80064b0 <TIM_Base_SetConfig+0x110>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a19      	ldr	r2, [pc, #100]	@ (8006500 <TIM_Base_SetConfig+0x160>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d007      	beq.n	80064b0 <TIM_Base_SetConfig+0x110>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a18      	ldr	r2, [pc, #96]	@ (8006504 <TIM_Base_SetConfig+0x164>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d003      	beq.n	80064b0 <TIM_Base_SetConfig+0x110>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a13      	ldr	r2, [pc, #76]	@ (80064f8 <TIM_Base_SetConfig+0x158>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d103      	bne.n	80064b8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	691a      	ldr	r2, [r3, #16]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	691b      	ldr	r3, [r3, #16]
 80064c2:	f003 0301 	and.w	r3, r3, #1
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d105      	bne.n	80064d6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	f023 0201 	bic.w	r2, r3, #1
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	611a      	str	r2, [r3, #16]
  }
}
 80064d6:	bf00      	nop
 80064d8:	3714      	adds	r7, #20
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	40012c00 	.word	0x40012c00
 80064e8:	40000400 	.word	0x40000400
 80064ec:	40000800 	.word	0x40000800
 80064f0:	40000c00 	.word	0x40000c00
 80064f4:	40013400 	.word	0x40013400
 80064f8:	40015000 	.word	0x40015000
 80064fc:	40014000 	.word	0x40014000
 8006500:	40014400 	.word	0x40014400
 8006504:	40014800 	.word	0x40014800

08006508 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006508:	b480      	push	{r7}
 800650a:	b087      	sub	sp, #28
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a1b      	ldr	r3, [r3, #32]
 8006516:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6a1b      	ldr	r3, [r3, #32]
 800651c:	f023 0201 	bic.w	r2, r3, #1
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	699b      	ldr	r3, [r3, #24]
 800652e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006536:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800653a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f023 0303 	bic.w	r3, r3, #3
 8006542:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	4313      	orrs	r3, r2
 800654c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	f023 0302 	bic.w	r3, r3, #2
 8006554:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	697a      	ldr	r2, [r7, #20]
 800655c:	4313      	orrs	r3, r2
 800655e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a30      	ldr	r2, [pc, #192]	@ (8006624 <TIM_OC1_SetConfig+0x11c>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d013      	beq.n	8006590 <TIM_OC1_SetConfig+0x88>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a2f      	ldr	r2, [pc, #188]	@ (8006628 <TIM_OC1_SetConfig+0x120>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d00f      	beq.n	8006590 <TIM_OC1_SetConfig+0x88>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a2e      	ldr	r2, [pc, #184]	@ (800662c <TIM_OC1_SetConfig+0x124>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d00b      	beq.n	8006590 <TIM_OC1_SetConfig+0x88>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a2d      	ldr	r2, [pc, #180]	@ (8006630 <TIM_OC1_SetConfig+0x128>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d007      	beq.n	8006590 <TIM_OC1_SetConfig+0x88>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a2c      	ldr	r2, [pc, #176]	@ (8006634 <TIM_OC1_SetConfig+0x12c>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d003      	beq.n	8006590 <TIM_OC1_SetConfig+0x88>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a2b      	ldr	r2, [pc, #172]	@ (8006638 <TIM_OC1_SetConfig+0x130>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d10c      	bne.n	80065aa <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	f023 0308 	bic.w	r3, r3, #8
 8006596:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	697a      	ldr	r2, [r7, #20]
 800659e:	4313      	orrs	r3, r2
 80065a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	f023 0304 	bic.w	r3, r3, #4
 80065a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4a1d      	ldr	r2, [pc, #116]	@ (8006624 <TIM_OC1_SetConfig+0x11c>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d013      	beq.n	80065da <TIM_OC1_SetConfig+0xd2>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a1c      	ldr	r2, [pc, #112]	@ (8006628 <TIM_OC1_SetConfig+0x120>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d00f      	beq.n	80065da <TIM_OC1_SetConfig+0xd2>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a1b      	ldr	r2, [pc, #108]	@ (800662c <TIM_OC1_SetConfig+0x124>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d00b      	beq.n	80065da <TIM_OC1_SetConfig+0xd2>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a1a      	ldr	r2, [pc, #104]	@ (8006630 <TIM_OC1_SetConfig+0x128>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d007      	beq.n	80065da <TIM_OC1_SetConfig+0xd2>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a19      	ldr	r2, [pc, #100]	@ (8006634 <TIM_OC1_SetConfig+0x12c>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d003      	beq.n	80065da <TIM_OC1_SetConfig+0xd2>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a18      	ldr	r2, [pc, #96]	@ (8006638 <TIM_OC1_SetConfig+0x130>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d111      	bne.n	80065fe <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80065e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	693a      	ldr	r2, [r7, #16]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	699b      	ldr	r3, [r3, #24]
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	693a      	ldr	r2, [r7, #16]
 8006602:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	68fa      	ldr	r2, [r7, #12]
 8006608:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	685a      	ldr	r2, [r3, #4]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	697a      	ldr	r2, [r7, #20]
 8006616:	621a      	str	r2, [r3, #32]
}
 8006618:	bf00      	nop
 800661a:	371c      	adds	r7, #28
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr
 8006624:	40012c00 	.word	0x40012c00
 8006628:	40013400 	.word	0x40013400
 800662c:	40014000 	.word	0x40014000
 8006630:	40014400 	.word	0x40014400
 8006634:	40014800 	.word	0x40014800
 8006638:	40015000 	.word	0x40015000

0800663c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800663c:	b480      	push	{r7}
 800663e:	b087      	sub	sp, #28
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a1b      	ldr	r3, [r3, #32]
 800664a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6a1b      	ldr	r3, [r3, #32]
 8006650:	f023 0210 	bic.w	r2, r3, #16
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	699b      	ldr	r3, [r3, #24]
 8006662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800666a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800666e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006676:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	021b      	lsls	r3, r3, #8
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	4313      	orrs	r3, r2
 8006682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	f023 0320 	bic.w	r3, r3, #32
 800668a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	011b      	lsls	r3, r3, #4
 8006692:	697a      	ldr	r2, [r7, #20]
 8006694:	4313      	orrs	r3, r2
 8006696:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4a2c      	ldr	r2, [pc, #176]	@ (800674c <TIM_OC2_SetConfig+0x110>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d007      	beq.n	80066b0 <TIM_OC2_SetConfig+0x74>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4a2b      	ldr	r2, [pc, #172]	@ (8006750 <TIM_OC2_SetConfig+0x114>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d003      	beq.n	80066b0 <TIM_OC2_SetConfig+0x74>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4a2a      	ldr	r2, [pc, #168]	@ (8006754 <TIM_OC2_SetConfig+0x118>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d10d      	bne.n	80066cc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	011b      	lsls	r3, r3, #4
 80066be:	697a      	ldr	r2, [r7, #20]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a1f      	ldr	r2, [pc, #124]	@ (800674c <TIM_OC2_SetConfig+0x110>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d013      	beq.n	80066fc <TIM_OC2_SetConfig+0xc0>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a1e      	ldr	r2, [pc, #120]	@ (8006750 <TIM_OC2_SetConfig+0x114>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d00f      	beq.n	80066fc <TIM_OC2_SetConfig+0xc0>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a1e      	ldr	r2, [pc, #120]	@ (8006758 <TIM_OC2_SetConfig+0x11c>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d00b      	beq.n	80066fc <TIM_OC2_SetConfig+0xc0>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a1d      	ldr	r2, [pc, #116]	@ (800675c <TIM_OC2_SetConfig+0x120>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d007      	beq.n	80066fc <TIM_OC2_SetConfig+0xc0>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4a1c      	ldr	r2, [pc, #112]	@ (8006760 <TIM_OC2_SetConfig+0x124>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d003      	beq.n	80066fc <TIM_OC2_SetConfig+0xc0>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4a17      	ldr	r2, [pc, #92]	@ (8006754 <TIM_OC2_SetConfig+0x118>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d113      	bne.n	8006724 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006702:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800670a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	695b      	ldr	r3, [r3, #20]
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	693a      	ldr	r2, [r7, #16]
 8006714:	4313      	orrs	r3, r2
 8006716:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	699b      	ldr	r3, [r3, #24]
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	693a      	ldr	r2, [r7, #16]
 8006720:	4313      	orrs	r3, r2
 8006722:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	693a      	ldr	r2, [r7, #16]
 8006728:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	685a      	ldr	r2, [r3, #4]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	697a      	ldr	r2, [r7, #20]
 800673c:	621a      	str	r2, [r3, #32]
}
 800673e:	bf00      	nop
 8006740:	371c      	adds	r7, #28
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr
 800674a:	bf00      	nop
 800674c:	40012c00 	.word	0x40012c00
 8006750:	40013400 	.word	0x40013400
 8006754:	40015000 	.word	0x40015000
 8006758:	40014000 	.word	0x40014000
 800675c:	40014400 	.word	0x40014400
 8006760:	40014800 	.word	0x40014800

08006764 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006764:	b480      	push	{r7}
 8006766:	b087      	sub	sp, #28
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a1b      	ldr	r3, [r3, #32]
 8006772:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a1b      	ldr	r3, [r3, #32]
 8006778:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	69db      	ldr	r3, [r3, #28]
 800678a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006792:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f023 0303 	bic.w	r3, r3, #3
 800679e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80067b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	021b      	lsls	r3, r3, #8
 80067b8:	697a      	ldr	r2, [r7, #20]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4a2b      	ldr	r2, [pc, #172]	@ (8006870 <TIM_OC3_SetConfig+0x10c>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d007      	beq.n	80067d6 <TIM_OC3_SetConfig+0x72>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a2a      	ldr	r2, [pc, #168]	@ (8006874 <TIM_OC3_SetConfig+0x110>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d003      	beq.n	80067d6 <TIM_OC3_SetConfig+0x72>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4a29      	ldr	r2, [pc, #164]	@ (8006878 <TIM_OC3_SetConfig+0x114>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d10d      	bne.n	80067f2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80067dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	021b      	lsls	r3, r3, #8
 80067e4:	697a      	ldr	r2, [r7, #20]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80067f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4a1e      	ldr	r2, [pc, #120]	@ (8006870 <TIM_OC3_SetConfig+0x10c>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d013      	beq.n	8006822 <TIM_OC3_SetConfig+0xbe>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a1d      	ldr	r2, [pc, #116]	@ (8006874 <TIM_OC3_SetConfig+0x110>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d00f      	beq.n	8006822 <TIM_OC3_SetConfig+0xbe>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a1d      	ldr	r2, [pc, #116]	@ (800687c <TIM_OC3_SetConfig+0x118>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d00b      	beq.n	8006822 <TIM_OC3_SetConfig+0xbe>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a1c      	ldr	r2, [pc, #112]	@ (8006880 <TIM_OC3_SetConfig+0x11c>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d007      	beq.n	8006822 <TIM_OC3_SetConfig+0xbe>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a1b      	ldr	r2, [pc, #108]	@ (8006884 <TIM_OC3_SetConfig+0x120>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d003      	beq.n	8006822 <TIM_OC3_SetConfig+0xbe>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a16      	ldr	r2, [pc, #88]	@ (8006878 <TIM_OC3_SetConfig+0x114>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d113      	bne.n	800684a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006828:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006830:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	695b      	ldr	r3, [r3, #20]
 8006836:	011b      	lsls	r3, r3, #4
 8006838:	693a      	ldr	r2, [r7, #16]
 800683a:	4313      	orrs	r3, r2
 800683c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	699b      	ldr	r3, [r3, #24]
 8006842:	011b      	lsls	r3, r3, #4
 8006844:	693a      	ldr	r2, [r7, #16]
 8006846:	4313      	orrs	r3, r2
 8006848:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	693a      	ldr	r2, [r7, #16]
 800684e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	685a      	ldr	r2, [r3, #4]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	697a      	ldr	r2, [r7, #20]
 8006862:	621a      	str	r2, [r3, #32]
}
 8006864:	bf00      	nop
 8006866:	371c      	adds	r7, #28
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr
 8006870:	40012c00 	.word	0x40012c00
 8006874:	40013400 	.word	0x40013400
 8006878:	40015000 	.word	0x40015000
 800687c:	40014000 	.word	0x40014000
 8006880:	40014400 	.word	0x40014400
 8006884:	40014800 	.word	0x40014800

08006888 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006888:	b480      	push	{r7}
 800688a:	b087      	sub	sp, #28
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a1b      	ldr	r3, [r3, #32]
 8006896:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6a1b      	ldr	r3, [r3, #32]
 800689c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	69db      	ldr	r3, [r3, #28]
 80068ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80068b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	021b      	lsls	r3, r3, #8
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80068d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	031b      	lsls	r3, r3, #12
 80068de:	697a      	ldr	r2, [r7, #20]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a2c      	ldr	r2, [pc, #176]	@ (8006998 <TIM_OC4_SetConfig+0x110>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d007      	beq.n	80068fc <TIM_OC4_SetConfig+0x74>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	4a2b      	ldr	r2, [pc, #172]	@ (800699c <TIM_OC4_SetConfig+0x114>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d003      	beq.n	80068fc <TIM_OC4_SetConfig+0x74>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4a2a      	ldr	r2, [pc, #168]	@ (80069a0 <TIM_OC4_SetConfig+0x118>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d10d      	bne.n	8006918 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006902:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	031b      	lsls	r3, r3, #12
 800690a:	697a      	ldr	r2, [r7, #20]
 800690c:	4313      	orrs	r3, r2
 800690e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006916:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a1f      	ldr	r2, [pc, #124]	@ (8006998 <TIM_OC4_SetConfig+0x110>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d013      	beq.n	8006948 <TIM_OC4_SetConfig+0xc0>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a1e      	ldr	r2, [pc, #120]	@ (800699c <TIM_OC4_SetConfig+0x114>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d00f      	beq.n	8006948 <TIM_OC4_SetConfig+0xc0>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4a1e      	ldr	r2, [pc, #120]	@ (80069a4 <TIM_OC4_SetConfig+0x11c>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d00b      	beq.n	8006948 <TIM_OC4_SetConfig+0xc0>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a1d      	ldr	r2, [pc, #116]	@ (80069a8 <TIM_OC4_SetConfig+0x120>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d007      	beq.n	8006948 <TIM_OC4_SetConfig+0xc0>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a1c      	ldr	r2, [pc, #112]	@ (80069ac <TIM_OC4_SetConfig+0x124>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d003      	beq.n	8006948 <TIM_OC4_SetConfig+0xc0>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4a17      	ldr	r2, [pc, #92]	@ (80069a0 <TIM_OC4_SetConfig+0x118>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d113      	bne.n	8006970 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800694e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006956:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	695b      	ldr	r3, [r3, #20]
 800695c:	019b      	lsls	r3, r3, #6
 800695e:	693a      	ldr	r2, [r7, #16]
 8006960:	4313      	orrs	r3, r2
 8006962:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	699b      	ldr	r3, [r3, #24]
 8006968:	019b      	lsls	r3, r3, #6
 800696a:	693a      	ldr	r2, [r7, #16]
 800696c:	4313      	orrs	r3, r2
 800696e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	693a      	ldr	r2, [r7, #16]
 8006974:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	685a      	ldr	r2, [r3, #4]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	697a      	ldr	r2, [r7, #20]
 8006988:	621a      	str	r2, [r3, #32]
}
 800698a:	bf00      	nop
 800698c:	371c      	adds	r7, #28
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop
 8006998:	40012c00 	.word	0x40012c00
 800699c:	40013400 	.word	0x40013400
 80069a0:	40015000 	.word	0x40015000
 80069a4:	40014000 	.word	0x40014000
 80069a8:	40014400 	.word	0x40014400
 80069ac:	40014800 	.word	0x40014800

080069b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b087      	sub	sp, #28
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a1b      	ldr	r3, [r3, #32]
 80069be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6a1b      	ldr	r3, [r3, #32]
 80069c4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80069f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	041b      	lsls	r3, r3, #16
 80069fc:	693a      	ldr	r2, [r7, #16]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4a19      	ldr	r2, [pc, #100]	@ (8006a6c <TIM_OC5_SetConfig+0xbc>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d013      	beq.n	8006a32 <TIM_OC5_SetConfig+0x82>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a18      	ldr	r2, [pc, #96]	@ (8006a70 <TIM_OC5_SetConfig+0xc0>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d00f      	beq.n	8006a32 <TIM_OC5_SetConfig+0x82>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4a17      	ldr	r2, [pc, #92]	@ (8006a74 <TIM_OC5_SetConfig+0xc4>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d00b      	beq.n	8006a32 <TIM_OC5_SetConfig+0x82>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4a16      	ldr	r2, [pc, #88]	@ (8006a78 <TIM_OC5_SetConfig+0xc8>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d007      	beq.n	8006a32 <TIM_OC5_SetConfig+0x82>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4a15      	ldr	r2, [pc, #84]	@ (8006a7c <TIM_OC5_SetConfig+0xcc>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d003      	beq.n	8006a32 <TIM_OC5_SetConfig+0x82>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4a14      	ldr	r2, [pc, #80]	@ (8006a80 <TIM_OC5_SetConfig+0xd0>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d109      	bne.n	8006a46 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a38:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	695b      	ldr	r3, [r3, #20]
 8006a3e:	021b      	lsls	r3, r3, #8
 8006a40:	697a      	ldr	r2, [r7, #20]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	697a      	ldr	r2, [r7, #20]
 8006a4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	68fa      	ldr	r2, [r7, #12]
 8006a50:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	685a      	ldr	r2, [r3, #4]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	693a      	ldr	r2, [r7, #16]
 8006a5e:	621a      	str	r2, [r3, #32]
}
 8006a60:	bf00      	nop
 8006a62:	371c      	adds	r7, #28
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr
 8006a6c:	40012c00 	.word	0x40012c00
 8006a70:	40013400 	.word	0x40013400
 8006a74:	40014000 	.word	0x40014000
 8006a78:	40014400 	.word	0x40014400
 8006a7c:	40014800 	.word	0x40014800
 8006a80:	40015000 	.word	0x40015000

08006a84 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b087      	sub	sp, #28
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a1b      	ldr	r3, [r3, #32]
 8006a92:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6a1b      	ldr	r3, [r3, #32]
 8006a98:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ab2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ab6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	021b      	lsls	r3, r3, #8
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006aca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	051b      	lsls	r3, r3, #20
 8006ad2:	693a      	ldr	r2, [r7, #16]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a1a      	ldr	r2, [pc, #104]	@ (8006b44 <TIM_OC6_SetConfig+0xc0>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d013      	beq.n	8006b08 <TIM_OC6_SetConfig+0x84>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a19      	ldr	r2, [pc, #100]	@ (8006b48 <TIM_OC6_SetConfig+0xc4>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d00f      	beq.n	8006b08 <TIM_OC6_SetConfig+0x84>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	4a18      	ldr	r2, [pc, #96]	@ (8006b4c <TIM_OC6_SetConfig+0xc8>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d00b      	beq.n	8006b08 <TIM_OC6_SetConfig+0x84>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4a17      	ldr	r2, [pc, #92]	@ (8006b50 <TIM_OC6_SetConfig+0xcc>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d007      	beq.n	8006b08 <TIM_OC6_SetConfig+0x84>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	4a16      	ldr	r2, [pc, #88]	@ (8006b54 <TIM_OC6_SetConfig+0xd0>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d003      	beq.n	8006b08 <TIM_OC6_SetConfig+0x84>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4a15      	ldr	r2, [pc, #84]	@ (8006b58 <TIM_OC6_SetConfig+0xd4>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d109      	bne.n	8006b1c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006b0e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	695b      	ldr	r3, [r3, #20]
 8006b14:	029b      	lsls	r3, r3, #10
 8006b16:	697a      	ldr	r2, [r7, #20]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	697a      	ldr	r2, [r7, #20]
 8006b20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	68fa      	ldr	r2, [r7, #12]
 8006b26:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	685a      	ldr	r2, [r3, #4]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	693a      	ldr	r2, [r7, #16]
 8006b34:	621a      	str	r2, [r3, #32]
}
 8006b36:	bf00      	nop
 8006b38:	371c      	adds	r7, #28
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr
 8006b42:	bf00      	nop
 8006b44:	40012c00 	.word	0x40012c00
 8006b48:	40013400 	.word	0x40013400
 8006b4c:	40014000 	.word	0x40014000
 8006b50:	40014400 	.word	0x40014400
 8006b54:	40014800 	.word	0x40014800
 8006b58:	40015000 	.word	0x40015000

08006b5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b087      	sub	sp, #28
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6a1b      	ldr	r3, [r3, #32]
 8006b6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6a1b      	ldr	r3, [r3, #32]
 8006b72:	f023 0201 	bic.w	r2, r3, #1
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	699b      	ldr	r3, [r3, #24]
 8006b7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	011b      	lsls	r3, r3, #4
 8006b8c:	693a      	ldr	r2, [r7, #16]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	f023 030a 	bic.w	r3, r3, #10
 8006b98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b9a:	697a      	ldr	r2, [r7, #20]
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	693a      	ldr	r2, [r7, #16]
 8006ba6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	697a      	ldr	r2, [r7, #20]
 8006bac:	621a      	str	r2, [r3, #32]
}
 8006bae:	bf00      	nop
 8006bb0:	371c      	adds	r7, #28
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr

08006bba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bba:	b480      	push	{r7}
 8006bbc:	b087      	sub	sp, #28
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	60f8      	str	r0, [r7, #12]
 8006bc2:	60b9      	str	r1, [r7, #8]
 8006bc4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
 8006bca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6a1b      	ldr	r3, [r3, #32]
 8006bd0:	f023 0210 	bic.w	r2, r3, #16
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	699b      	ldr	r3, [r3, #24]
 8006bdc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006be4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	031b      	lsls	r3, r3, #12
 8006bea:	693a      	ldr	r2, [r7, #16]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006bf6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	011b      	lsls	r3, r3, #4
 8006bfc:	697a      	ldr	r2, [r7, #20]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	693a      	ldr	r2, [r7, #16]
 8006c06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	697a      	ldr	r2, [r7, #20]
 8006c0c:	621a      	str	r2, [r3, #32]
}
 8006c0e:	bf00      	nop
 8006c10:	371c      	adds	r7, #28
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr

08006c1a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c1a:	b480      	push	{r7}
 8006c1c:	b085      	sub	sp, #20
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
 8006c22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006c30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c36:	683a      	ldr	r2, [r7, #0]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	f043 0307 	orr.w	r3, r3, #7
 8006c40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	609a      	str	r2, [r3, #8]
}
 8006c48:	bf00      	nop
 8006c4a:	3714      	adds	r7, #20
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b087      	sub	sp, #28
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	607a      	str	r2, [r7, #4]
 8006c60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	021a      	lsls	r2, r3, #8
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	431a      	orrs	r2, r3
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	697a      	ldr	r2, [r7, #20]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	697a      	ldr	r2, [r7, #20]
 8006c86:	609a      	str	r2, [r3, #8]
}
 8006c88:	bf00      	nop
 8006c8a:	371c      	adds	r7, #28
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b087      	sub	sp, #28
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	f003 031f 	and.w	r3, r3, #31
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8006cac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6a1a      	ldr	r2, [r3, #32]
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	43db      	mvns	r3, r3
 8006cb6:	401a      	ands	r2, r3
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6a1a      	ldr	r2, [r3, #32]
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	f003 031f 	and.w	r3, r3, #31
 8006cc6:	6879      	ldr	r1, [r7, #4]
 8006cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8006ccc:	431a      	orrs	r2, r3
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	621a      	str	r2, [r3, #32]
}
 8006cd2:	bf00      	nop
 8006cd4:	371c      	adds	r7, #28
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr
	...

08006ce0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b085      	sub	sp, #20
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d101      	bne.n	8006cf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006cf4:	2302      	movs	r3, #2
 8006cf6:	e074      	b.n	8006de2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2202      	movs	r2, #2
 8006d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a34      	ldr	r2, [pc, #208]	@ (8006df0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d009      	beq.n	8006d36 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a33      	ldr	r2, [pc, #204]	@ (8006df4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d004      	beq.n	8006d36 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a31      	ldr	r2, [pc, #196]	@ (8006df8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d108      	bne.n	8006d48 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006d3c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	68fa      	ldr	r2, [r7, #12]
 8006d44:	4313      	orrs	r3, r2
 8006d46:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006d4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	68fa      	ldr	r2, [r7, #12]
 8006d64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a21      	ldr	r2, [pc, #132]	@ (8006df0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d022      	beq.n	8006db6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d78:	d01d      	beq.n	8006db6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a1f      	ldr	r2, [pc, #124]	@ (8006dfc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d018      	beq.n	8006db6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a1d      	ldr	r2, [pc, #116]	@ (8006e00 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d013      	beq.n	8006db6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a1c      	ldr	r2, [pc, #112]	@ (8006e04 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d00e      	beq.n	8006db6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a15      	ldr	r2, [pc, #84]	@ (8006df4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d009      	beq.n	8006db6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a18      	ldr	r2, [pc, #96]	@ (8006e08 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d004      	beq.n	8006db6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a11      	ldr	r2, [pc, #68]	@ (8006df8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d10c      	bne.n	8006dd0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006dbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	68ba      	ldr	r2, [r7, #8]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68ba      	ldr	r2, [r7, #8]
 8006dce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3714      	adds	r7, #20
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr
 8006dee:	bf00      	nop
 8006df0:	40012c00 	.word	0x40012c00
 8006df4:	40013400 	.word	0x40013400
 8006df8:	40015000 	.word	0x40015000
 8006dfc:	40000400 	.word	0x40000400
 8006e00:	40000800 	.word	0x40000800
 8006e04:	40000c00 	.word	0x40000c00
 8006e08:	40014000 	.word	0x40014000

08006e0c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b085      	sub	sp, #20
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006e16:	2300      	movs	r3, #0
 8006e18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d101      	bne.n	8006e28 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006e24:	2302      	movs	r3, #2
 8006e26:	e078      	b.n	8006f1a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	68db      	ldr	r3, [r3, #12]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	695b      	ldr	r3, [r3, #20]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	699b      	ldr	r3, [r3, #24]
 8006e9c:	041b      	lsls	r3, r3, #16
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	69db      	ldr	r3, [r3, #28]
 8006eac:	4313      	orrs	r3, r2
 8006eae:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a1c      	ldr	r2, [pc, #112]	@ (8006f28 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d009      	beq.n	8006ece <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a1b      	ldr	r2, [pc, #108]	@ (8006f2c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d004      	beq.n	8006ece <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a19      	ldr	r2, [pc, #100]	@ (8006f30 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d11c      	bne.n	8006f08 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ed8:	051b      	lsls	r3, r3, #20
 8006eda:	4313      	orrs	r3, r2
 8006edc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	6a1b      	ldr	r3, [r3, #32]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f04:	4313      	orrs	r3, r2
 8006f06:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006f18:	2300      	movs	r3, #0
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3714      	adds	r7, #20
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr
 8006f26:	bf00      	nop
 8006f28:	40012c00 	.word	0x40012c00
 8006f2c:	40013400 	.word	0x40013400
 8006f30:	40015000 	.word	0x40015000

08006f34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b082      	sub	sp, #8
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d101      	bne.n	8006f46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	e042      	b.n	8006fcc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d106      	bne.n	8006f5e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f7fa ff75 	bl	8001e48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2224      	movs	r2, #36	@ 0x24
 8006f62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f022 0201 	bic.w	r2, r2, #1
 8006f74:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d002      	beq.n	8006f84 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 fb24 	bl	80075cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 f825 	bl	8006fd4 <UART_SetConfig>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d101      	bne.n	8006f94 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	e01b      	b.n	8006fcc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	685a      	ldr	r2, [r3, #4]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006fa2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	689a      	ldr	r2, [r3, #8]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006fb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f042 0201 	orr.w	r2, r2, #1
 8006fc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 fba3 	bl	8007710 <UART_CheckIdleState>
 8006fca:	4603      	mov	r3, r0
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3708      	adds	r7, #8
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fd8:	b08c      	sub	sp, #48	@ 0x30
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	689a      	ldr	r2, [r3, #8]
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	691b      	ldr	r3, [r3, #16]
 8006fec:	431a      	orrs	r2, r3
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	695b      	ldr	r3, [r3, #20]
 8006ff2:	431a      	orrs	r2, r3
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	69db      	ldr	r3, [r3, #28]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	4baa      	ldr	r3, [pc, #680]	@ (80072ac <UART_SetConfig+0x2d8>)
 8007004:	4013      	ands	r3, r2
 8007006:	697a      	ldr	r2, [r7, #20]
 8007008:	6812      	ldr	r2, [r2, #0]
 800700a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800700c:	430b      	orrs	r3, r1
 800700e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	68da      	ldr	r2, [r3, #12]
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	430a      	orrs	r2, r1
 8007024:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a9f      	ldr	r2, [pc, #636]	@ (80072b0 <UART_SetConfig+0x2dc>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d004      	beq.n	8007040 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	6a1b      	ldr	r3, [r3, #32]
 800703a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800703c:	4313      	orrs	r3, r2
 800703e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800704a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800704e:	697a      	ldr	r2, [r7, #20]
 8007050:	6812      	ldr	r2, [r2, #0]
 8007052:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007054:	430b      	orrs	r3, r1
 8007056:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800705e:	f023 010f 	bic.w	r1, r3, #15
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	430a      	orrs	r2, r1
 800706c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a90      	ldr	r2, [pc, #576]	@ (80072b4 <UART_SetConfig+0x2e0>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d125      	bne.n	80070c4 <UART_SetConfig+0xf0>
 8007078:	4b8f      	ldr	r3, [pc, #572]	@ (80072b8 <UART_SetConfig+0x2e4>)
 800707a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800707e:	f003 0303 	and.w	r3, r3, #3
 8007082:	2b03      	cmp	r3, #3
 8007084:	d81a      	bhi.n	80070bc <UART_SetConfig+0xe8>
 8007086:	a201      	add	r2, pc, #4	@ (adr r2, 800708c <UART_SetConfig+0xb8>)
 8007088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800708c:	0800709d 	.word	0x0800709d
 8007090:	080070ad 	.word	0x080070ad
 8007094:	080070a5 	.word	0x080070a5
 8007098:	080070b5 	.word	0x080070b5
 800709c:	2301      	movs	r3, #1
 800709e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070a2:	e116      	b.n	80072d2 <UART_SetConfig+0x2fe>
 80070a4:	2302      	movs	r3, #2
 80070a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070aa:	e112      	b.n	80072d2 <UART_SetConfig+0x2fe>
 80070ac:	2304      	movs	r3, #4
 80070ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070b2:	e10e      	b.n	80072d2 <UART_SetConfig+0x2fe>
 80070b4:	2308      	movs	r3, #8
 80070b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070ba:	e10a      	b.n	80072d2 <UART_SetConfig+0x2fe>
 80070bc:	2310      	movs	r3, #16
 80070be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070c2:	e106      	b.n	80072d2 <UART_SetConfig+0x2fe>
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a7c      	ldr	r2, [pc, #496]	@ (80072bc <UART_SetConfig+0x2e8>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d138      	bne.n	8007140 <UART_SetConfig+0x16c>
 80070ce:	4b7a      	ldr	r3, [pc, #488]	@ (80072b8 <UART_SetConfig+0x2e4>)
 80070d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070d4:	f003 030c 	and.w	r3, r3, #12
 80070d8:	2b0c      	cmp	r3, #12
 80070da:	d82d      	bhi.n	8007138 <UART_SetConfig+0x164>
 80070dc:	a201      	add	r2, pc, #4	@ (adr r2, 80070e4 <UART_SetConfig+0x110>)
 80070de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e2:	bf00      	nop
 80070e4:	08007119 	.word	0x08007119
 80070e8:	08007139 	.word	0x08007139
 80070ec:	08007139 	.word	0x08007139
 80070f0:	08007139 	.word	0x08007139
 80070f4:	08007129 	.word	0x08007129
 80070f8:	08007139 	.word	0x08007139
 80070fc:	08007139 	.word	0x08007139
 8007100:	08007139 	.word	0x08007139
 8007104:	08007121 	.word	0x08007121
 8007108:	08007139 	.word	0x08007139
 800710c:	08007139 	.word	0x08007139
 8007110:	08007139 	.word	0x08007139
 8007114:	08007131 	.word	0x08007131
 8007118:	2300      	movs	r3, #0
 800711a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800711e:	e0d8      	b.n	80072d2 <UART_SetConfig+0x2fe>
 8007120:	2302      	movs	r3, #2
 8007122:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007126:	e0d4      	b.n	80072d2 <UART_SetConfig+0x2fe>
 8007128:	2304      	movs	r3, #4
 800712a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800712e:	e0d0      	b.n	80072d2 <UART_SetConfig+0x2fe>
 8007130:	2308      	movs	r3, #8
 8007132:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007136:	e0cc      	b.n	80072d2 <UART_SetConfig+0x2fe>
 8007138:	2310      	movs	r3, #16
 800713a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800713e:	e0c8      	b.n	80072d2 <UART_SetConfig+0x2fe>
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a5e      	ldr	r2, [pc, #376]	@ (80072c0 <UART_SetConfig+0x2ec>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d125      	bne.n	8007196 <UART_SetConfig+0x1c2>
 800714a:	4b5b      	ldr	r3, [pc, #364]	@ (80072b8 <UART_SetConfig+0x2e4>)
 800714c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007150:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007154:	2b30      	cmp	r3, #48	@ 0x30
 8007156:	d016      	beq.n	8007186 <UART_SetConfig+0x1b2>
 8007158:	2b30      	cmp	r3, #48	@ 0x30
 800715a:	d818      	bhi.n	800718e <UART_SetConfig+0x1ba>
 800715c:	2b20      	cmp	r3, #32
 800715e:	d00a      	beq.n	8007176 <UART_SetConfig+0x1a2>
 8007160:	2b20      	cmp	r3, #32
 8007162:	d814      	bhi.n	800718e <UART_SetConfig+0x1ba>
 8007164:	2b00      	cmp	r3, #0
 8007166:	d002      	beq.n	800716e <UART_SetConfig+0x19a>
 8007168:	2b10      	cmp	r3, #16
 800716a:	d008      	beq.n	800717e <UART_SetConfig+0x1aa>
 800716c:	e00f      	b.n	800718e <UART_SetConfig+0x1ba>
 800716e:	2300      	movs	r3, #0
 8007170:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007174:	e0ad      	b.n	80072d2 <UART_SetConfig+0x2fe>
 8007176:	2302      	movs	r3, #2
 8007178:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800717c:	e0a9      	b.n	80072d2 <UART_SetConfig+0x2fe>
 800717e:	2304      	movs	r3, #4
 8007180:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007184:	e0a5      	b.n	80072d2 <UART_SetConfig+0x2fe>
 8007186:	2308      	movs	r3, #8
 8007188:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800718c:	e0a1      	b.n	80072d2 <UART_SetConfig+0x2fe>
 800718e:	2310      	movs	r3, #16
 8007190:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007194:	e09d      	b.n	80072d2 <UART_SetConfig+0x2fe>
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a4a      	ldr	r2, [pc, #296]	@ (80072c4 <UART_SetConfig+0x2f0>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d125      	bne.n	80071ec <UART_SetConfig+0x218>
 80071a0:	4b45      	ldr	r3, [pc, #276]	@ (80072b8 <UART_SetConfig+0x2e4>)
 80071a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071a6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80071aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80071ac:	d016      	beq.n	80071dc <UART_SetConfig+0x208>
 80071ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80071b0:	d818      	bhi.n	80071e4 <UART_SetConfig+0x210>
 80071b2:	2b80      	cmp	r3, #128	@ 0x80
 80071b4:	d00a      	beq.n	80071cc <UART_SetConfig+0x1f8>
 80071b6:	2b80      	cmp	r3, #128	@ 0x80
 80071b8:	d814      	bhi.n	80071e4 <UART_SetConfig+0x210>
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d002      	beq.n	80071c4 <UART_SetConfig+0x1f0>
 80071be:	2b40      	cmp	r3, #64	@ 0x40
 80071c0:	d008      	beq.n	80071d4 <UART_SetConfig+0x200>
 80071c2:	e00f      	b.n	80071e4 <UART_SetConfig+0x210>
 80071c4:	2300      	movs	r3, #0
 80071c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071ca:	e082      	b.n	80072d2 <UART_SetConfig+0x2fe>
 80071cc:	2302      	movs	r3, #2
 80071ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071d2:	e07e      	b.n	80072d2 <UART_SetConfig+0x2fe>
 80071d4:	2304      	movs	r3, #4
 80071d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071da:	e07a      	b.n	80072d2 <UART_SetConfig+0x2fe>
 80071dc:	2308      	movs	r3, #8
 80071de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071e2:	e076      	b.n	80072d2 <UART_SetConfig+0x2fe>
 80071e4:	2310      	movs	r3, #16
 80071e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071ea:	e072      	b.n	80072d2 <UART_SetConfig+0x2fe>
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a35      	ldr	r2, [pc, #212]	@ (80072c8 <UART_SetConfig+0x2f4>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d12a      	bne.n	800724c <UART_SetConfig+0x278>
 80071f6:	4b30      	ldr	r3, [pc, #192]	@ (80072b8 <UART_SetConfig+0x2e4>)
 80071f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007200:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007204:	d01a      	beq.n	800723c <UART_SetConfig+0x268>
 8007206:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800720a:	d81b      	bhi.n	8007244 <UART_SetConfig+0x270>
 800720c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007210:	d00c      	beq.n	800722c <UART_SetConfig+0x258>
 8007212:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007216:	d815      	bhi.n	8007244 <UART_SetConfig+0x270>
 8007218:	2b00      	cmp	r3, #0
 800721a:	d003      	beq.n	8007224 <UART_SetConfig+0x250>
 800721c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007220:	d008      	beq.n	8007234 <UART_SetConfig+0x260>
 8007222:	e00f      	b.n	8007244 <UART_SetConfig+0x270>
 8007224:	2300      	movs	r3, #0
 8007226:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800722a:	e052      	b.n	80072d2 <UART_SetConfig+0x2fe>
 800722c:	2302      	movs	r3, #2
 800722e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007232:	e04e      	b.n	80072d2 <UART_SetConfig+0x2fe>
 8007234:	2304      	movs	r3, #4
 8007236:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800723a:	e04a      	b.n	80072d2 <UART_SetConfig+0x2fe>
 800723c:	2308      	movs	r3, #8
 800723e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007242:	e046      	b.n	80072d2 <UART_SetConfig+0x2fe>
 8007244:	2310      	movs	r3, #16
 8007246:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800724a:	e042      	b.n	80072d2 <UART_SetConfig+0x2fe>
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a17      	ldr	r2, [pc, #92]	@ (80072b0 <UART_SetConfig+0x2dc>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d13a      	bne.n	80072cc <UART_SetConfig+0x2f8>
 8007256:	4b18      	ldr	r3, [pc, #96]	@ (80072b8 <UART_SetConfig+0x2e4>)
 8007258:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800725c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007260:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007264:	d01a      	beq.n	800729c <UART_SetConfig+0x2c8>
 8007266:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800726a:	d81b      	bhi.n	80072a4 <UART_SetConfig+0x2d0>
 800726c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007270:	d00c      	beq.n	800728c <UART_SetConfig+0x2b8>
 8007272:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007276:	d815      	bhi.n	80072a4 <UART_SetConfig+0x2d0>
 8007278:	2b00      	cmp	r3, #0
 800727a:	d003      	beq.n	8007284 <UART_SetConfig+0x2b0>
 800727c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007280:	d008      	beq.n	8007294 <UART_SetConfig+0x2c0>
 8007282:	e00f      	b.n	80072a4 <UART_SetConfig+0x2d0>
 8007284:	2300      	movs	r3, #0
 8007286:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800728a:	e022      	b.n	80072d2 <UART_SetConfig+0x2fe>
 800728c:	2302      	movs	r3, #2
 800728e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007292:	e01e      	b.n	80072d2 <UART_SetConfig+0x2fe>
 8007294:	2304      	movs	r3, #4
 8007296:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800729a:	e01a      	b.n	80072d2 <UART_SetConfig+0x2fe>
 800729c:	2308      	movs	r3, #8
 800729e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072a2:	e016      	b.n	80072d2 <UART_SetConfig+0x2fe>
 80072a4:	2310      	movs	r3, #16
 80072a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072aa:	e012      	b.n	80072d2 <UART_SetConfig+0x2fe>
 80072ac:	cfff69f3 	.word	0xcfff69f3
 80072b0:	40008000 	.word	0x40008000
 80072b4:	40013800 	.word	0x40013800
 80072b8:	40021000 	.word	0x40021000
 80072bc:	40004400 	.word	0x40004400
 80072c0:	40004800 	.word	0x40004800
 80072c4:	40004c00 	.word	0x40004c00
 80072c8:	40005000 	.word	0x40005000
 80072cc:	2310      	movs	r3, #16
 80072ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4aae      	ldr	r2, [pc, #696]	@ (8007590 <UART_SetConfig+0x5bc>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	f040 8097 	bne.w	800740c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80072de:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80072e2:	2b08      	cmp	r3, #8
 80072e4:	d823      	bhi.n	800732e <UART_SetConfig+0x35a>
 80072e6:	a201      	add	r2, pc, #4	@ (adr r2, 80072ec <UART_SetConfig+0x318>)
 80072e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ec:	08007311 	.word	0x08007311
 80072f0:	0800732f 	.word	0x0800732f
 80072f4:	08007319 	.word	0x08007319
 80072f8:	0800732f 	.word	0x0800732f
 80072fc:	0800731f 	.word	0x0800731f
 8007300:	0800732f 	.word	0x0800732f
 8007304:	0800732f 	.word	0x0800732f
 8007308:	0800732f 	.word	0x0800732f
 800730c:	08007327 	.word	0x08007327
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007310:	f7fd ffec 	bl	80052ec <HAL_RCC_GetPCLK1Freq>
 8007314:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007316:	e010      	b.n	800733a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007318:	4b9e      	ldr	r3, [pc, #632]	@ (8007594 <UART_SetConfig+0x5c0>)
 800731a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800731c:	e00d      	b.n	800733a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800731e:	f7fd ff77 	bl	8005210 <HAL_RCC_GetSysClockFreq>
 8007322:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007324:	e009      	b.n	800733a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007326:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800732a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800732c:	e005      	b.n	800733a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800732e:	2300      	movs	r3, #0
 8007330:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007338:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800733a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800733c:	2b00      	cmp	r3, #0
 800733e:	f000 8130 	beq.w	80075a2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007346:	4a94      	ldr	r2, [pc, #592]	@ (8007598 <UART_SetConfig+0x5c4>)
 8007348:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800734c:	461a      	mov	r2, r3
 800734e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007350:	fbb3 f3f2 	udiv	r3, r3, r2
 8007354:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	685a      	ldr	r2, [r3, #4]
 800735a:	4613      	mov	r3, r2
 800735c:	005b      	lsls	r3, r3, #1
 800735e:	4413      	add	r3, r2
 8007360:	69ba      	ldr	r2, [r7, #24]
 8007362:	429a      	cmp	r2, r3
 8007364:	d305      	bcc.n	8007372 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800736c:	69ba      	ldr	r2, [r7, #24]
 800736e:	429a      	cmp	r2, r3
 8007370:	d903      	bls.n	800737a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007378:	e113      	b.n	80075a2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800737a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800737c:	2200      	movs	r2, #0
 800737e:	60bb      	str	r3, [r7, #8]
 8007380:	60fa      	str	r2, [r7, #12]
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007386:	4a84      	ldr	r2, [pc, #528]	@ (8007598 <UART_SetConfig+0x5c4>)
 8007388:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800738c:	b29b      	uxth	r3, r3
 800738e:	2200      	movs	r2, #0
 8007390:	603b      	str	r3, [r7, #0]
 8007392:	607a      	str	r2, [r7, #4]
 8007394:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007398:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800739c:	f7f9 fb5a 	bl	8000a54 <__aeabi_uldivmod>
 80073a0:	4602      	mov	r2, r0
 80073a2:	460b      	mov	r3, r1
 80073a4:	4610      	mov	r0, r2
 80073a6:	4619      	mov	r1, r3
 80073a8:	f04f 0200 	mov.w	r2, #0
 80073ac:	f04f 0300 	mov.w	r3, #0
 80073b0:	020b      	lsls	r3, r1, #8
 80073b2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80073b6:	0202      	lsls	r2, r0, #8
 80073b8:	6979      	ldr	r1, [r7, #20]
 80073ba:	6849      	ldr	r1, [r1, #4]
 80073bc:	0849      	lsrs	r1, r1, #1
 80073be:	2000      	movs	r0, #0
 80073c0:	460c      	mov	r4, r1
 80073c2:	4605      	mov	r5, r0
 80073c4:	eb12 0804 	adds.w	r8, r2, r4
 80073c8:	eb43 0905 	adc.w	r9, r3, r5
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	469a      	mov	sl, r3
 80073d4:	4693      	mov	fp, r2
 80073d6:	4652      	mov	r2, sl
 80073d8:	465b      	mov	r3, fp
 80073da:	4640      	mov	r0, r8
 80073dc:	4649      	mov	r1, r9
 80073de:	f7f9 fb39 	bl	8000a54 <__aeabi_uldivmod>
 80073e2:	4602      	mov	r2, r0
 80073e4:	460b      	mov	r3, r1
 80073e6:	4613      	mov	r3, r2
 80073e8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80073ea:	6a3b      	ldr	r3, [r7, #32]
 80073ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80073f0:	d308      	bcc.n	8007404 <UART_SetConfig+0x430>
 80073f2:	6a3b      	ldr	r3, [r7, #32]
 80073f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073f8:	d204      	bcs.n	8007404 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	6a3a      	ldr	r2, [r7, #32]
 8007400:	60da      	str	r2, [r3, #12]
 8007402:	e0ce      	b.n	80075a2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800740a:	e0ca      	b.n	80075a2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	69db      	ldr	r3, [r3, #28]
 8007410:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007414:	d166      	bne.n	80074e4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007416:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800741a:	2b08      	cmp	r3, #8
 800741c:	d827      	bhi.n	800746e <UART_SetConfig+0x49a>
 800741e:	a201      	add	r2, pc, #4	@ (adr r2, 8007424 <UART_SetConfig+0x450>)
 8007420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007424:	08007449 	.word	0x08007449
 8007428:	08007451 	.word	0x08007451
 800742c:	08007459 	.word	0x08007459
 8007430:	0800746f 	.word	0x0800746f
 8007434:	0800745f 	.word	0x0800745f
 8007438:	0800746f 	.word	0x0800746f
 800743c:	0800746f 	.word	0x0800746f
 8007440:	0800746f 	.word	0x0800746f
 8007444:	08007467 	.word	0x08007467
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007448:	f7fd ff50 	bl	80052ec <HAL_RCC_GetPCLK1Freq>
 800744c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800744e:	e014      	b.n	800747a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007450:	f7fd ff62 	bl	8005318 <HAL_RCC_GetPCLK2Freq>
 8007454:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007456:	e010      	b.n	800747a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007458:	4b4e      	ldr	r3, [pc, #312]	@ (8007594 <UART_SetConfig+0x5c0>)
 800745a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800745c:	e00d      	b.n	800747a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800745e:	f7fd fed7 	bl	8005210 <HAL_RCC_GetSysClockFreq>
 8007462:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007464:	e009      	b.n	800747a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007466:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800746a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800746c:	e005      	b.n	800747a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800746e:	2300      	movs	r3, #0
 8007470:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007478:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800747a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800747c:	2b00      	cmp	r3, #0
 800747e:	f000 8090 	beq.w	80075a2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007486:	4a44      	ldr	r2, [pc, #272]	@ (8007598 <UART_SetConfig+0x5c4>)
 8007488:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800748c:	461a      	mov	r2, r3
 800748e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007490:	fbb3 f3f2 	udiv	r3, r3, r2
 8007494:	005a      	lsls	r2, r3, #1
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	085b      	lsrs	r3, r3, #1
 800749c:	441a      	add	r2, r3
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80074a6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074a8:	6a3b      	ldr	r3, [r7, #32]
 80074aa:	2b0f      	cmp	r3, #15
 80074ac:	d916      	bls.n	80074dc <UART_SetConfig+0x508>
 80074ae:	6a3b      	ldr	r3, [r7, #32]
 80074b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074b4:	d212      	bcs.n	80074dc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80074b6:	6a3b      	ldr	r3, [r7, #32]
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	f023 030f 	bic.w	r3, r3, #15
 80074be:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80074c0:	6a3b      	ldr	r3, [r7, #32]
 80074c2:	085b      	lsrs	r3, r3, #1
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	f003 0307 	and.w	r3, r3, #7
 80074ca:	b29a      	uxth	r2, r3
 80074cc:	8bfb      	ldrh	r3, [r7, #30]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	8bfa      	ldrh	r2, [r7, #30]
 80074d8:	60da      	str	r2, [r3, #12]
 80074da:	e062      	b.n	80075a2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80074e2:	e05e      	b.n	80075a2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80074e4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80074e8:	2b08      	cmp	r3, #8
 80074ea:	d828      	bhi.n	800753e <UART_SetConfig+0x56a>
 80074ec:	a201      	add	r2, pc, #4	@ (adr r2, 80074f4 <UART_SetConfig+0x520>)
 80074ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f2:	bf00      	nop
 80074f4:	08007519 	.word	0x08007519
 80074f8:	08007521 	.word	0x08007521
 80074fc:	08007529 	.word	0x08007529
 8007500:	0800753f 	.word	0x0800753f
 8007504:	0800752f 	.word	0x0800752f
 8007508:	0800753f 	.word	0x0800753f
 800750c:	0800753f 	.word	0x0800753f
 8007510:	0800753f 	.word	0x0800753f
 8007514:	08007537 	.word	0x08007537
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007518:	f7fd fee8 	bl	80052ec <HAL_RCC_GetPCLK1Freq>
 800751c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800751e:	e014      	b.n	800754a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007520:	f7fd fefa 	bl	8005318 <HAL_RCC_GetPCLK2Freq>
 8007524:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007526:	e010      	b.n	800754a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007528:	4b1a      	ldr	r3, [pc, #104]	@ (8007594 <UART_SetConfig+0x5c0>)
 800752a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800752c:	e00d      	b.n	800754a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800752e:	f7fd fe6f 	bl	8005210 <HAL_RCC_GetSysClockFreq>
 8007532:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007534:	e009      	b.n	800754a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007536:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800753a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800753c:	e005      	b.n	800754a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800753e:	2300      	movs	r3, #0
 8007540:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007548:	bf00      	nop
    }

    if (pclk != 0U)
 800754a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800754c:	2b00      	cmp	r3, #0
 800754e:	d028      	beq.n	80075a2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007554:	4a10      	ldr	r2, [pc, #64]	@ (8007598 <UART_SetConfig+0x5c4>)
 8007556:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800755a:	461a      	mov	r2, r3
 800755c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800755e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	085b      	lsrs	r3, r3, #1
 8007568:	441a      	add	r2, r3
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007572:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007574:	6a3b      	ldr	r3, [r7, #32]
 8007576:	2b0f      	cmp	r3, #15
 8007578:	d910      	bls.n	800759c <UART_SetConfig+0x5c8>
 800757a:	6a3b      	ldr	r3, [r7, #32]
 800757c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007580:	d20c      	bcs.n	800759c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007582:	6a3b      	ldr	r3, [r7, #32]
 8007584:	b29a      	uxth	r2, r3
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	60da      	str	r2, [r3, #12]
 800758c:	e009      	b.n	80075a2 <UART_SetConfig+0x5ce>
 800758e:	bf00      	nop
 8007590:	40008000 	.word	0x40008000
 8007594:	00f42400 	.word	0x00f42400
 8007598:	08007d04 	.word	0x08007d04
      }
      else
      {
        ret = HAL_ERROR;
 800759c:	2301      	movs	r3, #1
 800759e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	2201      	movs	r2, #1
 80075a6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	2201      	movs	r2, #1
 80075ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	2200      	movs	r2, #0
 80075b6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	2200      	movs	r2, #0
 80075bc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80075be:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3730      	adds	r7, #48	@ 0x30
 80075c6:	46bd      	mov	sp, r7
 80075c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080075cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075d8:	f003 0308 	and.w	r3, r3, #8
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00a      	beq.n	80075f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	430a      	orrs	r2, r1
 80075f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075fa:	f003 0301 	and.w	r3, r3, #1
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d00a      	beq.n	8007618 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	430a      	orrs	r2, r1
 8007616:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800761c:	f003 0302 	and.w	r3, r3, #2
 8007620:	2b00      	cmp	r3, #0
 8007622:	d00a      	beq.n	800763a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	430a      	orrs	r2, r1
 8007638:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800763e:	f003 0304 	and.w	r3, r3, #4
 8007642:	2b00      	cmp	r3, #0
 8007644:	d00a      	beq.n	800765c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	430a      	orrs	r2, r1
 800765a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007660:	f003 0310 	and.w	r3, r3, #16
 8007664:	2b00      	cmp	r3, #0
 8007666:	d00a      	beq.n	800767e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	430a      	orrs	r2, r1
 800767c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007682:	f003 0320 	and.w	r3, r3, #32
 8007686:	2b00      	cmp	r3, #0
 8007688:	d00a      	beq.n	80076a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	430a      	orrs	r2, r1
 800769e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d01a      	beq.n	80076e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	430a      	orrs	r2, r1
 80076c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076ca:	d10a      	bne.n	80076e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	430a      	orrs	r2, r1
 80076e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d00a      	beq.n	8007704 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	430a      	orrs	r2, r1
 8007702:	605a      	str	r2, [r3, #4]
  }
}
 8007704:	bf00      	nop
 8007706:	370c      	adds	r7, #12
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr

08007710 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b098      	sub	sp, #96	@ 0x60
 8007714:	af02      	add	r7, sp, #8
 8007716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007720:	f7fa fda0 	bl	8002264 <HAL_GetTick>
 8007724:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f003 0308 	and.w	r3, r3, #8
 8007730:	2b08      	cmp	r3, #8
 8007732:	d12f      	bne.n	8007794 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007734:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007738:	9300      	str	r3, [sp, #0]
 800773a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800773c:	2200      	movs	r2, #0
 800773e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 f88e 	bl	8007864 <UART_WaitOnFlagUntilTimeout>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d022      	beq.n	8007794 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007756:	e853 3f00 	ldrex	r3, [r3]
 800775a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800775c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800775e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007762:	653b      	str	r3, [r7, #80]	@ 0x50
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	461a      	mov	r2, r3
 800776a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800776c:	647b      	str	r3, [r7, #68]	@ 0x44
 800776e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007770:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007772:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007774:	e841 2300 	strex	r3, r2, [r1]
 8007778:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800777a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800777c:	2b00      	cmp	r3, #0
 800777e:	d1e6      	bne.n	800774e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2220      	movs	r2, #32
 8007784:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007790:	2303      	movs	r3, #3
 8007792:	e063      	b.n	800785c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f003 0304 	and.w	r3, r3, #4
 800779e:	2b04      	cmp	r3, #4
 80077a0:	d149      	bne.n	8007836 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077a2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80077a6:	9300      	str	r3, [sp, #0]
 80077a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077aa:	2200      	movs	r2, #0
 80077ac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 f857 	bl	8007864 <UART_WaitOnFlagUntilTimeout>
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d03c      	beq.n	8007836 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077c4:	e853 3f00 	ldrex	r3, [r3]
 80077c8:	623b      	str	r3, [r7, #32]
   return(result);
 80077ca:	6a3b      	ldr	r3, [r7, #32]
 80077cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80077d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	461a      	mov	r2, r3
 80077d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077da:	633b      	str	r3, [r7, #48]	@ 0x30
 80077dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80077e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077e2:	e841 2300 	strex	r3, r2, [r1]
 80077e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80077e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d1e6      	bne.n	80077bc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	3308      	adds	r3, #8
 80077f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	e853 3f00 	ldrex	r3, [r3]
 80077fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f023 0301 	bic.w	r3, r3, #1
 8007804:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	3308      	adds	r3, #8
 800780c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800780e:	61fa      	str	r2, [r7, #28]
 8007810:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007812:	69b9      	ldr	r1, [r7, #24]
 8007814:	69fa      	ldr	r2, [r7, #28]
 8007816:	e841 2300 	strex	r3, r2, [r1]
 800781a:	617b      	str	r3, [r7, #20]
   return(result);
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d1e5      	bne.n	80077ee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2220      	movs	r2, #32
 8007826:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2200      	movs	r2, #0
 800782e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007832:	2303      	movs	r3, #3
 8007834:	e012      	b.n	800785c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2220      	movs	r2, #32
 800783a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2220      	movs	r2, #32
 8007842:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2200      	movs	r2, #0
 800784a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800785a:	2300      	movs	r3, #0
}
 800785c:	4618      	mov	r0, r3
 800785e:	3758      	adds	r7, #88	@ 0x58
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	60f8      	str	r0, [r7, #12]
 800786c:	60b9      	str	r1, [r7, #8]
 800786e:	603b      	str	r3, [r7, #0]
 8007870:	4613      	mov	r3, r2
 8007872:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007874:	e04f      	b.n	8007916 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800787c:	d04b      	beq.n	8007916 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800787e:	f7fa fcf1 	bl	8002264 <HAL_GetTick>
 8007882:	4602      	mov	r2, r0
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	1ad3      	subs	r3, r2, r3
 8007888:	69ba      	ldr	r2, [r7, #24]
 800788a:	429a      	cmp	r2, r3
 800788c:	d302      	bcc.n	8007894 <UART_WaitOnFlagUntilTimeout+0x30>
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d101      	bne.n	8007898 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007894:	2303      	movs	r3, #3
 8007896:	e04e      	b.n	8007936 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f003 0304 	and.w	r3, r3, #4
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d037      	beq.n	8007916 <UART_WaitOnFlagUntilTimeout+0xb2>
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	2b80      	cmp	r3, #128	@ 0x80
 80078aa:	d034      	beq.n	8007916 <UART_WaitOnFlagUntilTimeout+0xb2>
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	2b40      	cmp	r3, #64	@ 0x40
 80078b0:	d031      	beq.n	8007916 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	69db      	ldr	r3, [r3, #28]
 80078b8:	f003 0308 	and.w	r3, r3, #8
 80078bc:	2b08      	cmp	r3, #8
 80078be:	d110      	bne.n	80078e2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	2208      	movs	r2, #8
 80078c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80078c8:	68f8      	ldr	r0, [r7, #12]
 80078ca:	f000 f838 	bl	800793e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2208      	movs	r2, #8
 80078d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2200      	movs	r2, #0
 80078da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	e029      	b.n	8007936 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	69db      	ldr	r3, [r3, #28]
 80078e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80078ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80078f0:	d111      	bne.n	8007916 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80078fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80078fc:	68f8      	ldr	r0, [r7, #12]
 80078fe:	f000 f81e 	bl	800793e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2220      	movs	r2, #32
 8007906:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2200      	movs	r2, #0
 800790e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007912:	2303      	movs	r3, #3
 8007914:	e00f      	b.n	8007936 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	69da      	ldr	r2, [r3, #28]
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	4013      	ands	r3, r2
 8007920:	68ba      	ldr	r2, [r7, #8]
 8007922:	429a      	cmp	r2, r3
 8007924:	bf0c      	ite	eq
 8007926:	2301      	moveq	r3, #1
 8007928:	2300      	movne	r3, #0
 800792a:	b2db      	uxtb	r3, r3
 800792c:	461a      	mov	r2, r3
 800792e:	79fb      	ldrb	r3, [r7, #7]
 8007930:	429a      	cmp	r2, r3
 8007932:	d0a0      	beq.n	8007876 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007934:	2300      	movs	r3, #0
}
 8007936:	4618      	mov	r0, r3
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800793e:	b480      	push	{r7}
 8007940:	b095      	sub	sp, #84	@ 0x54
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800794c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800794e:	e853 3f00 	ldrex	r3, [r3]
 8007952:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007956:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800795a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	461a      	mov	r2, r3
 8007962:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007964:	643b      	str	r3, [r7, #64]	@ 0x40
 8007966:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007968:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800796a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800796c:	e841 2300 	strex	r3, r2, [r1]
 8007970:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007974:	2b00      	cmp	r3, #0
 8007976:	d1e6      	bne.n	8007946 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	3308      	adds	r3, #8
 800797e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007980:	6a3b      	ldr	r3, [r7, #32]
 8007982:	e853 3f00 	ldrex	r3, [r3]
 8007986:	61fb      	str	r3, [r7, #28]
   return(result);
 8007988:	69fb      	ldr	r3, [r7, #28]
 800798a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800798e:	f023 0301 	bic.w	r3, r3, #1
 8007992:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	3308      	adds	r3, #8
 800799a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800799c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800799e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80079a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80079a4:	e841 2300 	strex	r3, r2, [r1]
 80079a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80079aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d1e3      	bne.n	8007978 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d118      	bne.n	80079ea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	e853 3f00 	ldrex	r3, [r3]
 80079c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	f023 0310 	bic.w	r3, r3, #16
 80079cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	461a      	mov	r2, r3
 80079d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079d6:	61bb      	str	r3, [r7, #24]
 80079d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079da:	6979      	ldr	r1, [r7, #20]
 80079dc:	69ba      	ldr	r2, [r7, #24]
 80079de:	e841 2300 	strex	r3, r2, [r1]
 80079e2:	613b      	str	r3, [r7, #16]
   return(result);
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1e6      	bne.n	80079b8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2220      	movs	r2, #32
 80079ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80079fe:	bf00      	nop
 8007a00:	3754      	adds	r7, #84	@ 0x54
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr

08007a0a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007a0a:	b480      	push	{r7}
 8007a0c:	b085      	sub	sp, #20
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d101      	bne.n	8007a20 <HAL_UARTEx_DisableFifoMode+0x16>
 8007a1c:	2302      	movs	r3, #2
 8007a1e:	e027      	b.n	8007a70 <HAL_UARTEx_DisableFifoMode+0x66>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2201      	movs	r2, #1
 8007a24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2224      	movs	r2, #36	@ 0x24
 8007a2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	681a      	ldr	r2, [r3, #0]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f022 0201 	bic.w	r2, r2, #1
 8007a46:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007a4e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2220      	movs	r2, #32
 8007a62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a6e:	2300      	movs	r3, #0
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3714      	adds	r7, #20
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr

08007a7c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d101      	bne.n	8007a94 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007a90:	2302      	movs	r3, #2
 8007a92:	e02d      	b.n	8007af0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2201      	movs	r2, #1
 8007a98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2224      	movs	r2, #36	@ 0x24
 8007aa0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f022 0201 	bic.w	r2, r2, #1
 8007aba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	683a      	ldr	r2, [r7, #0]
 8007acc:	430a      	orrs	r2, r1
 8007ace:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 f84f 	bl	8007b74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	68fa      	ldr	r2, [r7, #12]
 8007adc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2220      	movs	r2, #32
 8007ae2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007aee:	2300      	movs	r3, #0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3710      	adds	r7, #16
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d101      	bne.n	8007b10 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007b0c:	2302      	movs	r3, #2
 8007b0e:	e02d      	b.n	8007b6c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2201      	movs	r2, #1
 8007b14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2224      	movs	r2, #36	@ 0x24
 8007b1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f022 0201 	bic.w	r2, r2, #1
 8007b36:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	683a      	ldr	r2, [r7, #0]
 8007b48:	430a      	orrs	r2, r1
 8007b4a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 f811 	bl	8007b74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	68fa      	ldr	r2, [r7, #12]
 8007b58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2220      	movs	r2, #32
 8007b5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007b6a:	2300      	movs	r3, #0
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3710      	adds	r7, #16
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b085      	sub	sp, #20
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d108      	bne.n	8007b96 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007b94:	e031      	b.n	8007bfa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007b96:	2308      	movs	r3, #8
 8007b98:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007b9a:	2308      	movs	r3, #8
 8007b9c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	0e5b      	lsrs	r3, r3, #25
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	f003 0307 	and.w	r3, r3, #7
 8007bac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	0f5b      	lsrs	r3, r3, #29
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	f003 0307 	and.w	r3, r3, #7
 8007bbc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007bbe:	7bbb      	ldrb	r3, [r7, #14]
 8007bc0:	7b3a      	ldrb	r2, [r7, #12]
 8007bc2:	4911      	ldr	r1, [pc, #68]	@ (8007c08 <UARTEx_SetNbDataToProcess+0x94>)
 8007bc4:	5c8a      	ldrb	r2, [r1, r2]
 8007bc6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007bca:	7b3a      	ldrb	r2, [r7, #12]
 8007bcc:	490f      	ldr	r1, [pc, #60]	@ (8007c0c <UARTEx_SetNbDataToProcess+0x98>)
 8007bce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007bd0:	fb93 f3f2 	sdiv	r3, r3, r2
 8007bd4:	b29a      	uxth	r2, r3
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007bdc:	7bfb      	ldrb	r3, [r7, #15]
 8007bde:	7b7a      	ldrb	r2, [r7, #13]
 8007be0:	4909      	ldr	r1, [pc, #36]	@ (8007c08 <UARTEx_SetNbDataToProcess+0x94>)
 8007be2:	5c8a      	ldrb	r2, [r1, r2]
 8007be4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007be8:	7b7a      	ldrb	r2, [r7, #13]
 8007bea:	4908      	ldr	r1, [pc, #32]	@ (8007c0c <UARTEx_SetNbDataToProcess+0x98>)
 8007bec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007bee:	fb93 f3f2 	sdiv	r3, r3, r2
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007bfa:	bf00      	nop
 8007bfc:	3714      	adds	r7, #20
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr
 8007c06:	bf00      	nop
 8007c08:	08007d1c 	.word	0x08007d1c
 8007c0c:	08007d24 	.word	0x08007d24

08007c10 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b082      	sub	sp, #8
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	ed93 7a06 	vldr	s14, [r3, #24]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	edd3 7a07 	vldr	s15, [r3, #28]
 8007c26:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	edd3 7a08 	vldr	s15, [r3, #32]
 8007c30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	edd3 7a06 	vldr	s15, [r3, #24]
 8007c40:	eeb1 7a67 	vneg.f32	s14, s15
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	edd3 7a08 	vldr	s15, [r3, #32]
 8007c4a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007c4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6a1a      	ldr	r2, [r3, #32]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d006      	beq.n	8007c74 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	330c      	adds	r3, #12
 8007c6a:	220c      	movs	r2, #12
 8007c6c:	2100      	movs	r1, #0
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f000 f804 	bl	8007c7c <memset>
  }

}
 8007c74:	bf00      	nop
 8007c76:	3708      	adds	r7, #8
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <memset>:
 8007c7c:	4402      	add	r2, r0
 8007c7e:	4603      	mov	r3, r0
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d100      	bne.n	8007c86 <memset+0xa>
 8007c84:	4770      	bx	lr
 8007c86:	f803 1b01 	strb.w	r1, [r3], #1
 8007c8a:	e7f9      	b.n	8007c80 <memset+0x4>

08007c8c <__libc_init_array>:
 8007c8c:	b570      	push	{r4, r5, r6, lr}
 8007c8e:	4d0d      	ldr	r5, [pc, #52]	@ (8007cc4 <__libc_init_array+0x38>)
 8007c90:	4c0d      	ldr	r4, [pc, #52]	@ (8007cc8 <__libc_init_array+0x3c>)
 8007c92:	1b64      	subs	r4, r4, r5
 8007c94:	10a4      	asrs	r4, r4, #2
 8007c96:	2600      	movs	r6, #0
 8007c98:	42a6      	cmp	r6, r4
 8007c9a:	d109      	bne.n	8007cb0 <__libc_init_array+0x24>
 8007c9c:	4d0b      	ldr	r5, [pc, #44]	@ (8007ccc <__libc_init_array+0x40>)
 8007c9e:	4c0c      	ldr	r4, [pc, #48]	@ (8007cd0 <__libc_init_array+0x44>)
 8007ca0:	f000 f818 	bl	8007cd4 <_init>
 8007ca4:	1b64      	subs	r4, r4, r5
 8007ca6:	10a4      	asrs	r4, r4, #2
 8007ca8:	2600      	movs	r6, #0
 8007caa:	42a6      	cmp	r6, r4
 8007cac:	d105      	bne.n	8007cba <__libc_init_array+0x2e>
 8007cae:	bd70      	pop	{r4, r5, r6, pc}
 8007cb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cb4:	4798      	blx	r3
 8007cb6:	3601      	adds	r6, #1
 8007cb8:	e7ee      	b.n	8007c98 <__libc_init_array+0xc>
 8007cba:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cbe:	4798      	blx	r3
 8007cc0:	3601      	adds	r6, #1
 8007cc2:	e7f2      	b.n	8007caa <__libc_init_array+0x1e>
 8007cc4:	08007d34 	.word	0x08007d34
 8007cc8:	08007d34 	.word	0x08007d34
 8007ccc:	08007d34 	.word	0x08007d34
 8007cd0:	08007d38 	.word	0x08007d38

08007cd4 <_init>:
 8007cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cd6:	bf00      	nop
 8007cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cda:	bc08      	pop	{r3}
 8007cdc:	469e      	mov	lr, r3
 8007cde:	4770      	bx	lr

08007ce0 <_fini>:
 8007ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ce2:	bf00      	nop
 8007ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ce6:	bc08      	pop	{r3}
 8007ce8:	469e      	mov	lr, r3
 8007cea:	4770      	bx	lr
